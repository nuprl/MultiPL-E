language: cpp
name: HumanEval_93_encode
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      result += message[i] + 32;\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'y';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'Y';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp1qah8wnv: /tmp/tmp1qah8wnv.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ == ' ') {\n            encoded += ' ';\n        } else if (message[i] == 'a')\
    \ {\n            encoded += 'c';\n        } else if (message[i] == 'e') {\n  \
    \          encoded += 'g';\n        } else if (message[i] == 'i') {\n        \
    \    encoded += 'k';\n        } else if (message[i] == 'o') {\n            encoded\
    \ += 'q';\n        } else if (message[i] == 'u') {\n            encoded += 'y';\n\
    \        } else if (message[i] == 'A') {\n            encoded += 'C';\n      \
    \  } else if (message[i] == 'E') {\n            encoded += 'G';\n        } else\
    \ if (message[i] == 'I') {\n            encoded += 'K';\n        } else if (message[i]\
    \ == 'O') {\n            encoded += 'Q';\n        } else if (message[i] == 'U')\
    \ {\n            encoded += 'Y';\n        } else if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded += message[i] - 32;\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            encoded += message[i] + 32;\n  \
    \      }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmplxyedobh: /tmp/tmplxyedobh.cpp:48: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 32;\n        } else {\n            result += message[i];\n \
    \       }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += (char)(message[i]\
    \ - 32);\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n     \
    \       result += (char)(message[i] + 32);\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a') {\n            result[i] = 'c';\n        }\
    \ else if (result[i] == 'e') {\n            result[i] = 'g';\n        } else if\
    \ (result[i] == 'i') {\n            result[i] = 'k';\n        } else if (result[i]\
    \ == 'o') {\n            result[i] = 'q';\n        } else if (result[i] == 'u')\
    \ {\n            result[i] = 'y';\n        } else if (result[i] == 'A') {\n  \
    \          result[i] = 'C';\n        } else if (result[i] == 'E') {\n        \
    \    result[i] = 'G';\n        } else if (result[i] == 'I') {\n            result[i]\
    \ = 'K';\n        } else if (result[i] == 'O') {\n            result[i] = 'Q';\n\
    \        } else if (result[i] == 'U') {\n            result[i] = 'Y';\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmptiu0vl9o: /tmp/tmptiu0vl9o.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    for (char c : message) {\n        if (c >= 'a'\
    \ && c <= 'z') {\n            encoded_message += c - 'a' + 'A';\n        } else\
    \ if (c >= 'A' && c <= 'Z') {\n            encoded_message += c - 'A' + 'a';\n\
    \        } else {\n            encoded_message += c;\n        }\n    }\n    for\
    \ (int i = 0; i < encoded_message.size(); i++) {\n        if (encoded_message[i]\
    \ == 'a' || encoded_message[i] == 'e' || encoded_message[i] == 'i' || encoded_message[i]\
    \ == 'o' || encoded_message[i] == 'u') {\n            encoded_message[i] = 'a'\
    \ + ((encoded_message[i] - 'a' + 2) % 26);\n        } else if (encoded_message[i]\
    \ == 'A' || encoded_message[i] == 'E' || encoded_message[i] == 'I' || encoded_message[i]\
    \ == 'O' || encoded_message[i] == 'U') {\n            encoded_message[i] = 'A'\
    \ + ((encoded_message[i] - 'A' + 2) % 26);\n        }\n    }\n    return encoded_message;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += (char)(message[i] - 'a'\
    \ + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n    \
    \        result += (char)(message[i] - 'A' + 'a');\n        } else {\n       \
    \     result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = (char)(result[i]\
    \ + 2);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpsbcz4j0t: /tmp/tmpsbcz4j0t.cpp:34: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        char c = message[i];\n        if (c >= 'a'\
    \ && c <= 'z') {\n            c = c - 'a' + 'A';\n        }\n        if (c >=\
    \ 'A' && c <= 'Z') {\n            if (vowels.find(c) != std::string::npos) {\n\
    \                c = vowels[(vowels.find(c) + 2) % vowels.length()];\n       \
    \     }\n        }\n        result += c;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpaq_678t3: /tmp/tmpaq_678t3.cpp:32: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n       \
    \ if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message +=\
    \ (char)(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += (char)(message[i] - 'A' + 'a');\n\
    \        } else {\n            encoded_message += message[i];\n        }\n   \
    \ }\n    for (int i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a' || encoded_message[i] == 'e' || encoded_message[i] == 'i' || encoded_message[i]\
    \ == 'o' || encoded_message[i] == 'u') {\n            encoded_message[i] = (char)(encoded_message[i]\
    \ + 2);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpk6t707e9: /tmp/tmpk6t707e9.cpp:34: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            result +=\
    \ std::toupper(c);\n        } else if (c >= 'A' && c <= 'Z') {\n            result\
    \ += std::tolower(c);\n        } else {\n            result += c;\n        }\n\
    \    }\n    for (int i = 0; i < result.length(); i++) {\n        char c = result[i];\n\
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n   \
    \         result[i] = 'a' + (c - 'a' + 2) % 26;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpk5u5m12q: /tmp/tmpk5u5m12q.cpp:36: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        char c =\
    \ message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a' +\
    \ 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A' +\
    \ 'a';\n        }\n        switch (c) {\n            case 'A':\n             \
    \   c = 'C';\n                break;\n            case 'E':\n                c\
    \ = 'G';\n                break;\n            case 'I':\n                c = 'K';\n\
    \                break;\n            case 'O':\n                c = 'Q';\n   \
    \             break;\n            case 'U':\n                c = 'S';\n      \
    \          break;\n            case 'a':\n                c = 'c';\n         \
    \       break;\n            case 'e':\n                c = 'g';\n            \
    \    break;\n            case 'i':\n                c = 'k';\n               \
    \ break;\n            case 'o':\n                c = 'q';\n                break;\n\
    \            case 'u':\n                c = 's';\n                break;\n   \
    \     }\n        result.push_back(c);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpwu2yohrl: /tmp/tmpwu2yohrl.cpp:61: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (isupper(message[i])) {\n            result\
    \ += tolower(message[i]);\n        } else if (islower(message[i])) {\n       \
    \     result += toupper(message[i]);\n        } else {\n            result +=\
    \ message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (vowels.find(result[i]) != std::string::npos) {\n            int\
    \ index = vowels.find(result[i]);\n            if (index == vowels.length() -\
    \ 1) {\n                result[i] = vowels[0];\n            } else if (index ==\
    \ vowels.length() - 2) {\n                result[i] = vowels[1];\n           \
    \ } else {\n                result[i] = vowels[index + 2];\n            }\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp3hnpc6pn: /tmp/tmp3hnpc6pn.cpp:41: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += toupper(c);\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            result += tolower(c);\n        } else {\n            result += c;\n\
    \        }\n    }\n    for (char &c : result) {\n        switch (c) {\n      \
    \      case 'a':\n            case 'A':\n                c = 'C';\n          \
    \      break;\n            case 'e':\n            case 'E':\n                c\
    \ = 'G';\n                break;\n            case 'i':\n            case 'I':\n\
    \                c = 'K';\n                break;\n            case 'o':\n   \
    \         case 'O':\n                c = 'M';\n                break;\n      \
    \      case 'u':\n            case 'U':\n                c = 'O';\n          \
    \      break;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpyy7dxdj4: /tmp/tmpyy7dxdj4.cpp:52: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += tolower(message[i]);\n        } else\
    \ {\n            encoded_message += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'Y';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp6zryfb__: /tmp/tmp6zryfb__.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded_message += toupper(message[i]);\n        } else\
    \ if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message +=\
    \ tolower(message[i]);\n        } else {\n            encoded_message += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n\
    \        if (encoded_message[i] >= 'a' && encoded_message[i] <= 'z') {\n     \
    \       if (vowels.find(encoded_message[i]) != std::string::npos) {\n        \
    \        encoded_message[i] = vowels[(vowels.find(encoded_message[i]) + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return encoded_message;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpnoqg827f: /tmp/tmpnoqg827f.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a'\
    \ + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A'\
    \ + 'a';\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            c = (c - 'a' + 2) % 26 + 'a';\n        } else if\
    \ (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            c\
    \ = (c - 'A' + 2) % 26 + 'A';\n        }\n        result += c;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encodedMessage = \"\";\n    for (int i = 0; i < message.length(); i++) {\n \
    \       if (message[i] >= 'a' && message[i] <= 'z') {\n            encodedMessage\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encodedMessage += tolower(message[i]);\n        } else\
    \ {\n            encodedMessage += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < encodedMessage.length(); i++) {\n        if (encodedMessage[i] ==\
    \ 'a') {\n            encodedMessage[i] = 'c';\n        } else if (encodedMessage[i]\
    \ == 'e') {\n            encodedMessage[i] = 'g';\n        } else if (encodedMessage[i]\
    \ == 'i') {\n            encodedMessage[i] = 'k';\n        } else if (encodedMessage[i]\
    \ == 'o') {\n            encodedMessage[i] = 'q';\n        } else if (encodedMessage[i]\
    \ == 'u') {\n            encodedMessage[i] = 'y';\n        } else if (encodedMessage[i]\
    \ == 'A') {\n            encodedMessage[i] = 'C';\n        } else if (encodedMessage[i]\
    \ == 'E') {\n            encodedMessage[i] = 'G';\n        } else if (encodedMessage[i]\
    \ == 'I') {\n            encodedMessage[i] = 'K';\n        } else if (encodedMessage[i]\
    \ == 'O') {\n            encodedMessage[i] = 'Q';\n        } else if (encodedMessage[i]\
    \ == 'U') {\n            encodedMessage[i] = 'Y';\n        }\n    }\n    return\
    \ encodedMessage;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpuxemzunn: /tmp/tmpuxemzunn.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      result += message[i] + 32;\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' || result[i] == 'O'\
    \ || result[i] == 'U') {\n            result[i] = result[i] + 2;\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n  \
    \  assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp6y_0q5b2: /tmp/tmp6y_0q5b2.cpp:33: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded_message += toupper(message[i]);\n        } else\
    \ if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message +=\
    \ tolower(message[i]);\n        } else {\n            encoded_message += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < vowels.length(); i++) {\n        for\
    \ (int j = 0; j < encoded_message.length(); j++) {\n            if (encoded_message[j]\
    \ == vowels[i]) {\n                encoded_message[j] = vowels[(i + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return encoded_message;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp51iv2rko: /tmp/tmp51iv2rko.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'y';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'Y';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpi9153i70: /tmp/tmpi9153i70.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            encoded_message += message[i] + 32;\n        } else {\n     \
    \       encoded_message += message[i];\n        }\n    }\n    for (int i = 0;\
    \ i < encoded_message.length(); i++) {\n        if (encoded_message[i] == 'A')\
    \ {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'S';\n        } else if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 's';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp9x6ekmk4: /tmp/tmp9x6ekmk4.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += (char)(message[i] - 'a' + 'A');\n        } else if (message[i] >= 'A' &&\
    \ message[i] <= 'Z') {\n            encoded_message += (char)(message[i] - 'A'\
    \ + 'a');\n        } else {\n            encoded_message += message[i];\n    \
    \    }\n    }\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < encoded_message.length();\
    \ i++) {\n        if (vowels.find(encoded_message[i]) != std::string::npos) {\n\
    \            encoded_message[i] = (char)(encoded_message[i] + 2);\n        }\n\
    \    }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpt5ufz6gn: /tmp/tmpt5ufz6gn.cpp:35: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += toupper(c);\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            result += tolower(c);\n        } else {\n            result += c;\n\
    \        }\n    }\n    for (int i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ == 'a') {\n            result[i] = 'c';\n        } else if (result[i] == 'e')\
    \ {\n            result[i] = 'g';\n        } else if (result[i] == 'i') {\n  \
    \          result[i] = 'k';\n        } else if (result[i] == 'o') {\n        \
    \    result[i] = 'q';\n        } else if (result[i] == 'u') {\n            result[i]\
    \ = 'w';\n        } else if (result[i] == 'A') {\n            result[i] = 'C';\n\
    \        } else if (result[i] == 'E') {\n            result[i] = 'G';\n      \
    \  } else if (result[i] == 'I') {\n            result[i] = 'K';\n        } else\
    \ if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else if (result[i]\
    \ == 'U') {\n            result[i] = 'W';\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (isupper(message[i])) {\n            result\
    \ += tolower(message[i]);\n        } else if (islower(message[i])) {\n       \
    \     result += toupper(message[i]);\n        } else {\n            result +=\
    \ message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (vowels.find(result[i]) != std::string::npos) {\n            int\
    \ index = vowels.find(result[i]);\n            index = (index + 2) % 5;\n    \
    \        result[i] = vowels[index];\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpsbcvayxb: /tmp/tmpsbcvayxb.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += (char)(message[i] - 'a'\
    \ + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n    \
    \        result += (char)(message[i] - 'A' + 'a');\n        } else {\n       \
    \     result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = (char)(result[i]\
    \ + 2);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpsbcz4j0t: /tmp/tmpsbcz4j0t.cpp:34: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (message[i] == ' ') {\n            encoded_message += ' ';\n     \
    \   } else if (message[i] == 'a') {\n            encoded_message += 'c';\n   \
    \     } else if (message[i] == 'e') {\n            encoded_message += 'g';\n \
    \       } else if (message[i] == 'i') {\n            encoded_message += 'k';\n\
    \        } else if (message[i] == 'o') {\n            encoded_message += 'q';\n\
    \        } else if (message[i] == 'u') {\n            encoded_message += 'y';\n\
    \        } else if (message[i] == 'A') {\n            encoded_message += 'C';\n\
    \        } else if (message[i] == 'E') {\n            encoded_message += 'G';\n\
    \        } else if (message[i] == 'I') {\n            encoded_message += 'K';\n\
    \        } else if (message[i] == 'O') {\n            encoded_message += 'Q';\n\
    \        } else if (message[i] == 'U') {\n            encoded_message += 'Y';\n\
    \        } else if (message[i] == 'z') {\n            encoded_message += 'b';\n\
    \        } else if (message[i] == 'Z') {\n            encoded_message += 'B';\n\
    \        } else if (message[i] == 'y') {\n            encoded_message += 'a';\n\
    \        } else if (message[i] == 'Y') {\n            encoded_message += 'A';\n\
    \        } else if (message[i] == 'x') {\n            encoded_message += 'z';\n\
    \        } else if (message[i] == 'X') {\n            encoded_message += 'Z';\n\
    \        } else if (message[i] == 'w') {\n            encoded_message += 'y';\n\
    \        } else if (message[i] == 'W') {\n            encoded_message += 'Y';\n\
    \        } else if (message[i] == 'v') {\n            encoded_message += 'x';\n\
    \        } else if\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwfug783h.cpp: In function \u2018std::string encode(std::string)\u2019\
    :\n/tmp/tmpwfug783h.cpp:57:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   57 | }\n      | ^\n      | (\n/tmp/tmpwfug783h.cpp:58:12: error: a\
    \ function-definition is not allowed here before \u2018{\u2019 token\n   58 |\
    \ int main() {\n      |            ^\n/tmp/tmpwfug783h.cpp:65:1: error: expected\
    \ \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmpwfug783h.cpp:13:41:\
    \ note: to match this \u2018{\u2019\n   13 | std::string encode(std::string message)\
    \ {\n      |                                         ^\n/tmp/tmpwfug783h.cpp:65:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    std::string vowels = \"aeiou\";\n    for (char c : message) {\n\
    \        if (std::isalpha(c)) {\n            if (std::isupper(c)) {\n        \
    \        c = std::tolower(c);\n            } else {\n                c = std::toupper(c);\n\
    \            }\n            if (vowels.find(c) != std::string::npos) {\n     \
    \           c = vowels[(vowels.find(c) + 2) % vowels.size()];\n            }\n\
    \        }\n        result += c;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp4y6hcsyb: /tmp/tmp4y6hcsyb.cpp:33: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += tolower(message[i]);\n        } else\
    \ {\n            encoded_message += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'Y';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp6zryfb__: /tmp/tmp6zryfb__.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    std::string vowels = \"aeiou\";\n    for (char c : message)\
    \ {\n        if (c >= 'a' && c <= 'z') {\n            result += c - 'a' + 'A';\n\
    \        } else if (c >= 'A' && c <= 'Z') {\n            result += c - 'A' + 'a';\n\
    \        } else {\n            result += c;\n        }\n    }\n    for (int i\
    \ = 0; i < result.size(); i++) {\n        if (vowels.find(result[i]) != std::string::npos)\
    \ {\n            result[i] = vowels[(vowels.find(result[i]) + 2) % vowels.size()];\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpzhkyjw4n: /tmp/tmpzhkyjw4n.cpp:34: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 32;\n        } else {\n            result += message[i];\n \
    \       }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a'\
    \ + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A'\
    \ + 'a';\n        }\n        switch (c) {\n            case 'A':\n           \
    \     c = 'C';\n                break;\n            case 'E':\n              \
    \  c = 'G';\n                break;\n            case 'I':\n                c\
    \ = 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'S';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 's';\n                break;\n\
    \        }\n        encoded += c;\n    }\n    return encoded;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp4ggpot0b: /tmp/tmp4ggpot0b.cpp:61: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += (char)(message[i] - 32);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += (char)(message[i] + 32);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'y';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'Y';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpfdrec4ox: /tmp/tmpfdrec4ox.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    std::string vowels = \"aeiou\";\n    for (char c : message) {\n\
    \        if (c >= 'a' && c <= 'z') {\n            result += c - 'a' + 'A';\n \
    \       } else if (c >= 'A' && c <= 'Z') {\n            result += c - 'A' + 'a';\n\
    \        } else {\n            result += c;\n        }\n    }\n    for (int i\
    \ = 0; i < result.size(); i++) {\n        if (vowels.find(result[i]) != std::string::npos)\
    \ {\n            result[i] = vowels[(vowels.find(result[i]) + 2) % vowels.size()];\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmptsylf2sq: /tmp/tmptsylf2sq.cpp:34: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ vowels = \"aeiou\";\n    std::string encoded = \"\";\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        char c = message[i];\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            int index = vowels.find(c);\n         \
    \   index = (index + 2) % vowels.length();\n            encoded += vowels[index];\n\
    \        } else {\n            encoded += c;\n        }\n    }\n    return encoded;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpk2ftor2u: /tmp/tmpk2ftor2u.cpp:30: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      result += message[i] + 32;\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'y';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'Y';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp1qah8wnv: /tmp/tmp1qah8wnv.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            result += message[i] - 'A' + 'a';\n        } else {\n           \
    \ result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'c' || result[i] == 'd' || result[i] ==\
    \ 'f' || result[i] == 'g' || result[i] == 'h' || result[i] == 'j' || result[i]\
    \ == 'k' || result[i] == 'l' || result[i] == 'm' || result[i] == 'n' || result[i]\
    \ == 'p' || result[i] == 'q' || result[i] == 'r' || result[i] == 's' || result[i]\
    \ == 't' || result[i] == 'v' || result[i] == 'w' || result[i] == 'x' || result[i]\
    \ == 'y' || result[i] == 'z') {\n            result[i] = result[i] + 1;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp0j3w1w7u: /tmp/tmp0j3w1w7u.cpp:35: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message;\n    std::string vowels = \"aeiou\";\n    for (char c : message)\
    \ {\n        if (std::isupper(c)) {\n            encoded_message += std::tolower(c);\n\
    \        } else if (std::islower(c)) {\n            encoded_message += std::toupper(c);\n\
    \        } else {\n            encoded_message += c;\n        }\n    }\n    for\
    \ (int i = 0; i < encoded_message.size(); i++) {\n        if (vowels.find(encoded_message[i])\
    \ != std::string::npos) {\n            encoded_message[i] = vowels[(vowels.find(encoded_message[i])\
    \ + 2) % vowels.size()];\n        }\n    }\n    return encoded_message;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp2cvg1npz: /tmp/tmp2cvg1npz.cpp:34: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (isupper(message[i])) {\n            result += tolower(message[i]);\n\
    \        } else if (islower(message[i])) {\n            result += toupper(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (vowels.find(result[i])\
    \ != std::string::npos) {\n            result[i] = vowels[(vowels.find(result[i])\
    \ + 2) % vowels.length()];\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpanthh4mh: /tmp/tmpanthh4mh.cpp:34: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ vowels = \"aeiou\";\n    std::string encoded = \"\";\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        if (vowels.find(tolower(message[i])) !=\
    \ std::string::npos) {\n            encoded += vowels[(vowels.find(tolower(message[i]))\
    \ + 2) % 5];\n        } else {\n            encoded += message[i];\n        }\n\
    \    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n \
    \   assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpx9rztbzd: /tmp/tmpx9rztbzd.cpp:27: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      result += message[i] + 32;\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'y';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'Y';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp1qah8wnv: /tmp/tmp1qah8wnv.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ output;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            output += message[i] - 32;\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            output\
    \ += message[i] + 32;\n        } else {\n            output += message[i];\n \
    \       }\n    }\n    for (int i = 0; i < output.length(); i++) {\n        if\
    \ (output[i] == 'a') {\n            output[i] = 'c';\n        } else if (output[i]\
    \ == 'e') {\n            output[i] = 'g';\n        } else if (output[i] == 'i')\
    \ {\n            output[i] = 'k';\n        } else if (output[i] == 'o') {\n  \
    \          output[i] = 'q';\n        } else if (output[i] == 'u') {\n        \
    \    output[i] = 'w';\n        } else if (output[i] == 'A') {\n            output[i]\
    \ = 'C';\n        } else if (output[i] == 'E') {\n            output[i] = 'G';\n\
    \        } else if (output[i] == 'I') {\n            output[i] = 'K';\n      \
    \  } else if (output[i] == 'O') {\n            output[i] = 'Q';\n        } else\
    \ if (output[i] == 'U') {\n            output[i] = 'W';\n        }\n    }\n  \
    \  return output;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076947
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 32;\n        } else {\n            result += message[i];\n \
    \       }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    std::string vowels = \"aeiou\";\n    for (char c : message) {\n\
    \        if (isupper(c)) {\n            result += tolower(c);\n        } else\
    \ if (islower(c)) {\n            result += toupper(c);\n        } else {\n   \
    \         result += c;\n        }\n    }\n    for (int i = 0; i < result.size();\
    \ i++) {\n        for (char c : vowels) {\n            if (result[i] == c) {\n\
    \                result[i] = vowels[(vowels.find(c) + 2) % vowels.size()];\n \
    \           }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpm3lhm451: /tmp/tmpm3lhm451.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 32;\n        } else {\n            result += message[i];\n \
    \       }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (std::isupper(message[i])) {\n\
    \            encoded_message += std::tolower(message[i]);\n        } else if (std::islower(message[i]))\
    \ {\n            encoded_message += std::toupper(message[i]);\n        } else\
    \ {\n            encoded_message += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < encoded_message.length(); i++) {\n        for (int j = 0; j < vowels.length();\
    \ j++) {\n            if (encoded_message[i] == vowels[j]) {\n               \
    \ encoded_message[i] = vowels[(j + 2) % vowels.length()];\n            }\n   \
    \     }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp1bo34knw: /tmp/tmp1bo34knw.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            c -= 32;\n\
    \        }\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            c += 2;\n            if (c > 'Z') {\n                c -= 26;\n\
    \            }\n        }\n        result += c;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpgc2xzuzw: /tmp/tmpgc2xzuzw.cpp:32: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += tolower(message[i]);\n        } else\
    \ {\n            encoded_message += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'Y';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp6zryfb__: /tmp/tmp6zryfb__.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (isupper(message[i])) {\n            result\
    \ += tolower(message[i]);\n        } else if (islower(message[i])) {\n       \
    \     result += toupper(message[i]);\n        } else {\n            result +=\
    \ message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (vowels.find(result[i]) != std::string::npos) {\n            int\
    \ index = vowels.find(result[i]);\n            index = (index + 2) % 5;\n    \
    \        result[i] = vowels[index];\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpsbcvayxb: /tmp/tmpsbcvayxb.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            encoded_message += message[i] + 32;\n        } else {\n     \
    \       encoded_message += message[i];\n        }\n    }\n    for (int i = 0;\
    \ i < encoded_message.length(); i++) {\n        if (encoded_message[i] == 'A')\
    \ {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'S';\n        } else if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 's';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp9x6ekmk4: /tmp/tmp9x6ekmk4.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (isupper(message[i])) {\n            result\
    \ += tolower(message[i]);\n        } else if (islower(message[i])) {\n       \
    \     result += toupper(message[i]);\n        } else {\n            result +=\
    \ message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (vowels.find(result[i]) != std::string::npos) {\n            int\
    \ index = vowels.find(result[i]);\n            index = (index + 2) % 5;\n    \
    \        result[i] = vowels[index];\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpsbcvayxb: /tmp/tmpsbcvayxb.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ encoded = \"\";\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n\t\t\tencoded += (char)(message[i] - 'a' + 'A');\n\
    \t\t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tencoded += (char)(message[i]\
    \ - 'A' + 'a');\n\t\t} else {\n\t\t\tencoded += message[i];\n\t\t}\n\t}\n\tfor\
    \ (int i = 0; i < encoded.length(); i++) {\n\t\tif (encoded[i] == 'a' || encoded[i]\
    \ == 'e' || encoded[i] == 'i' || encoded[i] == 'o' || encoded[i] == 'u') {\n\t\
    \t\tencoded[i] = (char)(encoded[i] + 2);\n\t\t} else if (encoded[i] == 'y') {\n\
    \t\t\tencoded[i] = 'a';\n\t\t} else if (encoded[i] == 'z') {\n\t\t\tencoded[i]\
    \ = 'b';\n\t\t}\n\t}\n\treturn encoded;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpgllayh3l: /tmp/tmpgllayh3l.cpp:38: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            encoded += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      encoded += message[i] + 32;\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded.length(); i++) {\n        if\
    \ (encoded[i] == 'a') {\n            encoded[i] = 'c';\n        } else if (encoded[i]\
    \ == 'e') {\n            encoded[i] = 'g';\n        } else if (encoded[i] == 'i')\
    \ {\n            encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n\
    \            encoded[i] = 'q';\n        } else if (encoded[i] == 'u') {\n    \
    \        encoded[i] = 'w';\n        } else if (encoded[i] == 'A') {\n        \
    \    encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n            encoded[i]\
    \ = 'G';\n        } else if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n\
    \        } else if (encoded[i] == 'O') {\n            encoded[i] = 'Q';\n    \
    \    } else if (encoded[i] == 'U') {\n            encoded[i] = 'W';\n        }\n\
    \    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n \
    \   assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076947
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += (char)(message[i] - 32);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += (char)(message[i] + 32);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ encoded_message = \"\";\n\tstd::string vowels = \"aeiou\";\n\tfor (int i = 0;\
    \ i < message.length(); i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n\t\t\tencoded_message += toupper(message[i]);\n\t\t} else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n\t\t\tencoded_message += tolower(message[i]);\n\
    \t\t} else {\n\t\t\tencoded_message += message[i];\n\t\t}\n\t}\n\tfor (int i =\
    \ 0; i < encoded_message.length(); i++) {\n\t\tfor (int j = 0; j < vowels.length();\
    \ j++) {\n\t\t\tif (encoded_message[i] == vowels[j]) {\n\t\t\t\tif (j == vowels.length()\
    \ - 1) {\n\t\t\t\t\tencoded_message[i] = vowels[0];\n\t\t\t\t} else {\n\t\t\t\t\
    \tencoded_message[i] = vowels[j + 1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp8newqq_o: /tmp/tmp8newqq_o.cpp:40: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      result += message[i] + 32;\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'y';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'Y';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp1qah8wnv: /tmp/tmp1qah8wnv.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a') {\n            result[i] = 'c';\n    \
    \    } else if (result[i] == 'e') {\n            result[i] = 'g';\n        } else\
    \ if (result[i] == 'i') {\n            result[i] = 'k';\n        } else if (result[i]\
    \ == 'o') {\n            result[i] = 'q';\n        } else if (result[i] == 'u')\
    \ {\n            result[i] = 'y';\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmplsdaz74o: /tmp/tmplsdaz74o.cpp:42: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (char c : message) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            result += (char)(c - 'a' + 'A');\n        } else if (c >= 'A'\
    \ && c <= 'Z') {\n            result += (char)(c - 'A' + 'a');\n        } else\
    \ {\n            result += c;\n        }\n    }\n    for (int i = 0; i < result.size();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = (char)(result[i]\
    \ + 2);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmps3rflp7d: /tmp/tmps3rflp7d.cpp:34: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            result += message[i] - 'A' + 'a';\n        } else {\n           \
    \ result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'c' || result[i] == 'd' || result[i] ==\
    \ 'f' || result[i] == 'g' || result[i] == 'h' || result[i] == 'j' || result[i]\
    \ == 'k' || result[i] == 'l' || result[i] == 'm' || result[i] == 'n' || result[i]\
    \ == 'p' || result[i] == 'q' || result[i] == 'r' || result[i] == 's' || result[i]\
    \ == 't' || result[i] == 'v' || result[i] == 'w' || result[i] == 'x' || result[i]\
    \ == 'y' || result[i] == 'z') {\n            result[i] = result[i] + 1;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp0j3w1w7u: /tmp/tmp0j3w1w7u.cpp:35: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += (char)(message[i]\
    \ - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            result += (char)(message[i] - 'A' + 'a');\n        } else {\n   \
    \         result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = (char)(result[i]\
    \ + 2);\n        } else if (result[i] == 'c' || result[i] == 'd' || result[i]\
    \ == 'f' || result[i] == 'g' || result[i] == 'h' || result[i] == 'j' || result[i]\
    \ == 'k' || result[i] == 'l' || result[i] == 'm' || result[i] == 'n' || result[i]\
    \ == 'p' || result[i] == 'q' || result[i] == 'r' || result[i] == 's' || result[i]\
    \ == 't' || result[i] == 'v' || result[i] == 'w' || result[i] == 'x' || result[i]\
    \ == 'y' || result[i] == 'z') {\n            result[i] = (char)(result[i] + 2);\n\
    \        } else if (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' ||\
    \ result[i] == 'O' || result[i] == 'U') {\n            result[i] = (char)(result[i]\
    \ + 2);\n        } else if (result[i] == 'C' || result[i] == 'D' || result[i\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg619bt9p.cpp: In function \u2018std::string encode(std::string)\u2019\
    :\n/tmp/tmpg619bt9p.cpp:31:68: error: expected \u2018]\u2019 before \u2018}\u2019\
    \ token\n   31 |         } else if (result[i] == 'C' || result[i] == 'D' || result[i\n\
    \      |                                                                    ^\n\
    \      |                                                                    ]\n\
    \   32 | }\n      | ~                                                        \
    \           \n/tmp/tmpg619bt9p.cpp:31:68: error: expected \u2018)\u2019 before\
    \ \u2018}\u2019 token\n   31 |         } else if (result[i] == 'C' || result[i]\
    \ == 'D' || result[i\n      |                   ~                            \
    \                    ^\n      |                                              \
    \                      )\n   32 | }\n      | ~                               \
    \                                    \n/tmp/tmpg619bt9p.cpp:32:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   32 | }\n      | ^\n/tmp/tmpg619bt9p.cpp:33:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   33 | int main() {\n      |            ^\n/tmp/tmpg619bt9p.cpp:40:1: error:\
    \ expected \u2018}\u2019 at end of input\n   40 | }\n      | ^\n/tmp/tmpg619bt9p.cpp:13:41:\
    \ note: to match this \u2018{\u2019\n   13 | std::string encode(std::string message)\
    \ {\n      |                                         ^\n/tmp/tmpg619bt9p.cpp:40:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   40 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ encoded;\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n\t\t\tencoded += message[i] - 32;\n\t\t} else\
    \ if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tencoded += message[i] +\
    \ 32;\n\t\t} else {\n\t\t\tencoded += message[i];\n\t\t}\n\t}\n\tfor (int i =\
    \ 0; i < encoded.length(); i++) {\n\t\tif (encoded[i] == 'A') {\n\t\t\tencoded[i]\
    \ = 'C';\n\t\t} else if (encoded[i] == 'E') {\n\t\t\tencoded[i] = 'G';\n\t\t}\
    \ else if (encoded[i] == 'I') {\n\t\t\tencoded[i] = 'K';\n\t\t} else if (encoded[i]\
    \ == 'O') {\n\t\t\tencoded[i] = 'Q';\n\t\t} else if (encoded[i] == 'U') {\n\t\t\
    \tencoded[i] = 'S';\n\t\t} else if (encoded[i] == 'a') {\n\t\t\tencoded[i] = 'c';\n\
    \t\t} else if (encoded[i] == 'e') {\n\t\t\tencoded[i] = 'g';\n\t\t} else if (encoded[i]\
    \ == 'i') {\n\t\t\tencoded[i] = 'k';\n\t\t} else if (encoded[i] == 'o') {\n\t\t\
    \tencoded[i] = 'q';\n\t\t} else if (encoded[i] == 'u') {\n\t\t\tencoded[i] = 's';\n\
    \t\t}\n\t}\n\treturn encoded;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpaden18m9: /tmp/tmpaden18m9.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] - 'A' + 'a';\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o'\
    \ || result[i] == 'u') {\n            result[i] = (result[i] - 'a' + 2) % 26 +\
    \ 'a';\n        } else if (result[i] == 'A' || result[i] == 'E' || result[i] ==\
    \ 'I' || result[i] == 'O' || result[i] == 'U') {\n            result[i] = (result[i]\
    \ - 'A' + 2) % 26 + 'A';\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            c = c - 'A' + 'a';\n        }\n        switch (c) {\n           \
    \ case 'A':\n                c = 'C';\n                break;\n            case\
    \ 'E':\n                c = 'G';\n                break;\n            case 'I':\n\
    \                c = 'K';\n                break;\n            case 'O':\n   \
    \             c = 'Q';\n                break;\n            case 'U':\n      \
    \          c = 'S';\n                break;\n            case 'a':\n         \
    \       c = 'c';\n                break;\n            case 'e':\n            \
    \    c = 'g';\n                break;\n            case 'i':\n               \
    \ c = 'k';\n                break;\n            case 'o':\n                c =\
    \ 'q';\n                break;\n            case 'u':\n                c = 's';\n\
    \                break;\n        }\n        result += c;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpqc15blay: /tmp/tmpqc15blay.cpp:60: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i\
    \ < result.length(); i++) {\n        if (vowels.find(result[i]) != std::string::npos)\
    \ {\n            if (result[i] == 'u') {\n                result[i] = 'a';\n \
    \           } else if (result[i] == 'U') {\n                result[i] = 'A';\n\
    \            } else {\n                result[i] += 2;\n            }\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp86s5pde0: /tmp/tmp86s5pde0.cpp:41: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ vowels = \"aeiou\";\n    std::string encoded = \"\";\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded += toupper(message[i]);\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            encoded += tolower(message[i]);\n\
    \        } else {\n            encoded += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < encoded.length(); i++) {\n        if (vowels.find(encoded[i])\
    \ != std::string::npos) {\n            int index = vowels.find(encoded[i]);\n\
    \            if (index == vowels.length() - 1) {\n                encoded[i] =\
    \ vowels[0];\n            } else if (index == vowels.length() - 2) {\n       \
    \         encoded[i] = vowels[1];\n            } else {\n                encoded[i]\
    \ = vowels[index + 2];\n            }\n        }\n    }\n    return encoded;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpy9jgcqyr: /tmp/tmpy9jgcqyr.cpp:41: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a'\
    \ + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A'\
    \ + 'a';\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            c = c + 2;\n        } else if (c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U') {\n            c = c + 2;\n       \
    \ }\n        result += c;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076948
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += (char) (c - 'a' + 'A');\n        } else if (c >= 'A' &&\
    \ c <= 'Z') {\n            result += (char) (c - 'A' + 'a');\n        } else {\n\
    \            result += c;\n        }\n    }\n    for (int i = 0; i < result.size();\
    \ i++) {\n        if (result[i] == 'a') {\n            result[i] = 'c';\n    \
    \    } else if (result[i] == 'e') {\n            result[i] = 'g';\n        } else\
    \ if (result[i] == 'i') {\n            result[i] = 'k';\n        } else if (result[i]\
    \ == 'o') {\n            result[i] = 'q';\n        } else if (result[i] == 'u')\
    \ {\n            result[i] = 'w';\n        } else if (result[i] == 'A') {\n  \
    \          result[i] = 'C';\n        } else if (result[i] == 'E') {\n        \
    \    result[i] = 'G';\n        } else if (result[i] == 'I') {\n            result[i]\
    \ = 'K';\n        } else if (result[i] == 'O') {\n            result[i] = 'Q';\n\
    \        } else if (result[i] == 'U') {\n            result[i] = 'W';\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded;\n    for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            encoded += c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            encoded += c - 'A' + 'a';\n        } else {\n            encoded\
    \ += c;\n        }\n    }\n    std::string vowels = \"aeiou\";\n    for (int i\
    \ = 0; i < encoded.size(); i++) {\n        if (vowels.find(encoded[i]) != std::string::npos)\
    \ {\n            encoded[i] = vowels[(vowels.find(encoded[i]) + 2) % vowels.size()];\n\
    \        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpf79wn5yt: /tmp/tmpf79wn5yt.cpp:34: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a'\
    \ + 'A';\n        }\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n            c = c + 2;\n            if (c > 'Z') {\n       \
    \         c = c - 26;\n            }\n        }\n        result += c;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpoij6zgfp: /tmp/tmpoij6zgfp.cpp:32: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n       \
    \ if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message +=\
    \ message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            encoded_message += message[i] + 32;\n        } else {\n     \
    \       encoded_message += message[i];\n        }\n    }\n    for (int i = 0;\
    \ i < encoded_message.length(); i++) {\n        if (encoded_message[i] == 'a')\
    \ {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'w';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'W';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076948
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            encoded += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      encoded += message[i] + 32;\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded.length(); i++) {\n        if\
    \ (encoded[i] == 'a') {\n            encoded[i] = 'c';\n        } else if (encoded[i]\
    \ == 'e') {\n            encoded[i] = 'g';\n        } else if (encoded[i] == 'i')\
    \ {\n            encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n\
    \            encoded[i] = 'q';\n        } else if (encoded[i] == 'u') {\n    \
    \        encoded[i] = 'w';\n        } else if (encoded[i] == 'A') {\n        \
    \    encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n            encoded[i]\
    \ = 'G';\n        } else if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n\
    \        } else if (encoded[i] == 'O') {\n            encoded[i] = 'Q';\n    \
    \    } else if (encoded[i] == 'U') {\n            encoded[i] = 'W';\n        }\n\
    \    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n \
    \   assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  std::string\
    \ vowels = \"aeiou\";\n  std::string result = \"\";\n  for (int i = 0; i < message.length();\
    \ i++) {\n    char c = message[i];\n    if (vowels.find(c) != std::string::npos)\
    \ {\n      int index = vowels.find(c);\n      index = (index + 2) % vowels.length();\n\
    \      result += vowels[index];\n    } else {\n      result += c;\n    }\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp_fptaiug: /tmp/tmp_fptaiug.cpp:30: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            result += toupper(message[i]);\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += tolower(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (vowels.find(result[i])\
    \ != std::string::npos) {\n            result[i] = vowels[(vowels.find(result[i])\
    \ + 2) % vowels.length()];\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpyr5d8rak: /tmp/tmpyr5d8rak.cpp:34: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            result += c - 'A' + 'a';\n        } else {\n            result\
    \ += c;\n        }\n    }\n    for (int i = 0; i < result.size(); i++) {\n   \
    \     if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    } else if (result[i] == 'c' || result[i] == 'd' || result[i] == 'f' || result[i]\
    \ == 'g' || result[i] == 'h' || result[i] == 'j' || result[i] == 'k' || result[i]\
    \ == 'l' || result[i] == 'm' || result[i] == 'n' || result[i] == 'p' || result[i]\
    \ == 'q' || result[i] == 'r' || result[i] == 's' || result[i] == 't' || result[i]\
    \ == 'v' || result[i] == 'w' || result[i] == 'x' || result[i] == 'y' || result[i]\
    \ == 'z') {\n            result[i] = result[i] + 2;\n        } else if (result[i]\
    \ == 'A' || result[i] == 'E' || result[i] == 'I' || result[i] == 'O' || result[i]\
    \ == 'U') {\n            result[i] = result[i] + 2;\n        } else if (result[i]\
    \ == 'C' || result[i] == 'D' || result[i] == 'F' || result[i] == 'G' || result[i]\
    \ == 'H' || result[i] == 'J' || result[i] == 'K' || result[i\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprih7hg78.cpp: In function \u2018std::string encode(std::string)\u2019\
    :\n/tmp/tmprih7hg78.cpp:31:168: error: expected \u2018]\u2019 before \u2018}\u2019\
    \ token\n   31 |         } else if (result[i] == 'C' || result[i] == 'D' || result[i]\
    \ == 'F' || result[i] == 'G' || result[i] == 'H' || result[i] == 'J' || result[i]\
    \ == 'K' || result[i\n      |                                                \
    \                                                                            \
    \                                            ^\n      |                      \
    \                                                                            \
    \                                                                      ]\n   32\
    \ | }\n      | ~                                                             \
    \                                                                            \
    \                              \n/tmp/tmprih7hg78.cpp:31:168: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   31 |         } else if (result[i]\
    \ == 'C' || result[i] == 'D' || result[i] == 'F' || result[i] == 'G' || result[i]\
    \ == 'H' || result[i] == 'J' || result[i] == 'K' || result[i\n      |        \
    \           ~                                                                \
    \                                                                            \
    \        ^\n      |                                                          \
    \                                                                            \
    \                                  )\n   32 | }\n      | ~                   \
    \                                                                            \
    \                                                                        \n/tmp/tmprih7hg78.cpp:32:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   32 | }\n \
    \     | ^\n/tmp/tmprih7hg78.cpp:33:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   33 | int main() {\n      |            ^\n\
    /tmp/tmprih7hg78.cpp:40:1: error: expected \u2018}\u2019 at end of input\n   40\
    \ | }\n      | ^\n/tmp/tmprih7hg78.cpp:13:41: note: to match this \u2018{\u2019\
    \n   13 | std::string encode(std::string mess"
  stdout: ''
  timestamp: 1660076948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        if (isupper(message[i])) {\n           \
    \ encoded += tolower(message[i]);\n        } else if (islower(message[i])) {\n\
    \            encoded += toupper(message[i]);\n        } else {\n            encoded\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < encoded.length();\
    \ i++) {\n        if (vowels.find(encoded[i]) != std::string::npos) {\n      \
    \      encoded[i] = vowels[(vowels.find(encoded[i]) + 2) % vowels.length()];\n\
    \        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpsjwumiw0: /tmp/tmpsjwumiw0.cpp:34: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded_message += (char)(message[i] - 32);\n       \
    \ } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += (char)(message[i] + 32);\n        } else {\n            encoded_message +=\
    \ message[i];\n        }\n    }\n    for (int i = 0; i < vowels.length(); i++)\
    \ {\n        for (int j = 0; j < encoded_message.length(); j++) {\n          \
    \  if (encoded_message[j] == vowels[i]) {\n                encoded_message[j]\
    \ = vowels[(i + 2) % vowels.length()];\n            }\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp_t9ce9wo: /tmp/tmp_t9ce9wo.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a'\
    \ + 'A';\n        }\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n            c = (c - 'A' + 2) % 26 + 'A';\n        }\n     \
    \   result += c;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmptud0eges: /tmp/tmptud0eges.cpp:29: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (isupper(message[i])) {\n            result += tolower(message[i]);\n\
    \        } else if (islower(message[i])) {\n            result += toupper(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (vowels.find(result[i])\
    \ != std::string::npos) {\n            result[i] = vowels[(vowels.find(result[i])\
    \ + 2) % vowels.length()];\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpanthh4mh: /tmp/tmpanthh4mh.cpp:34: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 32;\n        } else {\n            result += message[i];\n \
    \       }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded;\n    for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            encoded += toupper(c);\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            encoded += tolower(c);\n        } else {\n            encoded\
    \ += c;\n        }\n    }\n    std::string vowels = \"aeiou\";\n    for (int i\
    \ = 0; i < encoded.size(); i++) {\n        if (vowels.find(encoded[i]) != std::string::npos)\
    \ {\n            encoded[i] = vowels[(vowels.find(encoded[i]) + 2) % vowels.size()];\n\
    \        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpqhkk148f: /tmp/tmpqhkk148f.cpp:34: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 32;\n        } else {\n            result += message[i];\n \
    \       }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ vowels = \"aeiou\";\n    std::string encoded = \"\";\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded += message[i] - 32;\n        } else if (message[i] >=\
    \ 'A' && message[i] <= 'Z') {\n            encoded += message[i] + 32;\n     \
    \   } else {\n            encoded += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < encoded.length(); i++) {\n        if (encoded[i] >= 'a' && encoded[i]\
    \ <= 'z') {\n            for (int j = 0; j < vowels.length(); j++) {\n       \
    \         if (encoded[i] == vowels[j]) {\n                    encoded[i] = vowels[(j\
    \ + 2) % vowels.length()];\n                    break;\n                }\n  \
    \          }\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpj0in3pi9: /tmp/tmpj0in3pi9.cpp:39: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        char c = message[i];\n        if (c >= 'a'\
    \ && c <= 'z') {\n            c = c - 'a' + 'A';\n        }\n        if (c >=\
    \ 'A' && c <= 'Z') {\n            if (vowels.find(c) != std::string::npos) {\n\
    \                c = vowels[(vowels.find(c) + 2) % vowels.length()];\n       \
    \     }\n        }\n        result += c;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp5nmojh3j: /tmp/tmp5nmojh3j.cpp:32: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 32;\n        } else {\n            result += message[i];\n \
    \       }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (isupper(message[i])) {\n            result\
    \ += tolower(message[i]);\n        } else if (islower(message[i])) {\n       \
    \     result += toupper(message[i]);\n        } else {\n            result +=\
    \ message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (vowels.find(result[i]) != std::string::npos) {\n            result[i]\
    \ = vowels[(vowels.find(result[i]) + 2) % vowels.length()];\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpob9bsron: /tmp/tmpob9bsron.cpp:34: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            result += toupper(message[i]);\n        } else if (message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            result += tolower(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (vowels.find(result[i])\
    \ != std::string::npos) {\n            result[i] = vowels[(vowels.find(result[i])\
    \ + 2) % vowels.length()];\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmps_j594sw: /tmp/tmps_j594sw.cpp:34: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a'\
    \ + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A'\
    \ + 'a';\n        }\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n            c = (c - 'A' + 2) % 26 + 'A';\n        } else if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            c\
    \ = (c - 'a' + 2) % 26 + 'a';\n        }\n        result += c;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 32;\n        } else {\n            result += message[i];\n \
    \       }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'y';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'Y';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpksxjdc33: /tmp/tmpksxjdc33.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a'\
    \ + 'A';\n        }\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n            c = c + 2;\n            if (c > 'Z') {\n       \
    \         c = c - 26;\n            }\n        }\n        result += c;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpoij6zgfp: /tmp/tmpoij6zgfp.cpp:32: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += (char)(message[i]\
    \ - 32);\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n     \
    \       result += (char)(message[i] + 32);\n        } else {\n            result\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (result[i] == 'a') {\n            result[i] = 'c';\n        }\
    \ else if (result[i] == 'e') {\n            result[i] = 'g';\n        } else if\
    \ (result[i] == 'i') {\n            result[i] = 'k';\n        } else if (result[i]\
    \ == 'o') {\n            result[i] = 'q';\n        } else if (result[i] == 'u')\
    \ {\n            result[i] = 'w';\n        } else if (result[i] == 'A') {\n  \
    \          result[i] = 'C';\n        } else if (result[i] == 'E') {\n        \
    \    result[i] = 'G';\n        } else if (result[i] == 'I') {\n            result[i]\
    \ = 'K';\n        } else if (result[i] == 'O') {\n            result[i] = 'Q';\n\
    \        } else if (result[i] == 'U') {\n            result[i] = 'W';\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 32;\n        } else {\n            result += message[i];\n \
    \       }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'y';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'Y';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpksxjdc33: /tmp/tmpksxjdc33.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (isupper(message[i])) {\n            result\
    \ += tolower(message[i]);\n        } else if (islower(message[i])) {\n       \
    \     result += toupper(message[i]);\n        } else {\n            result +=\
    \ message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (vowels.find(result[i]) != std::string::npos) {\n            result[i]\
    \ = vowels[(vowels.find(result[i]) + 2) % vowels.length()];\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpob9bsron: /tmp/tmpob9bsron.cpp:34: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'y';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'Y';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpn1w5jdms: /tmp/tmpn1w5jdms.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n       \
    \ if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message +=\
    \ message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            encoded_message += message[i] + 32;\n        } else {\n     \
    \       encoded_message += message[i];\n        }\n    }\n    for (int i = 0;\
    \ i < encoded_message.length(); i++) {\n        if (encoded_message[i] == 'a')\
    \ {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'w';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'W';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'y';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'Y';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpi9153i70: /tmp/tmpi9153i70.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded;\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            encoded += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            encoded += toupper(message[i]);\n        } else {\n         \
    \   encoded += message[i];\n        }\n    }\n    for (int i = 0; i < encoded.length();\
    \ i++) {\n        if (encoded[i] == 'a') {\n            encoded[i] = 'c';\n  \
    \      } else if (encoded[i] == 'e') {\n            encoded[i] = 'g';\n      \
    \  } else if (encoded[i] == 'i') {\n            encoded[i] = 'k';\n        } else\
    \ if (encoded[i] == 'o') {\n            encoded[i] = 'q';\n        } else if (encoded[i]\
    \ == 'u') {\n            encoded[i] = 'w';\n        }\n    }\n    return encoded;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpdmgakxi4: /tmp/tmpdmgakxi4.cpp:42: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (isupper(message[i])) {\n            result += tolower(message[i]);\n\
    \        } else if (islower(message[i])) {\n            result += toupper(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (vowels.find(result[i])\
    \ != std::string::npos) {\n            result[i] = vowels[(vowels.find(result[i])\
    \ + 2) % vowels.length()];\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpanthh4mh: /tmp/tmpanthh4mh.cpp:34: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded_message += (char)(message[i] - 32);\n       \
    \ } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message\
    \ += (char)(message[i] + 32);\n        } else {\n            encoded_message +=\
    \ message[i];\n        }\n    }\n    for (int i = 0; i < encoded_message.length();\
    \ i++) {\n        if (encoded_message[i] >= 'a' && encoded_message[i] <= 'z')\
    \ {\n            for (int j = 0; j < vowels.length(); j++) {\n               \
    \ if (encoded_message[i] == vowels[j]) {\n                    encoded_message[i]\
    \ = vowels[(j + 2) % vowels.length()];\n                    break;\n         \
    \       }\n            }\n        }\n    }\n    return encoded_message;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp20u4kp5_: /tmp/tmp20u4kp5_.cpp:39: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n       \
    \ if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message +=\
    \ (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += (char)(message[i] + 32);\n       \
    \ } else {\n            encoded_message += message[i];\n        }\n    }\n   \
    \ for (int i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'Y';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmph35bb0h1: /tmp/tmph35bb0h1.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n       \
    \ if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message +=\
    \ message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            encoded_message += message[i] + 32;\n        } else {\n     \
    \       encoded_message += message[i];\n        }\n    }\n    for (int i = 0;\
    \ i < encoded_message.length(); i++) {\n        if (encoded_message[i] == 'A'\
    \ || encoded_message[i] == 'E' || encoded_message[i] == 'I' || encoded_message[i]\
    \ == 'O' || encoded_message[i] == 'U') {\n            encoded_message[i] = encoded_message[i]\
    \ + 2;\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmplyv9euzi: /tmp/tmplyv9euzi.cpp:33: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded = \"\";\n    std::string vowels = \"aeiou\";\n    std::string alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char current = message[i];\n        if (current >= 'a' && current\
    \ <= 'z') {\n            encoded += toupper(current);\n        } else if (current\
    \ >= 'A' && current <= 'Z') {\n            encoded += tolower(current);\n    \
    \    } else {\n            encoded += current;\n        }\n        for (int j\
    \ = 0; j < vowels.length(); j++) {\n            if (current == vowels[j]) {\n\
    \                encoded[i] = alphabet[(j + 2) % alphabet.length()];\n       \
    \     } else if (current == toupper(vowels[j])) {\n                encoded[i]\
    \ = toupper(alphabet[(j + 2) % alphabet.length()]);\n            }\n        }\n\
    \    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n \
    \   assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp573nqhvr: /tmp/tmp573nqhvr.cpp:38: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 32;\n        } else {\n            result += message[i];\n \
    \       }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ vowels = \"aeiou\";\n    std::string encoded_message = \"\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (vowels.find(message[i]) != std::string::npos)\
    \ {\n            encoded_message += (char)(message[i] + 2);\n        } else {\n\
    \            encoded_message += (char)(message[i] - 2);\n        }\n    }\n  \
    \  return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n  \
    \  assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp62qorecc: /tmp/tmp62qorecc.cpp:27: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      result += message[i] + 32;\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (isupper(message[i])) {\n            result\
    \ += tolower(message[i]);\n        } else if (islower(message[i])) {\n       \
    \     result += toupper(message[i]);\n        } else {\n            result +=\
    \ message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        for (int j = 0; j < vowels.length(); j++) {\n            if (result[i]\
    \ == vowels[j]) {\n                result[i] = vowels[(j + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmps7v2k44n: /tmp/tmps7v2k44n.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            c = c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            c = c - 'A' + 'a';\n        }\n        switch (c) {\n           \
    \ case 'A':\n                c = 'C';\n                break;\n            case\
    \ 'E':\n                c = 'G';\n                break;\n            case 'I':\n\
    \                c = 'K';\n                break;\n            case 'O':\n   \
    \             c = 'Q';\n                break;\n            case 'U':\n      \
    \          c = 'S';\n                break;\n            case 'a':\n         \
    \       c = 'c';\n                break;\n            case 'e':\n            \
    \    c = 'g';\n                break;\n            case 'i':\n               \
    \ c = 'k';\n                break;\n            case 'o':\n                c =\
    \ 'q';\n                break;\n            case 'u':\n                c = 's';\n\
    \                break;\n        }\n        result += c;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpqc15blay: /tmp/tmpqc15blay.cpp:60: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (isupper(message[i])) {\n            result += tolower(message[i]);\n\
    \        } else if (islower(message[i])) {\n            result += toupper(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        for (int j = 0; j < vowels.length();\
    \ j++) {\n            if (result[i] == vowels[j]) {\n                result[i]\
    \ = vowels[(j + 2) % vowels.length()];\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp8y2b90ea: /tmp/tmp8y2b90ea.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n       \
    \ if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message +=\
    \ message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            encoded_message += message[i] + 32;\n        } else {\n     \
    \       encoded_message += message[i];\n        }\n    }\n    for (int i = 0;\
    \ i < encoded_message.length(); i++) {\n        if (encoded_message[i] == 'A'\
    \ || encoded_message[i] == 'a') {\n            encoded_message[i] = 'C';\n   \
    \     } else if (encoded_message[i] == 'E' || encoded_message[i] == 'e') {\n \
    \           encoded_message[i] = 'G';\n        } else if (encoded_message[i] ==\
    \ 'I' || encoded_message[i] == 'i') {\n            encoded_message[i] = 'K';\n\
    \        } else if (encoded_message[i] == 'O' || encoded_message[i] == 'o') {\n\
    \            encoded_message[i] = 'M';\n        } else if (encoded_message[i]\
    \ == 'U' || encoded_message[i] == 'u') {\n            encoded_message[i] = 'O';\n\
    \        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpu2v4l8ua: /tmp/tmpu2v4l8ua.cpp:41: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            result += c - 'A' + 'a';\n        } else {\n            result\
    \ += c;\n        }\n    }\n    for (char &c : result) {\n        if (c == 'a')\
    \ {\n            c = 'c';\n        } else if (c == 'e') {\n            c = 'g';\n\
    \        } else if (c == 'i') {\n            c = 'k';\n        } else if (c ==\
    \ 'o') {\n            c = 'q';\n        } else if (c == 'u') {\n            c\
    \ = 'w';\n        } else if (c == 'A') {\n            c = 'C';\n        } else\
    \ if (c == 'E') {\n            c = 'G';\n        } else if (c == 'I') {\n    \
    \        c = 'K';\n        } else if (c == 'O') {\n            c = 'Q';\n    \
    \    } else if (c == 'U') {\n            c = 'W';\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    std::string vowels = \"aeiou\";\n    for (char c : message) {\n\
    \        if (c >= 'a' && c <= 'z') {\n            result += (char) (c - 32);\n\
    \        } else if (c >= 'A' && c <= 'Z') {\n            result += (char) (c +\
    \ 32);\n        } else {\n            result += c;\n        }\n    }\n    for\
    \ (int i = 0; i < result.size(); i++) {\n        if (vowels.find(result[i]) !=\
    \ std::string::npos) {\n            result[i] = vowels[(vowels.find(result[i])\
    \ + 2) % vowels.size()];\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp682d_n5q: /tmp/tmp682d_n5q.cpp:34: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] - 'A' + 'a';\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o'\
    \ || result[i] == 'u') {\n            result[i] = 'a' + (result[i] - 'a' + 2)\
    \ % 26;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmprzpwgqtq: /tmp/tmprzpwgqtq.cpp:34: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ vowels = \"aeiou\";\n    std::string encoded_message = \"\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (std::isupper(message[i])) {\n\
    \            encoded_message += std::tolower(message[i]);\n        } else if (std::islower(message[i]))\
    \ {\n            encoded_message += std::toupper(message[i]);\n        } else\
    \ {\n            encoded_message += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < vowels.length(); i++) {\n        char vowel = vowels[i];\n      \
    \  char next_vowel = vowels[(i + 2) % vowels.length()];\n        std::replace(encoded_message.begin(),\
    \ encoded_message.end(), vowel, next_vowel);\n    }\n    return encoded_message;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpge1ex375: /tmp/tmpge1ex375.cpp:34: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        char c =\
    \ message[i];\n        if (c >= 'a' && c <= 'z') {\n            result += c -\
    \ 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            result +=\
    \ c - 'A' + 'a';\n        } else {\n            result += c;\n        }\n    }\n\
    \    for (int i = 0; i < result.length(); i++) {\n        char c = result[i];\n\
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n   \
    \         result[i] = 'a' + ((c - 'a' + 2) % 26);\n        } else if (c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            result[i] =\
    \ 'A' + ((c - 'A' + 2) % 26);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            result += c - 'A' + 'a';\n        } else {\n            result\
    \ += c;\n        }\n    }\n    for (char &c : result) {\n        if (c == 'a')\
    \ {\n            c = 'c';\n        } else if (c == 'e') {\n            c = 'g';\n\
    \        } else if (c == 'i') {\n            c = 'k';\n        } else if (c ==\
    \ 'o') {\n            c = 'q';\n        } else if (c == 'u') {\n            c\
    \ = 'w';\n        } else if (c == 'A') {\n            c = 'C';\n        } else\
    \ if (c == 'E') {\n            c = 'G';\n        } else if (c == 'I') {\n    \
    \        c = 'K';\n        } else if (c == 'O') {\n            c = 'Q';\n    \
    \    } else if (c == 'U') {\n            c = 'W';\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a'\
    \ + 'A';\n        }\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n            c = (c - 'A' + 2) % 26 + 'A';\n        }\n     \
    \   result += c;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmptud0eges: /tmp/tmptud0eges.cpp:29: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            result += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            result += toupper(message[i]);\n        } else {\n          \
    \  result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a') {\n            result[i] = 'c';\n    \
    \    } else if (result[i] == 'e') {\n            result[i] = 'g';\n        } else\
    \ if (result[i] == 'i') {\n            result[i] = 'k';\n        } else if (result[i]\
    \ == 'o') {\n            result[i] = 'q';\n        } else if (result[i] == 'u')\
    \ {\n            result[i] = 'y';\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmplsdaz74o: /tmp/tmplsdaz74o.cpp:42: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a'\
    \ + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A'\
    \ + 'a';\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            c = (c - 'a' + 2) % 26 + 'a';\n        } else if\
    \ (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            c\
    \ = (c - 'A' + 2) % 26 + 'A';\n        }\n        result += c;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 32;\n        } else {\n            result += message[i];\n \
    \       }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ vowels = \"aeiou\";\n    std::string result = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (vowels.find(tolower(message[i])) != std::string::npos)\
    \ {\n            result += (char)(message[i] + 2);\n        } else {\n       \
    \     result += (char)(message[i] - 2);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpbafen0z7: /tmp/tmpbafen0z7.cpp:27: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ output = \"\";\n    std::string vowels = \"aeiou\";\n    for (char c : message)\
    \ {\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a' + 'A';\n   \
    \     } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A' + 'a';\n   \
    \     }\n        if (vowels.find(c) != std::string::npos) {\n            c = vowels[(vowels.find(c)\
    \ + 2) % vowels.size()];\n        }\n        output += c;\n    }\n    return output;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp95c_858z: /tmp/tmp95c_858z.cpp:31: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a'\
    \ + 'A';\n        }\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n            c = (c - 'A' + 2) % 26 + 'A';\n        }\n     \
    \   result += c;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmptud0eges: /tmp/tmptud0eges.cpp:29: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ result = \"\";\n\tstd::string vowels = \"aeiou\";\n\tfor (int i = 0; i < message.length();\
    \ i++) {\n\t\tif (isupper(message[i])) {\n\t\t\tresult += tolower(message[i]);\n\
    \t\t} else if (islower(message[i])) {\n\t\t\tresult += toupper(message[i]);\n\t\
    \t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < result.length();\
    \ i++) {\n\t\tfor (int j = 0; j < vowels.length(); j++) {\n\t\t\tif (result[i]\
    \ == vowels[j]) {\n\t\t\t\tresult[i] = vowels[(j + 2) % vowels.length()];\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpw8nzk3p6: /tmp/tmpw8nzk3p6.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            encoded += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded\
    \ += tolower(message[i]);\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded.length(); i++) {\n        if\
    \ (encoded[i] == 'a') {\n            encoded[i] = 'c';\n        } else if (encoded[i]\
    \ == 'e') {\n            encoded[i] = 'g';\n        } else if (encoded[i] == 'i')\
    \ {\n            encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n\
    \            encoded[i] = 'q';\n        } else if (encoded[i] == 'u') {\n    \
    \        encoded[i] = 'y';\n        } else if (encoded[i] == 'A') {\n        \
    \    encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n            encoded[i]\
    \ = 'G';\n        } else if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n\
    \        } else if (encoded[i] == 'O') {\n            encoded[i] = 'Q';\n    \
    \    } else if (encoded[i] == 'U') {\n            encoded[i] = 'Y';\n        }\n\
    \    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n \
    \   assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmps168yp_q: /tmp/tmps168yp_q.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (char c : message) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            result += (char)(c - 'a' + 'A');\n        } else if (c >= 'A'\
    \ && c <= 'Z') {\n            result += (char)(c - 'A' + 'a');\n        } else\
    \ {\n            result += c;\n        }\n    }\n    for (int i = 0; i < result.size();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = (char)(result[i]\
    \ + 2);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmps3rflp7d: /tmp/tmps3rflp7d.cpp:34: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ vowels = \"aeiou\";\n    std::string encoded = \"\";\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        if (vowels.find(tolower(message[i])) !=\
    \ std::string::npos) {\n            int index = vowels.find(tolower(message[i]));\n\
    \            encoded += vowels[(index + 2) % 5];\n        } else {\n         \
    \   encoded += message[i];\n        }\n    }\n    return encoded;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpoldzvyze: /tmp/tmpoldzvyze.cpp:28: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076949
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            result += message[i] - 'A' + 'a';\n        } else {\n           \
    \ result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'c' || result[i] == 'd' || result[i] ==\
    \ 'f' || result[i] == 'g' || result[i] == 'h' || result[i] == 'j' || result[i]\
    \ == 'k' || result[i] == 'l' || result[i] == 'm' || result[i] == 'n' || result[i]\
    \ == 'p' || result[i] == 'q' || result[i] == 'r' || result[i] == 's' || result[i]\
    \ == 't' || result[i] == 'v' || result[i] == 'w' || result[i] == 'x' || result[i]\
    \ == 'y' || result[i] == 'z') {\n            result[i] = result[i] + 2;\n    \
    \    } else if (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' || result[i]\
    \ == 'O' || result[i] == 'U') {\n            result[i] = result[i] + 2;\n    \
    \    } else if (result[i] == 'C' || result[i] == 'D' || result[i] == 'F' || result[i]\
    \ == 'G' ||\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcnb3k_hr.cpp: In function \u2018std::string encode(std::string)\u2019\
    :\n/tmp/tmpcnb3k_hr.cpp:32:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   32 | }\n      | ^\n/tmp/tmpcnb3k_hr.cpp:31:99: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   31 |         } else if (result[i]\
    \ == 'C' || result[i] == 'D' || result[i] == 'F' || result[i] == 'G' ||\n    \
    \  |                   ~                                                     \
    \                          ^\n      |                                        \
    \                                                           )\n   32 | }\n   \
    \   | ~                                                                      \
    \                            \n/tmp/tmpcnb3k_hr.cpp:32:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   32 | }\n      | ^\n/tmp/tmpcnb3k_hr.cpp:33:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   33 | int main() {\n      |            ^\n/tmp/tmpcnb3k_hr.cpp:40:1: error:\
    \ expected \u2018}\u2019 at end of input\n   40 | }\n      | ^\n/tmp/tmpcnb3k_hr.cpp:13:41:\
    \ note: to match this \u2018{\u2019\n   13 | std::string encode(std::string message)\
    \ {\n      |                                         ^\n/tmp/tmpcnb3k_hr.cpp:40:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   40 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660076949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message;\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        if (vowels.find(tolower(message[i])) !=\
    \ std::string::npos) {\n            encoded_message += tolower(message[i]) + 2;\n\
    \        } else {\n            encoded_message += tolower(message[i]);\n     \
    \   }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpkudiovpp: /tmp/tmpkudiovpp.cpp:28: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (char c : message) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            result += (char)(c - 'a' + 'A');\n        } else if (c >= 'A'\
    \ && c <= 'Z') {\n            result += (char)(c - 'A' + 'a');\n        } else\
    \ {\n            result += c;\n        }\n    }\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < result.size(); i++) {\n        if (vowels.find(result[i])\
    \ != std::string::npos) {\n            result[i] = (char)(result[i] + 2);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp8akoygxh: /tmp/tmp8akoygxh.cpp:35: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076950
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += (char) (c - 'a' + 'A');\n        } else if (c >= 'A' &&\
    \ c <= 'Z') {\n            result += (char) (c - 'A' + 'a');\n        } else {\n\
    \            result += c;\n        }\n    }\n    for (int i = 0; i < result.size();\
    \ i++) {\n        if (result[i] == 'a') {\n            result[i] = 'c';\n    \
    \    } else if (result[i] == 'e') {\n            result[i] = 'g';\n        } else\
    \ if (result[i] == 'i') {\n            result[i] = 'k';\n        } else if (result[i]\
    \ == 'o') {\n            result[i] = 'q';\n        } else if (result[i] == 'u')\
    \ {\n            result[i] = 'w';\n        } else if (result[i] == 'A') {\n  \
    \          result[i] = 'C';\n        } else if (result[i] == 'E') {\n        \
    \    result[i] = 'G';\n        } else if (result[i] == 'I') {\n            result[i]\
    \ = 'K';\n        } else if (result[i] == 'O') {\n            result[i] = 'Q';\n\
    \        } else if (result[i] == 'U') {\n            result[i] = 'W';\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076948
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ ch = message[i];\n        if (ch >= 'a' && ch <= 'z') {\n            ch = ch\
    \ - 'a' + 'A';\n        } else if (ch >= 'A' && ch <= 'Z') {\n            ch =\
    \ ch - 'A' + 'a';\n        }\n        if (ch == 'a' || ch == 'e' || ch == 'i'\
    \ || ch == 'o' || ch == 'u') {\n            ch = ch + 2;\n        } else if (ch\
    \ == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U') {\n            ch\
    \ = ch + 2;\n        }\n        result += ch;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) ==\
    \ (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076950
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      result += message[i] + 32;\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            encoded += (char)(message[i]\
    \ - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            encoded += (char)(message[i] - 'A' + 'a');\n        } else {\n  \
    \          encoded += message[i];\n        }\n    }\n    for (int i = 0; i < encoded.length();\
    \ i++) {\n        if (encoded[i] == 'a') {\n            encoded[i] = 'c';\n  \
    \      } else if (encoded[i] == 'e') {\n            encoded[i] = 'g';\n      \
    \  } else if (encoded[i] == 'i') {\n            encoded[i] = 'k';\n        } else\
    \ if (encoded[i] == 'o') {\n            encoded[i] = 'q';\n        } else if (encoded[i]\
    \ == 'u') {\n            encoded[i] = 'w';\n        } else if (encoded[i] == 'A')\
    \ {\n            encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n\
    \            encoded[i] = 'G';\n        } else if (encoded[i] == 'I') {\n    \
    \        encoded[i] = 'K';\n        } else if (encoded[i] == 'O') {\n        \
    \    encoded[i] = 'Q';\n        } else if (encoded[i] == 'U') {\n            encoded[i]\
    \ = 'W';\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076950
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        char c =\
    \ message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a' +\
    \ 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A' +\
    \ 'a';\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            c = c + 2;\n        } else if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            c = c + 2;\n        }\n\
    \        result += c;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] == 'a') {\n            encoded += 'c';\n        } else if (message[i]\
    \ == 'e') {\n            encoded += 'g';\n        } else if (message[i] == 'i')\
    \ {\n            encoded += 'k';\n        } else if (message[i] == 'o') {\n  \
    \          encoded += 'q';\n        } else if (message[i] == 'u') {\n        \
    \    encoded += 'y';\n        } else if (message[i] == 'A') {\n            encoded\
    \ += 'C';\n        } else if (message[i] == 'E') {\n            encoded += 'G';\n\
    \        } else if (message[i] == 'I') {\n            encoded += 'K';\n      \
    \  } else if (message[i] == 'O') {\n            encoded += 'Q';\n        } else\
    \ if (message[i] == 'U') {\n            encoded += 'Y';\n        } else if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded += message[i] - 32;\n  \
    \      } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded\
    \ += message[i] + 32;\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpy4t7n1f_: /tmp/tmpy4t7n1f_.cpp:48: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        if (message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded += message[i] - 32;\n        } else if (message[i] >=\
    \ 'A' && message[i] <= 'Z') {\n            encoded += message[i] + 32;\n     \
    \   } else {\n            encoded += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < encoded.length(); i++) {\n        if (encoded[i] >= 'a' && encoded[i]\
    \ <= 'z') {\n            for (int j = 0; j < vowels.length(); j++) {\n       \
    \         if (encoded[i] == vowels[j]) {\n                    encoded[i] = vowels[(j\
    \ + 2) % vowels.length()];\n                    break;\n                }\n  \
    \          }\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp3fkg5j9o: /tmp/tmp3fkg5j9o.cpp:39: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076950
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += (char)(message[i] + 32);\n       \
    \ } else {\n            encoded_message += message[i];\n        }\n    }\n   \
    \ for (int i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'w';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'W';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076950
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      result += message[i] + 32;\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += toupper(c);\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            result += tolower(c);\n        } else {\n            result += c;\n\
    \        }\n    }\n    for (int i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ == 'a') {\n            result[i] = 'c';\n        } else if (result[i] == 'e')\
    \ {\n            result[i] = 'g';\n        } else if (result[i] == 'i') {\n  \
    \          result[i] = 'k';\n        } else if (result[i] == 'o') {\n        \
    \    result[i] = 'q';\n        } else if (result[i] == 'u') {\n            result[i]\
    \ = 'w';\n        } else if (result[i] == 'A') {\n            result[i] = 'C';\n\
    \        } else if (result[i] == 'E') {\n            result[i] = 'G';\n      \
    \  } else if (result[i] == 'I') {\n            result[i] = 'K';\n        } else\
    \ if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else if (result[i]\
    \ == 'U') {\n            result[i] = 'W';\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += tolower(message[i]);\n        } else\
    \ {\n            encoded_message += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'Y';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp6zryfb__: /tmp/tmp6zryfb__.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ result = \"\";\n\tstd::string vowels = \"aeiou\";\n\tfor (int i = 0; i < message.length();\
    \ i++) {\n\t\tif (message[i] >= 'a' && message[i] <= 'z') {\n\t\t\tresult += toupper(message[i]);\n\
    \t\t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tresult += tolower(message[i]);\n\
    \t\t} else {\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\tfor (int i = 0; i < result.length();\
    \ i++) {\n\t\tfor (int j = 0; j < vowels.length(); j++) {\n\t\t\tif (result[i]\
    \ == vowels[j]) {\n\t\t\t\tresult[i] = vowels[(j + 2) % vowels.length()];\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpd3lmze6t: /tmp/tmpd3lmze6t.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] - 'A' + 'a';\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o'\
    \ || result[i] == 'u') {\n            result[i] = result[i] + 2;\n        } else\
    \ if (result[i] == 'c' || result[i] == 'd' || result[i] == 'f' || result[i] ==\
    \ 'g' || result[i] == 'h' || result[i] == 'j' || result[i] == 'k' || result[i]\
    \ == 'l' || result[i] == 'm' || result[i] == 'n' || result[i] == 'p' || result[i]\
    \ == 'q' || result[i] == 'r' || result[i] == 's' || result[i] == 't' || result[i]\
    \ == 'v' || result[i] == 'w' || result[i] == 'x' || result[i] == 'y' || result[i]\
    \ == 'z') {\n            result[i] = result[i] + 1;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpywn9o4ej: /tmp/tmpywn9o4ej.cpp:35: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    std::string vowels = \"aeiou\";\n    for (char c : message) {\n\
    \        if (isupper(c)) {\n            result += tolower(c);\n        } else\
    \ if (islower(c)) {\n            result += toupper(c);\n        } else {\n   \
    \         result += c;\n        }\n    }\n    for (int i = 0; i < result.size();\
    \ i++) {\n        for (char c : vowels) {\n            if (result[i] == c) {\n\
    \                result[i] = vowels[(vowels.find(c) + 2) % vowels.size()];\n \
    \           }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpm3lhm451: /tmp/tmpm3lhm451.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    std::string vowels = \"aeiou\";\n    std::string\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += tolower(message[i]);\n        } else\
    \ {\n            encoded_message += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < encoded_message.length(); i++) {\n        if (vowels.find(encoded_message[i])\
    \ != std::string::npos) {\n            int index = alphabet.find(encoded_message[i]);\n\
    \            encoded_message[i] = alphabet[(index + 2) % 26];\n        }\n   \
    \ }\n    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpo6bys_tj: /tmp/tmpo6bys_tj.cpp:37: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n       \
    \ if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message +=\
    \ message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            encoded_message += message[i] + 32;\n        } else {\n     \
    \       encoded_message += message[i];\n        }\n    }\n    for (int i = 0;\
    \ i < encoded_message.length(); i++) {\n        if (encoded_message[i] == 'A'\
    \ || encoded_message[i] == 'a') {\n            encoded_message[i] = 'C';\n   \
    \     } else if (encoded_message[i] == 'E' || encoded_message[i] == 'e') {\n \
    \           encoded_message[i] = 'G';\n        } else if (encoded_message[i] ==\
    \ 'I' || encoded_message[i] == 'i') {\n            encoded_message[i] = 'K';\n\
    \        } else if (encoded_message[i] == 'O' || encoded_message[i] == 'o') {\n\
    \            encoded_message[i] = 'M';\n        } else if (encoded_message[i]\
    \ == 'U' || encoded_message[i] == 'u') {\n            encoded_message[i] = 'O';\n\
    \        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpu2v4l8ua: /tmp/tmpu2v4l8ua.cpp:41: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    char vowels[]\
    \ = {'a', 'e', 'i', 'o', 'u'};\n    std::string encoded = \"\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        if (std::isupper(message[i])) {\n\
    \            encoded += std::tolower(message[i]);\n        } else if (std::islower(message[i]))\
    \ {\n            encoded += std::toupper(message[i]);\n        } else {\n    \
    \        encoded += message[i];\n        }\n    }\n    for (int i = 0; i < encoded.length();\
    \ i++) {\n        for (int j = 0; j < 5; j++) {\n            if (encoded[i] ==\
    \ vowels[j]) {\n                encoded[i] = vowels[(j + 2) % 5];\n          \
    \  }\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp361_dlvt: /tmp/tmp361_dlvt.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'y';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'Y';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpn1w5jdms: /tmp/tmpn1w5jdms.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076949
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            result += message[i] - 'A' + 'a';\n        } else {\n           \
    \ result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = result[i]\
    \ + 2;\n        } else if (result[i] == 'c' || result[i] == 'd' || result[i] ==\
    \ 'f' || result[i] == 'g' || result[i] == 'h' || result[i] == 'j' || result[i]\
    \ == 'k' || result[i] == 'l' || result[i] == 'm' || result[i] == 'n' || result[i]\
    \ == 'p' || result[i] == 'q' || result[i] == 'r' || result[i] == 's' || result[i]\
    \ == 't' || result[i] == 'v' || result[i] == 'w' || result[i] == 'x' || result[i]\
    \ == 'y' || result[i] == 'z') {\n            result[i] = result[i] + 2;\n    \
    \    } else if (result[i] == 'A' || result[i] == 'E' || result[i] == 'I' || result[i]\
    \ == 'O' || result[i] == 'U') {\n            result[i] = result[i] + 2;\n    \
    \    } else if (result[i] == 'C' || result[i] == 'D' || result[i] == 'F' || result[i]\
    \ == 'G' ||\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcnb3k_hr.cpp: In function \u2018std::string encode(std::string)\u2019\
    :\n/tmp/tmpcnb3k_hr.cpp:32:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   32 | }\n      | ^\n/tmp/tmpcnb3k_hr.cpp:31:99: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   31 |         } else if (result[i]\
    \ == 'C' || result[i] == 'D' || result[i] == 'F' || result[i] == 'G' ||\n    \
    \  |                   ~                                                     \
    \                          ^\n      |                                        \
    \                                                           )\n   32 | }\n   \
    \   | ~                                                                      \
    \                            \n/tmp/tmpcnb3k_hr.cpp:32:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   32 | }\n      | ^\n/tmp/tmpcnb3k_hr.cpp:33:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   33 | int main() {\n      |            ^\n/tmp/tmpcnb3k_hr.cpp:40:1: error:\
    \ expected \u2018}\u2019 at end of input\n   40 | }\n      | ^\n/tmp/tmpcnb3k_hr.cpp:13:41:\
    \ note: to match this \u2018{\u2019\n   13 | std::string encode(std::string message)\
    \ {\n      |                                         ^\n/tmp/tmpcnb3k_hr.cpp:40:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   40 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660076949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    std::string vowels = \"aeiou\";\n    for (char c : message) {\n\
    \        if (vowels.find(c) != std::string::npos) {\n            result += vowels[(vowels.find(c)\
    \ + 2) % vowels.size()];\n        } else {\n            result += c;\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpf8exwjav: /tmp/tmpf8exwjav.cpp:27: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += (char)(message[i]\
    \ - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            result += (char)(message[i] - 'A' + 'a');\n        } else {\n   \
    \         result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = (char)(result[i]\
    \ + 2);\n        } else if (result[i] == 'y') {\n            result[i] = 'a';\n\
    \        } else if (result[i] == 'z') {\n            result[i] = 'b';\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpw7nx74o5: /tmp/tmpw7nx74o5.cpp:38: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076950
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      result += message[i] + 32;\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076949
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += (char) (c - 32);\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            result += (char) (c + 32);\n        } else {\n            result\
    \ += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmptr_r9x5i: /tmp/tmptr_r9x5i.cpp:28: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076950
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            encoded += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      encoded += message[i] + 32;\n        } else {\n            encoded += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < encoded.length(); i++) {\n        if\
    \ (encoded[i] == 'a') {\n            encoded[i] = 'c';\n        } else if (encoded[i]\
    \ == 'e') {\n            encoded[i] = 'g';\n        } else if (encoded[i] == 'i')\
    \ {\n            encoded[i] = 'k';\n        } else if (encoded[i] == 'o') {\n\
    \            encoded[i] = 'q';\n        } else if (encoded[i] == 'u') {\n    \
    \        encoded[i] = 'w';\n        } else if (encoded[i] == 'A') {\n        \
    \    encoded[i] = 'C';\n        } else if (encoded[i] == 'E') {\n            encoded[i]\
    \ = 'G';\n        } else if (encoded[i] == 'I') {\n            encoded[i] = 'K';\n\
    \        } else if (encoded[i] == 'O') {\n            encoded[i] = 'Q';\n    \
    \    } else if (encoded[i] == 'U') {\n            encoded[i] = 'W';\n        }\n\
    \    }\n    return encoded;\n}\nint main() {\n    auto candidate = encode;\n \
    \   assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (char c : message) {\n        if (std::isalpha(c)) {\n    \
    \        if (std::islower(c)) {\n                result += std::toupper(c);\n\
    \            } else {\n                result += std::tolower(c);\n          \
    \  }\n            switch (c) {\n                case 'a':\n                  \
    \  result += 'c';\n                    break;\n                case 'e':\n   \
    \                 result += 'g';\n                    break;\n               \
    \ case 'i':\n                    result += 'k';\n                    break;\n\
    \                case 'o':\n                    result += 'q';\n             \
    \       break;\n                case 'u':\n                    result += 'y';\n\
    \                    break;\n                case 'A':\n                    result\
    \ += 'C';\n                    break;\n                case 'E':\n           \
    \         result += 'G';\n                    break;\n                case 'I':\n\
    \                    result += 'K';\n                    break;\n            \
    \    case 'O':\n                    result += 'Q';\n                    break;\n\
    \                case 'U':\n                    result += 'Y';\n             \
    \       break;\n                default:\n                    result += c;\n \
    \           }\n        } else {\n            result += c;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpmcdrutib: /tmp/tmpmcdrutib.cpp:64: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076950
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += (char)(message[i] - 32);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += (char)(message[i] + 32);\n       \
    \ } else {\n            encoded_message += message[i];\n        }\n    }\n   \
    \ for (int i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'Y';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpqajc617v: /tmp/tmpqajc617v.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        char c = message[i];\n        if (c >= 'a'\
    \ && c <= 'z') {\n            result += c - 32;\n        } else if (c >= 'A' &&\
    \ c <= 'Z') {\n            result += c + 32;\n        } else {\n            result\
    \ += c;\n        }\n        if (vowels.find(tolower(c)) != std::string::npos)\
    \ {\n            result[i] = vowels[(vowels.find(tolower(c)) + 2) % 5];\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpvpl1p3_q: /tmp/tmpvpl1p3_q.cpp:33: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076950
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded;\n    for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            encoded += c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            encoded += c - 'A' + 'a';\n        } else {\n            encoded\
    \ += c;\n        }\n    }\n    for (char &c : encoded) {\n        if (c == 'a')\
    \ {\n            c = 'c';\n        } else if (c == 'e') {\n            c = 'g';\n\
    \        } else if (c == 'i') {\n            c = 'k';\n        } else if (c ==\
    \ 'o') {\n            c = 'q';\n        } else if (c == 'u') {\n            c\
    \ = 'w';\n        } else if (c == 'A') {\n            c = 'C';\n        } else\
    \ if (c == 'E') {\n            c = 'G';\n        } else if (c == 'I') {\n    \
    \        c = 'K';\n        } else if (c == 'O') {\n            c = 'Q';\n    \
    \    } else if (c == 'U') {\n            c = 'W';\n        }\n    }\n    return\
    \ encoded;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'y';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'Y';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpi9153i70: /tmp/tmpi9153i70.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += (char)(message[i]\
    \ - 'a' + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            result += (char)(message[i] - 'A' + 'a');\n        } else {\n   \
    \         result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = (char)(result[i]\
    \ + 2);\n        } else if (result[i] == 'y') {\n            result[i] = 'a';\n\
    \        } else if (result[i] == 'z') {\n            result[i] = 'b';\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpw7nx74o5: /tmp/tmpw7nx74o5.cpp:38: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  std::string\
    \ result;\n  for (char c : message) {\n    if (c >= 'a' && c <= 'z') {\n     \
    \ result += toupper(c);\n    } else if (c >= 'A' && c <= 'Z') {\n      result\
    \ += tolower(c);\n    } else {\n      result += c;\n    }\n  }\n  for (int i =\
    \ 0; i < result.size(); i++) {\n    if (result[i] == 'a') {\n      result[i] =\
    \ 'c';\n    } else if (result[i] == 'e') {\n      result[i] = 'g';\n    } else\
    \ if (result[i] == 'i') {\n      result[i] = 'k';\n    } else if (result[i] ==\
    \ 'o') {\n      result[i] = 'q';\n    } else if (result[i] == 'u') {\n      result[i]\
    \ = 'y';\n    } else if (result[i] == 'A') {\n      result[i] = 'C';\n    } else\
    \ if (result[i] == 'E') {\n      result[i] = 'G';\n    } else if (result[i] ==\
    \ 'I') {\n      result[i] = 'K';\n    } else if (result[i] == 'O') {\n      result[i]\
    \ = 'Q';\n    } else if (result[i] == 'U') {\n      result[i] = 'Y';\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp9f2oz12x: /tmp/tmp9f2oz12x.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a'\
    \ + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A'\
    \ + 'a';\n        }\n        switch (c) {\n            case 'A':\n           \
    \     c = 'C';\n                break;\n            case 'E':\n              \
    \  c = 'G';\n                break;\n            case 'I':\n                c\
    \ = 'K';\n                break;\n            case 'O':\n                c = 'Q';\n\
    \                break;\n            case 'U':\n                c = 'S';\n   \
    \             break;\n            case 'a':\n                c = 'c';\n      \
    \          break;\n            case 'e':\n                c = 'g';\n         \
    \       break;\n            case 'i':\n                c = 'k';\n            \
    \    break;\n            case 'o':\n                c = 'q';\n               \
    \ break;\n            case 'u':\n                c = 's';\n                break;\n\
    \        }\n        result += c;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpt6flvupu: /tmp/tmpt6flvupu.cpp:61: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        char c =\
    \ message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a' +\
    \ 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A' +\
    \ 'a';\n        }\n        switch (c) {\n            case 'a':\n            case\
    \ 'A':\n                c = 'C';\n                break;\n            case 'e':\n\
    \            case 'E':\n                c = 'G';\n                break;\n   \
    \         case 'i':\n            case 'I':\n                c = 'K';\n       \
    \         break;\n            case 'o':\n            case 'O':\n             \
    \   c = 'M';\n                break;\n            case 'u':\n            case\
    \ 'U':\n                c = 'O';\n                break;\n        }\n        result\
    \ += c;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp0hysigbi: /tmp/tmp0hysigbi.cpp:50: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      result += message[i] + 32;\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'y';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'Y';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp1qah8wnv: /tmp/tmp1qah8wnv.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += (char)(message[i] - 'a'\
    \ + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n    \
    \        result += (char)(message[i] - 'A' + 'a');\n        } else {\n       \
    \     result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = (char)(result[i]\
    \ + 2);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpsbcz4j0t: /tmp/tmpsbcz4j0t.cpp:34: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'y';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'Y';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpi9153i70: /tmp/tmpi9153i70.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a'\
    \ + 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A'\
    \ + 'a';\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            c = c + 2;\n        } else if (c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U') {\n            c = c + 2;\n       \
    \ }\n        result += c;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            result += c - 'A' + 'a';\n        } else {\n            result\
    \ += c;\n        }\n    }\n    for (int i = 0; i < result.size(); i++) {\n   \
    \     if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmphegp5w_9: /tmp/tmphegp5w_9.cpp:34: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            result += c - 'A' + 'a';\n        } else {\n            result\
    \ += c;\n        }\n    }\n    for (int i = 0; i < result.size(); i++) {\n   \
    \     if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i]\
    \ == 'o' || result[i] == 'u') {\n            result[i] = result[i] + 2;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmphegp5w_9: /tmp/tmphegp5w_9.cpp:34: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076950
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded_message += message[i] - 32;\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message += message[i]\
    \ + 32;\n        } else {\n            encoded_message += message[i];\n      \
    \  }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n      \
    \  for (int j = 0; j < vowels.length(); j++) {\n            if (encoded_message[i]\
    \ == vowels[j]) {\n                encoded_message[i] = vowels[(j + 2) % vowels.length()];\n\
    \            }\n        }\n    }\n    return encoded_message;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp8h8ukqo3: /tmp/tmp8h8ukqo3.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076951
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        char c =\
    \ message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a' +\
    \ 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A' +\
    \ 'a';\n        }\n        switch (c) {\n            case 'A':\n             \
    \   c = 'C';\n                break;\n            case 'E':\n                c\
    \ = 'G';\n                break;\n            case 'I':\n                c = 'K';\n\
    \                break;\n            case 'O':\n                c = 'Q';\n   \
    \             break;\n            case 'U':\n                c = 'S';\n      \
    \          break;\n            case 'a':\n                c = 'c';\n         \
    \       break;\n            case 'e':\n                c = 'g';\n            \
    \    break;\n            case 'i':\n                c = 'k';\n               \
    \ break;\n            case 'o':\n                c = 'q';\n                break;\n\
    \            case 'u':\n                c = 's';\n                break;\n   \
    \     }\n        result += c;\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmphk2ukmpn: /tmp/tmphk2ukmpn.cpp:61: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 32;\n        } else {\n            result += message[i];\n \
    \       }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        char c =\
    \ message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a' +\
    \ 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A' +\
    \ 'a';\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            c = (c - 'a' + 2) % 26 + 'a';\n        } else if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            c = (c\
    \ - 'A' + 2) % 26 + 'A';\n        }\n        result += c;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += (char)(message[i] - 'a'\
    \ + 'A');\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n    \
    \        result += (char)(message[i] - 'A' + 'a');\n        } else {\n       \
    \     result += message[i];\n        }\n    }\n    for (int i = 0; i < result.length();\
    \ i++) {\n        if (result[i] == 'a' || result[i] == 'e' || result[i] == 'i'\
    \ || result[i] == 'o' || result[i] == 'u') {\n            result[i] = (char)(result[i]\
    \ + 2);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpsbcz4j0t: /tmp/tmpsbcz4j0t.cpp:34: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (auto c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            result += c - 'A' + 'a';\n        } else {\n            result\
    \ += c;\n        }\n    }\n    for (auto& c : result) {\n        if (c == 'a')\
    \ {\n            c = 'c';\n        } else if (c == 'e') {\n            c = 'g';\n\
    \        } else if (c == 'i') {\n            c = 'k';\n        } else if (c ==\
    \ 'o') {\n            c = 'q';\n        } else if (c == 'u') {\n            c\
    \ = 'w';\n        } else if (c == 'A') {\n            c = 'C';\n        } else\
    \ if (c == 'E') {\n            c = 'G';\n        } else if (c == 'I') {\n    \
    \        c = 'K';\n        } else if (c == 'O') {\n            c = 'Q';\n    \
    \    } else if (c == 'U') {\n            c = 'W';\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076951
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        if (isupper(message[i])) {\n            result\
    \ += tolower(message[i]);\n        } else if (islower(message[i])) {\n       \
    \     result += toupper(message[i]);\n        } else {\n            result +=\
    \ message[i];\n        }\n    }\n    for (int i = 0; i < result.length(); i++)\
    \ {\n        if (vowels.find(result[i]) != std::string::npos) {\n            result[i]\
    \ = vowels[(vowels.find(result[i]) + 2) % vowels.length()];\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpob9bsron: /tmp/tmpob9bsron.cpp:34: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        if (message[i] >= 'a' && message[i]\
    \ <= 'z') {\n            encoded_message += message[i] - 32;\n        } else if\
    \ (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded_message += message[i]\
    \ + 32;\n        } else {\n            encoded_message += message[i];\n      \
    \  }\n    }\n    for (int i = 0; i < encoded_message.length(); i++) {\n      \
    \  if (encoded_message[i] >= 'a' && encoded_message[i] <= 'z') {\n           \
    \ for (int j = 0; j < vowels.length(); j++) {\n                if (encoded_message[i]\
    \ == vowels[j]) {\n                    encoded_message[i] = vowels[(j + 2) % vowels.length()];\n\
    \                }\n            }\n        }\n    }\n    return encoded_message;\n\
    }\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
    )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n \
    \   assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is\
    \ a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
    \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpza3mx5ns: /tmp/tmpza3mx5ns.cpp:38: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 32;\n        } else {\n            result += message[i];\n \
    \       }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message;\n    for (int i = 0; i < message.length(); i++) {\n       \
    \ if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message +=\
    \ message[i] - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z')\
    \ {\n            encoded_message += message[i] + 32;\n        } else {\n     \
    \       encoded_message += message[i];\n        }\n    }\n    for (int i = 0;\
    \ i < encoded_message.length(); i++) {\n        if (encoded_message[i] == 'A'\
    \ || encoded_message[i] == 'E' || encoded_message[i] == 'I' || encoded_message[i]\
    \ == 'O' || encoded_message[i] == 'U') {\n            encoded_message[i] = encoded_message[i]\
    \ + 2;\n        }\n    }\n    return encoded_message;\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmplyv9euzi: /tmp/tmplyv9euzi.cpp:33: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076949
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += toupper(message[i]);\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += tolower(message[i]);\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 'a' + 'A';\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] - 'A' + 'a';\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a' || result[i] == 'e' || result[i] == 'i' || result[i] == 'o'\
    \ || result[i] == 'u') {\n            result[i] = result[i] + 2;\n        } else\
    \ if (result[i] == 'c' || result[i] == 'd' || result[i] == 'f' || result[i] ==\
    \ 'g' || result[i] == 'h' || result[i] == 'j' || result[i] == 'k' || result[i]\
    \ == 'l' || result[i] == 'm' || result[i] == 'n' || result[i] == 'p' || result[i]\
    \ == 'q' || result[i] == 'r' || result[i] == 's' || result[i] == 't' || result[i]\
    \ == 'v' || result[i] == 'w' || result[i] == 'x' || result[i] == 'y' || result[i]\
    \ == 'z') {\n            result[i] = result[i] + 2;\n        } else if (result[i]\
    \ == 'b') {\n            result[i] = 'd';\n        } else if (result[i] == 'B')\
    \ {\n            result[i] = 'D';\n        } else if (result[i] == 'z') {\n  \
    \          result[i] = 'b';\n        } else if (result[i] == 'Z') {\n        \
    \    result[i] = 'B';\n        }\n    }\n    return\n}\nint main() {\n    auto\
    \ candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwra8ab27.cpp: In function \u2018std::string encode(std::string)\u2019\
    :\n/tmp/tmpwra8ab27.cpp:40:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   40 | }\n      | ^\n/tmp/tmpwra8ab27.cpp:39:11: error: expected\
    \ \u2018;\u2019 before \u2018}\u2019 token\n   39 |     return\n      |      \
    \     ^\n      |           ;\n   40 | }\n      | ~          \n"
  stdout: ''
  timestamp: 1660076951
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += tolower(message[i]);\n        } else\
    \ {\n            encoded_message += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'Y';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp6zryfb__: /tmp/tmp6zryfb__.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n\tstd::string\
    \ encoded_message;\n\tfor (int i = 0; i < message.length(); i++) {\n\t\tif (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n\t\t\tencoded_message += (char)(message[i] -\
    \ 32);\n\t\t} else if (message[i] >= 'A' && message[i] <= 'Z') {\n\t\t\tencoded_message\
    \ += (char)(message[i] + 32);\n\t\t} else {\n\t\t\tencoded_message += message[i];\n\
    \t\t}\n\t}\n\tfor (int i = 0; i < encoded_message.length(); i++) {\n\t\tif (encoded_message[i]\
    \ == 'a' || encoded_message[i] == 'e' || encoded_message[i] == 'i' || encoded_message[i]\
    \ == 'o' || encoded_message[i] == 'u') {\n\t\t\tencoded_message[i] = (char)(encoded_message[i]\
    \ + 2);\n\t\t}\n\t}\n\treturn encoded_message;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpym2r0t54: /tmp/tmpym2r0t54.cpp:34: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076951
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            result += message[i]\
    \ - 32;\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n      \
    \      result += message[i] + 32;\n        } else {\n            result += message[i];\n\
    \        }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'y';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'Y';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp1qah8wnv: /tmp/tmp1qah8wnv.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ vowels = \"aeiou\";\n    std::string encoded_message = \"\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        char c = message[i];\n        if\
    \ (vowels.find(tolower(c)) != std::string::npos) {\n            int index = vowels.find(tolower(c));\n\
    \            index = (index + 2) % vowels.length();\n            encoded_message\
    \ += toupper(vowels[index]);\n        } else {\n            encoded_message +=\
    \ toupper(c);\n        }\n    }\n    return encoded_message;\n}\nint main() {\n\
    \    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmprs9j6tfb: /tmp/tmprs9j6tfb.cpp:30: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076951
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            result += message[i] - 32;\n   \
    \     } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            result\
    \ += message[i] + 32;\n        } else {\n            result += message[i];\n \
    \       }\n    }\n    for (int i = 0; i < result.length(); i++) {\n        if\
    \ (result[i] == 'a') {\n            result[i] = 'c';\n        } else if (result[i]\
    \ == 'e') {\n            result[i] = 'g';\n        } else if (result[i] == 'i')\
    \ {\n            result[i] = 'k';\n        } else if (result[i] == 'o') {\n  \
    \          result[i] = 'q';\n        } else if (result[i] == 'u') {\n        \
    \    result[i] = 'w';\n        } else if (result[i] == 'A') {\n            result[i]\
    \ = 'C';\n        } else if (result[i] == 'E') {\n            result[i] = 'G';\n\
    \        } else if (result[i] == 'I') {\n            result[i] = 'K';\n      \
    \  } else if (result[i] == 'O') {\n            result[i] = 'Q';\n        } else\
    \ if (result[i] == 'U') {\n            result[i] = 'W';\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += tolower(message[i]);\n        } else\
    \ {\n            encoded_message += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'Y';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp6zryfb__: /tmp/tmp6zryfb__.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (isupper(message[i])) {\n            result += tolower(message[i]);\n\
    \        } else if (islower(message[i])) {\n            result += toupper(message[i]);\n\
    \        } else {\n            result += message[i];\n        }\n    }\n    for\
    \ (int i = 0; i < result.length(); i++) {\n        if (vowels.find(result[i])\
    \ != std::string::npos) {\n            result[i] = vowels[(vowels.find(result[i])\
    \ + 2) % vowels.length()];\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"\
    ));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpanthh4mh: /tmp/tmpanthh4mh.cpp:34: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076947
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    for (int i = 0; i < message.length(); i++) {\n        char c =\
    \ message[i];\n        if (c >= 'a' && c <= 'z') {\n            c = c - 'a' +\
    \ 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n            c = c - 'A' +\
    \ 'a';\n        }\n        switch (c) {\n            case 'A':\n             \
    \   c = 'C';\n                break;\n            case 'E':\n                c\
    \ = 'G';\n                break;\n            case 'I':\n                c = 'K';\n\
    \                break;\n            case 'O':\n                c = 'Q';\n   \
    \             break;\n            case 'U':\n                c = 'S';\n      \
    \          break;\n            case 'a':\n                c = 'c';\n         \
    \       break;\n            case 'e':\n                c = 'g';\n            \
    \    break;\n            case 'i':\n                c = 'k';\n               \
    \ break;\n            case 'o':\n                c = 'q';\n                break;\n\
    \            case 'u':\n                c = 's';\n                break;\n   \
    \     }\n        result += c;\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n\
    \    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"\
    YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS\
    \ KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) ==\
    \ (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmphk2ukmpn: /tmp/tmphk2ukmpn.cpp:61: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076951
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += tolower(message[i]);\n        } else\
    \ {\n            encoded_message += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'Y';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp6zryfb__: /tmp/tmp6zryfb__.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        char c = message[i];\n        if (isupper(c))\
    \ {\n            result += tolower(c);\n        } else if (islower(c)) {\n   \
    \         result += toupper(c);\n        } else {\n            result += c;\n\
    \        }\n        if (vowels.find(tolower(c)) != std::string::npos) {\n    \
    \        result[i] = vowels[(vowels.find(tolower(c)) + 2) % vowels.length()];\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpem5dosg6: /tmp/tmpem5dosg6.cpp:33: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076951
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message;\n    std::string vowels = \"aeiou\";\n    std::string alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        if (std::isupper(message[i])) {\n            encoded_message\
    \ += std::tolower(message[i]);\n        } else if (std::islower(message[i])) {\n\
    \            encoded_message += std::toupper(message[i]);\n        } else {\n\
    \            encoded_message += message[i];\n        }\n    }\n    for (int i\
    \ = 0; i < encoded_message.length(); i++) {\n        if (vowels.find(encoded_message[i])\
    \ != std::string::npos) {\n            int index = vowels.find(encoded_message[i]);\n\
    \            encoded_message[i] = vowels[(index + 2) % 5];\n        }\n    }\n\
    \    return encoded_message;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpee36asok: /tmp/tmpee36asok.cpp:36: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076952
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded;\n    for (int i = 0; i < message.length(); i++) {\n        if (isupper(message[i]))\
    \ {\n            encoded += tolower(message[i]);\n        } else if (islower(message[i]))\
    \ {\n            encoded += toupper(message[i]);\n        } else {\n         \
    \   encoded += message[i];\n        }\n    }\n    std::string vowels = \"aeiou\"\
    ;\n    for (int i = 0; i < encoded.length(); i++) {\n        if (vowels.find(encoded[i])\
    \ != std::string::npos) {\n            int index = vowels.find(encoded[i]);\n\
    \            if (index == 4) {\n                encoded[i] = vowels[0];\n    \
    \        } else {\n                encoded[i] = vowels[index + 2];\n         \
    \   }\n        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate\
    \ = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp9_ip7sxg: /tmp/tmp9_ip7sxg.cpp:39: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076951
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n  std::string\
    \ result = \"\";\n  for (int i = 0; i < message.length(); i++) {\n    if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n      result += toupper(message[i]);\n    }\
    \ else if (message[i] >= 'A' && message[i] <= 'Z') {\n      result += tolower(message[i]);\n\
    \    } else {\n      result += message[i];\n    }\n  }\n  for (int i = 0; i <\
    \ result.length(); i++) {\n    if (result[i] == 'a') {\n      result[i] = 'c';\n\
    \    } else if (result[i] == 'e') {\n      result[i] = 'g';\n    } else if (result[i]\
    \ == 'i') {\n      result[i] = 'k';\n    } else if (result[i] == 'o') {\n    \
    \  result[i] = 'q';\n    } else if (result[i] == 'u') {\n      result[i] = 'y';\n\
    \    } else if (result[i] == 'A') {\n      result[i] = 'C';\n    } else if (result[i]\
    \ == 'E') {\n      result[i] = 'G';\n    } else if (result[i] == 'I') {\n    \
    \  result[i] = 'K';\n    } else if (result[i] == 'O') {\n      result[i] = 'Q';\n\
    \    } else if (result[i] == 'U') {\n      result[i] = 'Y';\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpxr8iyd2l: /tmp/tmpxr8iyd2l.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076952
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded = \"\";\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i\
    \ < message.length(); i++) {\n        if (isupper(message[i])) {\n           \
    \ encoded += tolower(message[i]);\n        } else if (islower(message[i])) {\n\
    \            encoded += toupper(message[i]);\n        } else {\n            encoded\
    \ += message[i];\n        }\n    }\n    for (int i = 0; i < encoded.length();\
    \ i++) {\n        if (vowels.find(encoded[i]) != std::string::npos) {\n      \
    \      encoded[i] = vowels[(vowels.find(encoded[i]) + 2) % vowels.length()];\n\
    \        }\n    }\n    return encoded;\n}\nint main() {\n    auto candidate =\
    \ encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"\
    Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n\
    \    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n\
    \    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT\
    \ Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpsjwumiw0: /tmp/tmpsjwumiw0.cpp:34: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076948
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ encoded_message = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z') {\n            encoded_message\
    \ += toupper(message[i]);\n        } else if (message[i] >= 'A' && message[i]\
    \ <= 'Z') {\n            encoded_message += tolower(message[i]);\n        } else\
    \ {\n            encoded_message += message[i];\n        }\n    }\n    for (int\
    \ i = 0; i < encoded_message.length(); i++) {\n        if (encoded_message[i]\
    \ == 'a') {\n            encoded_message[i] = 'c';\n        } else if (encoded_message[i]\
    \ == 'e') {\n            encoded_message[i] = 'g';\n        } else if (encoded_message[i]\
    \ == 'i') {\n            encoded_message[i] = 'k';\n        } else if (encoded_message[i]\
    \ == 'o') {\n            encoded_message[i] = 'q';\n        } else if (encoded_message[i]\
    \ == 'u') {\n            encoded_message[i] = 'y';\n        } else if (encoded_message[i]\
    \ == 'A') {\n            encoded_message[i] = 'C';\n        } else if (encoded_message[i]\
    \ == 'E') {\n            encoded_message[i] = 'G';\n        } else if (encoded_message[i]\
    \ == 'I') {\n            encoded_message[i] = 'K';\n        } else if (encoded_message[i]\
    \ == 'O') {\n            encoded_message[i] = 'Q';\n        } else if (encoded_message[i]\
    \ == 'U') {\n            encoded_message[i] = 'Y';\n        }\n    }\n    return\
    \ encoded_message;\n}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"\
    TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"\
    ));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmp6zryfb__: /tmp/tmp6zryfb__.cpp:52: int main(): Assertion `candidate(("Mudasir"))
    == ("mWDCSKR")'' failed.

    '
  stdout: ''
  timestamp: 1660076946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a message, and encodes in such a \n// way that it swaps case of all letters,\
    \ replaces all vowels in \n// the message with the letter that appears 2 places\
    \ ahead of that \n// vowel in the english alphabet. \n// Assume only letters.\
    \ \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n\
    // 'tHKS KS C MGSSCGG'\nstd::string encode(std::string message) {\n    std::string\
    \ result;\n    std::string vowels = \"aeiou\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if (c >= 'a' && c <= 'z') {\n\
    \            result += c - 'a' + 'A';\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            result += c - 'A' + 'a';\n        } else {\n            result\
    \ += c;\n        }\n        if (vowels.find(tolower(c)) != std::string::npos)\
    \ {\n            result[i] = vowels[(vowels.find(tolower(c)) + 2) % vowels.length()];\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encode;\n\
    \    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\"\
    )) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"\
    This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I\
    \ DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
  status: Exception
  stderr: 'tmpqylqdl5s: /tmp/tmpqylqdl5s.cpp:33: int main(): Assertion `candidate(("TEST"))
    == ("tgst")'' failed.

    '
  stdout: ''
  timestamp: 1660076952
