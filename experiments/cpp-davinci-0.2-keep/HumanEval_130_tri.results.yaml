language: cpp
name: HumanEval_130_tri
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  long a = 1, b = 3, c = 2;\n  for (int i = 4;\
    \ i <= n; i++) {\n    long d = a + b + c;\n    result.push_back(d);\n    a = b;\n\
    \    b = c;\n    c = d;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp3bbf2u_n: /tmp/tmp3bbf2u_n.cpp:47: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  result.push_back(1);\n  result.push_back(3);\n\
    \  result.push_back(2);\n  result.push_back(8);\n  for (int i = 4; i <= n; i++)\
    \ {\n    if (i % 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n\
    \      result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpujrmykhn: /tmp/tmpujrmykhn.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v;\n\tv.push_back(1);\n\tv.push_back(3);\n\tv.push_back(2);\n\
    \tif (n == 0) {\n\t\tv.erase(v.begin());\n\t\treturn v;\n\t}\n\tif (n == 1) {\n\
    \t\tv.erase(v.begin());\n\t\tv.erase(v.begin());\n\t\treturn v;\n\t}\n\tif (n\
    \ == 2) {\n\t\tv.erase(v.begin());\n\t\treturn v;\n\t}\n\tfor (int i = 3; i <=\
    \ n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tv.push_back(1 + i / 2);\n\t\t}\n\t\t\
    else {\n\t\t\tv.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n\t\t}\n\t}\n\treturn\
    \ v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpll5wo6g7: /tmp/tmpll5wo6g7.cpp:48: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  if(n == 0) return v;\n  v.push_back(1);\n  if(n\
    \ == 1) return v;\n  v.push_back(3);\n  if(n == 2) return v;\n  v.push_back(2);\n\
    \  if(n == 3) return v;\n  for(int i = 4; i <= n; i++) {\n    if(i % 2 == 0) v.push_back(1\
    \ + i / 2);\n    else v.push_back(v[i - 1] + v[i - 2] + v[i - 4]);\n  }\n  return\
    \ v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpwebck847: /tmp/tmpwebck847.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    v.push_back(8);\n    for(int i = 4; i <= n; i++) {\n\
    \        if(i % 2 == 0) {\n            v.push_back(1 + i / 2);\n        } else\
    \ {\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpd6px__p8: /tmp/tmpd6px__p8.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  result.push_back(1);\n  result.push_back(3);\n\
    \  result.push_back(2);\n  result.push_back(8);\n  for (int i = 4; i <= n; i++)\
    \ {\n    if (i % 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n\
    \      result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpujrmykhn: /tmp/tmpujrmykhn.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  result.push_back(1);\n  result.push_back(3);\n\
    \  result.push_back(2);\n  result.push_back(8);\n  for (int i = 4; i <= n; i++)\
    \ {\n    if (i % 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n\
    \      result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpujrmykhn: /tmp/tmpujrmykhn.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  v.push_back(1);\n  v.push_back(3);\n  v.push_back(2);\n\
    \  v.push_back(8);\n  for(int i = 4; i <= n; i++) {\n    if(i % 2 == 0) {\n  \
    \    v.push_back(1 + i / 2);\n    } else {\n      v.push_back(v[i - 1] + v[i -\
    \ 2] + v[i + 1]);\n    }\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpsy74ee8i: /tmp/tmpsy74ee8i.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  for (int i = 3; i < n; i++) {\n    if (i %\
    \ 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmps6i6875w: /tmp/tmps6i6875w.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    result.push_back(8);\n    for(int i = 4; i < n\
    \ + 1; i++) {\n        if(i % 2 == 0) {\n            result.push_back(1 + i /\
    \ 2);\n        } else {\n            result.push_back(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmprdouymvl: /tmp/tmprdouymvl.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i % 2\
    \ == 0) {\n            result.push_back(1 + i / 2);\n        } else {\n      \
    \      result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp6mc9tgiz: /tmp/tmp6mc9tgiz.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    v.push_back(8);\n    if(n == 0)\n        return {1};\n\
    \    if(n == 1)\n        return {1, 3};\n    if(n == 2)\n        return {1, 3,\
    \ 2};\n    if(n == 3)\n        return {1, 3, 2, 8};\n    for(int i = 4; i <= n;\
    \ i++)\n    {\n        if(i % 2 == 0)\n            v.push_back(1 + i / 2);\n \
    \       else\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp3i5qf48r: /tmp/tmp3i5qf48r.cpp:45: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 4; i <= n; i++) {\n        if (i % 2 == 0) {\n      \
    \      result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmppkpo39n3: /tmp/tmppkpo39n3.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    v.push_back(8);\n    for(int i = 4; i <= n; i++) {\n\
    \        if(i % 2 == 0) {\n            v.push_back(1 + i / 2);\n        } else\
    \ {\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpd6px__p8: /tmp/tmpd6px__p8.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 4; i <= n; i++) {\n        if (i % 2 == 0) {\n      \
    \      result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmppkpo39n3: /tmp/tmppkpo39n3.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  result.push_back(1);\n  result.push_back(3);\n\
    \  result.push_back(2);\n  if (n == 0) {\n    return {1};\n  }\n  if (n == 1)\
    \ {\n    return {1, 3};\n  }\n  if (n == 2) {\n    return {1, 3, 2};\n  }\n  for\
    \ (int i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n      result.push_back(1\
    \ + i / 2);\n    } else {\n      result.push_back(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpk6qu_j_i: /tmp/tmpk6qu_j_i.cpp:43: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> result;\n\tresult.push_back(1);\n\tresult.push_back(3);\n\
    \tresult.push_back(2);\n\tresult.push_back(8);\n\tfor (int i = 4; i <= n; i++)\
    \ {\n\t\tif (i % 2 == 0) {\n\t\t\tresult.push_back(1 + i / 2);\n\t\t}\n\t\telse\
    \ {\n\t\t\tresult.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n\t\
    \t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmplhwx01nc: /tmp/tmplhwx01nc.cpp:38: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    v.push_back(8);\n    for(int i = 4; i <= n; i++) {\n\
    \        if(i % 2 == 0) {\n            v.push_back(1 + i / 2);\n        } else\
    \ {\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpd6px__p8: /tmp/tmpd6px__p8.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    v.push_back(8);\n    for(int i = 4; i <= n; i++) {\n\
    \        if(i % 2 == 0) {\n            v.push_back(1 + i / 2);\n        } else\
    \ {\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpd6px__p8: /tmp/tmpd6px__p8.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  v.push_back(1);\n  v.push_back(3);\n  v.push_back(2);\n\
    \  for(int i = 3; i <= n; i++) {\n    if(i % 2 == 0) {\n      v.push_back(1 +\
    \ i / 2);\n    } else {\n      v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n\
    \    }\n  }\n  return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp22721vi5: /tmp/tmp22721vi5.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  v.push_back(1);\n  v.push_back(3);\n  v.push_back(2);\n\
    \  v.push_back(8);\n  for(int i = 4; i <= n; i++) {\n    if(i % 2 == 0) {\n  \
    \    v.push_back(1 + i / 2);\n    } else {\n      v.push_back(v[i - 1] + v[i -\
    \ 2] + v[i + 1]);\n    }\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpsy74ee8i: /tmp/tmpsy74ee8i.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  if(n == 0) return v;\n  v.push_back(1);\n  if(n\
    \ == 1) return v;\n  v.push_back(3);\n  if(n == 2) return v;\n  v.push_back(2);\n\
    \  if(n == 3) return v;\n  for(int i = 3; i < n; i++) {\n    if(i % 2 == 0) {\n\
    \      v.push_back(1 + i / 2);\n    } else {\n      v.push_back(v[i - 1] + v[i\
    \ - 2] + v[i + 1]);\n    }\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmptqpieo6f: /tmp/tmptqpieo6f.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    res.push_back(1);\n    res.push_back(3);\n\
    \    res.push_back(2);\n    res.push_back(8);\n    for(int i = 4; i <= n; i++){\n\
    \        if(i % 2 == 0){\n            res.push_back(1 + i / 2);\n        }\n \
    \       else{\n            res.push_back(res[i - 1] + res[i - 2] + res[i + 1]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmptwm62qo2: /tmp/tmptwm62qo2.cpp:38: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0) return res;\n    res.push_back(1);\n\
    \    if(n == 1) return res;\n    res.push_back(3);\n    if(n == 2) return res;\n\
    \    res.push_back(2);\n    if(n == 3) return res;\n    for(int i = 3; i < n;\
    \ i++){\n        long temp = res[i - 1] + res[i - 2] + res[i - 3];\n        res.push_back(temp);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpnon1o2uq: /tmp/tmpnon1o2uq.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i % 2 == 0)\
    \ {\n            v.push_back(1 + i / 2);\n        } else {\n            v.push_back(v[i\
    \ - 1] + v[i - 2] + v[i + 1]);\n        }\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp0fxwe2f9: /tmp/tmp0fxwe2f9.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    result.push_back(8);\n    for(int i = 4; i <= n;\
    \ i++) {\n        if(i % 2 == 0) {\n            result.push_back(1 + i / 2);\n\
    \        } else {\n            result.push_back(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp2g1_ynz0: /tmp/tmp2g1_ynz0.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    if (n ==\
    \ 0) {\n        return result;\n    }\n    result.push_back(3);\n    if (n ==\
    \ 1) {\n        return result;\n    }\n    result.push_back(2);\n    if (n ==\
    \ 2) {\n        return result;\n    }\n    result.push_back(8);\n    if (n ==\
    \ 3) {\n        return result;\n    }\n    for (int i = 4; i <= n; i++) {\n  \
    \      if (i % 2 == 0) {\n            result.push_back(1 + i / 2);\n        }\
    \ else {\n            result.push_back(result[i - 1] + result[i - 2] + result[i\
    \ + 1]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp0r6usaq0: /tmp/tmp0r6usaq0.cpp:49: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    result.push_back(8);\n    if (n == 0) {\n     \
    \   result.erase(result.begin());\n        return result;\n    }\n    if (n ==\
    \ 1) {\n        result.erase(result.begin() + 1);\n        return result;\n  \
    \  }\n    if (n == 2) {\n        result.erase(result.begin() + 2);\n        return\
    \ result;\n    }\n    for (int i = 4; i <= n; i++) {\n        long temp = result[i\
    \ - 1] + result[i - 2] + result[i - 3];\n        result.push_back(temp);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpozfec15u: /tmp/tmpozfec15u.cpp:45: int main(): Assertion `candidate((4))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  for (int i = 3; i < n; i++) {\n    if (i %\
    \ 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmps6i6875w: /tmp/tmps6i6875w.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  for (int i = 3; i < n; i++) {\n    if (i %\
    \ 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmps6i6875w: /tmp/tmps6i6875w.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i % 2 == 0)\
    \ {\n            v.push_back(1 + i / 2);\n        } else {\n            v.push_back(v[i\
    \ - 1] + v[i - 2] + v[i + 1]);\n        }\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp0fxwe2f9: /tmp/tmp0fxwe2f9.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  result.push_back(1);\n  result.push_back(3);\n\
    \  result.push_back(2);\n  result.push_back(8);\n  for (int i = 4; i <= n; i++)\
    \ {\n    if (i % 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n\
    \      result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpujrmykhn: /tmp/tmpujrmykhn.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  if(n == 0) {\n    v.push_back(1);\n    return\
    \ v;\n  }\n  if(n == 1) {\n    v.push_back(1);\n    v.push_back(3);\n    return\
    \ v;\n  }\n  if(n == 2) {\n    v.push_back(1);\n    v.push_back(3);\n    v.push_back(2);\n\
    \    return v;\n  }\n  v.push_back(1);\n  v.push_back(3);\n  v.push_back(2);\n\
    \  for(int i = 3; i <= n; i++) {\n    if(i % 2 == 0) {\n      v.push_back(1 +\
    \ i / 2);\n    } else {\n      v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n\
    \    }\n  }\n  return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpd9mi3e2b: /tmp/tmpd9mi3e2b.cpp:49: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    result.push_back(8);\n    for(int i = 4; i <= n;\
    \ i++) {\n        if(i % 2 == 0) {\n            result.push_back(1 + i / 2);\n\
    \        } else {\n            result.push_back(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp2g1_ynz0: /tmp/tmp2g1_ynz0.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> res;\n  if (n == 0) return res;\n  res.push_back(1);\n\
    \  if (n == 1) return res;\n  res.push_back(3);\n  if (n == 2) return res;\n \
    \ res.push_back(2);\n  if (n == 3) return res;\n  for (int i = 3; i < n; i++)\
    \ {\n    if (i % 2 == 0) {\n      res.push_back(1 + i / 2);\n    } else {\n  \
    \    res.push_back(res[i - 1] + res[i - 2] + res[i + 1]);\n    }\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp39_g_ypq: /tmp/tmp39_g_ypq.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 4; i <= n; i++) {\n        if (i % 2 == 0) {\n      \
    \      result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i - 4]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpu_1_hi5k: /tmp/tmpu_1_hi5k.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans;\n    ans.push_back(1);\n    ans.push_back(3);\n\
    \    ans.push_back(2);\n    ans.push_back(8);\n    for(int i = 4; i <= n; i++){\n\
    \        if(i % 2 == 0){\n            ans.push_back(1 + i / 2);\n        }\n \
    \       else{\n            ans.push_back(ans[i - 1] + ans[i - 2] + ans[i + 1]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp9olbbj7n: /tmp/tmp9olbbj7n.cpp:38: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  v.push_back(1);\n  v.push_back(3);\n  v.push_back(2);\n\
    \  v.push_back(8);\n  for(int i = 4; i <= n; i++) {\n    if(i % 2 == 0) {\n  \
    \    v.push_back(1 + i / 2);\n    } else {\n      v.push_back(v[i - 1] + v[i -\
    \ 2] + v[i + 1]);\n    }\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpsy74ee8i: /tmp/tmpsy74ee8i.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 4; i <= n; i++) {\n        if (i % 2 == 0) {\n      \
    \      result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 2] + result[i - 1] + result[i - 4]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpiqe9hkbn: /tmp/tmpiqe9hkbn.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  for (int i = 4; i <= n; i++) {\n    if (i %\
    \ 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp77scw4d8: /tmp/tmp77scw4d8.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> result;\n\tif (n == 0) {\n\t\tresult.push_back(1);\n\
    \t\treturn result;\n\t}\n\tif (n == 1) {\n\t\tresult.push_back(1);\n\t\tresult.push_back(3);\n\
    \t\treturn result;\n\t}\n\tif (n == 2) {\n\t\tresult.push_back(1);\n\t\tresult.push_back(3);\n\
    \t\tresult.push_back(2);\n\t\treturn result;\n\t}\n\tresult.push_back(1);\n\t\
    result.push_back(3);\n\tresult.push_back(2);\n\tfor (int i = 3; i <= n; i++) {\n\
    \t\tif (i % 2 == 0) {\n\t\t\tresult.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\
    \t\t\tresult.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n\t\t}\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp8tg5wvew: /tmp/tmp8tg5wvew.cpp:50: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    for (int i = 3; i <= n; i++) {\n       \
    \ if (i % 2 == 0) {\n            result.push_back(1 + i / 2);\n        } else\
    \ {\n            result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp9n996c3x: /tmp/tmp9n996c3x.cpp:43: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    if(n == 0)\n        return {1};\n    if(n == 1)\n   \
    \     return {1, 3};\n    if(n == 2)\n        return {1, 3, 2};\n    for(int i\
    \ = 3; i <= n; i++)\n    {\n        if(i % 2 == 0)\n            v.push_back(1\
    \ + i / 2);\n        else\n            v.push_back(v[i - 1] + v[i - 2] + v[i +\
    \ 1]);\n    }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n   \
    \ assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpw74t1q_5: /tmp/tmpw74t1q_5.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    res.push_back(1);\n    res.push_back(3);\n\
    \    res.push_back(2);\n    res.push_back(8);\n    for(int i = 4; i <= n; i++)\
    \ {\n        if(i % 2 == 0) {\n            res.push_back(1 + i / 2);\n       \
    \ } else {\n            res.push_back(res[i - 1] + res[i - 2] + res[i + 1]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmptrr0c01h: /tmp/tmptrr0c01h.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  if(n == 0) return v;\n  v.push_back(1);\n  if(n\
    \ == 1) return v;\n  v.push_back(3);\n  if(n == 2) return v;\n  v.push_back(2);\n\
    \  if(n == 3) return v;\n  for(int i = 3; i < n; i++) {\n    if(i % 2 == 0) {\n\
    \      v.push_back(1 + i / 2);\n    } else {\n      v.push_back(v[i - 1] + v[i\
    \ - 2] + v[i + 1]);\n    }\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmptqpieo6f: /tmp/tmptqpieo6f.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    result.push_back(8);\n    for(int i = 4; i <= n;\
    \ i++) {\n        if(i % 2 == 0) {\n            result.push_back(1 + i / 2);\n\
    \        } else {\n            result.push_back(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp2g1_ynz0: /tmp/tmp2g1_ynz0.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i % 2 == 0)\
    \ {\n            v.push_back(1 + i / 2);\n        } else {\n            v.push_back(v[i\
    \ - 1] + v[i - 2] + v[i + 1]);\n        }\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp0fxwe2f9: /tmp/tmp0fxwe2f9.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    if(n == 0)\n        return v;\n    v.push_back(1);\n\
    \    if(n == 1)\n        return v;\n    v.push_back(3);\n    if(n == 2)\n    \
    \    return v;\n    v.push_back(2);\n    if(n == 3)\n        return v;\n    for(int\
    \ i = 4; i <= n; i++){\n        if(i % 2 == 0)\n            v.push_back(1 + i\
    \ / 2);\n        else\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmphxwzr_77: /tmp/tmphxwzr_77.cpp:41: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i % 2 == 0)\
    \ {\n            v.push_back(1 + i / 2);\n        } else {\n            v.push_back(v[i\
    \ - 1] + v[i - 2] + v[i + 1]);\n        }\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp0fxwe2f9: /tmp/tmp0fxwe2f9.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 4; i <= n; i++) {\n        if (i % 2 == 0) {\n      \
    \      result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmppkpo39n3: /tmp/tmppkpo39n3.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    res.push_back(1);\n    res.push_back(3);\n\
    \    res.push_back(2);\n    res.push_back(8);\n    for(int i = 4; i <= n; i++)\
    \ {\n        if(i % 2 == 0) {\n            res.push_back(1 + i / 2);\n       \
    \ } else {\n            res.push_back(res[i - 1] + res[i - 2] + res[i + 1]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmptrr0c01h: /tmp/tmptrr0c01h.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    if (n ==\
    \ 0) return result;\n    result.push_back(3);\n    if (n == 1) return result;\n\
    \    result.push_back(2);\n    if (n == 2) return result;\n    for (int i = 3;\
    \ i <= n; i++) {\n        if (i % 2 == 0) {\n            result.push_back(1 +\
    \ i / 2);\n        } else {\n            result.push_back(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpz57a0vqf: /tmp/tmpz57a0vqf.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    if(n == 0) return v;\n    if(n == 1) return v;\n    if(n\
    \ == 2) return v;\n    for(int i = 3; i <= n; i++){\n        if(i % 2 == 0) v.push_back(1\
    \ + i / 2);\n        else v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmps3nynfbe: /tmp/tmps3nynfbe.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    if(n == 0)\n        return v;\n    v.push_back(1);\n\
    \    if(n == 1)\n        return v;\n    v.push_back(3);\n    if(n == 2)\n    \
    \    return v;\n    v.push_back(2);\n    if(n == 3)\n        return v;\n    for(int\
    \ i = 3; i < n; i++)\n    {\n        if(i % 2 == 0)\n            v.push_back(1\
    \ + i / 2);\n        else\n            v.push_back(v[i - 1] + v[i - 2] + v[i +\
    \ 1]);\n    }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n   \
    \ assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpkielx_nm: /tmp/tmpkielx_nm.cpp:42: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  for (int i = 3; i < n; i++) {\n    if (i %\
    \ 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmps6i6875w: /tmp/tmps6i6875w.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  for (int i = 3; i < n; i++) {\n    if (i %\
    \ 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmps6i6875w: /tmp/tmps6i6875w.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  result.push_back(1);\n  result.push_back(3);\n\
    \  result.push_back(2);\n  result.push_back(8);\n  for (int i = 4; i <= n; i++)\
    \ {\n    if (i % 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n\
    \      result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpujrmykhn: /tmp/tmpujrmykhn.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  for (int i = 3; i < n; i++) {\n    long last\
    \ = result[i];\n    long second_last = result[i - 1];\n    long third_last = result[i\
    \ - 2];\n    if (i % 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else\
    \ {\n      result.push_back(last + second_last + third_last);\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpz6amap7d: /tmp/tmpz6amap7d.cpp:49: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    if(n == 0)\n        return v;\n    if(n == 1)\n     \
    \   return v;\n    if(n == 2)\n        return v;\n    for(int i = 3; i <= n; i++){\n\
    \        if(i % 2 == 0)\n            v.push_back(1 + i / 2);\n        else\n \
    \           v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpywrzlleb: /tmp/tmpywrzlleb.cpp:39: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    v.push_back(8);\n    for(int i = 4; i <= n; i++) {\n\
    \        if(i % 2 == 0) {\n            v.push_back(1 + i / 2);\n        } else\
    \ {\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpd6px__p8: /tmp/tmpd6px__p8.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  for (int i = 3; i < n; i++) {\n    if (i %\
    \ 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmps6i6875w: /tmp/tmps6i6875w.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  v.push_back(1);\n  v.push_back(3);\n  v.push_back(2);\n\
    \  for(int i = 3; i <= n; i++) {\n    if(i % 2 == 0) {\n      v.push_back(1 +\
    \ i / 2);\n    } else {\n      v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n\
    \    }\n  }\n  return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp22721vi5: /tmp/tmp22721vi5.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    v.push_back(8);\n    if(n == 0)\n        return {1};\n\
    \    if(n == 1)\n        return {1, 3};\n    if(n == 2)\n        return {1, 3,\
    \ 2};\n    if(n == 3)\n        return {1, 3, 2, 8};\n    for(int i = 4; i <= n;\
    \ i++)\n    {\n        if(i % 2 == 0)\n            v.push_back(1 + i / 2);\n \
    \       else\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp3i5qf48r: /tmp/tmp3i5qf48r.cpp:45: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0)\n        return res;\n    res.push_back(1);\n\
    \    if(n == 1)\n        return res;\n    res.push_back(3);\n    if(n == 2)\n\
    \        return res;\n    res.push_back(2);\n    if(n == 3)\n        return res;\n\
    \    for(int i = 3; i < n; i++)\n    {\n        if(i % 2 == 0)\n            res.push_back(1\
    \ + i / 2);\n        else\n            res.push_back(res[i - 1] + res[i - 2] +\
    \ res[i + 1]);\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpia4y0on5: /tmp/tmpia4y0on5.cpp:42: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> res;\n  if (n == 0) {\n    res.push_back(1);\n   \
    \ return res;\n  }\n  res.push_back(1);\n  res.push_back(3);\n  res.push_back(2);\n\
    \  for (int i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n      res.push_back(1\
    \ + i / 2);\n    } else {\n      res.push_back(res[i - 1] + res[i - 2] + res[i\
    \ + 1]);\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpmcjsr01n: /tmp/tmpmcjsr01n.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  for (int i = 4; i <= n; i++) {\n    if (i %\
    \ 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp77scw4d8: /tmp/tmp77scw4d8.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    v.push_back(8);\n    for(int i = 4; i <= n; i++) {\n\
    \        if(i % 2 == 0) {\n            v.push_back(1 + i / 2);\n        } else\
    \ {\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpd6px__p8: /tmp/tmpd6px__p8.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v;\n\tv.push_back(1);\n\tv.push_back(3);\n\tv.push_back(2);\n\
    \tv.push_back(8);\n\tfor (int i = 4; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\
    \t\tv.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\t\t\tv.push_back(v[i - 1] + v[i\
    \ - 2] + v[i + 1]);\n\t\t}\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpedc00tfs: /tmp/tmpedc00tfs.cpp:38: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1, b = 3, c = 2;\n    result.push_back(a);\n\
    \    result.push_back(b);\n    result.push_back(c);\n    for(int i = 3; i <= n;\
    \ i++) {\n        if(i % 2 == 0) {\n            result.push_back(1 + i / 2);\n\
    \        } else {\n            result.push_back(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp3qss6krs: /tmp/tmp3qss6krs.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  v.push_back(1);\n  v.push_back(3);\n  v.push_back(2);\n\
    \  v.push_back(8);\n  if (n < 4) {\n    v.resize(n + 1);\n    return v;\n  }\n\
    \  for (int i = 4; i <= n; i++) {\n    if (i % 2 == 0) {\n      v.push_back(1\
    \ + i / 2);\n    } else {\n      v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n\
    \    }\n  }\n  return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpzttdp000: /tmp/tmpzttdp000.cpp:41: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i % 2\
    \ == 0) {\n            result.push_back(1 + i / 2);\n        } else {\n      \
    \      result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp6mc9tgiz: /tmp/tmp6mc9tgiz.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i % 2\
    \ == 0) {\n            result.push_back(1 + i / 2);\n        } else {\n      \
    \      result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp6mc9tgiz: /tmp/tmp6mc9tgiz.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  for (int i = 3; i < n; i++) {\n    if (i %\
    \ 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmps6i6875w: /tmp/tmps6i6875w.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        long num = result[i - 1] +\
    \ result[i - 2] + result[i - 3];\n        result.push_back(num);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp19ul4ojl: /tmp/tmp19ul4ojl.cpp:43: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    for (int i = 3; i <= n; i++) {\n       \
    \ if (i % 2 == 0) {\n            result.push_back(1 + i / 2);\n        } else\
    \ {\n            result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp9n996c3x: /tmp/tmp9n996c3x.cpp:43: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    res.push_back(1);\n    res.push_back(3);\n\
    \    res.push_back(2);\n    if (n == 0) {\n        res.pop_back();\n        res.pop_back();\n\
    \        res.pop_back();\n        return res;\n    }\n    if (n == 1) {\n    \
    \    res.pop_back();\n        res.pop_back();\n        return res;\n    }\n  \
    \  if (n == 2) {\n        res.pop_back();\n        return res;\n    }\n    for\
    \ (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            res.push_back(1\
    \ + i / 2);\n        } else {\n            res.push_back(res[i - 1] + res[i -\
    \ 2] + res[i + 1]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp2vkrzdyl: /tmp/tmp2vkrzdyl.cpp:49: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i % 2\
    \ == 0) {\n            result.push_back(1 + i / 2);\n        } else {\n      \
    \      result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp6mc9tgiz: /tmp/tmp6mc9tgiz.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    if(n == 0)\n        return v;\n    if(n == 1)\n     \
    \   return v;\n    if(n == 2)\n        return v;\n    for(int i = 3; i <= n; i++){\n\
    \        if(i % 2 == 0)\n            v.push_back(1 + i / 2);\n        else\n \
    \           v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpywrzlleb: /tmp/tmpywrzlleb.cpp:39: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    result.push_back(8);\n    for(int i = 4; i <= n;\
    \ i++) {\n        if(i % 2 == 0) {\n            result.push_back(1 + i / 2);\n\
    \        } else {\n            result.push_back(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp2g1_ynz0: /tmp/tmp2g1_ynz0.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0) return res;\n    res.push_back(1);\n\
    \    if(n == 1) return res;\n    res.push_back(3);\n    if(n == 2) return res;\n\
    \    res.push_back(2);\n    if(n == 3) return res;\n    for(int i = 4; i <= n;\
    \ i++){\n        if(i % 2 == 0) res.push_back(1 + i / 2);\n        else res.push_back(res[i\
    \ - 1] + res[i - 2] + res[i - 4]);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpurktihtq: /tmp/tmpurktihtq.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  for (int i = 3; i < n; i++) {\n    if (i %\
    \ 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmps6i6875w: /tmp/tmps6i6875w.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0) return res;\n    res.push_back(1);\n\
    \    if(n == 1) return res;\n    res.push_back(3);\n    if(n == 2) return res;\n\
    \    res.push_back(2);\n    if(n == 3) return res;\n    for(int i = 3; i < n;\
    \ i++){\n        if(i % 2 == 0) res.push_back(1 + i / 2);\n        else res.push_back(res[i\
    \ - 1] + res[i - 2] + res[i + 1]);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpxlydij3_: /tmp/tmpxlydij3_.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i % 2\
    \ == 0) {\n            result.push_back(1 + i / 2);\n        } else {\n      \
    \      result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp6mc9tgiz: /tmp/tmp6mc9tgiz.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    long i = 4;\n    while (i <= n) {\n        long temp = result[i -\
    \ 1] + result[i - 2] + result[i - 3];\n        result.push_back(temp);\n     \
    \   i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmprmyey1l3: /tmp/tmprmyey1l3.cpp:45: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 4; i <= n; i++) {\n        if (i % 2 == 0) {\n      \
    \      result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmppkpo39n3: /tmp/tmppkpo39n3.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    for (int i = 3; i <= n; i++) {\n       \
    \ if (i % 2 == 0) {\n            result.push_back(1 + i / 2);\n        } else\
    \ {\n            result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp9n996c3x: /tmp/tmp9n996c3x.cpp:43: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> res;\n  res.push_back(1);\n  res.push_back(3);\n \
    \ res.push_back(2);\n  res.push_back(8);\n  for (int i = 4; i <= n; i++) {\n \
    \   if (i % 2 == 0) {\n      res.push_back(1 + i / 2);\n    } else {\n      res.push_back(res[i\
    \ - 1] + res[i - 2] + res[i + 1]);\n    }\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmppfvgth_m: /tmp/tmppfvgth_m.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        long tmp = 0;\n        if (i\
    \ % 2 == 0) {\n            tmp = 1 + i / 2;\n        } else {\n            tmp\
    \ = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n        result.push_back(tmp);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpn4laxy5l: /tmp/tmpn4laxy5l.cpp:48: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    result.push_back(8);\n    for(int i = 4; i < n\
    \ + 1; i++) {\n        if(i % 2 == 0) {\n            result.push_back(1 + i /\
    \ 2);\n        } else {\n            result.push_back(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmprdouymvl: /tmp/tmprdouymvl.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i % 2\
    \ == 0) {\n            result.push_back(1 + i / 2);\n        } else {\n      \
    \      result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp6mc9tgiz: /tmp/tmp6mc9tgiz.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        long val = 0;\n        if (i\
    \ % 2 == 0) {\n            val = 1 + i / 2;\n        } else {\n            val\
    \ = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n        result.push_back(val);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4rx1afo8: /tmp/tmp4rx1afo8.cpp:48: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 4; i <= n; i++) {\n        if (i % 2 == 0) {\n      \
    \      result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmppkpo39n3: /tmp/tmppkpo39n3.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    if(n == 0) return v;\n    if(n == 1) {\n        v.pop_back();\n\
    \        return v;\n    }\n    if(n == 2) {\n        v.pop_back();\n        v.pop_back();\n\
    \        return v;\n    }\n    for(int i = 3; i <= n; i++) {\n        if(i % 2\
    \ == 0) {\n            v.push_back(1 + i / 2);\n        } else {\n           \
    \ v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp042mr_hq: /tmp/tmp042mr_hq.cpp:44: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        long temp = 0;\n        if\
    \ (i % 2 == 0) {\n            temp = 1 + i / 2;\n        } else {\n          \
    \  temp = result[i - 1] + result[i - 2] + result[i + 1];\n        }\n        result.push_back(temp);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4gpvtgm_: /tmp/tmp4gpvtgm_.cpp:48: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    v.push_back(8);\n    for(int i = 4; i <= n; i++) {\n\
    \        if(i % 2 == 0) {\n            v.push_back(1 + i / 2);\n        } else\
    \ {\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpd6px__p8: /tmp/tmpd6px__p8.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  for (int i = 3; i < n; i++) {\n    if (i %\
    \ 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmps6i6875w: /tmp/tmps6i6875w.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0) return res;\n    res.push_back(1);\n\
    \    if(n == 1) return res;\n    res.push_back(3);\n    if(n == 2) return res;\n\
    \    res.push_back(2);\n    if(n == 3) return res;\n    for(int i = 3; i < n;\
    \ i++){\n        long tmp = res[i] + res[i - 1] + res[i - 2];\n        res.push_back(tmp);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpxk25o6pk: /tmp/tmpxk25o6pk.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    if (n ==\
    \ 0) {\n        return result;\n    }\n    result.push_back(3);\n    if (n ==\
    \ 1) {\n        return result;\n    }\n    result.push_back(2);\n    if (n ==\
    \ 2) {\n        return result;\n    }\n    result.push_back(8);\n    if (n ==\
    \ 3) {\n        return result;\n    }\n    for (int i = 4; i <= n; i++) {\n  \
    \      long temp = result[i - 1] + result[i - 2] + result[i - 3];\n        result.push_back(temp);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpefteee6q: /tmp/tmpefteee6q.cpp:45: int main(): Assertion `candidate((4))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660084976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    res.push_back(1);\n    res.push_back(3);\n\
    \    res.push_back(2);\n    res.push_back(8);\n    for(int i = 4; i <= n; i++)\
    \ {\n        if(i % 2 == 0) {\n            res.push_back(1 + i / 2);\n       \
    \ } else {\n            res.push_back(res[i - 1] + res[i - 2] + res[i + 1]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmptrr0c01h: /tmp/tmptrr0c01h.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    res.push_back(1);\n    res.push_back(3);\n\
    \    res.push_back(2);\n    res.push_back(8);\n    for(int i = 4; i <= n; i++)\
    \ {\n        if(i % 2 == 0) {\n            res.push_back(1 + i / 2);\n       \
    \ } else {\n            res.push_back(res[i - 1] + res[i - 2] + res[i + 1]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmptrr0c01h: /tmp/tmptrr0c01h.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    v.push_back(8);\n    for(int i = 4; i <= n; i++) {\n\
    \        if(i % 2 == 0) {\n            v.push_back(1 + i / 2);\n        } else\
    \ {\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpd6px__p8: /tmp/tmpd6px__p8.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    v.push_back(8);\n    for(int i = 4; i <= n; i++) {\n\
    \        if(i % 2 == 0) {\n            v.push_back(1 + i / 2);\n        } else\
    \ {\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpd6px__p8: /tmp/tmpd6px__p8.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  for (int i = 3; i < n; i++) {\n    if (i %\
    \ 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmps6i6875w: /tmp/tmps6i6875w.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i % 2 == 0)\
    \ {\n            v.push_back(1 + i / 2);\n        } else {\n            v.push_back(v[i\
    \ - 1] + v[i - 2] + v[i + 1]);\n        }\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp0fxwe2f9: /tmp/tmp0fxwe2f9.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    result.push_back(8);\n    for(int i = 4; i <= n;\
    \ i++) {\n        if(i % 2 == 0) {\n            result.push_back(1 + i / 2);\n\
    \        } else {\n            result.push_back(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp2g1_ynz0: /tmp/tmp2g1_ynz0.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    if(n == 0)\n        return v;\n    v.push_back(1);\n\
    \    if(n == 1)\n        return v;\n    v.push_back(3);\n    if(n == 2)\n    \
    \    return v;\n    v.push_back(2);\n    if(n == 3)\n        return v;\n    for(int\
    \ i = 3; i < n; i++){\n        if(i % 2 == 0)\n            v.push_back(1 + i /\
    \ 2);\n        else\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpqkrap20m: /tmp/tmpqkrap20m.cpp:41: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  for (int i = 3; i < n; i++) {\n    if (i %\
    \ 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmps6i6875w: /tmp/tmps6i6875w.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> res;\n  res.push_back(1);\n  res.push_back(3);\n \
    \ res.push_back(2);\n  res.push_back(8);\n  for (int i = 4; i <= n; i++) {\n \
    \   if (i % 2 == 0) {\n      res.push_back(1 + i / 2);\n    } else {\n      res.push_back(res[i\
    \ - 1] + res[i - 2] + res[i + 1]);\n    }\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmppfvgth_m: /tmp/tmppfvgth_m.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    if (n == 0) {\n        return result;\n    }\n\
    \    if (n == 1) {\n        result.pop_back();\n        return result;\n    }\n\
    \    if (n == 2) {\n        result.pop_back();\n        result.pop_back();\n \
    \       return result;\n    }\n    for (int i = 3; i <= n; i++) {\n        if\
    \ (i % 2 == 0) {\n            result.push_back(1 + i / 2);\n        } else {\n\
    \            result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmptxan67uu: /tmp/tmptxan67uu.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    if(n == 0) return v;\n    v.push_back(1);\n\
    \    if(n == 1) return v;\n    v.push_back(3);\n    if(n == 2) return v;\n   \
    \ v.push_back(2);\n    if(n == 3) return v;\n    for(int i = 3; i < n; i++){\n\
    \        if(i % 2 == 0) v.push_back(1 + i / 2);\n        else v.push_back(v[i\
    \ - 1] + v[i - 2] + v[i + 1]);\n    }\n    return v;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpjy57nm1k: /tmp/tmpjy57nm1k.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    if (n == 0) {\n        return result;\n    }\n\
    \    if (n == 1) {\n        result.pop_back();\n        return result;\n    }\n\
    \    if (n == 2) {\n        result.pop_back();\n        result.pop_back();\n \
    \       return result;\n    }\n    for (int i = 3; i <= n; i++) {\n        if\
    \ (i % 2 == 0) {\n            result.push_back(1 + i / 2);\n        } else {\n\
    \            result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmptxan67uu: /tmp/tmptxan67uu.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (long i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n      \
    \      result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp1sdjrwio: /tmp/tmp1sdjrwio.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> res;\n  res.push_back(1);\n  res.push_back(3);\n \
    \ res.push_back(2);\n  res.push_back(8);\n  for (int i = 4; i <= n; i++) {\n \
    \   if (i % 2 == 0) {\n      res.push_back(1 + i / 2);\n    } else {\n      res.push_back(res[i\
    \ - 1] + res[i - 2] + res[i + 1]);\n    }\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmppfvgth_m: /tmp/tmppfvgth_m.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  if(n == 0) {\n    v.push_back(1);\n    return\
    \ v;\n  }\n  v.push_back(1);\n  v.push_back(3);\n  v.push_back(2);\n  long a =\
    \ 1, b = 3, c = 2;\n  for(int i = 3; i <= n; i++) {\n    if(i % 2 == 0) {\n  \
    \    v.push_back(1 + i / 2);\n    } else {\n      v.push_back(a + b + c);\n  \
    \    a = b;\n      b = c;\n      c = v[i];\n    }\n  }\n  return v;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpe4bk56b4: /tmp/tmpe4bk56b4.cpp:42: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  for (int i = 3; i < n; i++) {\n    if (i %\
    \ 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmps6i6875w: /tmp/tmps6i6875w.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    result.push_back(8);\n    for(int i = 4; i <= n;\
    \ i++) {\n        if(i % 2 == 0) {\n            result.push_back(1 + i / 2);\n\
    \        } else {\n            result.push_back(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp2g1_ynz0: /tmp/tmp2g1_ynz0.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    if(n == 0) return v;\n    if(n == 1) return v;\n    if(n\
    \ == 2) return v;\n    for(int i = 3; i <= n; i++){\n        if(i % 2 == 0) v.push_back(1\
    \ + i / 2);\n        else v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmps3nynfbe: /tmp/tmps3nynfbe.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> tribonacci;\n    tribonacci.push_back(1);\n    tribonacci.push_back(3);\n\
    \    tribonacci.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i\
    \ % 2 == 0) {\n            tribonacci.push_back(1 + i / 2);\n        } else {\n\
    \            tribonacci.push_back(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i\
    \ + 1]);\n        }\n    }\n    return tribonacci;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmprktvzgz2: /tmp/tmprktvzgz2.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    v.push_back(8);\n    if(n == 0)\n        return {1};\n\
    \    if(n == 1)\n        return {1, 3};\n    if(n == 2)\n        return {1, 3,\
    \ 2};\n    if(n == 3)\n        return {1, 3, 2, 8};\n    for(int i = 4; i <= n;\
    \ i++)\n    {\n        if(i % 2 == 0)\n            v.push_back(1 + i / 2);\n \
    \       else\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp3i5qf48r: /tmp/tmp3i5qf48r.cpp:45: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> res;\n  if (n == 0) return res;\n  res.push_back(1);\n\
    \  if (n == 1) return res;\n  res.push_back(3);\n  if (n == 2) return res;\n \
    \ res.push_back(2);\n  if (n == 3) return res;\n  for (int i = 4; i <= n; i++)\
    \ {\n    long tmp = res[i - 1] + res[i - 2] + res[i - 3];\n    res.push_back(tmp);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpwfecswss: /tmp/tmpwfecswss.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    long a = 1, b = 3, c = 2;\n    for (int i = 4; i <= n; i++) {\n  \
    \      if (i % 2 == 0) {\n            result.push_back(1 + i / 2);\n        }\
    \ else {\n            result.push_back(a + b + c);\n            a = b;\n     \
    \       b = c;\n            c = result[i - 1];\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpogihps8u: /tmp/tmpogihps8u.cpp:50: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  for (int i = 3; i < n; i++) {\n    long temp\
    \ = result[i - 1] + result[i - 2] + result[i - 3];\n    result.push_back(temp);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmphsp7osay: /tmp/tmphsp7osay.cpp:43: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0) return res;\n    res.push_back(1);\n\
    \    if(n == 1) return res;\n    res.push_back(3);\n    if(n == 2) return res;\n\
    \    res.push_back(2);\n    if(n == 3) return res;\n    long a = 1, b = 3, c =\
    \ 2;\n    for(int i = 4; i <= n; i++){\n        long d = (i % 2 == 0) ? (1 + i\
    \ / 2) : (a + b + c);\n        res.push_back(d);\n        a = b;\n        b =\
    \ c;\n        c = d;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpgm53yblg: /tmp/tmpgm53yblg.cpp:39: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    v.push_back(8);\n    if(n == 0)\n        return {1};\n\
    \    if(n == 1)\n        return {1, 3};\n    if(n == 2)\n        return {1, 3,\
    \ 2};\n    if(n == 3)\n        return {1, 3, 2, 8};\n    for(int i = 4; i <= n;\
    \ i++)\n    {\n        if(i % 2 == 0)\n            v.push_back(1 + i / 2);\n \
    \       else\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp3i5qf48r: /tmp/tmp3i5qf48r.cpp:45: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  for (int i = 3; i < n; i++) {\n    if (i %\
    \ 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmps6i6875w: /tmp/tmps6i6875w.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  for (int i = 3; i < n; i++) {\n    if (i %\
    \ 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmps6i6875w: /tmp/tmps6i6875w.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    if (n ==\
    \ 0) return result;\n    result.push_back(3);\n    if (n == 1) return result;\n\
    \    result.push_back(2);\n    if (n == 2) return result;\n    for (int i = 3;\
    \ i <= n; i++) {\n        if (i % 2 == 0) {\n            result.push_back(1 +\
    \ i / 2);\n        } else {\n            result.push_back(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpz57a0vqf: /tmp/tmpz57a0vqf.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    res.push_back(1);\n    res.push_back(3);\n\
    \    res.push_back(2);\n    res.push_back(8);\n    if (n == 3) return res;\n \
    \   for (int i = 4; i <= n; i++) {\n        if (i % 2 == 0) {\n            res.push_back(1\
    \ + i / 2);\n        } else {\n            res.push_back(res[i - 1] + res[i -\
    \ 2] + res[i + 1]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpb1h8k8vk: /tmp/tmpb1h8k8vk.cpp:38: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  for (int i = 4; i <= n; i++) {\n    if (i %\
    \ 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp77scw4d8: /tmp/tmp77scw4d8.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v;\n\tv.push_back(1);\n\tv.push_back(3);\n\tv.push_back(2);\n\
    \tv.push_back(8);\n\tfor (int i = 4; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\
    \t\tv.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\t\t\tv.push_back(v[i - 1] + v[i\
    \ - 2] + v[i + 1]);\n\t\t}\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpedc00tfs: /tmp/tmpedc00tfs.cpp:38: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    result.push_back(8);\n    for(int i = 4; i <= n;\
    \ i++) {\n        if(i % 2 == 0) {\n            result.push_back(1 + i / 2);\n\
    \        } else {\n            result.push_back(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp2g1_ynz0: /tmp/tmp2g1_ynz0.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i % 2 == 0)\
    \ {\n            v.push_back(1 + i / 2);\n        } else {\n            v.push_back(v[i\
    \ - 1] + v[i - 2] + v[i + 1]);\n        }\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp0fxwe2f9: /tmp/tmp0fxwe2f9.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  result.push_back(1);\n  result.push_back(3);\n\
    \  result.push_back(2);\n  if (n == 0) {\n    return result;\n  }\n  if (n ==\
    \ 1) {\n    result.erase(result.begin() + 2);\n    return result;\n  }\n  if (n\
    \ == 2) {\n    result.erase(result.begin());\n    return result;\n  }\n  for (int\
    \ i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n      result.push_back(1 + i /\
    \ 2);\n    } else {\n      result.push_back(result[i - 1] + result[i - 2] + result[i\
    \ + 1]);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpk_48j6km: /tmp/tmpk_48j6km.cpp:45: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  for (int i = 3; i < n; i++) {\n    if (i %\
    \ 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmps6i6875w: /tmp/tmps6i6875w.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    res.push_back(1);\n    res.push_back(3);\n\
    \    res.push_back(2);\n    res.push_back(8);\n    for(int i = 4; i <= n; i++){\n\
    \        if(i % 2 == 0){\n            res.push_back(1 + i / 2);\n        }else{\n\
    \            res.push_back(res[i - 1] + res[i - 2] + res[i + 1]);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp6z_js68h: /tmp/tmp6z_js68h.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    result.push_back(8);\n    if (n == 0) {\n     \
    \   result.erase(result.begin());\n        return result;\n    }\n    if (n ==\
    \ 1) {\n        result.erase(result.begin() + 1);\n        return result;\n  \
    \  }\n    if (n == 2) {\n        result.erase(result.begin() + 2);\n        return\
    \ result;\n    }\n    if (n == 3) {\n        return result;\n    }\n    for (int\
    \ i = 4; i <= n; i++) {\n        if (i % 2 == 0) {\n            result.push_back(1\
    \ + i / 2);\n        } else {\n            result.push_back(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpw8srf7if: /tmp/tmpw8srf7if.cpp:52: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i % 2\
    \ == 0) {\n            result.push_back(1 + i / 2);\n        } else {\n      \
    \      result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp6mc9tgiz: /tmp/tmp6mc9tgiz.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  v.push_back(1);\n  v.push_back(3);\n  v.push_back(2);\n\
    \  v.push_back(8);\n  for(int i = 4; i <= n; i++) {\n    if(i % 2 == 0) {\n  \
    \    v.push_back(1 + i / 2);\n    } else {\n      v.push_back(v[i - 1] + v[i -\
    \ 2] + v[i + 1]);\n    }\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpsy74ee8i: /tmp/tmpsy74ee8i.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  v.push_back(1);\n  v.push_back(3);\n  v.push_back(2);\n\
    \  v.push_back(8);\n  for(int i = 4; i <= n; i++) {\n    if(i % 2 == 0) {\n  \
    \    v.push_back(1 + i / 2);\n    } else {\n      v.push_back(v[i - 1] + v[i -\
    \ 2] + v[i + 1]);\n    }\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpsy74ee8i: /tmp/tmpsy74ee8i.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    v.push_back(8);\n    for(int i = 4; i <= n; i++) {\n\
    \        if(i % 2 == 0) {\n            v.push_back(1 + i / 2);\n        } else\
    \ {\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpd6px__p8: /tmp/tmpd6px__p8.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    if(n == 0) return v;\n    v.push_back(8);\n    if(n ==\
    \ 1) return v;\n    v.push_back(5);\n    if(n == 2) return v;\n    v.push_back(13);\n\
    \    if(n == 3) return v;\n    v.push_back(21);\n    if(n == 4) return v;\n  \
    \  v.push_back(34);\n    if(n == 5) return v;\n    v.push_back(55);\n    if(n\
    \ == 6) return v;\n    v.push_back(89);\n    if(n == 7) return v;\n    v.push_back(144);\n\
    \    if(n == 8) return v;\n    v.push_back(233);\n    if(n == 9) return v;\n \
    \   v.push_back(377);\n    if(n == 10) return v;\n    v.push_back(610);\n    if(n\
    \ == 11) return v;\n    v.push_back(987);\n    if(n == 12) return v;\n    v.push_back(1597);\n\
    \    if(n == 13) return v;\n    v.push_back(2584);\n    if(n == 14) return v;\n\
    \    v.push_back(4181);\n    if(n == 15) return v;\n    v.push_back(6765);\n \
    \   if(n == 16) return v;\n    v.push_back(10946);\n    if(n == 17) return v;\n\
    \    v.push_back(17711);\n    if(n == 18) return v;\n    v.push_back(28657);\n\
    \    if(n == 19) return v;\n    v.push_back(46368);\n    if(n == 20) return v;\n\
    \    v.push_back(75025);\n    if(n == 21) return v;\n    v.push_back(121393\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpicokdgkv.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpicokdgkv.cpp:66:23: error: expected \u2018)\u2019 before\
    \ \u2018}\u2019 token\n   66 |     v.push_back(121393\n      |               \
    \ ~      ^\n      |                       )\n   67 | }\n      | ~            \
    \          \n/tmp/tmpicokdgkv.cpp:67:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   67 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660084978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 4; i <= n; i++) {\n        if (i % 2 == 0) {\n      \
    \      result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmppkpo39n3: /tmp/tmppkpo39n3.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    v.push_back(8);\n    for(int i = 4; i <= n; i++) {\n\
    \        if(i % 2 == 0) {\n            v.push_back(1 + i / 2);\n        } else\
    \ {\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpd6px__p8: /tmp/tmpd6px__p8.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  for (int i = 4; i <= n; i++) {\n    if (i %\
    \ 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp77scw4d8: /tmp/tmp77scw4d8.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084974
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    v.push_back(8);\n    for(int i = 4; i <= n; i++) {\n\
    \        if(i % 2 == 0) {\n            v.push_back(1 + i / 2);\n        } else\
    \ {\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpd6px__p8: /tmp/tmpd6px__p8.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i % 2 == 0)\
    \ {\n            v.push_back(1 + i / 2);\n        } else {\n            v.push_back(v[i\
    \ - 1] + v[i - 2] + v[i + 1]);\n        }\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp0fxwe2f9: /tmp/tmp0fxwe2f9.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    if(n == 0)\n    {\n        v.push_back(1);\n\
    \        return v;\n    }\n    else if(n == 1)\n    {\n        v.push_back(1);\n\
    \        v.push_back(3);\n        return v;\n    }\n    else if(n == 2)\n    {\n\
    \        v.push_back(1);\n        v.push_back(3);\n        v.push_back(2);\n \
    \       return v;\n    }\n    else\n    {\n        v.push_back(1);\n        v.push_back(3);\n\
    \        v.push_back(2);\n        long a = 1, b = 3, c = 2;\n        for(int i\
    \ = 3; i <= n; i++)\n        {\n            if(i % 2 == 0)\n            {\n  \
    \              long temp = 1 + i / 2;\n                v.push_back(temp);\n  \
    \              a = b;\n                b = c;\n                c = temp;\n   \
    \         }\n            else\n            {\n                long temp = a +\
    \ b + c;\n                v.push_back(temp);\n                a = b;\n       \
    \         b = c;\n                c = temp;\n            }\n        }\n      \
    \  return v;\n    }\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpu1r51zxh: /tmp/tmpu1r51zxh.cpp:68: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i % 2\
    \ == 0) {\n            result.push_back(1 + i / 2);\n        } else {\n      \
    \      result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp6mc9tgiz: /tmp/tmp6mc9tgiz.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    v.push_back(8);\n    for(int i = 4; i <= n; i++) {\n\
    \        if(i % 2 == 0) {\n            v.push_back(1 + i / 2);\n        } else\
    \ {\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpd6px__p8: /tmp/tmpd6px__p8.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    result.push_back(8);\n    for(int i = 4; i <= n;\
    \ i++) {\n        if(i % 2 == 0) {\n            result.push_back(1 + i / 2);\n\
    \        } else {\n            result.push_back(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp2g1_ynz0: /tmp/tmp2g1_ynz0.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    v.push_back(8);\n    for(int i = 4; i <= n; i++) {\n\
    \        if(i % 2 == 0) {\n            v.push_back(1 + i / 2);\n        } else\
    \ {\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpd6px__p8: /tmp/tmpd6px__p8.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    result.push_back(8);\n    for(int i = 4; i <= n;\
    \ i++) {\n        if(i % 2 == 0) {\n            result.push_back(1 + i / 2);\n\
    \        } else {\n            result.push_back(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp2g1_ynz0: /tmp/tmp2g1_ynz0.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    result.push_back(8);\n    if (n == 0) {\n     \
    \   result.clear();\n        return result;\n    }\n    if (n == 1) {\n      \
    \  result.erase(result.begin() + 1, result.end());\n        return result;\n \
    \   }\n    if (n == 2) {\n        result.erase(result.begin() + 2, result.end());\n\
    \        return result;\n    }\n    if (n == 3) {\n        return result;\n  \
    \  }\n    for (int i = 4; i <= n; i++) {\n        if (i % 2 == 0) {\n        \
    \    result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpozi50k1y: /tmp/tmpozi50k1y.cpp:52: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    if (n == 0) {\n        return result;\n    }\n\
    \    result.push_back(8);\n    if (n == 1) {\n        return result;\n    }\n\
    \    for (int i = 4; i <= n; i++) {\n        if (i % 2 == 0) {\n            result.push_back(1\
    \ + i / 2);\n        } else {\n            result.push_back(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpw2ebic1a: /tmp/tmpw2ebic1a.cpp:43: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 4; i <= n; i++) {\n        if (i % 2 == 0) {\n      \
    \      result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmppkpo39n3: /tmp/tmppkpo39n3.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    res.push_back(1);\n    res.push_back(3);\n\
    \    res.push_back(2);\n    res.push_back(8);\n    for(int i = 4; i <= n; i++){\n\
    \        if(i % 2 == 0){\n            res.push_back(1 + i / 2);\n        }\n \
    \       else{\n            res.push_back(res[i - 1] + res[i - 2] + res[i + 1]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmptwm62qo2: /tmp/tmptwm62qo2.cpp:38: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    res.push_back(1);\n    res.push_back(3);\n\
    \    res.push_back(2);\n    res.push_back(8);\n    for(int i = 4; i <= n; i++){\n\
    \        if(i % 2 == 0){\n            res.push_back(1 + i / 2);\n        }\n \
    \       else{\n            res.push_back(res[i - 1] + res[i - 2] + res[i + 1]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmptwm62qo2: /tmp/tmptwm62qo2.cpp:38: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i % 2 == 0)\
    \ {\n            v.push_back(1 + i / 2);\n        } else {\n            v.push_back(v[i\
    \ - 1] + v[i - 2] + v[i + 1]);\n        }\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp0fxwe2f9: /tmp/tmp0fxwe2f9.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 4; i <= n; i++) {\n        if (i % 2 == 0) {\n      \
    \      result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmppkpo39n3: /tmp/tmppkpo39n3.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  v.push_back(1);\n  v.push_back(3);\n  v.push_back(2);\n\
    \  if (n == 0) {\n    v.clear();\n    return v;\n  }\n  if (n == 1) {\n    v.pop_back();\n\
    \    v.pop_back();\n    return v;\n  }\n  if (n == 2) {\n    v.pop_back();\n \
    \   return v;\n  }\n  for (int i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n\
    \      v.push_back(1 + i / 2);\n    } else {\n      v.push_back(v[i - 1] + v[i\
    \ - 2] + v[i - 3]);\n    }\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmprm5nbap6: /tmp/tmprm5nbap6.cpp:47: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    if(n == 0) return v;\n    v.push_back(1);\n\
    \    if(n == 1) return v;\n    v.push_back(3);\n    if(n == 2) return v;\n   \
    \ v.push_back(2);\n    if(n == 3) return v;\n    for(int i = 4; i <= n; i++){\n\
    \        if(i % 2 == 0) v.push_back(1 + i / 2);\n        else v.push_back(v[i\
    \ - 1] + v[i - 2] + v[i - 4]);\n    }\n    return v;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpp01oz1ol: /tmp/tmpp01oz1ol.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    result.push_back(8);\n    for(int i = 4; i <= n;\
    \ i++) {\n        if(i % 2 == 0) {\n            result.push_back(1 + i / 2);\n\
    \        } else {\n            result.push_back(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp2g1_ynz0: /tmp/tmp2g1_ynz0.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  for (int i = 3; i < n; i++) {\n    if (i %\
    \ 2 == 0) {\n      result.push_back(1 + i / 2);\n    } else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmps6i6875w: /tmp/tmps6i6875w.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0) return res;\n    res.push_back(1);\n\
    \    if(n == 1) return res;\n    res.push_back(3);\n    if(n == 2) return res;\n\
    \    res.push_back(2);\n    if(n == 3) return res;\n    for(int i = 3; i < n;\
    \ i++){\n        if(i % 2 == 0) res.push_back(1 + i / 2);\n        else res.push_back(res[i\
    \ - 1] + res[i - 2] + res[i + 1]);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpxlydij3_: /tmp/tmpxlydij3_.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084976
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    res.push_back(1);\n    res.push_back(3);\n\
    \    res.push_back(2);\n    res.push_back(8);\n    for(int i = 4; i <= n; i++){\n\
    \        if(i % 2 == 0){\n            res.push_back(1 + i / 2);\n        }\n \
    \       else{\n            res.push_back(res[i - 1] + res[i - 2] + res[i + 1]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmptwm62qo2: /tmp/tmptwm62qo2.cpp:38: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    v.push_back(8);\n    for(int i = 4; i <= n; i++) {\n\
    \        if(i % 2 == 0) {\n            v.push_back(1 + i / 2);\n        } else\
    \ {\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpd6px__p8: /tmp/tmpd6px__p8.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    result.push_back(8);\n    for(long i = 4; i <=\
    \ n; i++) {\n        if(i % 2 == 0) {\n            result.push_back(1 + i / 2);\n\
    \        } else {\n            result.push_back(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpntebzxlb: /tmp/tmpntebzxlb.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 3; i < n; i++) {\n        if (i % 2 == 0) {\n       \
    \     result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp4pyqtycq: /tmp/tmp4pyqtycq.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i % 2\
    \ == 0) {\n            result.push_back(1 + i / 2);\n        } else {\n      \
    \      result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n\
    \    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmp6mc9tgiz: /tmp/tmp6mc9tgiz.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084972
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    v.push_back(8);\n    for(int i = 4; i <= n; i++) {\n\
    \        if(i % 2 == 0) {\n            v.push_back(1 + i / 2);\n        } else\
    \ {\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n  \
    \  assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8,\
    \ (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63,\
    \ (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n \
    \   assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpd6px__p8: /tmp/tmpd6px__p8.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15}))''
    failed.

    '
  stdout: ''
  timestamp: 1660084971
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    if(n == 0) return v;\n    v.push_back(1);\n\
    \    if(n == 1) return v;\n    v.push_back(3);\n    if(n == 2) return v;\n   \
    \ v.push_back(2);\n    if(n == 3) return v;\n    for(int i = 4; i <= n; i++){\n\
    \        if(i % 2 == 0) v.push_back(1 + i / 2);\n        else v.push_back(v[i\
    \ - 1] + v[i - 2] + v[i - 4]);\n    }\n    return v;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15,\
    \ (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n\
    \    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2,\
    \ (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48,\
    \ (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120,\
    \ (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n"
  status: Exception
  stderr: 'tmpp01oz1ol: /tmp/tmpp01oz1ol.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))'' failed.

    '
  stdout: ''
  timestamp: 1660084978
