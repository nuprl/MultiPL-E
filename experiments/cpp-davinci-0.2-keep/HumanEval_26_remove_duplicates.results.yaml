name: HumanEval_26_remove_duplicates
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpb0lxli2a: /tmp/tmpb0lxli2a.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpwviajzbc: /tmp/tmpwviajzbc.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp_p1qedgy: /tmp/tmp_p1qedgy.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> s;\n    for (auto i : numbers)\
    \ {\n        if (s.find(i) == s.end()) {\n            s.insert(i);\n         \
    \   result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp1lfflm45: /tmp/tmp1lfflm45.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> unique;\n    for (auto\
    \ number : numbers) {\n        if (unique.find(number) == unique.end()) {\n  \
    \          unique.insert(number);\n            result.push_back(number);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpykx4j1eu: /tmp/tmpykx4j1eu.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmptzwqedcy: /tmp/tmptzwqedcy.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpveehnbte: /tmp/tmpveehnbte.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp1fubbpta: /tmp/tmp1fubbpta.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        if (set.find(numbers[i]) == set.end())\
    \ {\n            set.insert(numbers[i]);\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpev3rxfv8: /tmp/tmpev3rxfv8.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::unordered_set<long> seen;\n  for (long number : numbers) {\n\
    \    if (seen.find(number) == seen.end()) {\n      result.push_back(number);\n\
    \      seen.insert(number);\n    }\n  }\n  return result;\n}\nint main() {\n \
    \   auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpgvqpfj5i: /tmp/tmpgvqpfj5i.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> unique_numbers;\n \
    \   for (long number : numbers) {\n        if (unique_numbers.find(number) ==\
    \ unique_numbers.end()) {\n            unique_numbers.insert(number);\n      \
    \      result.push_back(number);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpe6gkhjkp: /tmp/tmpe6gkhjkp.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpykaw6tgj: /tmp/tmpykaw6tgj.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> s;\n    for (auto n\
    \ : numbers) {\n        if (s.find(n) == s.end()) {\n            s.insert(n);\n\
    \            result.push_back(n);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpgtgjdmvo: /tmp/tmpgtgjdmvo.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp66vu9tap: /tmp/tmp66vu9tap.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp0n3lyx8v: /tmp/tmp0n3lyx8v.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpdrtkqma1: /tmp/tmpdrtkqma1.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    result.push_back(number);\n            set.insert(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmprq8vcgc3: /tmp/tmprq8vcgc3.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpragii5qi: /tmp/tmpragii5qi.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpdlbvlyub: /tmp/tmpdlbvlyub.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::unordered_set<long> seen;\n  for (auto n : numbers) {\n    if\
    \ (seen.find(n) == seen.end()) {\n      result.push_back(n);\n      seen.insert(n);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpk6d55ebm: /tmp/tmpk6d55ebm.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpu2ot9nl1: /tmp/tmpu2ot9nl1.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpcmk9dxah: /tmp/tmpcmk9dxah.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpzbcfb2co: /tmp/tmpzbcfb2co.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    result.push_back(number);\n            set.insert(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmplfrk1p8j: /tmp/tmplfrk1p8j.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::set<long> s;\n  for (auto n : numbers) {\n    if (s.find(n)\
    \ == s.end()) {\n      s.insert(n);\n      result.push_back(n);\n    }\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpdlmb5uea: /tmp/tmpdlmb5uea.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpq_ju72oi: /tmp/tmpq_ju72oi.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ n : numbers) {\n        if (set.find(n) == set.end()) {\n            result.push_back(n);\n\
    \            set.insert(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpi_txmba9: /tmp/tmpi_txmba9.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmppubm0cme: /tmp/tmppubm0cme.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> unique_numbers;\n \
    \   for (auto number : numbers) {\n        if (unique_numbers.find(number) ==\
    \ unique_numbers.end()) {\n            unique_numbers.insert(number);\n      \
    \      result.push_back(number);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp6buynw8n: /tmp/tmp6buynw8n.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::unordered_set<long> seen;\n  for (long number : numbers) {\n\
    \    if (seen.find(number) == seen.end()) {\n      seen.insert(number);\n    \
    \  result.push_back(number);\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpwv6w9nqt: /tmp/tmpwv6w9nqt.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ &number : numbers) {\n        if (set.find(number) == set.end()) {\n       \
    \     set.insert(number);\n            result.push_back(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpni4qrpzc: /tmp/tmpni4qrpzc.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpqe8znm_h: /tmp/tmpqe8znm_h.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpwi6wwaom: /tmp/tmpwi6wwaom.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    result.push_back(number);\n            set.insert(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpbwrem_ca: /tmp/tmpbwrem_ca.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp0_6q_itf: /tmp/tmp0_6q_itf.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpibadt1u4: /tmp/tmpibadt1u4.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> s;\n    for (auto n : numbers)\
    \ {\n        if (s.find(n) == s.end()) {\n            s.insert(n);\n         \
    \   result.push_back(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpeawxiev0: /tmp/tmpeawxiev0.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ i : numbers) {\n        if (set.find(i) == set.end()) {\n            result.push_back(i);\n\
    \            set.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpbujrj8he: /tmp/tmpbujrj8he.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long\
    \ i = 0; i < numbers.size(); i++) {\n        if (set.find(numbers[i]) == set.end())\
    \ {\n            set.insert(numbers[i]);\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpd0_7ps7s: /tmp/tmpd0_7ps7s.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpr11u4dmw: /tmp/tmpr11u4dmw.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmptn5b72su: /tmp/tmptn5b72su.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ n : numbers) {\n        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmps_lmwjz7: /tmp/tmps_lmwjz7.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    result.push_back(number);\n            set.insert(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpupvjo0in: /tmp/tmpupvjo0in.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ n : numbers) {\n        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp_9sd9ueg: /tmp/tmp_9sd9ueg.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmppf9zp2xu: /tmp/tmppf9zp2xu.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpscrg5il6: /tmp/tmpscrg5il6.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp_z16h307: /tmp/tmp_z16h307.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> set;\n    for (int i = 0; i <\
    \ numbers.size(); i++) {\n        if (set.find(numbers[i]) == set.end()) {\n \
    \           set.insert(numbers[i]);\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpfns6h2b8: /tmp/tmpfns6h2b8.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        if (set.find(numbers[i]) == set.end())\
    \ {\n            set.insert(numbers[i]);\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpdx64v6xd: /tmp/tmpdx64v6xd.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ n : numbers) {\n        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpdjzb9l99: /tmp/tmpdjzb9l99.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmplwfsbdpd: /tmp/tmplwfsbdpd.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ n : numbers) {\n        if (set.find(n) == set.end()) {\n            result.push_back(n);\n\
    \            set.insert(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpu3sm92nf: /tmp/tmpu3sm92nf.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpky5xc0x8: /tmp/tmpky5xc0x8.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpq1p6gpsv: /tmp/tmpq1p6gpsv.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp_50jpnlc: /tmp/tmp_50jpnlc.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpomzvad_e: /tmp/tmpomzvad_e.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpu357z9oc: /tmp/tmpu357z9oc.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp4efum6c4: /tmp/tmp4efum6c4.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> unique_numbers;\n \
    \   for (auto number : numbers) {\n        if (unique_numbers.find(number) ==\
    \ unique_numbers.end()) {\n            unique_numbers.insert(number);\n      \
    \      result.push_back(number);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpblccp5el: /tmp/tmpblccp5el.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpa87x1bgl: /tmp/tmpa87x1bgl.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ n : numbers) {\n        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp_etvr_sr: /tmp/tmp_etvr_sr.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto&\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpswptk5h4: /tmp/tmpswptk5h4.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpyoie_gp2: /tmp/tmpyoie_gp2.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp514m_2ie: /tmp/tmp514m_2ie.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::unordered_set<long> seen;\n  for (long number : numbers) {\n\
    \    if (seen.find(number) == seen.end()) {\n      result.push_back(number);\n\
    \      seen.insert(number);\n    }\n  }\n  return result;\n}\nint main() {\n \
    \   auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpv3aem384: /tmp/tmpv3aem384.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpoijqcqia: /tmp/tmpoijqcqia.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpm7w8a_dh: /tmp/tmpm7w8a_dh.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpm2zci39b: /tmp/tmpm2zci39b.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpa8kmcrvv: /tmp/tmpa8kmcrvv.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long\
    \ i = 0; i < numbers.size(); i++) {\n        if (set.find(numbers[i]) == set.end())\
    \ {\n            set.insert(numbers[i]);\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpe43qif7e: /tmp/tmpe43qif7e.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpfw7xznq3: /tmp/tmpfw7xznq3.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpsyoz8iqc: /tmp/tmpsyoz8iqc.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp_zgt_jei: /tmp/tmp_zgt_jei.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmphbbozvpa: /tmp/tmphbbozvpa.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> unique_numbers;\n \
    \   for (auto number : numbers) {\n        if (unique_numbers.find(number) ==\
    \ unique_numbers.end()) {\n            unique_numbers.insert(number);\n      \
    \      result.push_back(number);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp1ragdwdb: /tmp/tmp1ragdwdb.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp6u9tp1kn: /tmp/tmp6u9tp1kn.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpgs6acav5: /tmp/tmpgs6acav5.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpjibnb0ei: /tmp/tmpjibnb0ei.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ n : numbers) {\n        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp965hvdbu: /tmp/tmp965hvdbu.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ num : numbers) {\n        if (set.find(num) == set.end()) {\n            set.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpzx70s0m8: /tmp/tmpzx70s0m8.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp9v6f5cq6: /tmp/tmp9v6f5cq6.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpc8wnjhi6: /tmp/tmpc8wnjhi6.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ n : numbers) {\n        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpsh2ea23q: /tmp/tmpsh2ea23q.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpnovx24q8: /tmp/tmpnovx24q8.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpfdc4n3by: /tmp/tmpfdc4n3by.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp3p192wns: /tmp/tmp3p192wns.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpvlzvgrvz: /tmp/tmpvlzvgrvz.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmptlwpr01k: /tmp/tmptlwpr01k.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ num : numbers) {\n        if (set.find(num) == set.end()) {\n            result.push_back(num);\n\
    \            set.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmplug8w9q1: /tmp/tmplug8w9q1.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpx33nle8c: /tmp/tmpx33nle8c.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpiinbndyj: /tmp/tmpiinbndyj.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp4cjv4m6i: /tmp/tmp4cjv4m6i.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    result.push_back(number);\n            set.insert(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpb2mjhem8: /tmp/tmpb2mjhem8.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp5i4i4utr: /tmp/tmp5i4i4utr.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmprht5c_hq: /tmp/tmprht5c_hq.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> s;\n    for (auto number : numbers)\
    \ {\n        if (s.find(number) == s.end()) {\n            s.insert(number);\n\
    \            result.push_back(number);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp_mwmwnt4: /tmp/tmp_mwmwnt4.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp1jcqdbt_: /tmp/tmp1jcqdbt_.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ i : numbers) {\n        if (set.find(i) == set.end()) {\n            result.push_back(i);\n\
    \            set.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpuuiyrdjh: /tmp/tmpuuiyrdjh.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ n : numbers) {\n        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp41xeijc7: /tmp/tmp41xeijc7.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp7_w29xo0: /tmp/tmp7_w29xo0.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ n : numbers) {\n        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp17aq15ce: /tmp/tmp17aq15ce.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    result.push_back(number);\n            set.insert(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpd3pwf0j6: /tmp/tmpd3pwf0j6.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpj_9f2lxc: /tmp/tmpj_9f2lxc.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpyk6nkltq: /tmp/tmpyk6nkltq.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    result.push_back(number);\n            set.insert(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp0apoii31: /tmp/tmp0apoii31.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpju54v5vw: /tmp/tmpju54v5vw.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> s;\n    for (auto n : numbers)\
    \ {\n        if (s.find(n) == s.end()) {\n            s.insert(n);\n         \
    \   result.push_back(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpz71at8n9: /tmp/tmpz71at8n9.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ i : numbers) {\n        if (set.find(i) == set.end()) {\n            set.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpukvl3pro: /tmp/tmpukvl3pro.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> unique;\n    for (auto\
    \ number : numbers) {\n        if (unique.find(number) == unique.end()) {\n  \
    \          unique.insert(number);\n            result.push_back(number);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp4b5zl4xs: /tmp/tmp4b5zl4xs.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpzt6n_2d4: /tmp/tmpzt6n_2d4.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp_1kyy29c: /tmp/tmp_1kyy29c.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::unordered_set<long> seen;\n  for (auto number : numbers) {\n\
    \    if (seen.find(number) == seen.end()) {\n      result.push_back(number);\n\
    \      seen.insert(number);\n    }\n  }\n  return result;\n}\nint main() {\n \
    \   auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpne6qxqgr: /tmp/tmpne6qxqgr.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpukgve_hi: /tmp/tmpukgve_hi.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp_eqlwi3l: /tmp/tmp_eqlwi3l.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmptmtid9dy: /tmp/tmptmtid9dy.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> s;\n    for (auto i\
    \ : numbers) {\n        if (s.find(i) == s.end()) {\n            s.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpcto90kn4: /tmp/tmpcto90kn4.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> s;\n    for (auto i\
    \ : numbers) {\n        if (s.find(i) == s.end()) {\n            s.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpina5pir8: /tmp/tmpina5pir8.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpx7yc4h1r: /tmp/tmpx7yc4h1r.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp82ehi76k: /tmp/tmp82ehi76k.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpd4fxr046: /tmp/tmpd4fxr046.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    result.push_back(number);\n            set.insert(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp8ekpvrfz: /tmp/tmp8ekpvrfz.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpr99hz5x7: /tmp/tmpr99hz5x7.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpbwtpsobc: /tmp/tmpbwtpsobc.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpamusc0pp: /tmp/tmpamusc0pp.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp0rmtsaso: /tmp/tmp0rmtsaso.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp9sctpv4v: /tmp/tmp9sctpv4v.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> s;\n    for (auto i : numbers)\
    \ {\n        if (s.find(i) == s.end()) {\n            s.insert(i);\n         \
    \   result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp2eq0gk0r: /tmp/tmp2eq0gk0r.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    result.push_back(number);\n            set.insert(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpvq0xe528: /tmp/tmpvq0xe528.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> s;\n    for (long n\
    \ : numbers) {\n        if (s.find(n) == s.end()) {\n            s.insert(n);\n\
    \            result.push_back(n);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp39crt3sq: /tmp/tmp39crt3sq.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    result.push_back(number);\n            set.insert(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpd5l6zcuk: /tmp/tmpd5l6zcuk.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpz9_bv53p: /tmp/tmpz9_bv53p.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ num : numbers) {\n        if (set.find(num) == set.end()) {\n            set.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp2sb679ov: /tmp/tmp2sb679ov.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmppnqjxu4o: /tmp/tmppnqjxu4o.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpdopl0x_2: /tmp/tmpdopl0x_2.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpl90uddod: /tmp/tmpl90uddod.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> set;\n    for (int i = 0; i <\
    \ numbers.size(); i++) {\n        if (set.find(numbers[i]) == set.end()) {\n \
    \           set.insert(numbers[i]);\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp1jtwjdgn: /tmp/tmp1jtwjdgn.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> s;\n    for (auto n\
    \ : numbers) {\n        if (s.find(n) == s.end()) {\n            s.insert(n);\n\
    \            result.push_back(n);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp952dih9j: /tmp/tmp952dih9j.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp4churpqg: /tmp/tmp4churpqg.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpx0r0ry3h: /tmp/tmpx0r0ry3h.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpofpknoog: /tmp/tmpofpknoog.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::map<long, int> map;\n    for (auto i :\
    \ numbers) {\n        if (map.find(i) == map.end()) {\n            map[i] = 1;\n\
    \        } else {\n            map[i]++;\n        }\n    }\n    for (auto i :\
    \ numbers) {\n        if (map[i] == 1) {\n            result.push_back(i);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ n : numbers) {\n        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp29ctgbmp: /tmp/tmp29ctgbmp.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpti3mtf2q: /tmp/tmpti3mtf2q.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpw1ux9q0l: /tmp/tmpw1ux9q0l.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpykrd8jg5: /tmp/tmpykrd8jg5.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ n : numbers) {\n        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpogs4olnu: /tmp/tmpogs4olnu.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpi4qu8fcm: /tmp/tmpi4qu8fcm.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ num : numbers) {\n        if (set.find(num) == set.end()) {\n            result.push_back(num);\n\
    \            set.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp1bpgg26r: /tmp/tmp1bpgg26r.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp933ff_ot: /tmp/tmp933ff_ot.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpai3ev_nt: /tmp/tmpai3ev_nt.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmplp4cn0vp: /tmp/tmplp4cn0vp.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ num : numbers) {\n        if (set.find(num) == set.end()) {\n            set.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpm23vb44e: /tmp/tmpm23vb44e.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmparsrv__1: /tmp/tmparsrv__1.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> unique;\n    for (auto\
    \ n : numbers) {\n        if (unique.find(n) == unique.end()) {\n            unique.insert(n);\n\
    \            result.push_back(n);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpdr7j8prt: /tmp/tmpdr7j8prt.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpkk7b18h5: /tmp/tmpkk7b18h5.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp7lcao0rv: /tmp/tmp7lcao0rv.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> s;\n    for (auto n\
    \ : numbers) {\n        if (s.find(n) == s.end()) {\n            s.insert(n);\n\
    \            result.push_back(n);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp3ma38w6t: /tmp/tmp3ma38w6t.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp1fc1py53: /tmp/tmp1fc1py53.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> s;\n    for (auto i\
    \ : numbers) {\n        if (s.find(i) == s.end()) {\n            s.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp63i28dvt: /tmp/tmp63i28dvt.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpyjflyx76: /tmp/tmpyjflyx76.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ n : numbers) {\n        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpugp0bumo: /tmp/tmpugp0bumo.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp5dtjnir6: /tmp/tmp5dtjnir6.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpn6z5x6hs: /tmp/tmpn6z5x6hs.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpkgwajbod: /tmp/tmpkgwajbod.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    result.push_back(number);\n            set.insert(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpx_4abpgs: /tmp/tmpx_4abpgs.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpdgl3_g58: /tmp/tmpdgl3_g58.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::unordered_set<long> seen;\n  for (auto n : numbers) {\n    if\
    \ (seen.find(n) == seen.end()) {\n      result.push_back(n);\n      seen.insert(n);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpvhomj2yp: /tmp/tmpvhomj2yp.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpvqwps1kp: /tmp/tmpvqwps1kp.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpc3wxnmwh: /tmp/tmpc3wxnmwh.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpmvfdka6e: /tmp/tmpmvfdka6e.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpg4_e6uqx: /tmp/tmpg4_e6uqx.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp1jj8ipn2: /tmp/tmp1jj8ipn2.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::unordered_set<long> seen;\n  for (auto n : numbers) {\n    if\
    \ (seen.find(n) == seen.end()) {\n      result.push_back(n);\n      seen.insert(n);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpazregtgw: /tmp/tmpazregtgw.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    result.push_back(number);\n            set.insert(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp3ckzm1zm: /tmp/tmp3ckzm1zm.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpvk33k8gb: /tmp/tmpvk33k8gb.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpr6su7il1: /tmp/tmpr6su7il1.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ num : numbers) {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmprmaognl0: /tmp/tmprmaognl0.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpl0ccdc41: /tmp/tmpl0ccdc41.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmphlz15jfu: /tmp/tmphlz15jfu.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp0yafj40p: /tmp/tmp0yafj40p.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    result.push_back(number);\n            set.insert(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp30o8h9pp: /tmp/tmp30o8h9pp.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp05j7uxvn: /tmp/tmp05j7uxvn.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpvk4ran5y: /tmp/tmpvk4ran5y.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> s;\n    for (auto n\
    \ : numbers) {\n        if (s.find(n) == s.end()) {\n            s.insert(n);\n\
    \            result.push_back(n);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp3qw2zq7n: /tmp/tmp3qw2zq7n.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> s;\n    for (auto i : numbers)\
    \ {\n        if (s.find(i) == s.end()) {\n            s.insert(i);\n         \
    \   result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp5hkdi2qu: /tmp/tmp5hkdi2qu.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp6rx0fnjq: /tmp/tmp6rx0fnjq.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpx13d7xc5: /tmp/tmpx13d7xc5.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ n : numbers) {\n        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpsu2kiw2z: /tmp/tmpsu2kiw2z.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp1njlc631: /tmp/tmp1njlc631.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::sort(numbers.begin(), numbers.end());\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (i == 0 || numbers[i]\
    \ != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp9n5tv9d1: /tmp/tmp9n5tv9d1.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (auto\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp4x5a8lye: /tmp/tmp4x5a8lye.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::unordered_set<long> seen;\n  for (auto number : numbers) {\n\
    \    if (seen.find(number) == seen.end()) {\n      result.push_back(number);\n\
    \      seen.insert(number);\n    }\n  }\n  return result;\n}\nint main() {\n \
    \   auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpnd2zwqsw: /tmp/tmpnd2zwqsw.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmp3a0j2_47: /tmp/tmp3a0j2_47.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> set;\n    for (int i = 0; i <\
    \ numbers.size(); i++) {\n        if (set.find(numbers[i]) == set.end()) {\n \
    \           set.insert(numbers[i]);\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpwwknjfbj: /tmp/tmpwwknjfbj.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    result.push_back(number);\n            set.insert(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpsjv9moqq: /tmp/tmpsjv9moqq.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    set.insert(number);\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpc858hjtl: /tmp/tmpc858hjtl.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> s;\n    for (auto n\
    \ : numbers) {\n        if (s.find(n) == s.end()) {\n            s.insert(n);\n\
    \            result.push_back(n);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpymg0esv7: /tmp/tmpymg0esv7.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (long\
    \ number : numbers) {\n        if (seen.find(number) == seen.end()) {\n      \
    \      result.push_back(number);\n            seen.insert(number);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpzbi302j9: /tmp/tmpzbi302j9.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ i : numbers) {\n        if (set.find(i) == set.end()) {\n            result.push_back(i);\n\
    \            set.insert(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpfen467jv: /tmp/tmpfen467jv.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long\
    \ number : numbers) {\n        if (set.find(number) == set.end()) {\n        \
    \    result.push_back(number);\n            set.insert(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  stdout: ''
  stderr: "tmpebf8e1uc: /tmp/tmpebf8e1uc.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5}))' failed.\n"
  exit_code: -6
  status: Exception
