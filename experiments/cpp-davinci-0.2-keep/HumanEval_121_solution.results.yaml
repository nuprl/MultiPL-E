name: HumanEval_121_solution
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ % 2 == 1 && i % 2 == 0){\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum=0;\n  for(int i=0;i<lst.size();i++)\n  {\n    if(i%2==0 && lst[i]%2!=0)\n\
    \    {\n      sum+=lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = solution;\n    assert(candidate((std::vector<long>({(long)5, (long)8,\
    \ (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 1; i < lst.size(); i+=2)\n    {\n    \
    \    if(lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n        }\n \
    \   }\n    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: "tmpsi9uvcwv: /tmp/tmpsi9uvcwv.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i+=2){\n        if(lst[i]\
    \ % 2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i]\
    \ % 2 != 0 && i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i+=2){\n        if(lst[i]\
    \ % 2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum=0;\n  for(int i=0;i<lst.size();i++){\n    if(i%2==0 && lst[i]%2!=0){\n\
    \      sum+=lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = solution;\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)7,\
    \ (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3, (long)3,\
    \ (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i]\
    \ % 2 == 1 && i % 2 == 0){\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum=0;\n  for(int i=0;i<lst.size();i++)\n  {\n    if(i%2==0 && lst[i]%2!=0)\n\
    \    {\n      sum+=lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = solution;\n    assert(candidate((std::vector<long>({(long)5, (long)8,\
    \ (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 1; i < lst.size(); i+=2)\n    {\n    \
    \    if(lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n        }\n \
    \   }\n    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: "tmp23ok9fc0: /tmp/tmp23ok9fc0.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i+=2){\n        if(lst[i]\
    \ % 2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i]\
    \ % 2 != 0 && i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i+=2){\n        if(lst[i]\
    \ % 2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum=0;\n  for(int i=0;i<lst.size();i++){\n    if(i%2==0 && lst[i]%2!=0){\n\
    \      sum+=lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = solution;\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)7,\
    \ (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3, (long)3,\
    \ (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers, return the sum of all of the odd elements that are in even positions.\n\
    // Examples\n// solution([5, 8, 7, 1]) ==> 12\n// solution([3, 3, 3, 3, 3]) ==>\
    \ 9\n// solution([30, 13, 24, 321]) ==>0\nlong solution(std::vector<long> lst)\
    \ {\n  long sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0 && lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
    \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
    \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
