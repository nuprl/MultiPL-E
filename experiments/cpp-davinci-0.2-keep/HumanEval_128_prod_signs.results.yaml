name: HumanEval_128_prod_signs
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmppqlh_2pw: /tmp/tmppqlh_2pw.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (long i : arr) {\n        sum += std::abs(i);\n        if (i != 0) {\n\
    \            prod *= i / std::abs(i);\n        }\n    }\n    return sum * prod;\n\
    }\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpv_diqy4r: /tmp/tmpv_diqy4r.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpbvhya1l3: /tmp/tmpbvhya1l3.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpq8sac4yw: /tmp/tmpq8sac4yw.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  // your code here\n\
    \  return {};\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmppdsxeqxz: /tmp/tmppdsxeqxz.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto& i : arr) {\n        if (i > 0) {\n            prod *= 1;\n   \
    \     } else if (i < 0) {\n            prod *= -1;\n        } else {\n       \
    \     prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp_p3jew96: /tmp/tmp_p3jew96.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto &i : arr) {\n        if (i > 0) {\n            prod *= 1;\n   \
    \     } else if (i < 0) {\n            prod *= -1;\n        } else {\n       \
    \     prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpposddpgq: /tmp/tmpposddpgq.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto&\
    \ num : arr) {\n    if (num > 0) {\n      prod *= 1;\n    } else if (num < 0)\
    \ {\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(num);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp3yic8of8: /tmp/tmp3yic8of8.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i != 0) {\n            sum += std::abs(i);\n\
    \            prod *= i / std::abs(i);\n        }\n    }\n    return sum * prod;\n\
    }\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmplwt3csal: /tmp/tmplwt3csal.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto&\
    \ num : arr) {\n    if (num > 0) {\n      sum += num;\n      prod *= 1;\n    }\
    \ else if (num < 0) {\n      sum += -num;\n      prod *= -1;\n    } else {\n \
    \     prod *= 0;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto\
    \ candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpg819b_x4: /tmp/tmpg819b_x4.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) return\
    \ std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n \
    \   if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n\
    \      sum += -i;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp6068tffh: /tmp/tmp6068tffh.cpp:33: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpsx1sm0sx: /tmp/tmpsx1sm0sx.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        sum += std::abs(i);\n        prod *= i < 0\
    \ ? -1 : i > 0 ? 1 : 0;\n    }\n    return sum * prod;\n}\nint main() {\n    auto\
    \ candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp69oabocy: /tmp/tmp69oabocy.cpp:28: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmppn38sopi: /tmp/tmppn38sopi.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto& num : arr) {\n        if (num < 0) {\n            prod *= -1;\n\
    \        } else if (num > 0) {\n            sum += num;\n        }\n    }\n  \
    \  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpti8i4m_3: /tmp/tmpti8i4m_3.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long product\
    \ = 1;\n    for (auto& i : arr) {\n        sum += std::abs(i);\n        product\
    \ *= i == 0 ? 1 : i / std::abs(i);\n    }\n    return sum * product;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpuqurqv29: /tmp/tmpuqurqv29.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpnt04nwir: /tmp/tmpnt04nwir.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long product = 1;\n    long sum\
    \ = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            product *=\
    \ 1;\n        } else if (i < 0) {\n            product *= -1;\n        } else\
    \ {\n            product *= 0;\n        }\n        sum += std::abs(i);\n    }\n\
    \    return product * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpsh9_5xje: /tmp/tmpsh9_5xje.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto i\
    \ : arr) {\n        if (i > 0) {\n            prod *= 1;\n            sum += i;\n\
    \        } else if (i < 0) {\n            prod *= -1;\n            sum += -i;\n\
    \        } else {\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpm0l3hrh3: /tmp/tmpm0l3hrh3.cpp:33: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        sum += std::abs(i);\n        prod *= (i ==\
    \ 0 ? 1 : i / std::abs(i));\n    }\n    return sum * prod;\n}\nint main() {\n\
    \    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp7hsnjxnm: /tmp/tmp7hsnjxnm.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpq2iy_kwy: /tmp/tmpq2iy_kwy.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return prod\
    \ * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpblof5yfg: /tmp/tmpblof5yfg.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto i\
    \ : arr) {\n        if (i > 0) {\n            prod *= 1;\n            sum += i;\n\
    \        } else if (i < 0) {\n            prod *= -1;\n            sum += -i;\n\
    \        } else {\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpcarsez66: /tmp/tmpcarsez66.cpp:33: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long sum = 0;\n    long prod = 1;\n    for (auto i\
    \ : arr) {\n        if (i > 0) {\n            sum += i;\n            prod *= 1;\n\
    \        } else if (i < 0) {\n            sum += -i;\n            prod *= -1;\n\
    \        } else {\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp07l4w_ov: /tmp/tmp07l4w_ov.cpp:33: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto& i : arr) {\n        if (i > 0) {\n            prod *= 1;\n   \
    \     } else if (i < 0) {\n            prod *= -1;\n        } else {\n       \
    \     prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpv8celd3t: /tmp/tmpv8celd3t.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) return\
    \ std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for (auto x : arr) {\n \
    \   if (x > 0) {\n      prod *= 1;\n      sum += x;\n    } else if (x < 0) {\n\
    \      prod *= -1;\n      sum += -x;\n    } else {\n      prod *= 0;\n    }\n\
    \  }\n  return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpn2s95u5m: /tmp/tmpn2s95u5m.cpp:33: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long sum = 0;\n    long prod = 1;\n    for (const\
    \ auto& i : arr) {\n        sum += std::abs(i);\n        if (i > 0) prod *= 1;\n\
    \        else if (i < 0) prod *= -1;\n        else prod *= 0;\n    }\n    return\
    \ sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmppf8uo44b: /tmp/tmppf8uo44b.cpp:28: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return prod\
    \ * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpl_zz9ww4: /tmp/tmpl_zz9ww4.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto& num : arr) {\n        sum += std::abs(num);\n        if (num >\
    \ 0) {\n            prod *= 1;\n        } else if (num < 0) {\n            prod\
    \ *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return\
    \ sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp2bgs45fz: /tmp/tmp2bgs45fz.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto x : arr) {\n        if (x < 0) {\n            prod *= -1;\n   \
    \     } else if (x > 0) {\n            sum += x;\n        }\n    }\n    return\
    \ sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpt5kri3h1: /tmp/tmpt5kri3h1.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpp9hg16h_: /tmp/tmpp9hg16h_.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (long i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp5qevt3_3: /tmp/tmp5qevt3_3.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp6ksq5ddd: /tmp/tmp6ksq5ddd.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        sum += std::abs(i);\n        if (i != 0) {\n\
    \            prod *= i / std::abs(i);\n        }\n    }\n    return sum * prod;\n\
    }\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp_ix7073x: /tmp/tmp_ix7073x.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpqd1nvzjh: /tmp/tmpqd1nvzjh.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto i\
    \ : arr) {\n        if (i > 0) {\n            prod *= 1;\n            sum += i;\n\
    \        } else if (i < 0) {\n            prod *= -1;\n            sum += i *\
    \ -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return\
    \ sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmprjd7kpy9: /tmp/tmprjd7kpy9.cpp:33: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += i * -1;\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpsud814xg: /tmp/tmpsud814xg.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto &i : arr) {\n        if (i > 0) {\n            prod *= 1;\n   \
    \     } else if (i < 0) {\n            prod *= -1;\n        } else {\n       \
    \     prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpq0qf2rpf: /tmp/tmpq0qf2rpf.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i == 0) {\n            continue;\n    \
    \    }\n        if (i > 0) {\n            prod *= 1;\n        } else {\n     \
    \       prod *= -1;\n        }\n        sum += std::abs(i);\n    }\n    return\
    \ sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmprf3g_r7n: /tmp/tmprf3g_r7n.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpdf21m4vy: /tmp/tmpdf21m4vy.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        sum += std::abs(i);\n        if (i != 0) {\n\
    \            prod *= i / std::abs(i);\n        }\n    }\n    return sum * prod;\n\
    }\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpq8_6tquz: /tmp/tmpq8_6tquz.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        sum += std::abs(i);\n        if (i != 0) {\n\
    \            prod *= i / std::abs(i);\n        }\n    }\n    return sum * prod;\n\
    }\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp5s5b69to: /tmp/tmp5s5b69to.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpsyfki2zs: /tmp/tmpsyfki2zs.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto i\
    \ : arr) {\n        if (i > 0) {\n            prod *= 1;\n            sum += i;\n\
    \        } else if (i < 0) {\n            prod *= -1;\n            sum += -i;\n\
    \        } else {\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpalz396ks: /tmp/tmpalz396ks.cpp:33: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpuqnxpm3z: /tmp/tmpuqnxpm3z.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (long i : arr) {\n        sum += std::abs(i);\n        prod *= i == 0\
    \ ? 1 : i / std::abs(i);\n    }\n    return sum * prod;\n}\nint main() {\n   \
    \ auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmps12_si45: /tmp/tmps12_si45.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto num : arr) {\n        if (num > 0) {\n            sum += num;\n\
    \            prod *= 1;\n        } else if (num < 0) {\n            sum += -num;\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmplfueuku5: /tmp/tmplfueuku5.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmptt7qwzl7: /tmp/tmptt7qwzl7.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto el : arr) {\n        sum += std::abs(el);\n        if (el == 0)\
    \ {\n            prod = 0;\n        } else if (el > 0) {\n            prod *=\
    \ 1;\n        } else {\n            prod *= -1;\n        }\n    }\n    return\
    \ sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpx7gbc1sm: /tmp/tmpx7gbc1sm.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpzlctc06a: /tmp/tmpzlctc06a.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += -i;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmprj4j49hg: /tmp/tmprj4j49hg.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmps67_4i6o: /tmp/tmps67_4i6o.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto i\
    \ : arr) {\n        if (i > 0) {\n            prod *= 1;\n            sum += i;\n\
    \        } else if (i < 0) {\n            prod *= -1;\n            sum += -i;\n\
    \        } else {\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmprs216no2: /tmp/tmprs216no2.cpp:33: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto& el : arr) {\n        prod *= el < 0 ? -1 : el == 0 ? 0 : 1;\n\
    \        sum += abs(el);\n    }\n    return prod * sum;\n}\nint main() {\n   \
    \ auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpdrzwi9bu: /tmp/tmpdrzwi9bu.cpp:28: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto& i : arr) {\n        sum += std::abs(i);\n        if (i != 0) {\n\
    \            prod *= i / std::abs(i);\n        }\n    }\n    return sum * prod;\n\
    }\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp73ulo7hh: /tmp/tmp73ulo7hh.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpp7gmqs0r: /tmp/tmpp7gmqs0r.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto i\
    \ : arr) {\n        if (i > 0) prod *= 1;\n        else if (i < 0) prod *= -1;\n\
    \        else prod *= 0;\n        sum += std::abs(i);\n    }\n    return sum *\
    \ prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpmayuhgls: /tmp/tmpmayuhgls.cpp:28: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto& i : arr) {\n        if (i != 0) {\n            prod *= i > 0 ?\
    \ 1 : -1;\n            sum += std::abs(i);\n        }\n    }\n    return prod\
    \ * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp8dyyn2k8: /tmp/tmp8dyyn2k8.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (long i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp8w1zum_m: /tmp/tmp8w1zum_m.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long product = 1;\n    long sum\
    \ = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            product *=\
    \ 1;\n        } else if (i < 0) {\n            product *= -1;\n        } else\
    \ {\n            product *= 0;\n        }\n        sum += std::abs(i);\n    }\n\
    \    return product * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpua8tv5eg: /tmp/tmpua8tv5eg.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (long i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpe38xu0dd: /tmp/tmpe38xu0dd.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return prod\
    \ * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmprjcd3uog: /tmp/tmprjcd3uog.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpcmxlzqh5: /tmp/tmpcmxlzqh5.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i == 0) {\n            continue;\n    \
    \    }\n        sum += std::abs(i);\n        prod *= i < 0 ? -1 : 1;\n    }\n\
    \    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpdev7xrlz: /tmp/tmpdev7xrlz.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        sum += std::abs(i);\n        prod *= (i ==\
    \ 0 ? 1 : i / std::abs(i));\n    }\n    return sum * prod;\n}\nint main() {\n\
    \    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpi68sxt3a: /tmp/tmpi68sxt3a.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp08y52sln: /tmp/tmp08y52sln.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  long sum = 0;\n  long\
    \ prod = 1;\n  for (auto i : arr) {\n    if (i > 0) {\n      sum += i;\n     \
    \ prod *= 1;\n    } else if (i < 0) {\n      sum += i * -1;\n      prod *= -1;\n\
    \    } else {\n      prod *= 0;\n    }\n  }\n  if (arr.size() == 0) {\n    return\
    \ {};\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpama0hbq2: /tmp/tmpama0hbq2.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ x : arr) {\n    if (x > 0) {\n      sum += x;\n      prod *= 1;\n    } else\
    \ if (x < 0) {\n      sum += -x;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpml1pgwb1: /tmp/tmpml1pgwb1.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        sum += std::abs(i);\n        if (i == 0) {\n\
    \            prod = 0;\n        } else if (i > 0) {\n            prod *= 1;\n\
    \        } else {\n            prod *= -1;\n        }\n    }\n    return sum *\
    \ prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp0m9r5baf: /tmp/tmp0m9r5baf.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        sum += std::abs(i);\n        if (i != 0) {\n\
    \            prod *= i / std::abs(i);\n        }\n    }\n    return sum * prod;\n\
    }\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpakkdpys2: /tmp/tmpakkdpys2.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        sum += std::abs(i);\n        prod *= (i ==\
    \ 0 ? 1 : (i > 0 ? 1 : -1));\n    }\n    return sum * prod;\n}\nint main() {\n\
    \    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp1opn9b_t: /tmp/tmp1opn9b_t.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp3cgtarn0: /tmp/tmp3cgtarn0.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += abs(i);\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp2ho6_bre: /tmp/tmp2ho6_bre.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (long i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpmxe3c2gz: /tmp/tmpmxe3c2gz.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long product\
    \ = 1;\n    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n\
    \            product *= 1;\n        } else if (i < 0) {\n            sum += -i;\n\
    \            product *= -1;\n        } else {\n            product *= 0;\n   \
    \     }\n    }\n    return sum * product;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpeoulcptw: /tmp/tmpeoulcptw.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long sum = 0;\n    long prod = 1;\n    for (auto i:\
    \ arr) {\n        if (i > 0) prod *= 1;\n        else if (i < 0) prod *= -1;\n\
    \        else prod *= 0;\n        sum += std::abs(i);\n    }\n    return sum *\
    \ prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpuu9vygqp: /tmp/tmpuu9vygqp.cpp:28: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long product\
    \ = 1;\n    for (auto i : arr) {\n        sum += abs(i);\n        product *= i\
    \ < 0 ? -1 : i == 0 ? 0 : 1;\n    }\n    return sum * product;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpzonevb2f: /tmp/tmpzonevb2f.cpp:28: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto x\
    \ : arr) {\n        if (x > 0) prod *= 1;\n        else if (x < 0) prod *= -1;\n\
    \        else prod *= 0;\n        sum += std::abs(x);\n    }\n    return sum *\
    \ prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpkt550he5: /tmp/tmpkt550he5.cpp:28: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmppedbu0vq: /tmp/tmppedbu0vq.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto el : arr) {\n        if (el > 0) {\n            sum += el;\n  \
    \          prod *= 1;\n        } else if (el < 0) {\n            sum += -el;\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpfcbx8dwa: /tmp/tmpfcbx8dwa.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += std::abs(i);\n      prod *= -1;\n    } else {\n \
    \     prod *= 0;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto\
    \ candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp6kb6w0o8: /tmp/tmp6kb6w0o8.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += -i;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp3y9bwngk: /tmp/tmp3y9bwngk.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp3922ho4x: /tmp/tmp3922ho4x.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto i\
    \ : arr) {\n        if (i > 0) {\n            prod *= 1;\n            sum += i;\n\
    \        } else if (i < 0) {\n            prod *= -1;\n            sum += -i;\n\
    \        } else {\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp9nbgw0_i: /tmp/tmp9nbgw0_i.cpp:33: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto& i : arr) {\n        if (i < 0) {\n            prod *= -1;\n  \
    \      } else if (i > 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpw9qvyckn: /tmp/tmpw9qvyckn.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += i;\n      prod *= -1;\n    } else {\n      prod *=\
    \ 0;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate =\
    \ prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpugo1tfr7: /tmp/tmpugo1tfr7.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpi4nbg513: /tmp/tmpi4nbg513.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    // your code here\n\
    \    long sum = 0;\n    long prod = 1;\n    for(long i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] > 0){\n            sum += arr[i];\n            prod *= 1;\n\
    \        }\n        else if(arr[i] < 0){\n            sum += arr[i] * -1;\n  \
    \          prod *= -1;\n        }\n        else{\n            sum += 0;\n    \
    \        prod *= 0;\n        }\n    }\n    if(arr.size() == 0){\n        return\
    \ std::nullopt;\n    }\n    else{\n        return sum * prod;\n    }\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpytrbxu2t: /tmp/tmpytrbxu2t.cpp:41: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpc0x9ulvn: /tmp/tmpc0x9ulvn.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        sum += std::abs(i);\n        prod *= i < 0\
    \ ? -1 : i > 0 ? 1 : 0;\n    }\n    return sum * prod;\n}\nint main() {\n    auto\
    \ candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmph_q2aawi: /tmp/tmph_q2aawi.cpp:28: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp481d0dl0: /tmp/tmp481d0dl0.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) return\
    \ std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n \
    \   if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n\
    \      sum += -i;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpg5zycee_: /tmp/tmpg5zycee_.cpp:33: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpna9nl0u0: /tmp/tmpna9nl0u0.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto x : arr) {\n        sum += std::abs(x);\n        prod *= (x ==\
    \ 0 ? 1 : x / std::abs(x));\n    }\n    return sum * prod;\n}\nint main() {\n\
    \    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpw69fd1of: /tmp/tmpw69fd1of.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto num : arr) {\n        if (num > 0) {\n            sum += num;\n\
    \            prod *= 1;\n        } else if (num < 0) {\n            sum += num\
    \ * -1;\n            prod *= -1;\n        } else {\n            prod *= 0;\n \
    \       }\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpkd1imnqs: /tmp/tmpkd1imnqs.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ el : arr) {\n    if (el > 0) {\n      prod *= 1;\n    } else if (el < 0) {\n\
    \      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(el);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpcuv2waia: /tmp/tmpcuv2waia.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpusu8a4qc: /tmp/tmpusu8a4qc.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpcoop8xfk: /tmp/tmpcoop8xfk.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto i\
    \ : arr) {\n        if (i > 0) {\n            prod *= 1;\n            sum += i;\n\
    \        } else if (i < 0) {\n            prod *= -1;\n            sum += -i;\n\
    \        } else {\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpvy9mdq0t: /tmp/tmpvy9mdq0t.cpp:33: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) return\
    \ std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for (auto i : arr) {\n \
    \   if (i > 0) {\n      prod *= 1;\n      sum += i;\n    } else if (i < 0) {\n\
    \      prod *= -1;\n      sum += -i;\n    } else {\n      prod *= 0;\n    }\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpwvqhu0_v: /tmp/tmpwvqhu0_v.cpp:33: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto num\
    \ : arr) {\n        if (num > 0) prod *= 1;\n        else if (num < 0) prod *=\
    \ -1;\n        else prod *= 0;\n        sum += std::abs(num);\n    }\n    return\
    \ sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmph9z10hp7: /tmp/tmph9z10hp7.cpp:28: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) return\
    \ std::nullopt;\n  long prod = 1;\n  long sum = 0;\n  for (auto& i : arr) {\n\
    \    if (i == 0) continue;\n    prod *= i < 0 ? -1 : 1;\n    sum += std::abs(i);\n\
    \  }\n  return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp7azyg198: /tmp/tmp7azyg198.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpdu2817bs: /tmp/tmpdu2817bs.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpk03prbw_: /tmp/tmpk03prbw_.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpm478ycqi: /tmp/tmpm478ycqi.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp9n1mt268: /tmp/tmp9n1mt268.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpwwfv41o7: /tmp/tmpwwfv41o7.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto el : arr) {\n        sum += std::abs(el);\n        if (el != 0)\
    \ {\n            prod *= el > 0 ? 1 : -1;\n        }\n    }\n    return sum *\
    \ prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpe6qm9ibe: /tmp/tmpe6qm9ibe.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpz__fe7mg: /tmp/tmpz__fe7mg.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto i\
    \ : arr) {\n        if (i > 0) {\n            prod *= 1;\n            sum += i;\n\
    \        } else if (i < 0) {\n            prod *= -1;\n            sum += -i;\n\
    \        } else {\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp469o_in_: /tmp/tmp469o_in_.cpp:33: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        sum += std::abs(i);\n        if (i > 0) {\n\
    \            prod *= 1;\n        } else if (i < 0) {\n            prod *= -1;\n\
    \        } else {\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpg8mcliob: /tmp/tmpg8mcliob.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (long\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += i * -1;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp1tc4te2_: /tmp/tmp1tc4te2_.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto i\
    \ : arr) {\n        if (i > 0) prod *= 1;\n        else if (i < 0) prod *= -1;\n\
    \        else prod *= 0;\n        sum += std::abs(i);\n    }\n    return sum *\
    \ prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp1s28otuw: /tmp/tmp1s28otuw.cpp:28: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    sum += std::abs(i);\n    prod *= (i == 0 ? 1 : i > 0 ? 1 : -1);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpciavkdvf: /tmp/tmpciavkdvf.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpyk4jm5dw: /tmp/tmpyk4jm5dw.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto&\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpsppuk6tt: /tmp/tmpsppuk6tt.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += std::abs(i);\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp3md397y0: /tmp/tmp3md397y0.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto num\
    \ : arr) {\n        if (num > 0) {\n            prod *= 1;\n            sum +=\
    \ num;\n        } else if (num < 0) {\n            prod *= -1;\n            sum\
    \ += -num;\n        } else {\n            prod *= 0;\n        }\n    }\n    return\
    \ sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpq4za_8ob: /tmp/tmpq4za_8ob.cpp:33: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpp0kl9opv: /tmp/tmpp0kl9opv.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmph42zjheb: /tmp/tmph42zjheb.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpu24a66g8: /tmp/tmpu24a66g8.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto el : arr) {\n        if (el > 0) {\n            sum += el;\n  \
    \          prod *= 1;\n        } else if (el < 0) {\n            sum += -el;\n\
    \            prod *= -1;\n        } else {\n            prod *= 0;\n        }\n\
    \    }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpn2pg925m: /tmp/tmpn2pg925m.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto &i : arr) {\n        sum += std::abs(i);\n        prod *= i ==\
    \ 0 ? 1 : i / std::abs(i);\n    }\n    return sum * prod;\n}\nint main() {\n \
    \   auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpg_uhzs05: /tmp/tmpg_uhzs05.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i < 0) {\n      prod *= -1;\n    } else if (i > 0) {\n \
    \     sum += i;\n    }\n  }\n  return prod * sum;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpa7o8njh4: /tmp/tmpa7o8njh4.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long product = 1;\n    long sum = 0;\n    for (auto&\
    \ x : arr) {\n        if (x > 0) product *= 1;\n        else if (x < 0) product\
    \ *= -1;\n        else product *= 0;\n        sum += std::abs(x);\n    }\n   \
    \ return product * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpyub40p17: /tmp/tmpyub40p17.cpp:28: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n   \
    \     } else if (i > 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp5m8nkjfe: /tmp/tmp5m8nkjfe.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto num : arr) {\n        if (num == 0) {\n            continue;\n\
    \        }\n        prod *= num > 0 ? 1 : -1;\n        sum += std::abs(num);\n\
    \    }\n    return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp4gwjx2y3: /tmp/tmp4gwjx2y3.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpi8brg91t: /tmp/tmpi8brg91t.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto &i : arr) {\n        sum += std::abs(i);\n        prod *= std::signbit(i)\
    \ ? -1 : 1;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmper97i_0j: /tmp/tmper97i_0j.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return prod\
    \ * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpfjyftdim: /tmp/tmpfjyftdim.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ x : arr) {\n    if (x > 0) {\n      prod *= 1;\n    } else if (x < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(x);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp_opl05_y: /tmp/tmp_opl05_y.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    long sum = 0;\n \
    \   long prod = 1;\n    for (long i : arr) {\n        if (i > 0) {\n         \
    \   sum += i;\n            prod *= 1;\n        } else if (i < 0) {\n         \
    \   sum += abs(i);\n            prod *= -1;\n        } else {\n            prod\
    \ *= 0;\n        }\n    }\n    if (arr.size() == 0) {\n        return {};\n  \
    \  }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmps8h944mt: /tmp/tmps8h944mt.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto const& i : arr) {\n        sum += std::abs(i);\n        prod *=\
    \ (i == 0 ? 1 : (i > 0 ? 1 : -1));\n    }\n    return sum * prod;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpsiangbxp: /tmp/tmpsiangbxp.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  long sum = 0;\n  long\
    \ prod = 1;\n  for (auto x : arr) {\n    if (x > 0) {\n      sum += x;\n     \
    \ prod *= 1;\n    } else if (x < 0) {\n      sum += -x;\n      prod *= -1;\n \
    \   } else {\n      prod *= 0;\n    }\n  }\n  if (prod == 0) {\n    return std::nullopt;\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpiwpy3zs6: /tmp/tmpiwpy3zs6.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto x : arr) {\n        if (x > 0) {\n            prod *= 1;\n    \
    \    } else if (x < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(x);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpk8luknmu: /tmp/tmpk8luknmu.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) return\
    \ std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n \
    \   if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else if (i < 0) {\n\
    \      sum += -i;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp12bp1hkk: /tmp/tmp12bp1hkk.cpp:33: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        sum += std::abs(i);\n        if (i > 0) {\n\
    \            prod *= 1;\n        } else if (i < 0) {\n            prod *= -1;\n\
    \        } else {\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpan0pms_r: /tmp/tmpan0pms_r.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return prod * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp63dqn_r8: /tmp/tmp63dqn_r8.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += -i;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpg7nh61s6: /tmp/tmpg7nh61s6.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        sum += abs(i);\n        if (i > 0) {\n    \
    \        prod *= 1;\n        } else if (i < 0) {\n            prod *= -1;\n  \
    \      } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpil5rw1w7: /tmp/tmpil5rw1w7.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto&\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += -i;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpj53e8_ek: /tmp/tmpj53e8_ek.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto&\
    \ i : arr) {\n    if (i == 0) {\n      continue;\n    }\n    prod *= i > 0 ? 1\
    \ : -1;\n    sum += std::abs(i);\n  }\n  return sum * prod;\n}\nint main() {\n\
    \    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp72diircc: /tmp/tmp72diircc.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpucmukgyu: /tmp/tmpucmukgyu.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i == 0) {\n      continue;\n    }\n    prod *= i > 0 ? 1\
    \ : -1;\n    sum += std::abs(i);\n  }\n  return sum * prod;\n}\nint main() {\n\
    \    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpd0gbbhzp: /tmp/tmpd0gbbhzp.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto& num : arr) {\n        sum += std::abs(num);\n        prod *= (num\
    \ == 0 ? 1 : num / std::abs(num));\n    }\n    return sum * prod;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmplc5xnns5: /tmp/tmplc5xnns5.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        sum += std::abs(i);\n        prod *= i == 0\
    \ ? 1 : i / std::abs(i);\n    }\n    return sum * prod;\n}\nint main() {\n   \
    \ auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpfw1u2f5v: /tmp/tmpfw1u2f5v.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += -i;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp9k71yf29: /tmp/tmp9k71yf29.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp3dndmkpp: /tmp/tmp3dndmkpp.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp15t55dgu: /tmp/tmp15t55dgu.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n   \
    \     } else if (i > 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpo74kjgnx: /tmp/tmpo74kjgnx.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpr5nulgzj: /tmp/tmpr5nulgzj.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    long sum = 0;\n    for (auto i\
    \ : arr) {\n        if (i > 0) {\n            prod *= 1;\n            sum += i;\n\
    \        } else if (i < 0) {\n            prod *= -1;\n            sum += -i;\n\
    \        } else {\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpo_8gu60j: /tmp/tmpo_8gu60j.cpp:33: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ el : arr) {\n    sum += std::abs(el);\n    prod *= el > 0 ? 1 : el < 0 ? -1\
    \ : 0;\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp6p7uk23f: /tmp/tmp6p7uk23f.cpp:28: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i == 0) {\n            continue;\n    \
    \    }\n        prod *= i > 0 ? 1 : -1;\n        sum += std::abs(i);\n    }\n\
    \    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpgmf0xkyp: /tmp/tmpgmf0xkyp.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpz371o7om: /tmp/tmpz371o7om.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp6af0jmog: /tmp/tmp6af0jmog.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto& i : arr) {\n        if (i > 0) {\n            sum += i;\n    \
    \        prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n   \
    \         prod *= -1;\n        } else {\n            prod *= 0;\n        }\n \
    \   }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpjx8he3lz: /tmp/tmpjx8he3lz.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp2usas4wr: /tmp/tmp2usas4wr.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ x : arr) {\n    if (x > 0) {\n      sum += x;\n      prod *= 1;\n    } else\
    \ if (x < 0) {\n      sum += -x;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp4zc6tk0l: /tmp/tmp4zc6tk0l.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ x : arr) {\n    if (x > 0) {\n      prod *= 1;\n    } else if (x < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(x);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp6iv54o56: /tmp/tmp6iv54o56.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp3gmrtadw: /tmp/tmp3gmrtadw.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  long prod = 1;\n  long\
    \ sum = 0;\n  for (auto i : arr) {\n    if (i == 0) {\n      return std::nullopt;\n\
    \    }\n    prod *= i / abs(i);\n    sum += abs(i);\n  }\n  return prod * sum;\n\
    }\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp_sufut8t: /tmp/tmp_sufut8t.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto& i : arr) {\n        sum += std::abs(i);\n        prod *= std::signbit(i)\
    \ ? -1 : 1;\n    }\n    return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpnut2r8ut: /tmp/tmpnut2r8ut.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i < 0) {\n            prod *= -1;\n   \
    \     } else if (i > 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp_b_fah1e: /tmp/tmp_b_fah1e.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        sum += abs(i);\n        prod *= (i == 0 ? 1\
    \ : (i > 0 ? 1 : -1));\n    }\n    return sum * prod;\n}\nint main() {\n    auto\
    \ candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp4fzufi6y: /tmp/tmp4fzufi6y.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) return\
    \ std::nullopt;\n  long sum = 0;\n  long prod = 1;\n  for (auto i : arr) {\n \
    \   sum += std::abs(i);\n    prod *= (i == 0 ? 1 : (i > 0 ? 1 : -1));\n  }\n \
    \ return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpg1pq7cy6: /tmp/tmpg1pq7cy6.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp0iet7o4n: /tmp/tmp0iet7o4n.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpeqyrutva: /tmp/tmpeqyrutva.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += -i;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpo_2trs30: /tmp/tmpo_2trs30.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto el : arr) {\n        if (el > 0) {\n            prod *= 1;\n  \
    \      } else if (el < 0) {\n            prod *= -1;\n        } else {\n     \
    \       prod *= 0;\n        }\n        sum += std::abs(el);\n    }\n    return\
    \ sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmppqw2977r: /tmp/tmppqw2977r.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long product = 1;\n    long sum\
    \ = 0;\n    for (auto i : arr) {\n        if (i > 0) {\n            product *=\
    \ 1;\n        } else if (i < 0) {\n            product *= -1;\n        } else\
    \ {\n            product *= 0;\n        }\n        sum += std::abs(i);\n    }\n\
    \    return sum * product;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmphqpv5vw4: /tmp/tmphqpv5vw4.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long product = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      product *= 1;\n    } else if (i < 0) {\n\
    \      product *= -1;\n    } else {\n      product *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return product * sum;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpu43n3m04: /tmp/tmpu43n3m04.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i < 0) {\n      prod *= -1;\n    } else if (i > 0) {\n \
    \     sum += i;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpnwjhni6f: /tmp/tmpnwjhni6f.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i == 0) {\n            continue;\n    \
    \    }\n        sum += std::abs(i);\n        prod *= i < 0 ? -1 : 1;\n    }\n\
    \    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpgwe9f38h: /tmp/tmpgwe9f38h.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long product = 1;\n  for (auto\
    \ i : arr) {\n    sum += std::abs(i);\n    if (i > 0) {\n      product *= 1;\n\
    \    } else if (i < 0) {\n      product *= -1;\n    } else {\n      product *=\
    \ 0;\n    }\n  }\n  return sum * product;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp7nugukal: /tmp/tmp7nugukal.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp19ebcdq0: /tmp/tmp19ebcdq0.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto& i : arr) {\n        sum += std::abs(i);\n        if (i > 0) {\n\
    \            prod *= 1;\n        } else if (i < 0) {\n            prod *= -1;\n\
    \        } else {\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp681qn593: /tmp/tmp681qn593.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        sum += abs(i);\n        if (i > 0) {\n    \
    \        prod *= 1;\n        } else if (i < 0) {\n            prod *= -1;\n  \
    \      } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpvqmgi7y1: /tmp/tmpvqmgi7y1.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        sum += std::abs(i);\n        prod *= (i ==\
    \ 0 ? 1 : i / std::abs(i));\n    }\n    return sum * prod;\n}\nint main() {\n\
    \    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp3mp6afbr: /tmp/tmp3mp6afbr.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long prod = 1;\n  long sum = 0;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      prod *= 1;\n    } else if (i < 0) {\n  \
    \    prod *= -1;\n    } else {\n      prod *= 0;\n    }\n    sum += std::abs(i);\n\
    \  }\n  return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp6m4x010_: /tmp/tmp6m4x010_.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            sum += i;\n     \
    \       prod *= 1;\n        } else if (i < 0) {\n            sum += -i;\n    \
    \        prod *= -1;\n        } else {\n            prod *= 0;\n        }\n  \
    \  }\n    return sum * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp7aghgo2_: /tmp/tmp7aghgo2_.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long prod = 1;\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        if (i > 0) {\n            prod *= 1;\n    \
    \    } else if (i < 0) {\n            prod *= -1;\n        } else {\n        \
    \    prod *= 0;\n        }\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmpkmjirith: /tmp/tmpkmjirith.cpp:34: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        sum += std::abs(i);\n        prod *= i == 0\
    \ ? 1 : i / std::abs(i);\n    }\n    return sum * prod;\n}\nint main() {\n   \
    \ auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp_loczt6y: /tmp/tmp_loczt6y.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long sum = 0;\n    long prod = 1;\n\
    \    for (auto i : arr) {\n        sum += std::abs(i);\n        prod *= i == 0\
    \ ? 1 : i > 0 ? 1 : -1;\n    }\n    return sum * prod;\n}\nint main() {\n    auto\
    \ candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmphvra40ux: /tmp/tmphvra40ux.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the array, represented by 1, -1\
    \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
    \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) {\n\
    \    return std::nullopt;\n  }\n  long sum = 0;\n  long prod = 1;\n  for (auto\
    \ i : arr) {\n    if (i > 0) {\n      sum += i;\n      prod *= 1;\n    } else\
    \ if (i < 0) {\n      sum += -i;\n      prod *= -1;\n    } else {\n      prod\
    \ *= 0;\n    }\n  }\n  return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == (std::optional<long>(-10)));\n\
    \    assert(candidate((std::vector<long>())) == (std::optional<long>({})));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2,\
    \ (long)-1, (long)-1, (long)9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == (std::optional<long>(0)));\n}\n"
  stdout: ''
  stderr: "tmp0hdr3mxf: /tmp/tmp0hdr3mxf.cpp:35: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::optional<long>({}))' failed.\n"
  exit_code: -6
  status: Exception
