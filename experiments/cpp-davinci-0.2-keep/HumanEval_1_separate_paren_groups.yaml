name: HumanEval_1_separate_paren_groups
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is\
  \ a string containing multiple groups of nested parentheses. Your goal is to\n//\
  \ separate those group into separate strings and return the list of those.\n// Separate\
  \ groups are balanced (each open brace is properly closed) and not nested within\
  \ each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups('(\
  \ ) (( )) (( )( ))')\n// ['()', '(())', '(()())']\nstd::vector<std::string> separate_paren_groups(std::string\
  \ paren_string) {\n"
tests: "}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"\
  (()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\"\
  , (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n\
  \    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"\
  ()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"\
  })));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"\
  (()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"\
  ()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n"
completions: ["    std::vector<std::string> result;\n    std::string temp;\n    int\
    \ count = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if\
    \ (paren_string[i] == '(') {\n            count++;\n            temp += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            count--;\n        \
    \    temp += paren_string[i];\n        }\n        if (count == 0 && temp.size()\
    \ > 0) {\n            result.push_back(temp);\n            temp = \"\";\n    \
    \    }\n    }\n    return result;", "    std::vector<std::string> result;\n  \
    \  std::stack<char> stk;\n    std::string temp;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            stk.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            stk.pop();\n\
    \            temp += paren_string[i];\n        }\n        else if(paren_string[i]\
    \ == ' ') {\n            continue;\n        }\n        else {\n            assert(false);\n\
    \        }\n        if(stk.empty()) {\n            result.push_back(temp);\n \
    \           temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    int start = 0;\n    for (int i = 0; i\
    \ < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n     \
    \       st.push(paren_string[i]);\n        } else if (paren_string[i] == ')')\
    \ {\n            st.pop();\n        }\n        if (st.empty()) {\n           \
    \ result.push_back(paren_string.substr(start, i - start + 1));\n            start\
    \ = i + 1;\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          st.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            st.pop();\n            if(st.empty()) {\n           \
    \     result.push_back(temp);\n                temp = \"\";\n            }\n \
    \       }\n        else if(paren_string[i] != ' ') {\n            temp += paren_string[i];\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::stack<char> stk;\n    std::string temp;\n    for(int i = 0; i < paren_string.size();\
    \ i++) {\n        if(paren_string[i] == '(') {\n            stk.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            stk.pop();\n\
    \            temp += paren_string[i];\n        }\n        else if(paren_string[i]\
    \ == ' ') {\n            if(stk.empty()) {\n                result.push_back(temp);\n\
    \                temp = \"\";\n            }\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::stack<char> stk;\n    std::string\
    \ temp;\n    for(int i = 0; i < paren_string.size(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            stk.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            stk.pop();\n            temp += paren_string[i];\n  \
    \      }\n        else {\n            if(!stk.empty()) {\n                temp\
    \ += paren_string[i];\n            }\n        }\n        if(stk.empty() && temp.size()\
    \ > 0) {\n            result.push_back(temp);\n            temp.clear();\n   \
    \     }\n    }\n    return result;", "    std::vector<std::string> result;\n \
    \   std::string temp;\n    int count = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            count++;\n      \
    \      temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.size(); i++) {\n        if(paren_string[i] == ' ') {\n    \
    \        continue;\n        }\n        if(paren_string[i] == '(') {\n        \
    \    st.push(paren_string[i]);\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            if(st.empty()) {\n                return result;\n     \
    \       }\n            st.pop();\n            if(st.empty()) {\n             \
    \   result.push_back(temp);\n                temp.clear();\n            }\n  \
    \      }\n        else {\n            temp.push_back(paren_string[i]);\n     \
    \   }\n    }\n    return result;", "    std::vector<std::string> result;\n   \
    \ std::string temp;\n    int count = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            count++;\n      \
    \      temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          st.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            st.pop();\n            temp += paren_string[i];\n   \
    \     }\n        else {\n            temp += paren_string[i];\n        }\n   \
    \     if(st.empty()) {\n            result.push_back(temp);\n            temp\
    \ = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> paren_stack;\n    std::string temp;\n    for (int\
    \ i = 0; i < paren_string.length(); i++) {\n        if (paren_string[i] == '(')\
    \ {\n            paren_stack.push(paren_string[i]);\n        } else if (paren_string[i]\
    \ == ')') {\n            if (paren_stack.top() == '(') {\n                paren_stack.pop();\n\
    \                if (paren_stack.empty()) {\n                    result.push_back(temp);\n\
    \                    temp = \"\";\n                }\n            }\n        }\
    \ else if (paren_string[i] != ' ') {\n            temp += paren_string[i];\n \
    \       }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            count++;\n      \
    \      temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "  std::vector<std::string>\
    \ result;\n  std::string temp;\n  int count = 0;\n  for (int i = 0; i < paren_string.size();\
    \ i++) {\n    if (paren_string[i] == '(') {\n      count++;\n      temp += paren_string[i];\n\
    \    } else if (paren_string[i] == ')') {\n      count--;\n      temp += paren_string[i];\n\
    \    }\n    if (count == 0 && temp.size() > 0) {\n      result.push_back(temp);\n\
    \      temp = \"\";\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> s;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          s.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            if(s.empty()) {\n                return result;\n   \
    \         }\n            else {\n                s.pop();\n                temp\
    \ += paren_string[i];\n                if(s.empty()) {\n                    result.push_back(temp);\n\
    \                    temp = \"\";\n                }\n            }\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    std::stack<char>\
    \ s;\n    int i = 0;\n    while (i < paren_string.length()) {\n        if (paren_string[i]\
    \ == ' ') {\n            i++;\n            continue;\n        }\n        if (paren_string[i]\
    \ == '(') {\n            s.push(paren_string[i]);\n            i++;\n        \
    \    continue;\n        }\n        if (paren_string[i] == ')') {\n           \
    \ std::string temp;\n            while (!s.empty() && s.top() != '(') {\n    \
    \            temp += s.top();\n                s.pop();\n            }\n     \
    \       if (!s.empty() && s.top() == '(') {\n                s.pop();\n      \
    \      }\n            std::reverse(temp.begin(), temp.end());\n            result.push_back(temp);\n\
    \            i++;\n            continue;\n        }\n        s.push(paren_string[i]);\n\
    \        i++;\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            count++;\n      \
    \      temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> s;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          s.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            s.pop();\n            temp += paren_string[i];\n    \
    \    }\n        else if(paren_string[i] == ' ') {\n            if(s.empty()) {\n\
    \                result.push_back(temp);\n                temp = \"\";\n     \
    \       }\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    int count = 0;\n    std::string temp;\n    for (int i = 0; i <\
    \ paren_string.length(); i++) {\n        if (paren_string[i] == '(') {\n     \
    \       count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> stk;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.size(); i++) {\n        if(paren_string[i] == '(') {\n    \
    \        stk.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            stk.pop();\n            temp += paren_string[i];\n  \
    \      }\n        else if(paren_string[i] == ' ') {\n            if(stk.empty())\
    \ {\n                result.push_back(temp);\n                temp = \"\";\n \
    \           }\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> stk;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.size(); i++) {\n        if(paren_string[i] == '(') {\n    \
    \        stk.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            stk.pop();\n            temp += paren_string[i];\n  \
    \      }\n        else if(paren_string[i] == ' ') {\n            if(stk.empty())\
    \ {\n                result.push_back(temp);\n                temp = \"\";\n \
    \           }\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    int open_count = 0;\n    int close_count = 0;\n    std::string\
    \ temp;\n    for (int i = 0; i < paren_string.length(); i++) {\n        if (paren_string[i]\
    \ == '(') {\n            open_count++;\n            temp.push_back(paren_string[i]);\n\
    \        } else if (paren_string[i] == ')') {\n            close_count++;\n  \
    \          temp.push_back(paren_string[i]);\n        }\n        if (open_count\
    \ == close_count) {\n            result.push_back(temp);\n            temp.clear();\n\
    \            open_count = 0;\n            close_count = 0;\n        }\n    }\n\
    \    return result;", "  std::vector<std::string> result;\n  std::stack<char>\
    \ st;\n  std::string temp;\n  for(int i = 0; i < paren_string.size(); i++) {\n\
    \    if(paren_string[i] == '(') {\n      st.push(paren_string[i]);\n    } else\
    \ if(paren_string[i] == ')') {\n      st.pop();\n      if(st.empty()) {\n    \
    \    result.push_back(temp);\n        temp = \"\";\n      }\n    } else if(paren_string[i]\
    \ != ' ') {\n      temp += paren_string[i];\n    }\n  }\n  return result;", " \
    \   std::vector<std::string> result;\n    std::stack<char> st;\n    std::string\
    \ temp;\n    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == ' ') continue;\n        if(paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \        } else {\n            if(st.empty()) {\n                result.push_back(temp);\n\
    \                temp = \"\";\n            } else {\n                st.pop();\n\
    \            }\n        }\n        temp += paren_string[i];\n    }\n    if(!temp.empty())\
    \ result.push_back(temp);\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          st.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            if(st.top() == '(') {\n                st.pop();\n  \
    \              if(st.empty()) {\n                    result.push_back(temp);\n\
    \                    temp = \"\";\n                }\n            }\n        }\n\
    \        else if(paren_string[i] != ' ') {\n            temp += paren_string[i];\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::stack<char> st;\n    std::string temp = \"\";\n    for(int i = 0; i\
    \ < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n    \
    \        st.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            st.pop();\n            if(st.empty()) {\n           \
    \     result.push_back(temp);\n                temp = \"\";\n            }\n \
    \       }\n        else if(paren_string[i] != ' ') {\n            temp += paren_string[i];\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    int open = 0;\n    int close = 0;\n    std::string temp;\n    for (int i\
    \ = 0; i < paren_string.length(); i++) {\n        if (paren_string[i] == '(')\
    \ {\n            open++;\n            temp += paren_string[i];\n        }\n  \
    \      else if (paren_string[i] == ')') {\n            close++;\n            temp\
    \ += paren_string[i];\n        }\n        if (open == close) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n            open = 0;\n            close = 0;\n   \
    \     }\n    }\n    return result;", "    std::vector<std::string> result;\n \
    \   std::string temp;\n    int count = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            count++;\n      \
    \      temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp.push_back(paren_string[i]);\n        } else if\
    \ (paren_string[i] == ')') {\n            count--;\n            temp.push_back(paren_string[i]);\n\
    \        }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp.clear();\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp = \"\";\n    int count = 0;\n    for (int i =\
    \ 0; i < paren_string.length(); i++) {\n        if (paren_string[i] == '(') {\n\
    \            count++;\n            temp += paren_string[i];\n        } else if\
    \ (paren_string[i] == ')') {\n            count--;\n            temp += paren_string[i];\n\
    \        }\n        if (count == 0 && temp != \"\") {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> s;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          s.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            s.pop();\n            temp += paren_string[i];\n    \
    \    }\n        else {\n            temp += paren_string[i];\n        }\n    \
    \    if(s.empty()) {\n            result.push_back(temp);\n            temp =\
    \ \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> stk;\n    std::string temp;\n    for(auto c: paren_string)\
    \ {\n        if(c == '(') {\n            stk.push(c);\n        } else if(c ==\
    \ ')') {\n            stk.pop();\n            if(stk.empty()) {\n            \
    \    result.push_back(temp);\n                temp.clear();\n            }\n \
    \       } else if(c != ' ') {\n            temp += c;\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    std::string temp;\n   \
    \ int open_count = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n \
    \       if (paren_string[i] == '(') {\n            open_count++;\n           \
    \ temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n   \
    \         open_count--;\n            temp += paren_string[i];\n        }\n   \
    \     if (open_count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string s = \"\";\n    int count = 0;\n    for (int i = 0;\
    \ i < paren_string.length(); i++) {\n        if (paren_string[i] == '(') {\n \
    \           count++;\n            s += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            s += paren_string[i];\n       \
    \ }\n        if (count == 0 && s != \"\") {\n            result.push_back(s);\n\
    \            s = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          st.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            st.pop();\n            temp += paren_string[i];\n   \
    \     }\n        else {\n            continue;\n        }\n        if(st.empty())\
    \ {\n            result.push_back(temp);\n            temp = \"\";\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    std::string\
    \ temp;\n    int count = 0;\n    for (int i = 0; i < paren_string.size(); i++)\
    \ {\n        if (paren_string[i] == '(') {\n            count++;\n           \
    \ temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n   \
    \         count--;\n            temp += paren_string[i];\n        }\n        if\
    \ (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n   \
    \         temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> stk;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.size(); i++) {\n        if(paren_string[i] == '(') {\n    \
    \        stk.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            stk.pop();\n            temp += paren_string[i];\n  \
    \      }\n        else {\n            continue;\n        }\n        if(stk.empty())\
    \ {\n            result.push_back(temp);\n            temp = \"\";\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    std::stack<char>\
    \ stk;\n    std::string temp;\n    for(int i = 0; i < paren_string.size(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            stk.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            stk.pop();\n\
    \            temp.push_back(paren_string[i]);\n            if(stk.empty()) {\n\
    \                result.push_back(temp);\n                temp.clear();\n    \
    \        }\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> stk;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.size(); i++) {\n        if(paren_string[i] == '(') {\n    \
    \        stk.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            stk.pop();\n            temp += paren_string[i];\n  \
    \      }\n        else if(paren_string[i] == ' ') {\n            if(stk.empty())\
    \ {\n                result.push_back(temp);\n                temp = \"\";\n \
    \           }\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          st.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            st.pop();\n            temp += paren_string[i];\n   \
    \     }\n        else {\n            temp += paren_string[i];\n        }\n   \
    \     if(st.empty()) {\n            result.push_back(temp);\n            temp\
    \ = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp.push_back(paren_string[i]);\n        } else if\
    \ (paren_string[i] == ')') {\n            count--;\n            temp.push_back(paren_string[i]);\n\
    \        }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp.clear();\n        }\n    }\n    return result;", "    // TODO:\
    \ Implement this function\n    std::vector<std::string> result;\n    int count\
    \ = 0;\n    std::string temp = \"\";\n    for (int i = 0; i < paren_string.length();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            count++;\n      \
    \      temp += paren_string[i];\n        }\n        else if (paren_string[i] ==\
    \ ')') {\n            count--;\n            temp += paren_string[i];\n       \
    \ }\n        if (count == 0 && temp != \"\") {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    int start = 0;\n    int end = 0;\n    int count = 0;\n    for (int\
    \ i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(')\
    \ {\n            count++;\n        } else if (paren_string[i] == ')') {\n    \
    \        count--;\n        }\n        if (count == 0) {\n            end = i;\n\
    \            result.push_back(paren_string.substr(start, end - start + 1));\n\
    \            start = i + 1;\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          st.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            st.pop();\n            temp += paren_string[i];\n   \
    \     }\n        else {\n            temp += paren_string[i];\n        }\n   \
    \     if(st.empty()) {\n            result.push_back(temp);\n            temp\
    \ = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int open = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            open++;\n       \
    \     temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            open--;\n            temp += paren_string[i];\n        }\n      \
    \  if (open == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    int open = 0;\n    int close = 0;\n    std::string temp = \"\"\
    ;\n    for (int i = 0; i < paren_string.length(); i++) {\n        if (paren_string[i]\
    \ == '(') {\n            open++;\n            temp += paren_string[i];\n     \
    \   }\n        else if (paren_string[i] == ')') {\n            close++;\n    \
    \        temp += paren_string[i];\n        }\n        if (open == close) {\n \
    \           result.push_back(temp);\n            temp = \"\";\n            open\
    \ = 0;\n            close = 0;\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          st.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            if(st.empty()) {\n                return result;\n  \
    \          }\n            st.pop();\n            if(st.empty()) {\n          \
    \      result.push_back(temp);\n                temp = \"\";\n            }\n\
    \        }\n        else if(paren_string[i] != ' ') {\n            temp += paren_string[i];\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::stack<char> st;\n    std::string temp = \"\";\n    for(int i = 0; i\
    \ < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n    \
    \        st.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            if(!st.empty()) {\n                st.pop();\n      \
    \          temp += paren_string[i];\n            }\n            if(st.empty())\
    \ {\n                result.push_back(temp);\n                temp = \"\";\n \
    \           }\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            temp += paren_string[i];\n            count--;\n    \
    \        if (count == 0) {\n                result.push_back(temp);\n        \
    \        temp = \"\";\n            }\n        }\n    }\n    return result;", " \
    \   std::vector<std::string> result;\n    std::string temp;\n    int count = 0;\n\
    \    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i]\
    \ == '(') {\n            count++;\n            temp += paren_string[i];\n    \
    \    } else if (paren_string[i] == ')') {\n            count--;\n            temp\
    \ += paren_string[i];\n        }\n        if (count == 0 && temp.size() > 0) {\n\
    \            result.push_back(temp);\n            temp = \"\";\n        }\n  \
    \  }\n    return result;", "    std::vector<std::string> result;\n    std::stack<char>\
    \ stk;\n    std::string temp;\n    for(int i = 0; i < paren_string.size(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            stk.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            if(stk.top()\
    \ == '(') {\n                stk.pop();\n                if(stk.empty()) {\n \
    \                   result.push_back(temp);\n                    temp.clear();\n\
    \                }\n            }\n        }\n        else {\n            temp\
    \ += paren_string[i];\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> s;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          s.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            s.pop();\n            temp += paren_string[i];\n    \
    \    }\n        else {\n            continue;\n        }\n        if(s.empty())\
    \ {\n            result.push_back(temp);\n            temp = \"\";\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    std::stack<char>\
    \ st;\n    std::string temp;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            st.pop();\n\
    \            temp += paren_string[i];\n        }\n        else {\n           \
    \ temp += paren_string[i];\n        }\n        if(st.empty()) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    int open_count = 0;\n    int close_count = 0;\n    std::string\
    \ temp;\n    for (int i = 0; i < paren_string.length(); i++) {\n        if (paren_string[i]\
    \ == '(') {\n            open_count++;\n            temp += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            close_count++;\n  \
    \          temp += paren_string[i];\n        }\n        if (open_count == close_count)\
    \ {\n            result.push_back(temp);\n            temp = \"\";\n         \
    \   open_count = 0;\n            close_count = 0;\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    std::string temp;\n   \
    \ int count = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n      \
    \  if (paren_string[i] == '(') {\n            count++;\n            temp += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            count--;\n        \
    \    temp += paren_string[i];\n        }\n        if (count == 0 && temp.size()\
    \ > 0) {\n            result.push_back(temp);\n            temp = \"\";\n    \
    \    }\n    }\n    return result;", "    std::vector<std::string> result;\n  \
    \  int start = 0;\n    int end = 0;\n    int count = 0;\n    for (int i = 0; i\
    \ < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n     \
    \       count++;\n        } else if (paren_string[i] == ')') {\n            count--;\n\
    \        }\n        if (count == 0) {\n            end = i;\n            result.push_back(paren_string.substr(start,\
    \ end - start + 1));\n            start = i + 1;\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    std::string temp;\n   \
    \ int count = 0;\n    for (auto i : paren_string) {\n        if (i == '(') {\n\
    \            count++;\n            temp += i;\n        } else if (i == ')') {\n\
    \            count--;\n            temp += i;\n        }\n        if (count ==\
    \ 0 && temp.size() > 0) {\n            result.push_back(temp);\n            temp.clear();\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            count++;\n      \
    \      temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          st.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            st.pop();\n            temp += paren_string[i];\n   \
    \     }\n        else {\n            temp += paren_string[i];\n        }\n   \
    \     if(st.empty()) {\n            result.push_back(temp);\n            temp\
    \ = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += '(';\n        }\n        else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += ')';\n        }\n     \
    \   if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp.clear();\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp = \"\";\n    int count = 0;\n    for (int i =\
    \ 0; i < paren_string.length(); i++) {\n        if (paren_string[i] == '(') {\n\
    \            count++;\n            temp += paren_string[i];\n        } else if\
    \ (paren_string[i] == ')') {\n            count--;\n            temp += paren_string[i];\n\
    \        }\n        if (count == 0 && temp != \"\") {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp = \"\";\n    int count = 0;\n    for (int i =\
    \ 0; i < paren_string.length(); i++) {\n        if (paren_string[i] == '(') {\n\
    \            count++;\n            temp += paren_string[i];\n        } else if\
    \ (paren_string[i] == ')') {\n            count--;\n            temp += paren_string[i];\n\
    \        }\n        if (count == 0 && temp != \"\") {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "  std::vector<std::string>\
    \ result;\n  std::string temp;\n  int count = 0;\n  for (int i = 0; i < paren_string.size();\
    \ i++) {\n    if (paren_string[i] == '(') {\n      count++;\n      temp += paren_string[i];\n\
    \    } else if (paren_string[i] == ')') {\n      count--;\n      temp += paren_string[i];\n\
    \    }\n    if (count == 0 && temp.size() > 0) {\n      result.push_back(temp);\n\
    \      temp = \"\";\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> stk;\n    std::string temp = \"\";\n    for(int\
    \ i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i] == '(')\
    \ {\n            stk.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            stk.pop();\n            temp += paren_string[i];\n  \
    \      }\n        else if(paren_string[i] == ' ') {\n            if(stk.empty())\
    \ {\n                result.push_back(temp);\n                temp = \"\";\n \
    \           }\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int open_count = 0;\n    for (int i = 0;\
    \ i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n   \
    \         open_count++;\n            temp += paren_string[i];\n        } else\
    \ if (paren_string[i] == ')') {\n            open_count--;\n            temp +=\
    \ paren_string[i];\n        }\n        if (open_count == 0 && temp.size() > 0)\
    \ {\n            result.push_back(temp);\n            temp = \"\";\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    std::stack<char>\
    \ stk;\n    std::string temp;\n    for(int i = 0; i < paren_string.size(); i++)\
    \ {\n        if(paren_string[i] == ' ') {\n            continue;\n        }\n\
    \        if(paren_string[i] == '(') {\n            stk.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            stk.pop();\n\
    \            if(stk.empty()) {\n                result.push_back(temp);\n    \
    \            temp.clear();\n            }\n        }\n        else {\n       \
    \     temp += paren_string[i];\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.size(); i++) {\n        if(paren_string[i] == '(') {\n    \
    \        st.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            st.pop();\n            if(st.empty()) {\n           \
    \     result.push_back(temp);\n                temp.clear();\n            }\n\
    \        }\n        else if(paren_string[i] != ' ') {\n            temp.push_back(paren_string[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            count++;\n      \
    \      temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int open = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            open++;\n       \
    \     temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            open--;\n            temp += paren_string[i];\n        }\n      \
    \  if (open == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "  std::vector<std::string>\
    \ result;\n  std::stack<char> st;\n  std::string temp;\n  for(int i = 0; i < paren_string.size();\
    \ i++) {\n    if(paren_string[i] == '(') {\n      st.push(paren_string[i]);\n\
    \    }\n    else if(paren_string[i] == ')') {\n      st.pop();\n      temp +=\
    \ paren_string[i];\n    }\n    else {\n      if(st.empty()) {\n        if(temp.size()\
    \ > 0) {\n          result.push_back(temp);\n          temp = \"\";\n        }\n\
    \      }\n      else {\n        temp += paren_string[i];\n      }\n    }\n  }\n\
    \  if(temp.size() > 0) {\n    result.push_back(temp);\n  }\n  return result;",
  "    std::vector<std::string> result;\n    std::string temp;\n    int count = 0;\n\
    \    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i]\
    \ == '(') {\n            count++;\n            temp += paren_string[i];\n    \
    \    } else if (paren_string[i] == ')') {\n            count--;\n            temp\
    \ += paren_string[i];\n        }\n        if (count == 0 && temp.size() > 0) {\n\
    \            result.push_back(temp);\n            temp = \"\";\n        }\n  \
    \  }\n    return result;", "    std::vector<std::string> result;\n    std::string\
    \ temp;\n    int open = 0;\n    for (int i = 0; i < paren_string.size(); i++)\
    \ {\n        if (paren_string[i] == '(') {\n            open++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    open--;\n            temp += paren_string[i];\n        }\n        if (open\
    \ == 0 && temp.size() > 0) {\n            result.push_back(temp);\n          \
    \  temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int open = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            open++;\n       \
    \     temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            open--;\n            temp += paren_string[i];\n        }\n      \
    \  if (open == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp.push_back(paren_string[i]);\n        } else if\
    \ (paren_string[i] == ')') {\n            count--;\n            temp.push_back(paren_string[i]);\n\
    \        }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp.clear();\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "  std::vector<std::string>\
    \ result;\n  std::stack<char> s;\n  std::string temp;\n  for (int i = 0; i < paren_string.size();\
    \ i++) {\n    if (paren_string[i] == ' ') {\n      continue;\n    }\n    if (paren_string[i]\
    \ == '(') {\n      s.push(paren_string[i]);\n    } else {\n      if (s.empty())\
    \ {\n        return result;\n      }\n      s.pop();\n      if (s.empty()) {\n\
    \        result.push_back(temp);\n        temp = \"\";\n      }\n    }\n    temp\
    \ += paren_string[i];\n  }\n  return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            count++;\n      \
    \      temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp = \"\";\n    int count = 0;\n    for (int i =\
    \ 0; i < paren_string.length(); i++) {\n        if (paren_string[i] == '(') {\n\
    \            count++;\n            temp += paren_string[i];\n        } else if\
    \ (paren_string[i] == ')') {\n            count--;\n            temp += paren_string[i];\n\
    \        }\n        if (count == 0 && temp != \"\") {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> s;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          s.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            s.pop();\n            temp += paren_string[i];\n    \
    \    }\n        else {\n            continue;\n        }\n        if(s.empty())\
    \ {\n            result.push_back(temp);\n            temp = \"\";\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    std::string\
    \ temp = \"\";\n    int count = 0;\n    for (int i = 0; i < paren_string.length();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            count++;\n      \
    \      temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp != \"\") {\n            result.push_back(temp);\n \
    \           temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            count++;\n            temp += c;\n \
    \       } else if (c == ')') {\n            count--;\n            temp += c;\n\
    \        }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp.clear();\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> s;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          s.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            s.pop();\n            temp += paren_string[i];\n    \
    \    }\n        else if(paren_string[i] == ' ') {\n            continue;\n   \
    \     }\n        else {\n            temp += paren_string[i];\n        }\n   \
    \     if(s.empty()) {\n            result.push_back(temp);\n            temp =\
    \ \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == ' ') {\n  \
    \          continue;\n        }\n        if(paren_string[i] == '(') {\n      \
    \      st.push(paren_string[i]);\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            if(st.empty()) {\n                return result;\n     \
    \       }\n            else {\n                st.pop();\n                temp\
    \ += paren_string[i];\n                if(st.empty()) {\n                    result.push_back(temp);\n\
    \                    temp = \"\";\n                }\n            }\n        }\n\
    \    }\n    return result;", "  std::vector<std::string> result;\n  std::string\
    \ temp;\n  int count = 0;\n  for (int i = 0; i < paren_string.size(); i++) {\n\
    \    if (paren_string[i] == '(') {\n      count++;\n      temp += paren_string[i];\n\
    \    } else if (paren_string[i] == ')') {\n      count--;\n      temp += paren_string[i];\n\
    \    }\n    if (count == 0 && temp.size() > 0) {\n      result.push_back(temp);\n\
    \      temp = \"\";\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp.push_back(paren_string[i]);\n        } else if\
    \ (paren_string[i] == ')') {\n            count--;\n            temp.push_back(paren_string[i]);\n\
    \        }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp.clear();\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int open = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            open++;\n       \
    \     temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            open--;\n            temp += paren_string[i];\n        }\n      \
    \  if (open == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp.push_back(paren_string[i]);\n        } else if\
    \ (paren_string[i] == ')') {\n            count--;\n            temp.push_back(paren_string[i]);\n\
    \        }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp.clear();\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.size(); i++) {\n        if(paren_string[i] == ' ') {\n    \
    \        continue;\n        }\n        if(paren_string[i] == '(') {\n        \
    \    st.push(paren_string[i]);\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            st.pop();\n            if(st.empty()) {\n              \
    \  result.push_back(temp);\n                temp.clear();\n            }\n   \
    \     }\n        else {\n            temp += paren_string[i];\n        }\n   \
    \ }\n    return result;", "    std::vector<std::string> result;\n    std::string\
    \ temp;\n    int count = 0;\n    for (int i = 0; i < paren_string.size(); i++)\
    \ {\n        if (paren_string[i] == '(') {\n            count++;\n           \
    \ temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n   \
    \         count--;\n            temp += paren_string[i];\n        }\n        if\
    \ (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n   \
    \         temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            count++;\n            temp += c;\n \
    \       } else if (c == ')') {\n            count--;\n            temp += c;\n\
    \        }\n        if (count == 0 && !temp.empty()) {\n            result.push_back(temp);\n\
    \            temp.clear();\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    int count = 0;\n    std::string temp;\n    for (int i = 0; i <\
    \ paren_string.length(); i++) {\n        if (paren_string[i] == '(') {\n     \
    \       count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.length() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> stk;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.size(); i++) {\n        if(paren_string[i] == '(') {\n    \
    \        stk.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            stk.pop();\n            temp += paren_string[i];\n  \
    \      }\n        else {\n            continue;\n        }\n        if(stk.empty())\
    \ {\n            result.push_back(temp);\n            temp = \"\";\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    std::string\
    \ temp;\n    int count = 0;\n    for (int i = 0; i < paren_string.size(); i++)\
    \ {\n        if (paren_string[i] == '(') {\n            count++;\n           \
    \ temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n   \
    \         count--;\n            temp += paren_string[i];\n        }\n        if\
    \ (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n   \
    \         temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp.push_back(paren_string[i]);\n        } else if\
    \ (paren_string[i] == ')') {\n            count--;\n            temp.push_back(paren_string[i]);\n\
    \        }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp.clear();\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          st.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            if(st.empty()) {\n                return result;\n  \
    \          }\n            else {\n                st.pop();\n                temp\
    \ += paren_string[i];\n            }\n        }\n        else {\n            temp\
    \ += paren_string[i];\n        }\n        if(st.empty()) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == ' ') {\n  \
    \          continue;\n        }\n        if(paren_string[i] == '(') {\n      \
    \      st.push(paren_string[i]);\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            if(st.empty()) {\n                return result;\n     \
    \       }\n            st.pop();\n            if(st.empty()) {\n             \
    \   result.push_back(temp);\n                temp = \"\";\n            }\n   \
    \     }\n        else {\n            temp += paren_string[i];\n        }\n   \
    \ }\n    return result;", "    std::vector<std::string> result;\n    std::string\
    \ temp;\n    int count = 0;\n    for (int i = 0; i < paren_string.size(); i++)\
    \ {\n        if (paren_string[i] == '(') {\n            count++;\n           \
    \ temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n   \
    \         count--;\n            temp += paren_string[i];\n        }\n        if\
    \ (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n   \
    \         temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == ' ') {\n  \
    \          continue;\n        }\n        if(paren_string[i] == '(') {\n      \
    \      st.push(paren_string[i]);\n        }\n        else if(paren_string[i] ==\
    \ ')') {\n            st.pop();\n            if(st.empty()) {\n              \
    \  result.push_back(temp);\n                temp = \"\";\n            }\n    \
    \    }\n        else {\n            temp += paren_string[i];\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> result;\n    int open_count\
    \ = 0;\n    int close_count = 0;\n    std::string temp;\n    for (int i = 0; i\
    \ < paren_string.length(); i++) {\n        if (paren_string[i] == '(') {\n   \
    \         open_count++;\n            temp += paren_string[i];\n        } else\
    \ if (paren_string[i] == ')') {\n            close_count++;\n            temp\
    \ += paren_string[i];\n        }\n        if (open_count == close_count) {\n \
    \           result.push_back(temp);\n            temp = \"\";\n            open_count\
    \ = 0;\n            close_count = 0;\n        }\n    }\n    return result;", " \
    \   std::vector<std::string> result;\n    std::stack<char> stk;\n    std::string\
    \ temp;\n    for(int i = 0; i < paren_string.size(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            stk.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            if(stk.empty()) {\n                return result;\n \
    \           }\n            else {\n                stk.pop();\n              \
    \  if(stk.empty()) {\n                    result.push_back(temp);\n          \
    \          temp.clear();\n                }\n            }\n        }\n      \
    \  else if(paren_string[i] != ' ') {\n            temp += paren_string[i];\n \
    \       }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::string temp;\n    int count = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            count++;\n      \
    \      temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          st.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            st.pop();\n            temp.push_back(paren_string[i]);\n\
    \            if(st.empty()) {\n                result.push_back(temp);\n     \
    \           temp.clear();\n            }\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    int count = 0;\n    std::string temp;\n\
    \    for (int i = 0; i < paren_string.length(); i++) {\n        if (paren_string[i]\
    \ == '(') {\n            count++;\n            temp += paren_string[i];\n    \
    \    } else if (paren_string[i] == ')') {\n            count--;\n            temp\
    \ += paren_string[i];\n        }\n        if (count == 0 && temp.length() > 0)\
    \ {\n            result.push_back(temp);\n            temp = \"\";\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    std::string\
    \ temp;\n    int count = 0;\n    for (int i = 0; i < paren_string.size(); i++)\
    \ {\n        if (paren_string[i] == '(') {\n            count++;\n           \
    \ temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n   \
    \         count--;\n            temp += paren_string[i];\n        }\n        if\
    \ (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n   \
    \         temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    int count = 0;\n    std::string temp = \"\";\n    for (int i =\
    \ 0; i < paren_string.length(); i++) {\n        if (paren_string[i] == '(') {\n\
    \            count++;\n            temp += paren_string[i];\n        } else if\
    \ (paren_string[i] == ')') {\n            count--;\n            temp += paren_string[i];\n\
    \        }\n        if (count == 0 && temp != \"\") {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          st.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            st.pop();\n            temp += paren_string[i];\n   \
    \     }\n        else {\n            continue;\n        }\n        if(st.empty())\
    \ {\n            result.push_back(temp);\n            temp = \"\";\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    std::string\
    \ temp;\n    int open = 0;\n    for (int i = 0; i < paren_string.size(); i++)\
    \ {\n        if (paren_string[i] == '(') {\n            open++;\n            temp\
    \ += paren_string[i];\n        } else if (paren_string[i] == ')') {\n        \
    \    open--;\n            temp += paren_string[i];\n        }\n        if (open\
    \ == 0 && temp.size() > 0) {\n            result.push_back(temp);\n          \
    \  temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    int count = 0;\n    std::string temp;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            count++;\n            temp += c;\n \
    \       } else if (c == ')') {\n            count--;\n            temp += c;\n\
    \        }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp.clear();\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          st.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            st.pop();\n            temp += paren_string[i];\n   \
    \     }\n        else if(paren_string[i] == ' ') {\n            if(st.empty())\
    \ {\n                result.push_back(temp);\n                temp = \"\";\n \
    \           }\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> s;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          s.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            s.pop();\n            temp += paren_string[i];\n    \
    \    }\n        else if(paren_string[i] == ' ') {\n            if(s.empty()) {\n\
    \                result.push_back(temp);\n                temp = \"\";\n     \
    \       }\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    int start = 0;\n    int end = 0;\n    int open_count = 0;\n   \
    \ int close_count = 0;\n    for (int i = 0; i < paren_string.length(); i++) {\n\
    \        if (paren_string[i] == '(') {\n            open_count++;\n        } else\
    \ if (paren_string[i] == ')') {\n            close_count++;\n        }\n     \
    \   if (open_count == close_count) {\n            end = i;\n            result.push_back(paren_string.substr(start,\
    \ end - start + 1));\n            start = end + 1;\n            open_count = 0;\n\
    \            close_count = 0;\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> s;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          s.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            s.pop();\n            temp += paren_string[i];\n    \
    \    }\n        else {\n            temp += paren_string[i];\n        }\n    \
    \    if(s.empty()) {\n            result.push_back(temp);\n            temp =\
    \ \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          st.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            st.pop();\n            temp.push_back(paren_string[i]);\n\
    \            if(st.empty()) {\n                result.push_back(temp);\n     \
    \           temp.clear();\n            }\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::stack<char> s;\n    std::string\
    \ temp;\n    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            s.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            s.pop();\n            temp += paren_string[i];\n    \
    \    }\n        else {\n            continue;\n        }\n        if(s.empty())\
    \ {\n            result.push_back(temp);\n            temp = \"\";\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    std::stack<char>\
    \ st;\n    std::string temp;\n    for(int i = 0; i < paren_string.length(); i++)\
    \ {\n        if(paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            st.pop();\n\
    \            temp += paren_string[i];\n        }\n        else {\n           \
    \ continue;\n        }\n        if(st.empty()) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "  std::vector<std::string>\
    \ result;\n  std::string current_string;\n  int open_paren_count = 0;\n  for (int\
    \ i = 0; i < paren_string.size(); i++) {\n    if (paren_string[i] == '(') {\n\
    \      open_paren_count++;\n      current_string += paren_string[i];\n    } else\
    \ if (paren_string[i] == ')') {\n      open_paren_count--;\n      current_string\
    \ += paren_string[i];\n      if (open_paren_count == 0) {\n        result.push_back(current_string);\n\
    \        current_string = \"\";\n      }\n    }\n  }\n  return result;", "   \
    \ std::vector<std::string> result;\n    std::stack<char> st;\n    std::string\
    \ temp;\n    for(int i = 0; i < paren_string.length(); i++) {\n        if(paren_string[i]\
    \ == '(') {\n            st.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            if(st.top() == '(') {\n                st.pop();\n  \
    \              temp += paren_string[i];\n            }\n            if(st.empty())\
    \ {\n                result.push_back(temp);\n                temp = \"\";\n \
    \           }\n        }\n    }\n    return result;", "  std::vector<std::string>\
    \ result;\n  std::stack<char> stk;\n  std::string temp;\n  for (int i = 0; i <\
    \ paren_string.size(); i++) {\n    if (paren_string[i] == '(') {\n      stk.push(paren_string[i]);\n\
    \    } else if (paren_string[i] == ')') {\n      stk.pop();\n      temp += paren_string[i];\n\
    \    }\n    if (stk.empty()) {\n      result.push_back(temp);\n      temp = \"\
    \";\n    }\n  }\n  return result;", "    std::vector<std::string> result;\n  \
    \  std::string temp;\n    int count = 0;\n    for (int i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            count++;\n      \
    \      temp += paren_string[i];\n        } else if (paren_string[i] == ')') {\n\
    \            count--;\n            temp += paren_string[i];\n        }\n     \
    \   if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          st.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            st.pop();\n            temp += paren_string[i];\n   \
    \     }\n        else {\n            temp += paren_string[i];\n        }\n   \
    \     if(st.empty()) {\n            result.push_back(temp);\n            temp\
    \ = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.length(); i++) {\n        if(paren_string[i] == '(') {\n  \
    \          st.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            if(st.empty()) {\n                return result;\n  \
    \          }\n            st.pop();\n            if(st.empty()) {\n          \
    \      result.push_back(temp);\n                temp = \"\";\n            }\n\
    \        }\n        else if(paren_string[i] != ' ') {\n            temp += paren_string[i];\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    std::stack<char> st;\n    std::string temp;\n    for(int i = 0; i < paren_string.length();\
    \ i++) {\n        if(paren_string[i] == ' ') {\n            continue;\n      \
    \  }\n        if(paren_string[i] == '(') {\n            st.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] == ')') {\n            st.pop();\n\
    \            if(st.empty()) {\n                result.push_back(temp);\n     \
    \           temp = \"\";\n            }\n        }\n        else {\n         \
    \   temp += paren_string[i];\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    int count = 0;\n    for (int i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     count++;\n            temp += paren_string[i];\n        } else if (paren_string[i]\
    \ == ')') {\n            count--;\n            temp += paren_string[i];\n    \
    \    }\n        if (count == 0 && temp.size() > 0) {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    std::stack<char> st;\n    std::string temp;\n    for(int i = 0;\
    \ i < paren_string.size(); i++) {\n        if(paren_string[i] == '(') {\n    \
    \        st.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ == ')') {\n            if(st.empty()) {\n                return result;\n  \
    \          }\n            st.pop();\n            if(st.empty()) {\n          \
    \      result.push_back(temp);\n                temp.clear();\n            }\n\
    \        }\n        else if(paren_string[i] != ' ') {\n            temp += paren_string[i];\n\
    \        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
