name: HumanEval_41_car_race_collision
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's a perfectly\
  \ straight infinitely long line.\n// n cars are driving left to right;  simultaneously,\
  \ a different set of n cars\n// are driving right to left.   The two sets of cars\
  \ start out being very far from\n// each other.  All cars move in the same speed.\
  \  Two cars are said to collide\n// when a car that's moving left to right hits\
  \ a car that's moving right to left.\n// However, the cars are infinitely sturdy\
  \ and strong; as a result, they continue moving\n// in their trajectory as if they\
  \ did not collide.\n// This function outputs the number of such collisions.\nlong\
  \ car_race_collision(long n) {\n"
tests: "}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2))\
  \ == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n\
  \    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n"
completions: ["    // Write your code here\n    // To debug: cerr << \"Debug messages...\"\
    \ << endl;\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long\
    \ j = 0; j < n; j++) {\n            if(i < j) {\n                count++;\n  \
    \          }\n        }\n    }\n    return count;", "    // Write your code here\n\
    \    return n*(n-1)/2;", "    // TODO: implement this function\n    return 0;",
  "    // Write your code here.\n    long count = 0;\n    for(long i = 0; i < n; i++)\
    \ {\n        for(long j = 0; j < n; j++) {\n            if(i < j) {\n        \
    \        count++;\n            }\n        }\n    }\n    return count;", "    //\
    \ Write your code here\n    // To print results to the standard output you can\
    \ use the printf function\n    // For example, printf(\"%s\", \"Hello world!\"\
    );\n    // printf(\"%d\", 42[array]);\n    // Printf takes the format of printf(\"\
    %d %s\\n\", price, currency);\n    long count = 0;\n    for(long i = 0; i < n;\
    \ i++) {\n        for(long j = 0; j < n; j++) {\n            if(i < j) {\n   \
    \             count++;\n            }\n        }\n    }\n    return count;", " \
    \ // TODO: Implement this function.\n  // Hint: You can use the modulo operator\
    \ to find the remainder of a number.\n  // For example, 5 % 3 = 2.\n  // Hint:\
    \ You can use the division operator to find the quotient of a number.\n  // For\
    \ example, 5 / 3 = 1.\n  // Hint: You can use the multiplication operator to find\
    \ the product of a number.\n  // For example, 5 * 3 = 15.\n  // Hint: You can\
    \ use the addition operator to find the sum of a number.\n  // For example, 5\
    \ + 3 = 8.\n  // Hint: You can use the subtraction operator to find the difference\
    \ of a number.\n  // For example, 5 - 3 = 2.\n  // Hint: You can use the less\
    \ than operator to find if a number is less than another.\n  // For example, 5\
    \ < 3 = false.\n  // Hint: You can use the greater than operator to find if a\
    \ number is greater than another.\n  // For example, 5 > 3 = true.\n  // Hint:\
    \ You can use the less than or equal to operator to find if a number is less than\
    \ or equal to another.\n  // For example, 5 <= 3 = false.\n  // Hint: You can\
    \ use the greater than or equal to operator to find if a number is greater than\
    \ or equal to another.\n  // For example, 5 >= 3 = true.\n  // Hint: You can use\
    \ the equal to operator to find if a number is equal to another.\n  // For example,\
    \ 5 == 3 = false.\n  // Hint: You can use the not equal to operator to find if\
    \ a number is not equal to another.\n  // For example, 5 != 3 = true.\n  // Hint:\
    \ You can use the logical and operator to find if two conditions are true.\n \
    \ // For example, (5 < 3) && (5 > 3) = false.\n  // Hint: You can use the logical\
    \ or operator to find if at least one of two conditions is true.\n  // For example,\
    \ (5 < 3) || (5 > 3) = true.\n  // Hint: You can use the logical not operator\
    \ to negate a condition.\n  // For example, !(5 < 3", "  // TODO: Implement this\
    \ function.\n  return 0;", "    // TODO: implement this function\n    // You may\
    \ use any data structure you want.\n    // You may use any number of helper functions.\n\
    \    // You may use any number of loops.\n    // You may use any number of if\
    \ statements.\n    // You may use any number of return statements.\n    // You\
    \ may use any number of break statements.\n    // You may use any number of continue\
    \ statements.\n    // You may use any number of goto statements.\n    // You may\
    \ use any number of switch statements.\n    // You may use any number of case\
    \ statements.\n    // You may use any number of default statements.\n    // You\
    \ may use any number of ternary operators.\n    // You may use any number of bitwise\
    \ operators.\n    // You may use any number of logical operators.\n    // You\
    \ may use any number of relational operators.\n    // You may use any number of\
    \ arithmetic operators.\n    // You may use any number of assignment operators.\n\
    \    // You may use any number of parentheses.\n    // You may use any number\
    \ of braces.\n    // You may use any number of brackets.\n    // You may use any\
    \ number of semicolons.\n    // You may use any number of commas.\n    // You\
    \ may use any number of single-line comments.\n    // You may use any number of\
    \ multi-line comments.\n    // You may use any number of whitespace characters.\n\
    \    // You may use any number of newlines.\n    // You may use any number of\
    \ tabs.\n    // You may use any number of spaces.\n    // You may use any number\
    \ of digits.\n    // You may use any number of letters.\n    // You may use any\
    \ number of underscores.\n    // You may use any number of apostrophes.\n    //\
    \ You may use any number of quotation marks.\n    // You may use any number of\
    \ backslashes.\n    // You may use any number of exclamation points.\n    // You\
    \ may use any number of question marks.\n    // You may use any number of periods.\n\
    \    // You may use any number of colons.\n    // You may use any number of semicolons.\n\
    \    // You may use any number of ampersands.\n    // You may use any number of\
    \ asterisks.\n    // You may use any", "  // TODO:  Implement this function.\n\
    \  // You are allowed to use any STL container.\n  // You are allowed to use any\
    \ STL algorithm.\n  // You are allowed to use any STL function.\n  // You are\
    \ allowed to use any STL iterator.\n  // You are allowed to use any STL utility\
    \ function.\n  // You are allowed to use any STL numeric function.\n  // You are\
    \ allowed to use any STL type.\n  // You are allowed to use any STL function object.\n\
    \  // You are allowed to use any STL utility function object.\n  // You are allowed\
    \ to use any STL numeric function object.\n  // You are allowed to use any STL\
    \ type function object.\n  // You are allowed to use any STL type utility function\
    \ object.\n  // You are allowed to use any STL type numeric function object.\n\
    \  // You are allowed to use any STL type function object.\n  // You are allowed\
    \ to use any STL type utility function object.\n  // You are allowed to use any\
    \ STL type numeric function object.\n  // You are allowed to use any STL type\
    \ function object.\n  // You are allowed to use any STL type utility function\
    \ object.\n  // You are allowed to use any STL type numeric function object.\n\
    \  // You are allowed to use any STL type function object.\n  // You are allowed\
    \ to use any STL type utility function object.\n  // You are allowed to use any\
    \ STL type numeric function object.\n  // You are allowed to use any STL type\
    \ function object.\n  // You are allowed to use any STL type utility function\
    \ object.\n  // You are allowed to use any STL type numeric function object.\n\
    \  // You are allowed to use any STL type function object.\n  // You are allowed\
    \ to use any STL type utility function object.\n  // You are allowed to use any\
    \ STL type numeric function object.\n  // You are allowed to use any STL type\
    \ function object.\n  // You are allowed to use any STL type utility function\
    \ object.\n  // You are allowed to use any STL type numeric function object.\n\
    \  // You are allowed to use any STL type function object.\n  // You are allowed\
    \ to use any STL type utility function object.\n  // You are allowed to use any\
    \ STL type numeric function object.\n  // You are allowed to use any STL type\
    \ function object.\n  // You are allowed to use", '    return n*(n-1)/2;', " \
    \   // TODO: Implement this function.\n    return 0;", '    return n*(n-1)/2;',
  "    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        for (long j =\
    \ 1; j <= n; j++) {\n            if (i < j) {\n                count++;\n    \
    \        }\n        }\n    }\n    return count;", "    // Write your code here\n\
    \    return n*(n-1)/2;", "    // TODO: Implement this function.\n    // You may\
    \ assume that n is a positive number.\n    // You may also assume that the cars\
    \ are perfectly aligned\n    // and that they do not collide with each other.\n\
    \    // You may also assume that the cars are perfectly aligned\n    // and that\
    \ they do not collide with each other.\n    // You may also assume that the cars\
    \ are perfectly aligned\n    // and that they do not collide with each other.\n\
    \    // You may also assume that the cars are perfectly aligned\n    // and that\
    \ they do not collide with each other.\n    // You may also assume that the cars\
    \ are perfectly aligned\n    // and that they do not collide with each other.\n\
    \    // You may also assume that the cars are perfectly aligned\n    // and that\
    \ they do not collide with each other.\n    // You may also assume that the cars\
    \ are perfectly aligned\n    // and that they do not collide with each other.\n\
    \    // You may also assume that the cars are perfectly aligned\n    // and that\
    \ they do not collide with each other.\n    // You may also assume that the cars\
    \ are perfectly aligned\n    // and that they do not collide with each other.\n\
    \    // You may also assume that the cars are perfectly aligned\n    // and that\
    \ they do not collide with each other.\n    // You may also assume that the cars\
    \ are perfectly aligned\n    // and that they do not collide with each other.\n\
    \    // You may also assume that the cars are perfectly aligned\n    // and that\
    \ they do not collide with each other.\n    // You may also assume that the cars\
    \ are perfectly aligned\n    // and that they do not collide with each other.\n\
    \    // You may also assume that the cars are perfectly aligned\n    // and that\
    \ they do not collide with each other.\n    // You may also assume that the cars\
    \ are perfectly aligned\n    // and that they do not collide with each other.\n\
    \    // You may also assume that the cars are perfectly aligned\n    // and that\
    \ they do not collide with each other.\n    // You may also assume that the cars\
    \ are perfectly aligned\n    // and that they do not collide with each other.\n\
    \    // You may also assume that the cars are perfectly aligned\n    // and that\
    \ they do not collide with each other.\n    // You may also assume that the cars\
    \ are perfectly aligned\n    // and that they do not", "    // This is your job.\
    \ :)\n    return n*(n-1)/2;", "    // Write your code here\n    // To debug: cerr\
    \ << \"Debug messages...\" << endl;\n    long long int count = 0;\n    long long\
    \ int i = 0;\n    long long int j = n-1;\n    while(i<n && j>=0)\n    {\n    \
    \    if(i<j)\n        {\n            count += j;\n            i++;\n        }\n\
    \        else\n        {\n            j--;\n        }\n    }\n    return count;",
  "    // TODO: implement this function\n    return 0;", "    // TODO: Implement this\
    \ function.\n    // This function is not tested by the test suite, so you must\n\
    \    // test it on your own.\n    // You can use the main function to test your\
    \ code.\n    // You can also use the online grader to test your code.\n    //\
    \ You can also use the online grader to test your code.\n    // You can also use\
    \ the online grader to test your code.\n    // You can also use the online grader\
    \ to test your code.\n    // You can also use the online grader to test your code.\n\
    \    // You can also use the online grader to test your code.\n    // You can\
    \ also use the online grader to test your code.\n    // You can also use the online\
    \ grader to test your code.\n    // You can also use the online grader to test\
    \ your code.\n    // You can also use the online grader to test your code.\n \
    \   // You can also use the online grader to test your code.\n    // You can also\
    \ use the online grader to test your code.\n    // You can also use the online\
    \ grader to test your code.\n    // You can also use the online grader to test\
    \ your code.\n    // You can also use the online grader to test your code.\n \
    \   // You can also use the online grader to test your code.\n    // You can also\
    \ use the online grader to test your code.\n    // You can also use the online\
    \ grader to test your code.\n    // You can also use the online grader to test\
    \ your code.\n    // You can also use the online grader to test your code.\n \
    \   // You can also use the online grader to test your code.\n    // You can also\
    \ use the online grader to test your code.\n    // You can also use the online\
    \ grader to test your code.\n    // You can also use the online grader to test\
    \ your code.\n    // You can also use the online grader to test your code.\n \
    \   // You can also use the online grader to test your code.\n    // You can also\
    \ use the online grader to test your code.\n    // You can also use the online\
    \ grader to test your code.\n    // You can also use the online grader to test\
    \ your code", "  // TODO: Implement this function.\n  return 0;", "    // TODO:\
    \ Implement this function\n    long count = 0;\n    for(long i = 0; i < n; i++)\
    \ {\n        for(long j = 0; j < n; j++) {\n            if(i < j) {\n        \
    \        count++;\n            }\n        }\n    }\n    return count;", "    long\
    \ count = 0;\n    long i = 0;\n    long j = n-1;\n    while(i<n && j>=0) {\n \
    \       if(i==j) {\n            count++;\n            i++;\n            j--;\n\
    \        }\n        else if(i<j) {\n            i++;\n            j--;\n     \
    \   }\n        else {\n            j--;\n        }\n    }\n    return count;",
  "  // TODO: Implement this function.\n  // You can use any data structure you want.\n\
    \  // You can use any algorithm you want.\n  // You can use any programming language\
    \ you want.\n  // You can use any IDE you want.\n  // You can use any operating\
    \ system you want.\n  // You can use any compiler you want.\n  // You can use\
    \ any debugger you want.\n  // You can use any version control system you want.\n\
    \  // You can use any build system you want.\n  // You can use any testing framework\
    \ you want.\n  // You can use any documentation system you want.\n  // You can\
    \ use any coding style you want.\n  // You can use any naming convention you want.\n\
    \  // You can use any code review system you want.\n  // You can use any issue\
    \ tracking system you want.\n  // You can use any deployment system you want.\n\
    \  // You can use any cloud provider you want.\n  // You can use any hardware\
    \ you want.\n  // You can use any network you want.\n  // You can use any database\
    \ you want.\n  // You can use any storage system you want.\n  // You can use any\
    \ caching system you want.\n  // You can use any messaging system you want.\n\
    \  // You can use any logging system you want.\n  // You can use any monitoring\
    \ system you want.\n  // You can use any security system you want.\n  // You can\
    \ use any load balancing system you want.\n  // You can use any autoscaling system\
    \ you want.\n  // You can use any failover system you want.\n  // You can use\
    \ any redundancy system you want.\n  // You can use any high availability system\
    \ you want.\n  // You can use any disaster recovery system you want.\n  // You\
    \ can use any backup system you want.\n  // You can use any recovery system you\
    \ want.\n  // You can use any caching system you want.\n  // You can use any compression\
    \ system you want.\n  // You can use any encryption system you want.\n  // You\
    \ can use any authentication system you want.\n  // You can use any authorization\
    \ system you want.\n  // You can use any access control system you want.\n  //\
    \ You can use any throttling system you want.\n  // You can use", "    long collisions\
    \ = 0;\n    // TODO: implement this function.\n    // Hint: you can use std::vector<long>\
    \ to store the positions of the cars.\n    // Hint: you can use std::sort to sort\
    \ the cars.\n    // Hint: you can use std::set_intersection to find the collisions.\n\
    \    // Hint: you can use std::distance to find the number of collisions.\n  \
    \  // Hint: you can use std::vector<long>::iterator to iterate through the cars.\n\
    \    // Hint: you can use std::vector<long>::begin() and std::vector<long>::end()\
    \ to get the start and end of the cars.\n    // Hint: you can use std::vector<long>::insert()\
    \ to insert a car into the vector.\n    // Hint: you can use std::vector<long>::erase()\
    \ to erase a car from the vector.\n    // Hint: you can use std::vector<long>::push_back()\
    \ to add a car to the vector.\n    // Hint: you can use std::vector<long>::pop_back()\
    \ to remove a car from the vector.\n    // Hint: you can use std::vector<long>::front()\
    \ to get the first car in the vector.\n    // Hint: you can use std::vector<long>::back()\
    \ to get the last car in the vector.\n    // Hint: you can use std::vector<long>::clear()\
    \ to remove all cars from the vector.\n    // Hint: you can use std::vector<long>::size()\
    \ to get the number of cars in the vector.\n    // Hint: you can use std::vector<long>::empty()\
    \ to check if the vector is empty.\n    // Hint: you can use std::vector<long>::resize()\
    \ to resize the vector.\n    // Hint: you can use std::vector<long>::capacity()\
    \ to get the capacity of the vector.\n    // Hint: you can use std::vector<long>::reserve()\
    \ to reserve space for the vector.\n    // Hint: you can use std::vector<long>::shrink_to_fit()\
    \ to shrink the vector.\n    // Hint: you", "    // TODO: implement this function\n\
    \    return 0;", "    // TODO: Implement this function\n    return 0;", "  //\
    \ TODO: implement this function\n  // You may assume that n is a positive integer.\n\
    \  // You may assume that n is less than or equal to 1 billion.\n  // You may\
    \ assume that n is less than or equal to the number of bits in an unsigned long.\n\
    \  // You may assume that n is less than or equal to the number of bits in a long\
    \ long.\n  // You may assume that n is less than or equal to the number of bits\
    \ in an unsigned long long.\n  // You may assume that n is less than or equal\
    \ to the number of bits in an int.\n  // You may assume that n is less than or\
    \ equal to the number of bits in an unsigned int.\n  // You may assume that n\
    \ is less than or equal to the number of bits in a short.\n  // You may assume\
    \ that n is less than or equal to the number of bits in an unsigned short.\n \
    \ // You may assume that n is less than or equal to the number of bits in a char.\n\
    \  // You may assume that n is less than or equal to the number of bits in an\
    \ unsigned char.\n  // You may assume that n is less than or equal to the number\
    \ of bits in a long double.\n  // You may assume that n is less than or equal\
    \ to the number of bits in a double.\n  // You may assume that n is less than\
    \ or equal to the number of bits in a float.\n  // You may assume that n is less\
    \ than or equal to the number of bits in a long long double.\n  // You may assume\
    \ that n is less than or equal to the number of bits in a long double.\n  // You\
    \ may assume that n is less than or equal to the number of bits in a long long\
    \ float.\n  // You may assume that n is less than or equal to the number of bits\
    \ in a long float.\n  // You may assume that n is less than or equal to the number\
    \ of bits in a long long long double.\n  // You may assume that n is less than\
    \ or equal to the number of bits in a long long double.\n  // You may assume that\
    \ n is less than or equal to the number of bits in a long long long float.\n \
    \ // You may assume that n is less than or equal to the number of bits in a long\
    \ long float.\n  // You may assume that n is", "    // TODO: Implement this function.\n\
    \    // You can use any data structure you want.\n    // You can also use any\
    \ sorting algorithm you want.\n    // You can also use any O(n) algorithm you\
    \ want.\n    // You can also use any O(n log n) algorithm you want.\n    // You\
    \ can also use any O(n^2) algorithm you want.\n    // You can also use any O(n^2\
    \ log n) algorithm you want.\n    // You can also use any O(n^3) algorithm you\
    \ want.\n    // You can also use any O(n^3 log n) algorithm you want.\n    //\
    \ You can also use any O(2^n) algorithm you want.\n    // You can also use any\
    \ O(n!) algorithm you want.\n    // You can also use any O(n log n!) algorithm\
    \ you want.\n    // You can also use any O(n^n) algorithm you want.\n    // You\
    \ can also use any O(n^n log n) algorithm you want.\n    // You can also use any\
    \ O(n^n!) algorithm you want.\n    // You can also use any O(n^n log n!) algorithm\
    \ you want.\n    // You can also use any O(n!) algorithm you want.\n    // You\
    \ can also use any O(n log n!) algorithm you want.\n    // You can also use any\
    \ O(n^n!) algorithm you want.\n    // You can also use any O(n^n log n!) algorithm\
    \ you want.\n    // You can also use any O(n!) algorithm you want.\n    // You\
    \ can also use any O(n log n!) algorithm you want.\n    // You can also use any\
    \ O(n^n!) algorithm you want.\n    // You can also use any O(n^n log n!) algorithm\
    \ you want.\n    // You can also use any O(n!) algorithm you want.\n    // You\
    \ can also use any O(n log n!) algorithm you want.\n    // You can also use any\
    \ O(n^n!) algorithm you want.\n    // You can also use any O(n^n log n!) algorithm\
    \ you want.\n    // You can also use any O(n!) algorithm you want.\n    // You\
    \ can also use", '    return n*(n-1)/2;', "  // TODO: Implement this function.\n\
    \  // The following line is a placeholder.\n  return n*(n-1)/2;", '    return
    n*(n-1)/2;', '    return n*(n-1)/2;', "    // TODO: Implement this function.\n\
    \    // You can use any data structure you want.\n    // You can use any algorithm\
    \ you want.\n    // You can use any programming language you want.\n    // You\
    \ can use any IDE you want.\n    // You can use any operating system you want.\n\
    \    // You can use any computer you want.\n    // You can use any internet connection\
    \ you want.\n    // You can use any human you want.\n    // You can use any animal\
    \ you want.\n    // You can use any plant you want.\n    // You can use any mineral\
    \ you want.\n    // You can use any chemical you want.\n    // You can use any\
    \ physical object you want.\n    // You can use any abstract concept you want.\n\
    \    // You can use any mathematical concept you want.\n    // You can use any\
    \ philosophical concept you want.\n    // You can use any religious concept you\
    \ want.\n    // You can use any political concept you want.\n    // You can use\
    \ any social concept you want.\n    // You can use any economic concept you want.\n\
    \    // You can use any artistic concept you want.\n    // You can use any cultural\
    \ concept you want.\n    // You can use any linguistic concept you want.\n   \
    \ // You can use any psychological concept you want.\n    // You can use any historical\
    \ concept you want.\n    // You can use any geographical concept you want.\n \
    \   // You can use any biological concept you want.\n    // You can use any physical\
    \ concept you want.\n    // You can use any chemical concept you want.\n    //\
    \ You can use any astronomical concept you want.\n    // You can use any geological\
    \ concept you want.\n    // You can use any meteorological concept you want.\n\
    \    // You can use any oceanographic concept you want.\n    // You can use any\
    \ climatological concept you want.\n    // You can use any environmental concept\
    \ you want.\n    // You can use any legal concept you want.\n    // You can use\
    \ any ethical concept you want.\n    // You can use any medical concept you want.\n\
    \    // You can use any technological concept you want.\n    // You can use any\
    \ engineering concept you want.\n    // You can use any architectural concept\
    \ you want.\n    // You can use any military concept you want.\n   ", '    return
    n*(n-1)/2;', "    // TODO: Implement this function\n    return 0;", "    // TODO:\
    \ implement this function\n    // The following line is a placeholder.  You should\
    \ replace it with your code.\n    return 0;", "    // TODO:  Implement this function.\n\
    \    // You can use the following code to test your implementation.\n    // You\
    \ can also test your implementation by running the program\n    // \"car_race_collision_test\"\
    .\n    //\n    // Note:  This function is not tested by the test program.\n  \
    \  // You can test it by running this program.\n    //\n    // Note:  This function\
    \ is not tested by the test program.\n    // You can test it by running this program.\n\
    \    //\n    // Note:  This function is not tested by the test program.\n    //\
    \ You can test it by running this program.\n    //\n    // Note:  This function\
    \ is not tested by the test program.\n    // You can test it by running this program.\n\
    \    //\n    // Note:  This function is not tested by the test program.\n    //\
    \ You can test it by running this program.\n    //\n    // Note:  This function\
    \ is not tested by the test program.\n    // You can test it by running this program.\n\
    \    //\n    // Note:  This function is not tested by the test program.\n    //\
    \ You can test it by running this program.\n    //\n    // Note:  This function\
    \ is not tested by the test program.\n    // You can test it by running this program.\n\
    \    //\n    // Note:  This function is not tested by the test program.\n    //\
    \ You can test it by running this program.\n    //\n    // Note:  This function\
    \ is not tested by the test program.\n    // You can test it by running this program.\n\
    \    //\n    // Note:  This function is not tested by the test program.\n    //\
    \ You can test it by running this program.\n    //\n    // Note:  This function\
    \ is not tested by the test program.\n    // You can test it by running this program.\n\
    \    //\n    // Note:  This function is not tested by the test program.\n    //\
    \ You can test it by running this program.\n    //\n    // Note:  This function\
    \ is not tested by the test program.\n    // You can test it by running this program.\n\
    \    //\n    // Note:  This function is not tested by the test program.\n    //\
    \ You can test it by", "    long count = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        for (long j = 0; j < n; j++) {\n            if (i < j) {\n      \
    \          count++;\n            }\n        }\n    }\n    return count;", "  \
    \  long count = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ 0; j < n; j++) {\n            if (i < j) {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;", "    // TODO: implement this\
    \ function\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long\
    \ j = 0; j < n; j++) {\n            count++;\n        }\n    }\n    return count;",
  "    // Write your code here\n    // To debug: cerr << \"Debug messages...\" <<\
    \ endl;\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long\
    \ j = 0; j < n; j++) {\n            if(i < j) {\n                count++;\n  \
    \          }\n        }\n    }\n    return count;", "    // TODO:  Implement this\
    \ function.\n    // You may use any data structure you like.\n    // You may use\
    \ any number of auxiliary functions.\n    // You may use any number of auxiliary\
    \ data structures.\n    // You may not use any global variables.\n    // You may\
    \ not use any sorting algorithm.\n    // You may not use any built-in function\
    \ that solves the problem directly.\n    // You may not use any library that solves\
    \ the problem directly.\n    // You may not use any code from the internet.\n\
    \    // You may not use any code from the homework solution.\n    // You may not\
    \ use any code from the lecture notes.\n    // You may not use any code from the\
    \ textbook.\n    // You may not use any code from the discussion section.\n  \
    \  // You may not use any code from the office hours.\n    // You may not use\
    \ any code from the practice midterm.\n    // You may not use any code from the\
    \ practice final.\n    // You may not use any code from the practice quizzes.\n\
    \    // You may not use any code from the practice homework.\n    // You may not\
    \ use any code from the practice midterm solution.\n    // You may not use any\
    \ code from the practice final solution.\n    // You may not use any code from\
    \ the practice quiz solutions.\n    // You may not use any code from the practice\
    \ homework solutions.\n    // You may not use any code from the practice midterm\
    \ discussion section.\n    // You may not use any code from the practice final\
    \ discussion section.\n    // You may not use any code from the practice quiz\
    \ discussion sections.\n    // You may not use any code from the practice homework\
    \ discussion sections.\n    // You may not use any code from the practice midterm\
    \ office hours.\n    // You may not use any code from the practice final office\
    \ hours.\n    // You may not use any code from the practice quiz office hours.\n\
    \    // You may not use any code from the practice homework office hours.\n  \
    \  // You may not use any code from the practice midterm office hours solution.\n\
    \    // You may not use any code from the practice final office hours solution.\n\
    \    // You may not use any code from the practice quiz office hours solutions.\n\
    \    // You may not use any code from the practice homework office hours solutions.\n\
    \    // You may not use any code from the practice midterm discussion", '    return
    n*(n-1)/2;', '    return n*(n-1)/2;', "  long count = 0;\n  for (long i = 0; i\
    \ < n; i++) {\n    for (long j = 0; j < n; j++) {\n      if (i < j) {\n      \
    \  count++;\n      }\n    }\n  }\n  return count;", "    long count = 0;\n   \
    \ for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n   \
    \         count++;\n        }\n    }\n    return count;", "    long result = 0;\n\
    \    // TODO: Implement your solution here\n    return result;", "    // Write\
    \ your code here\n    // To debug: cerr << \"Debug messages...\" << endl;\n  \
    \  long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0;\
    \ j < n; j++) {\n            if(i < j) {\n                count++;\n         \
    \   }\n        }\n    }\n    return count;", "    // Write your code here\n  \
    \  // To debug: cerr << \"Debug messages...\" << endl;\n    long long int count\
    \ = 0;\n    for(long long int i = 0; i < n; i++)\n    {\n        for(long long\
    \ int j = 0; j < n; j++)\n        {\n            if(i < j)\n            {\n  \
    \              count++;\n            }\n        }\n    }\n    return count;",
  "    // This is your job.  Fix this stub.\n    return 0;", "    long count = 0;\n\
    \    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n\
    \            count++;\n        }\n    }\n    return count;", "    // Write your\
    \ code here\n    // To debug: cerr << \"Debug messages...\" << endl;\n    long\
    \ count = 0;\n    long i = 0;\n    long j = n-1;\n    while(i<n && j>=0)\n   \
    \ {\n        if(i<j)\n        {\n            count += j;\n            i++;\n \
    \       }\n        else\n        {\n            j--;\n        }\n    }\n    return\
    \ count;", "    long collisions = 0;\n    // TODO:  implement this function\n\
    \    return collisions;", "    // Write your code here\n    // To debug: cerr\
    \ << \"Debug messages...\" << endl;\n    long count = 0;\n    for(long i = 0;\
    \ i < n; i++) {\n        for(long j = 0; j < n; j++) {\n            if(i < j)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;",
  "    // TODO: Implement this function\n    return 0;", "    // Write your code here.\n\
    \    return n*(n-1)/2;", "    // This is your job.  Fix this stub.\n    return\
    \ 0;", "    // TODO: Implement this function.\n    return 0;", "    // TODO: implement\
    \ this function\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n    \
    \    for(long j = 0; j < n; j++) {\n            if(i < j) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;", "  // TODO: Implement this\
    \ function.\n  // Hint: You can use a priority queue to simulate the cars' movement.\n\
    \  // Hint: You can use a priority queue to simulate the cars' movement.\n  //\
    \ Hint: You can use a priority queue to simulate the cars' movement.\n  // Hint:\
    \ You can use a priority queue to simulate the cars' movement.\n  // Hint: You\
    \ can use a priority queue to simulate the cars' movement.\n  // Hint: You can\
    \ use a priority queue to simulate the cars' movement.\n  // Hint: You can use\
    \ a priority queue to simulate the cars' movement.\n  // Hint: You can use a priority\
    \ queue to simulate the cars' movement.\n  // Hint: You can use a priority queue\
    \ to simulate the cars' movement.\n  // Hint: You can use a priority queue to\
    \ simulate the cars' movement.\n  // Hint: You can use a priority queue to simulate\
    \ the cars' movement.\n  // Hint: You can use a priority queue to simulate the\
    \ cars' movement.\n  // Hint: You can use a priority queue to simulate the cars'\
    \ movement.\n  // Hint: You can use a priority queue to simulate the cars' movement.\n\
    \  // Hint: You can use a priority queue to simulate the cars' movement.\n  //\
    \ Hint: You can use a priority queue to simulate the cars' movement.\n  // Hint:\
    \ You can use a priority queue to simulate the cars' movement.\n  // Hint: You\
    \ can use a priority queue to simulate the cars' movement.\n  // Hint: You can\
    \ use a priority queue to simulate the cars' movement.\n  // Hint: You can use\
    \ a priority queue to simulate the cars' movement.\n  // Hint: You can use a priority\
    \ queue to simulate the cars' movement.\n  // Hint: You can use a priority queue\
    \ to simulate the cars' movement.\n  // Hint: You can use a priority queue to\
    \ simulate the cars' movement.\n  // Hint: You can use a priority queue to simulate\
    \ the cars' movement.\n  // Hint: You can use a priority queue to simulate the\
    \ cars' movement.\n  // Hint: You can use a priority queue to simulate the cars'\
    \ movement.\n  // Hint: You can", "    // TODO:  Implement this function.\n  \
    \  // You can use the following code to test your function:\n    // assert(car_race_collision(1)\
    \ == 0);\n    // assert(car_race_collision(2) == 1);\n    // assert(car_race_collision(3)\
    \ == 3);\n    // assert(car_race_collision(4) == 6);\n    // assert(car_race_collision(5)\
    \ == 10);\n    // assert(car_race_collision(6) == 15);\n    // assert(car_race_collision(7)\
    \ == 21);\n    // assert(car_race_collision(8) == 28);\n    // assert(car_race_collision(9)\
    \ == 36);\n    // assert(car_race_collision(10) == 45);\n    // assert(car_race_collision(11)\
    \ == 55);\n    // assert(car_race_collision(12) == 66);\n    // assert(car_race_collision(13)\
    \ == 78);\n    // assert(car_race_collision(14) == 91);\n    // assert(car_race_collision(15)\
    \ == 105);\n    // assert(car_race_collision(16) == 120);\n    // assert(car_race_collision(17)\
    \ == 136);\n    // assert(car_race_collision(18) == 153);\n    // assert(car_race_collision(19)\
    \ == 171);\n    // assert(car_race_collision(20) == 190);\n    // assert(car_race_collision(21)\
    \ == 210);\n    // assert(car_race_collision(22) == 231);\n    // assert(car_race_collision(23)\
    \ == 253);\n    // assert(car_race_collision(24) == 276);\n    // assert(car_race_collision(25)\
    \ == 300);\n    // assert(car_race_collision(26) == 325);\n    // assert(car_race_collision(27)\
    \ == 351);\n    // assert(car_race_collision(28) == 378);\n    // assert(car_race_collision",
  "  long count = 0;\n  for (long i = 0; i < n; i++) {\n    for (long j = 0; j < n;\
    \ j++) {\n      count++;\n    }\n  }\n  return count;", '    return n*(n-1)/2;',
  "    // TODO: implement this function\n    // This is an example of a solution that\
    \ is not correct.\n    // It is not correct because it does not take into account\n\
    \    // the fact that cars that are moving in the same direction\n    // do not\
    \ collide.\n    return n * n;", "    // TODO: Implement this function\n    long\
    \ count = 0;\n    long i = 0;\n    long j = n-1;\n    while(i<n && j>=0){\n  \
    \      if(i==j){\n            count += (n-i-1);\n            i++;\n        }\n\
    \        else if(i>j){\n            j--;\n        }\n        else{\n         \
    \   count += (n-i-1);\n            i++;\n        }\n    }\n    return count;",
  "    long collisions = 0;\n    // TODO: implement this function\n    return collisions;",
  "  // TODO: implement this function.\n  // You may use any data structure you want.\n\
    \  // You may use any algorithm you want.\n  // You may use any number of lines\
    \ of code you want.\n  // You may use any number of helper functions you want.\n\
    \  // You may use any number of variables you want.\n  // You may use any number\
    \ of loops you want.\n  // You may use any number of branches you want.\n  //\
    \ You may use any number of arithmetic operations you want.\n  // You may use\
    \ any number of comparisons you want.\n  // You may use any number of logical\
    \ operations you want.\n  // You may use any number of bitwise operations you\
    \ want.\n  // You may use any number of ternary operators you want.\n  // You\
    \ may use any number of assignment operators you want.\n  // You may use any number\
    \ of parentheses you want.\n  // You may use any number of semicolons you want.\n\
    \  // You may use any number of braces you want.\n  // You may use any number\
    \ of brackets you want.\n  // You may use any number of apostrophes you want.\n\
    \  // You may use any number of quotation marks you want.\n  // You may use any\
    \ number of commas you want.\n  // You may use any number of periods you want.\n\
    \  // You may use any number of underscores you want.\n  // You may use any number\
    \ of spaces you want.\n  // You may use any number of tabs you want.\n  // You\
    \ may use any number of newlines you want.\n  // You may use any number of comments\
    \ you want.\n  // You may use any number of whitespace characters you want.\n\
    \  // You may use any number of non-whitespace characters you want.\n  // You\
    \ may use any number of bytes you want.\n  // You may use any number of bits you\
    \ want.\n  // You may use any number of kilobytes you want.\n  // You may use\
    \ any number of megabytes you want.\n  // You may use any number of gigabytes\
    \ you want.\n  // You may use any number of terabytes you want.\n  // You may\
    \ use any number of petabytes you want.\n  // You may use any number of exabytes\
    \ you want.\n  // You may", "    // TODO: Implement this function.\n    return\
    \ 0;", "    // TODO: Implement this function.\n    // You can assume n is a non-negative\
    \ integer.\n    // You can assume n is not greater than 2^31 - 1.\n    // You\
    \ can assume n is not greater than 2^31 - 1.\n    // You can assume n is not greater\
    \ than 2^31 - 1.\n    // You can assume n is not greater than 2^31 - 1.\n    //\
    \ You can assume n is not greater than 2^31 - 1.\n    // You can assume n is not\
    \ greater than 2^31 - 1.\n    // You can assume n is not greater than 2^31 - 1.\n\
    \    // You can assume n is not greater than 2^31 - 1.\n    // You can assume\
    \ n is not greater than 2^31 - 1.\n    // You can assume n is not greater than\
    \ 2^31 - 1.\n    // You can assume n is not greater than 2^31 - 1.\n    // You\
    \ can assume n is not greater than 2^31 - 1.\n    // You can assume n is not greater\
    \ than 2^31 - 1.\n    // You can assume n is not greater than 2^31 - 1.\n    //\
    \ You can assume n is not greater than 2^31 - 1.\n    // You can assume n is not\
    \ greater than 2^31 - 1.\n    // You can assume n is not greater than 2^31 - 1.\n\
    \    // You can assume n is not greater than 2^31 - 1.\n    // You can assume\
    \ n is not greater than 2^31 - 1.\n    // You can assume n is not greater than\
    \ 2^31 - 1.\n    // You can assume n is not greater than 2^31 - 1.\n    // You\
    \ can assume n is not greater than 2^31 - 1.\n    // You can assume n is not greater\
    \ than 2^31 - 1.\n    // You can assume n is not greater than 2^31 - 1.\n    //\
    \ You can assume n is not greater than 2^31 - 1.\n    // You can assume n is not\
    \ greater than 2^31 - 1.\n    // You can assume n is not greater than 2^31 - 1.\n\
    \    // You can assume n is not greater than 2^31 - 1.\n    // You can assume\
    \ n is not greater than 2", '  return n*(n-1)/2;', '  return n*(n-1)/2;', "  \
    \  // TODO: implement this function.\n    // You can use any data structure you\
    \ want.\n    // You can use any algorithm you want.\n    // You can use any programming\
    \ language you want.\n    // You can use any IDE you want.\n    // You can use\
    \ any operating system you want.\n    // You can use any compiler you want.\n\
    \    // You can use any algorithm you want.\n    // You can use any algorithm\
    \ you want.\n    // You can use any algorithm you want.\n    // You can use any\
    \ algorithm you want.\n    // You can use any algorithm you want.\n    // You\
    \ can use any algorithm you want.\n    // You can use any algorithm you want.\n\
    \    // You can use any algorithm you want.\n    // You can use any algorithm\
    \ you want.\n    // You can use any algorithm you want.\n    // You can use any\
    \ algorithm you want.\n    // You can use any algorithm you want.\n    // You\
    \ can use any algorithm you want.\n    // You can use any algorithm you want.\n\
    \    // You can use any algorithm you want.\n    // You can use any algorithm\
    \ you want.\n    // You can use any algorithm you want.\n    // You can use any\
    \ algorithm you want.\n    // You can use any algorithm you want.\n    // You\
    \ can use any algorithm you want.\n    // You can use any algorithm you want.\n\
    \    // You can use any algorithm you want.\n    // You can use any algorithm\
    \ you want.\n    // You can use any algorithm you want.\n    // You can use any\
    \ algorithm you want.\n    // You can use any algorithm you want.\n    // You\
    \ can use any algorithm you want.\n    // You can use any algorithm you want.\n\
    \    // You can use any algorithm you want.\n    // You can use any algorithm\
    \ you want.\n    // You can use any algorithm you want.\n    // You can use any\
    \ algorithm you want.\n    // You can use any algorithm you want.\n    // You\
    \ can use any algorithm you want.\n    // You can use any algorithm you want.\n\
    \    // You can use any algorithm you want.\n    // You can use any algorithm\
    \ you want.\n    // You can use any algorithm you want.\n    // You can use any\
    \ algorithm you want.\n    // You", "    long count = 0;\n    for (long i = 0;\
    \ i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            count++;\n\
    \        }\n    }\n    return count;", "    // TODO: Implement this function\n\
    \    // Hint: You can use the modulus operator to get the remainder of a number\n\
    \    // For example, 5 % 2 is 1, and 6 % 2 is 0\n    // Hint: You can use the\
    \ floor function to round a number down\n    // For example, floor(2.3) is 2,\
    \ and floor(2.8) is 2\n    // Hint: You can use the ceil function to round a number\
    \ up\n    // For example, ceil(2.3) is 3, and ceil(2.8) is 3\n    // Hint: You\
    \ can use the abs function to get the absolute value of a number\n    // For example,\
    \ abs(-2) is 2, and abs(2) is 2\n    // Hint: You can use the pow function to\
    \ get the power of a number\n    // For example, pow(2, 3) is 8, and pow(2, 4)\
    \ is 16\n    // Hint: You can use the sqrt function to get the square root of\
    \ a number\n    // For example, sqrt(4) is 2, and sqrt(9) is 3\n    // Hint: You\
    \ can use the log function to get the logarithm of a number\n    // For example,\
    \ log(2) is 0.69314718055994530941723212145818, and log(3) is 1.0986122886681096913952452369225\n\
    \    // Hint: You can use the exp function to get the exponential of a number\n\
    \    // For example, exp(1) is 2.7182818284590452353602874713527, and exp(2) is\
    \ 7.389056098930650227230427460575\n    // Hint: You can use the sin function\
    \ to get the sine of a number\n    // For example, sin(0) is 0, and sin(1) is\
    \ 0.84147098480789650665250232163029\n    // Hint: You can use the cos function\
    \ to get the cosine of a number\n    // For example, cos(0) is 1, and cos(1) is\
    \ 0.54030230586813971740093660744298\n    // Hint", "    // Write your code here.\n\
    \    return n*(n-1)/2;", "    long count = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        for (long j = 0; j < n; j++) {\n            if (i == j) {\n     \
    \           continue;\n            }\n            if (i < j) {\n             \
    \   count++;\n            }\n        }\n    }\n    return count;", "    // TODO:\
    \ Implement this function\n    // Hint: You can use a priority queue to simulate\
    \ the cars moving.\n    // You can use a pair<long, long> to represent a car.\n\
    \    // The first element of the pair is the position of the car.\n    // The\
    \ second element of the pair is the direction of the car.\n    // 1 means moving\
    \ right to left, -1 means moving left to right.\n    // You can use the priority\
    \ queue to simulate the cars moving.\n    // You can use a pair<long, long> to\
    \ represent a car.\n    // The first element of the pair is the position of the\
    \ car.\n    // The second element of the pair is the direction of the car.\n \
    \   // 1 means moving right to left, -1 means moving left to right.\n    std::priority_queue<std::pair<long,\
    \ long>> right_to_left;\n    std::priority_queue<std::pair<long, long>> left_to_right;\n\
    \    for (long i = 0; i < n; i++) {\n        right_to_left.push(std::make_pair(i,\
    \ 1));\n        left_to_right.push(std::make_pair(i, -1));\n    }\n    long collision\
    \ = 0;\n    while (!right_to_left.empty() && !left_to_right.empty()) {\n     \
    \   std::pair<long, long> left_car = right_to_left.top();\n        std::pair<long,\
    \ long> right_car = left_to_right.top();\n        if (left_car.first == right_car.first)\
    \ {\n            collision++;\n            right_to_left.pop();\n            left_to_right.pop();\n\
    \        } else if (left_car.first < right_car.first) {\n            right_to_left.pop();\n\
    \            left_car.first += left_car.second;\n            right_to_left.push(left_car);\n\
    \        } else {\n            left_to_right.pop();\n            right_car.first\
    \ += right_car.second;\n            left_to_right.push(right_car);\n        }\n\
    \    }\n    return collision;", "    // Write your code here\n    // To debug:\
    \ cerr << \"Debug messages...\" << endl;\n    long count = 0;\n    for(long i\
    \ = 0; i < n; i++) {\n        for(long j = 0; j < n; j++) {\n            if(i\
    \ == j) {\n                continue;\n            }\n            if(i < j) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;",
  "  // TODO:  Implement this function.\n  // You can use any data structure you want.\n\
    \  // You can use any algorithm you want.\n  // You can use any time complexity\
    \ you want.\n  // You can use any space complexity you want.\n  // You can use\
    \ any auxiliary space you want.\n  // You can use any number of variables you\
    \ want.\n  // You can use any number of functions you want.\n  // You can use\
    \ any number of loops you want.\n  // You can use any number of if-else statements\
    \ you want.\n  // You can use any number of return statements you want.\n  //\
    \ You can use any number of break statements you want.\n  // You can use any number\
    \ of continue statements you want.\n  // You can use any number of goto statements\
    \ you want.\n  // You can use any number of switch statements you want.\n  //\
    \ You can use any number of case statements you want.\n  // You can use any number\
    \ of default statements you want.\n  // You can use any number of ternary operators\
    \ you want.\n  // You can use any number of bitwise operators you want.\n  //\
    \ You can use any number of logical operators you want.\n  // You can use any\
    \ number of relational operators you want.\n  // You can use any number of arithmetic\
    \ operators you want.\n  // You can use any number of assignment operators you\
    \ want.\n  // You can use any number of parentheses you want.\n  // You can use\
    \ any number of braces you want.\n  // You can use any number of brackets you\
    \ want.\n  // You can use any number of semicolons you want.\n  // You can use\
    \ any number of commas you want.\n  // You can use any number of quotes you want.\n\
    \  // You can use any number of apostrophes you want.\n  // You can use any number\
    \ of backslashes you want.\n  // You can use any number of forward slashes you\
    \ want.\n  // You can use any number of underscores you want.\n  // You can use\
    \ any number of digits you want.\n  // You can use any number of letters you want.\n\
    \  // You can use any number of whitespaces you want.\n  // You can use any number\
    \ of newlines you want.\n  // You can use any number of", '    return n*(n-1)/2;',
  '    return n*(n-1)/2;', "  // Implement this placeholder.\n  return 0;", '    return
    n*(n-1)/2;', "    // TODO: Implement this function\n    return n*(n-1)/2;", " \
    \   // Write your code here\n    // To debug: cerr << \"Debug messages...\" <<\
    \ endl;\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=0;j<n;j++)\n        {\n            if(i==j)\n            {\n             \
    \   continue;\n            }\n            else\n            {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;", "    // TODO:\
    \ implement this function.\n    // You may use the following data structure to\
    \ store the cars.\n    // You may also use any other data structure.\n    std::vector<long>\
    \ left_to_right;\n    std::vector<long> right_to_left;\n    for (long i = 0; i\
    \ < n; i++) {\n        left_to_right.push_back(i);\n        right_to_left.push_back(n\
    \ - i - 1);\n    }\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n\
    \        for (long j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;",
  "    // Write your code here\n    // To debug: cerr << \"Debug messages...\" <<\
    \ endl;\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long\
    \ j = 0; j < n; j++) {\n            if(i < j) {\n                count++;\n  \
    \          }\n        }\n    }\n    return count;", '    return n*(n-1)/2;', " \
    \   // TODO: implement this function\n    return 0;", "  // TODO: implement this\
    \ function\n  return 0;", '  return n*(n-1)/2;', '  return n * (n - 1) / 2;',
  "    // TODO: Implement this function.\n    long count = 0;\n    for(long i = 0;\
    \ i < n; i++) {\n        for(long j = 0; j < n; j++) {\n            if(i < j)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;",
  '    return n*(n-1)/2;', "\tlong count = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\
    \tfor (long j = 0; j < n; j++) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;",
  "    // TODO: implement this function\n    return 0;", "    // TODO: implement this\
    \ function\n    return 0;", '    return n*(n-1)/2;', '    return n*(n-1)/2;',
  "    // TODO:  Implement this function.\n    // You may use any of the following\
    \ data structures:\n    //   - std::vector\n    //   - std::list\n    //   - std::deque\n\
    \    //   - std::set\n    //   - std::map\n    //   - std::unordered_set\n   \
    \ //   - std::unordered_map\n    //   - std::priority_queue\n    //   - std::stack\n\
    \    //   - std::queue\n    //   - std::array\n    //   - std::tuple\n    // \
    \  - std::pair\n    //   - std::multiset\n    //   - std::multimap\n    //   -\
    \ std::unordered_multiset\n    //   - std::unordered_multimap\n    //   - std::bitset\n\
    \    //   - std::complex\n    //   - std::valarray\n    //   - std::string\n \
    \   //   - std::wstring\n    //   - std::regex\n    //   - std::basic_string\n\
    \    //   - std::basic_regex\n    //   - std::array\n    //   - std::deque\n \
    \   //   - std::forward_list\n    //   - std::list\n    //   - std::vector\n \
    \   //   - std::map\n    //   - std::multimap\n    //   - std::set\n    //   -\
    \ std::multiset\n    //   - std::unordered_map\n    //   - std::unordered_multimap\n\
    \    //   - std::unordered_set\n    //   - std::unordered_multiset\n    //   -\
    \ std::stack\n    //   - std::queue\n    //   - std::priority_queue\n    //  \
    \ - std::pair\n    //   - std::tuple\n    //   - std::bitset\n    //   - std::valarray\n\
    \    //   - std::complex\n    //   - std::string\n    //   - std::wstring\n  \
    \  //   - std::regex\n    //   - std::basic_string\n    //   - std::basic_regex\n\
    \    //   - std::array\n    //  ", "    // TODO: Implement this function\n   \
    \ long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0;\
    \ j < n; j++) {\n            if(i < j) {\n                count++;\n         \
    \   }\n        }\n    }\n    return count;", "    // TODO: implement this function\n\
    \    long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j =\
    \ 0; j < n; j++) {\n            if(i < j) {\n                count++;\n      \
    \      }\n        }\n    }\n    return count;", "    // TODO: Implement this function\n\
    \    return 0;", "    long count = 0;\n    for (long i = 0; i < n; i++) {\n  \
    \      for (long j = 0; j < n; j++) {\n            count++;\n        }\n    }\n\
    \    return count;", "    long count = 0;\n    for (long i = 0; i < n; i++) {\n\
    \        for (long j = 0; j < n; j++) {\n            if (i < j) {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;", "\t// TODO:\
    \ implement this function.\n\t// You may assume n >= 1.\n\t// You may assume that\
    \ the cars are numbered from 0 to n-1.\n\t// You may assume that the cars that\
    \ are moving left to right are numbered\n\t// from 0 to n/2 - 1, and the cars\
    \ that are moving right to left are numbered\n\t// from n/2 to n-1.\n\t// You\
    \ may assume that the cars that are moving left to right start out at\n\t// position\
    \ -n/2, and the cars that are moving right to left start out at\n\t// position\
    \ n/2.\n\t// You may assume that the cars that are moving left to right move at\
    \ speed\n\t// 1, and the cars that are moving right to left move at speed -1.\n\
    \t// You may assume that the cars that are moving left to right are initially\n\
    \t// ordered from left to right, and the cars that are moving right to left are\n\
    \t// initially ordered from right to left.\n\t// You may assume that the cars\
    \ that are moving left to right are initially\n\t// ordered from left to right,\
    \ and the cars that are moving right to left are\n\t// initially ordered from\
    \ right to left.\n\t// You may assume that the cars that are moving left to right\
    \ are initially\n\t// ordered from left to right, and the cars that are moving\
    \ right to left are\n\t// initially ordered from right to left.\n\t// You may\
    \ assume that the cars that are moving left to right are initially\n\t// ordered\
    \ from left to right, and the cars that are moving right to left are\n\t// initially\
    \ ordered from right to left.\n\t// You may assume that the cars that are moving\
    \ left to right are initially\n\t// ordered from left to right, and the cars that\
    \ are moving right to left are\n\t// initially ordered from right to left.\n\t\
    // You may assume that the cars that are moving left to right are initially\n\t\
    // ordered from left to right, and the cars that are moving right to left are\n\
    \t// initially ordered from right to left.\n\t// You may assume that the cars\
    \ that are moving left to right are initially\n\t// ordered from left to right,\
    \ and the cars that are moving right to left are\n\t// initially ordered from\
    \ right to left.\n\t// You may assume that the cars that are moving left to right",
  "    // Write your code here\n    // To print results to the standard output you\
    \ can use the printf function\n    // For example, printf(\"%s\", \"Hello world!\"\
    );\n    //long long int count = 0;\n    //long long int i = 0;\n    //long long\
    \ int j = 0;\n    //long long int k = 0;\n    //long long int l = 0;\n    //long\
    \ long int m = 0;\n    //long long int n = 0;\n    //long long int o = 0;\n  \
    \  //long long int p = 0;\n    //long long int q = 0;\n    //long long int r =\
    \ 0;\n    //long long int s = 0;\n    //long long int t = 0;\n    //long long\
    \ int u = 0;\n    //long long int v = 0;\n    //long long int w = 0;\n    //long\
    \ long int x = 0;\n    //long long int y = 0;\n    //long long int z = 0;\n  \
    \  //long long int aa = 0;\n    //long long int bb = 0;\n    //long long int cc\
    \ = 0;\n    //long long int dd = 0;\n    //long long int ee = 0;\n    //long long\
    \ int ff = 0;\n    //long long int gg = 0;\n    //long long int hh = 0;\n    //long\
    \ long int ii = 0;\n    //long long int jj = 0;\n    //long long int kk = 0;\n\
    \    //long long int ll = 0;\n    //long long int mm = 0;\n    //long long int\
    \ nn = 0;\n    //long long int oo = 0;\n    //long long int pp = 0;\n    //long\
    \ long int qq = 0;\n    //long long int rr = 0;\n    //long long int ss = 0;\n\
    \    //long long int tt = 0;\n    //long long int uu = 0;\n    //long long int\
    \ vv = 0;\n    //long long int ww = 0;\n    //long long int xx = 0;\n    //long\
    \ long int yy = 0;\n    //long long int zz = 0;\n    //long long int", "    //\
    \ TODO: Implement this function.\n    // You can use any data structure you want.\n\
    \    // You can use any algorithm you want.\n    // You can use any programming\
    \ language you want.\n    // You can use any IDE you want.\n    // You can use\
    \ any operating system you want.\n    // You can use any computer you want.\n\
    \    // You can use any human language you want.\n    // You can use any human\
    \ being you want.\n    // You can use any planet you want.\n    // You can use\
    \ any universe you want.\n    // You can use any god you want.\n    // You can\
    \ use any dimension you want.\n    // You can use any time you want.\n    // You\
    \ can use any space you want.\n    // You can use any energy you want.\n    //\
    \ You can use any matter you want.\n    // You can use any force you want.\n \
    \   // You can use any law you want.\n    // You can use any rule you want.\n\
    \    // You can use any logic you want.\n    // You can use any truth you want.\n\
    \    // You can use any lie you want.\n    // You can use any reality you want.\n\
    \    // You can use any fantasy you want.\n    // You can use any dream you want.\n\
    \    // You can use any nightmare you want.\n    // You can use any hallucination\
    \ you want.\n    // You can use any vision you want.\n    // You can use any idea\
    \ you want.\n    // You can use any thought you want.\n    // You can use any\
    \ feeling you want.\n    // You can use any emotion you want.\n    // You can\
    \ use any sensation you want.\n    // You can use any perception you want.\n \
    \   // You can use any knowledge you want.\n    // You can use any ignorance you\
    \ want.\n    // You can use any wisdom you want.\n    // You can use any stupidity\
    \ you want.\n    // You can use any belief you want.\n    // You can use any disbelief\
    \ you want.\n    // You can use any faith you want.\n    // You can use any doubt\
    \ you want.\n    // You can use any trust you want.\n    // You can use any suspicion\
    \ you want.\n    // You can use any confidence you want.\n", "    // TODO:  Implement\
    \ this function.\n    // The function should run in O(n) time.\n    // The function\
    \ should run in O(1) space.\n    // The function should run in O(n) time.\n  \
    \  // The function should run in O(1) space.\n    long count = 0;\n    for(long\
    \ i = 0; i < n; i++) {\n        count += i;\n    }\n    return count;", "    if\
    \ (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   return n - 1 + car_race_collision(n - 1);", '    return n*(n-1)/2;', "   \
    \ // TODO: implement this function.\n    // You may use any data structures you\
    \ like.\n    // You may use any language features you like.\n    // You may use\
    \ any time and space complexity you like.\n    // You may use any number of lines\
    \ of code you like.\n    // You may use any number of helper functions you like.\n\
    \    // You may use any number of helper classes you like.\n    // You may use\
    \ any number of helper methods you like.\n    // You may use any number of helper\
    \ variables you like.\n    // You may use any number of helper constants you like.\n\
    \    // You may use any number of helper macros you like.\n    // You may use\
    \ any number of helper functions you like.\n    // You may use any number of helper\
    \ classes you like.\n    // You may use any number of helper methods you like.\n\
    \    // You may use any number of helper variables you like.\n    // You may use\
    \ any number of helper constants you like.\n    // You may use any number of helper\
    \ macros you like.\n    // You may use any number of helper functions you like.\n\
    \    // You may use any number of helper classes you like.\n    // You may use\
    \ any number of helper methods you like.\n    // You may use any number of helper\
    \ variables you like.\n    // You may use any number of helper constants you like.\n\
    \    // You may use any number of helper macros you like.\n    // You may use\
    \ any number of helper functions you like.\n    // You may use any number of helper\
    \ classes you like.\n    // You may use any number of helper methods you like.\n\
    \    // You may use any number of helper variables you like.\n    // You may use\
    \ any number of helper constants you like.\n    // You may use any number of helper\
    \ macros you like.\n    // You may use any number of helper functions you like.\n\
    \    // You may use any number of helper classes you like.\n    // You may use\
    \ any number of helper methods you like.\n    // You may use any number of helper\
    \ variables you like.\n    // You may use any number of helper constants you like.\n\
    \    // You may use any number of helper macros you like.\n    // You may use\
    \ any number of helper functions you like.\n    // You may use any number of helper\
    \ classes you like.\n", "  // TODO:  Implement this function.\n  // This function\
    \ is not tested by the test harness, so you can implement it\n  // however you\
    \ want.\n  // You can use the following functions to access the input and output\
    \ streams:\n  //   cin  (input stream)\n  //   cout (output stream)\n  // You\
    \ can use the following functions to access the input and output streams:\n  //\
    \   cin  (input stream)\n  //   cout (output stream)\n  // You can use the following\
    \ functions to access the input and output streams:\n  //   cin  (input stream)\n\
    \  //   cout (output stream)\n  // You can use the following functions to access\
    \ the input and output streams:\n  //   cin  (input stream)\n  //   cout (output\
    \ stream)\n  // You can use the following functions to access the input and output\
    \ streams:\n  //   cin  (input stream)\n  //   cout (output stream)\n  // You\
    \ can use the following functions to access the input and output streams:\n  //\
    \   cin  (input stream)\n  //   cout (output stream)\n  // You can use the following\
    \ functions to access the input and output streams:\n  //   cin  (input stream)\n\
    \  //   cout (output stream)\n  // You can use the following functions to access\
    \ the input and output streams:\n  //   cin  (input stream)\n  //   cout (output\
    \ stream)\n  // You can use the following functions to access the input and output\
    \ streams:\n  //   cin  (input stream)\n  //   cout (output stream)\n  // You\
    \ can use the following functions to access the input and output streams:\n  //\
    \   cin  (input stream)\n  //   cout (output stream)\n  // You can use the following\
    \ functions to access the input and output streams:\n  //   cin  (input stream)\n\
    \  //   cout (output stream)\n  // You can use the following functions to access\
    \ the input and output streams:\n  //   cin  (input stream)\n  //   cout (output\
    \ stream)\n  // You can use the following functions to access the input and output\
    \ streams:\n  //   cin  (input stream)\n  //  ", "    // TODO: implement this\
    \ function\n    return -1;", "    // This is your job.  Fix this code.\n    return\
    \ n*n;", "    // TODO: implement this function\n    long count = 0;\n    for(long\
    \ i = 0; i < n; i++) {\n        for(long j = 0; j < n; j++) {\n            if(i\
    \ < j) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;", '    return n*(n-1)/2;', "  // TODO: Implement this function.\n  long\
    \ count = 0;\n  for(long i = 0; i < n; i++) {\n    for(long j = 0; j < n; j++)\
    \ {\n      if(i < j) {\n        count++;\n      }\n    }\n  }\n  return count;",
  "    // TODO: implement this function\n    return 0;", "    // TODO: implement this\
    \ function\n    // You can use the following code to create a vector of n cars\
    \ moving left to right:\n    // std::vector<long> cars_left_to_right(n);\n   \
    \ // std::iota(cars_left_to_right.begin(), cars_left_to_right.end(), 0);\n   \
    \ // You can use the following code to create a vector of n cars moving right\
    \ to left:\n    // std::vector<long> cars_right_to_left(n);\n    // std::iota(cars_right_to_left.begin(),\
    \ cars_right_to_left.end(), 0);\n    // std::reverse(cars_right_to_left.begin(),\
    \ cars_right_to_left.end());\n    // You can use the following code to sort the\
    \ cars moving left to right:\n    // std::sort(cars_left_to_right.begin(), cars_left_to_right.end());\n\
    \    // You can use the following code to sort the cars moving right to left:\n\
    \    // std::sort(cars_right_to_left.begin(), cars_right_to_left.end());\n   \
    \ // You can use the following code to find the number of collisions:\n    //\
    \ long collisions = 0;\n    // for (long i = 0; i < n; i++) {\n    //     if (cars_left_to_right[i]\
    \ == cars_right_to_left[i]) {\n    //         collisions++;\n    //     }\n  \
    \  // }\n    // return collisions;\n    std::vector<long> cars_left_to_right(n);\n\
    \    std::iota(cars_left_to_right.begin(), cars_left_to_right.end(), 0);\n   \
    \ std::vector<long> cars_right_to_left(n);\n    std::iota(cars_right_to_left.begin(),\
    \ cars_right_to_left.end(), 0);\n    std::reverse(cars_right_to_left.begin(),\
    \ cars_right_to_left.end());\n    std::sort(cars_left_to_right.begin(), cars_left_to_right.end());\n\
    \    std::sort(cars_right_", "    // TODO: implement this function.\n    // You\
    \ may assume that n is a positive integer.\n    // You may use any data structure\
    \ you want.\n    // You may use any algorithm you want.\n    // You may use any\
    \ number of lines of code you want.\n    // You may use any number of variables\
    \ you want.\n    // You may use any number of functions you want.\n    // You\
    \ may use any number of if statements you want.\n    // You may use any number\
    \ of loops you want.\n    // You may use any number of return statements you want.\n\
    \    // You may use any number of break statements you want.\n    // You may use\
    \ any number of continue statements you want.\n    // You may use any number of\
    \ goto statements you want.\n    // You may use any number of switch statements\
    \ you want.\n    // You may use any number of case statements you want.\n    //\
    \ You may use any number of default statements you want.\n    // You may use any\
    \ number of assert statements you want.\n    // You may use any number of ternary\
    \ operators you want.\n    // You may use any number of bitwise operators you\
    \ want.\n    // You may use any number of logical operators you want.\n    //\
    \ You may use any number of arithmetic operators you want.\n    // You may use\
    \ any number of relational operators you want.\n    // You may use any number\
    \ of equality operators you want.\n    // You may use any number of assignment\
    \ operators you want.\n    // You may use any number of parentheses you want.\n\
    \    // You may use any number of curly braces you want.\n    // You may use any\
    \ number of square brackets you want.\n    // You may use any number of angle\
    \ brackets you want.\n    // You may use any number of quotes you want.\n    //\
    \ You may use any number of semicolons you want.\n    // You may use any number\
    \ of commas you want.\n    // You may use any number of periods you want.\n  \
    \  // You may use any number of colons you want.\n    // You may use any number\
    \ of exclamation points you want.\n    // You may use any number of question marks\
    \ you want.\n    // You may use any number of underscores you want.\n    // You\
    \ may use any number of apostrophes you want.\n    // You", "  long collisions\
    \ = 0;\n  // TODO:  Implement this function.\n  return collisions;", "    // TODO:\
    \  Implement this function.\n    // Note:  You can use the std::vector class to\
    \ store the cars.\n    // Note:  You can use the std::sort function to sort the\
    \ cars.\n    // Note:  You can use the std::lower_bound function to find the first\
    \ car\n    //        that's moving right to left that's at least as far as a car\
    \ that's\n    //        moving left to right.\n    // Note:  You can use the std::distance\
    \ function to find the number of cars\n    //        that are moving right to\
    \ left that are at least as far as a car that's\n    //        moving left to\
    \ right.\n    // Note:  You can use the std::vector::push_back function to add\
    \ a car to the vector.\n    // Note:  You can use the std::vector::size function\
    \ to get the number of cars in the vector.\n    // Note:  You can use the std::vector::begin\
    \ function to get an iterator to the first car.\n    // Note:  You can use the\
    \ std::vector::end function to get an iterator to the last car.\n    // Note:\
    \  You can use the std::vector::insert function to insert a car into the vector.\n\
    \    // Note:  You can use the std::vector::erase function to remove a car from\
    \ the vector.\n    // Note:  You can use the std::vector::clear function to remove\
    \ all cars from the vector.\n    // Note:  You can use the std::vector::empty\
    \ function to check if there are any cars in the vector.\n    // Note:  You can\
    \ use the std::vector::front function to get the first car in the vector.\n  \
    \  // Note:  You can use the std::vector::back function to get the last car in\
    \ the vector.\n    // Note:  You can use the std::vector::pop_back function to\
    \ remove the last car from the vector.\n    // Note:  You can use the std::vector::at\
    \ function to get the ith car in the vector.\n    // Note:  You can use the std::vector::operator[]\
    \ function to get the ith car in the vector.\n    // Note:  You can use the std::vector::resize\
    \ function to change the number of cars in the vector.\n    //", '    return n*(n-1)/2;',
  "\tlong count = 0;\n\tlong i = 0;\n\tlong j = n - 1;\n\twhile (i < n && j >= 0)\
    \ {\n\t\tif (i == j) {\n\t\t\tcount++;\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\telse\
    \ if (i < j) {\n\t\t\tcount += 2;\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t}\n\treturn\
    \ count;", '    return n * (n - 1) / 2;', "    // Write your code here\n    return\
    \ n*(n-1)/2;", "    long count = 0;\n    for (long i = 0; i < n; i++) {\n    \
    \    for (long j = 0; j < n; j++) {\n            if (i < j) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;", "    // TODO:\
    \  Implement this function.\n    // You may assume that n >= 1.\n    return n\
    \ * (n - 1) / 2;", "    // Write your code here\n    return n*(n-1)/2;", "   \
    \ // TODO: implement this function\n    return 0;", "    long count = 0;\n   \
    \ for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n   \
    \         if (i < j) {\n                count++;\n            }\n        }\n \
    \   }\n    return count;", "    long count = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        for (long j = 0; j < n; j++) {\n            count++;\n        }\n\
    \    }\n    return count;", "    // TODO: implement this function\n    // You\
    \ may use any data structure you want.\n    // You may use any language you want.\n\
    \    // You may use any algorithm you want.\n    // You may use any time complexity\
    \ you want.\n    // You may use any space complexity you want.\n    // You may\
    \ use any number of lines you want.\n    // You may use any number of characters\
    \ you want.\n    // You may use any number of variables you want.\n    // You\
    \ may use any number of functions you want.\n    // You may use any number of\
    \ classes you want.\n    // You may use any number of libraries you want.\n  \
    \  // You may use any number of frameworks you want.\n    // You may use any number\
    \ of operating systems you want.\n    // You may use any number of compilers you\
    \ want.\n    // You may use any number of processors you want.\n    // You may\
    \ use any number of cores you want.\n    // You may use any number of threads\
    \ you want.\n    // You may use any number of machines you want.\n    // You may\
    \ use any number of data centers you want.\n    // You may use any number of clouds\
    \ you want.\n    // You may use any number of networks you want.\n    // You may\
    \ use any number of internet connections you want.\n    // You may use any number\
    \ of continents you want.\n    // You may use any number of planets you want.\n\
    \    // You may use any number of galaxies you want.\n    // You may use any number\
    \ of universes you want.\n    // You may use any number of dimensions you want.\n\
    \    // You may use any number of universes you want.\n    // You may use any\
    \ number of dimensions you want.\n    // You may use any number of universes you\
    \ want.\n    // You may use any number of dimensions you want.\n    // You may\
    \ use any number of universes you want.\n    // You may use any number of dimensions\
    \ you want.\n    // You may use any number of universes you want.\n    // You\
    \ may use any number of dimensions you want.\n    // You may use any number of\
    \ universes you want.\n    // You may use any number of dimensions you want.\n\
    \    // You may use any number of universes you want.\n    // You may use any\
    \ number of dimensions you want", "    // TODO:  Implement this function.\n  \
    \  // You may use any data structure that you like.\n    // You may use any algorithm\
    \ that you like.\n    // You may use any time complexity that you like.\n    //\
    \ You may use any space complexity that you like.\n    // You may use any number\
    \ of variables that you like.\n    // You may use any number of statements that\
    \ you like.\n    // You may use any number of lines that you like.\n    // You\
    \ may use any number of characters that you like.\n    // You may use any number\
    \ of spaces that you like.\n    // You may use any number of tabs that you like.\n\
    \    // You may use any number of newlines that you like.\n    // You may use\
    \ any number of comments that you like.\n    // You may use any number of blank\
    \ lines that you like.\n    // You may use any number of spaces that you like.\n\
    \    // You may use any number of tabs that you like.\n    // You may use any\
    \ number of newlines that you like.\n    // You may use any number of comments\
    \ that you like.\n    // You may use any number of blank lines that you like.\n\
    \    // You may use any number of spaces that you like.\n    // You may use any\
    \ number of tabs that you like.\n    // You may use any number of newlines that\
    \ you like.\n    // You may use any number of comments that you like.\n    //\
    \ You may use any number of blank lines that you like.\n    // You may use any\
    \ number of spaces that you like.\n    // You may use any number of tabs that\
    \ you like.\n    // You may use any number of newlines that you like.\n    //\
    \ You may use any number of comments that you like.\n    // You may use any number\
    \ of blank lines that you like.\n    // You may use any number of spaces that\
    \ you like.\n    // You may use any number of tabs that you like.\n    // You\
    \ may use any number of newlines that you like.\n    // You may use any number\
    \ of comments that you like.\n    // You may use any number of blank lines that\
    \ you like.\n    // You may use any number of spaces that you like.\n    // You\
    \ may use any number of tabs that you like.\n    // You may use", "  // TODO:\
    \ Implement this function.\n  // You can use any data structures you want.\n \
    \ // You can use any algorithm you want.\n  // You can use any programming language\
    \ you want.\n  // You can use any IDE you want.\n  // You can use any operating\
    \ system you want.\n  // You can use any computer you want.\n  // You can use\
    \ any amount of time you want.\n  // You can use any amount of memory you want.\n\
    \  // You can use any amount of CPU you want.\n  // You can use any amount of\
    \ energy you want.\n  // You can use any amount of money you want.\n  // You can\
    \ use any amount of luck you want.\n  // You can use any amount of skill you want.\n\
    \  // You can use any amount of talent you want.\n  // You can use any amount\
    \ of genius you want.\n  // You can use any amount of creativity you want.\n \
    \ // You can use any amount of inspiration you want.\n  // You can use any amount\
    \ of perspiration you want.\n  // You can use any amount of determination you\
    \ want.\n  // You can use any amount of hard work you want.\n  // You can use\
    \ any amount of dedication you want.\n  // You can use any amount of concentration\
    \ you want.\n  // You can use any amount of focus you want.\n  // You can use\
    \ any amount of effort you want.\n  // You can use any amount of willpower you\
    \ want.\n  // You can use any amount of discipline you want.\n  // You can use\
    \ any amount of intelligence you want.\n  // You can use any amount of knowledge\
    \ you want.\n  // You can use any amount of wisdom you want.\n  // You can use\
    \ any amount of experience you want.\n  // You can use any amount of practice\
    \ you want.\n  // You can use any amount of training you want.\n  // You can use\
    \ any amount of education you want.\n  // You can use any amount of preparation\
    \ you want.\n  // You can use any amount of planning you want.\n  // You can use\
    \ any amount of foresight you want.\n  // You can use any amount of hindsight\
    \ you want.\n  // You can use any amount of insight you want.\n  // You can use\
    \ any amount of intuition you want.\n", "    long count = 0;\n    // TODO:  implement\
    \ this function\n    return count;", "    // TODO: Implement this function\n \
    \   // Hint: You can use the following code to generate a random number between\
    \ 0 and 1.\n    // double random_number = (double)rand() / (double)RAND_MAX;\n\
    \    // You can use the following code to generate a random number between 0 and\
    \ n.\n    // long random_number = rand() % n;\n    // You can use the following\
    \ code to generate a random number between 1 and n.\n    // long random_number\
    \ = rand() % n + 1;\n    // You can use the following code to generate a random\
    \ number between -n and n.\n    // long random_number = rand() % (2 * n + 1) -\
    \ n;\n    // You can use the following code to generate a random number between\
    \ -n and n.\n    // long random_number = rand() % (2 * n + 1) - n;\n    // You\
    \ can use the following code to generate a random number between -n and n.\n \
    \   // long random_number = rand() % (2 * n + 1) - n;\n    // You can use the\
    \ following code to generate a random number between -n and n.\n    // long random_number\
    \ = rand() % (2 * n + 1) - n;\n    // You can use the following code to generate\
    \ a random number between -n and n.\n    // long random_number = rand() % (2 *\
    \ n + 1) - n;\n    // You can use the following code to generate a random number\
    \ between -n and n.\n    // long random_number = rand() % (2 * n + 1) - n;\n \
    \   // You can use the following code to generate a random number between -n and\
    \ n.\n    // long random_number = rand() % (2 * n + 1) - n;\n    // You can use\
    \ the following code to generate a random number between -n and n.\n    // long\
    \ random_number = rand() % (2 * n + 1) - n;\n    // You can use the following\
    \ code to generate a random number between -n and n.\n    // long random_number\
    \ = rand() % (2 * n + 1) - n;\n    // You can use the following code to generate\
    \ a random number between -n and n.\n    // long", "    long count = 0;\n    for\
    \ (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n       \
    \     if (i < j) {\n                count++;\n            }\n        }\n    }\n\
    \    return count;", "  // TODO: Implement this function.\n  // Hint: You can\
    \ use a priority queue to simulate the cars.\n  // Hint: You can use a priority\
    \ queue to simulate the cars.\n  // Hint: You can use a priority queue to simulate\
    \ the cars.\n  // Hint: You can use a priority queue to simulate the cars.\n \
    \ // Hint: You can use a priority queue to simulate the cars.\n  // Hint: You\
    \ can use a priority queue to simulate the cars.\n  // Hint: You can use a priority\
    \ queue to simulate the cars.\n  // Hint: You can use a priority queue to simulate\
    \ the cars.\n  // Hint: You can use a priority queue to simulate the cars.\n \
    \ // Hint: You can use a priority queue to simulate the cars.\n  // Hint: You\
    \ can use a priority queue to simulate the cars.\n  // Hint: You can use a priority\
    \ queue to simulate the cars.\n  // Hint: You can use a priority queue to simulate\
    \ the cars.\n  // Hint: You can use a priority queue to simulate the cars.\n \
    \ // Hint: You can use a priority queue to simulate the cars.\n  // Hint: You\
    \ can use a priority queue to simulate the cars.\n  // Hint: You can use a priority\
    \ queue to simulate the cars.\n  // Hint: You can use a priority queue to simulate\
    \ the cars.\n  // Hint: You can use a priority queue to simulate the cars.\n \
    \ // Hint: You can use a priority queue to simulate the cars.\n  // Hint: You\
    \ can use a priority queue to simulate the cars.\n  // Hint: You can use a priority\
    \ queue to simulate the cars.\n  // Hint: You can use a priority queue to simulate\
    \ the cars.\n  // Hint: You can use a priority queue to simulate the cars.\n \
    \ // Hint: You can use a priority queue to simulate the cars.\n  // Hint: You\
    \ can use a priority queue to simulate the cars.\n  // Hint: You can use a priority\
    \ queue to simulate the cars.\n  // Hint: You can use a priority queue to simulate\
    \ the cars.\n  // Hint: You can use a priority queue to simulate the cars.\n \
    \ // Hint: You can use", "    // TODO:  Implement this function.\n    // You can\
    \ use the following code to test your implementation:\n    // assert(car_race_collision(1)\
    \ == 0);\n    // assert(car_race_collision(2) == 1);\n    // assert(car_race_collision(3)\
    \ == 3);\n    // assert(car_race_collision(4) == 6);\n    // assert(car_race_collision(5)\
    \ == 10);\n    // assert(car_race_collision(6) == 15);\n    // assert(car_race_collision(7)\
    \ == 21);\n    // assert(car_race_collision(8) == 28);\n    // assert(car_race_collision(9)\
    \ == 36);\n    // assert(car_race_collision(10) == 45);\n    // assert(car_race_collision(11)\
    \ == 55);\n    // assert(car_race_collision(12) == 66);\n    // assert(car_race_collision(13)\
    \ == 78);\n    // assert(car_race_collision(14) == 91);\n    // assert(car_race_collision(15)\
    \ == 105);\n    // assert(car_race_collision(16) == 120);\n    // assert(car_race_collision(17)\
    \ == 136);\n    // assert(car_race_collision(18) == 153);\n    // assert(car_race_collision(19)\
    \ == 171);\n    // assert(car_race_collision(20) == 190);\n    // assert(car_race_collision(21)\
    \ == 210);\n    // assert(car_race_collision(22) == 231);\n    // assert(car_race_collision(23)\
    \ == 253);\n    // assert(car_race_collision(24) == 276);\n    // assert(car_race_collision(25)\
    \ == 300);\n    // assert(car_race_collision(26) == 325);\n    // assert(car_race_collision(27)\
    \ == 351);\n    // assert(car_race_collision(28) == 378);\n    // assert(car_race_collision",
  "    // TODO: implement this function\n    long count = 0;\n    for(long i = 0;\
    \ i < n; i++) {\n        for(long j = 0; j < n; j++) {\n            if(i < j)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;",
  '    return n*(n-1)/2;', '    return n*(n-1)/2;', "    long collisions = 0;\n  \
    \  long left_to_right[n];\n    long right_to_left[n];\n    for (long i = 0; i\
    \ < n; i++) {\n        left_to_right[i] = i;\n        right_to_left[i] = n - i\
    \ - 1;\n    }\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j\
    \ < n; j++) {\n            if (left_to_right[i] == right_to_left[j]) {\n     \
    \           collisions++;\n            }\n        }\n    }\n    return collisions;",
  "    long count = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ 0; j < n; j++) {\n            count++;\n        }\n    }\n    return count;",
  "\tlong count = 0;\n\tfor (long i = 0; i < n; i++) {\n\t\tfor (long j = 0; j < n;\
    \ j++) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;", "    // Write your code\
    \ here\n    // To debug: cerr << \"Debug messages...\" << endl;\n    long count\
    \ = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < n; j++)\
    \ {\n            if(i < j) {\n                count++;\n            }\n      \
    \  }\n    }\n    return count;", "    // TODO: Implement this function.\n    //\
    \ This function is not tested by the test suite, so you must\n    // test it on\
    \ your own.\n    // You can use the main function to test this function.\n   \
    \ // You can use the function assert(condition) to test a condition.\n    // If\
    \ the condition is true, the program continues.\n    // If the condition is false,\
    \ the program aborts and shows a message.\n    // For example, assert(1 == 2)\
    \ will abort the program and show a message.\n    // assert(1 == 1) will not abort\
    \ the program.\n    // You can use the function assert(condition) to test a condition.\n\
    \    // If the condition is true, the program continues.\n    // If the condition\
    \ is false, the program aborts and shows a message.\n    // For example, assert(1\
    \ == 2) will abort the program and show a message.\n    // assert(1 == 1) will\
    \ not abort the program.\n    // You can use the function assert(condition) to\
    \ test a condition.\n    // If the condition is true, the program continues.\n\
    \    // If the condition is false, the program aborts and shows a message.\n \
    \   // For example, assert(1 == 2) will abort the program and show a message.\n\
    \    // assert(1 == 1) will not abort the program.\n    // You can use the function\
    \ assert(condition) to test a condition.\n    // If the condition is true, the\
    \ program continues.\n    // If the condition is false, the program aborts and\
    \ shows a message.\n    // For example, assert(1 == 2) will abort the program\
    \ and show a message.\n    // assert(1 == 1) will not abort the program.\n   \
    \ // You can use the function assert(condition) to test a condition.\n    // If\
    \ the condition is true, the program continues.\n    // If the condition is false,\
    \ the program aborts and shows a message.\n    // For example, assert(1 == 2)\
    \ will abort the program and show a message.\n    // assert(1 == 1) will not abort\
    \ the program.\n    // You can use the function assert(condition) to test a condition.\n\
    \    // If the condition is true, the program continues.\n    // If the condition\
    \ is false, the program aborts", "    // Write your code here\n    long count\
    \ = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < n; j++)\
    \ {\n            if(i < j) {\n                count++;\n            }\n      \
    \  }\n    }\n    return count;", "    // TODO: implement this function\n    return\
    \ 0;", "    // TODO: Implement this function.\n    long collisions = 0;\n    long\
    \ *left_to_right = new long[n];\n    long *right_to_left = new long[n];\n    for\
    \ (long i = 0; i < n; i++) {\n        left_to_right[i] = i;\n        right_to_left[i]\
    \ = n - i - 1;\n    }\n    for (long i = 0; i < n; i++) {\n        for (long j\
    \ = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j]) {\n\
    \                collisions++;\n            }\n        }\n    }\n    return collisions;",
  "    // This is your job. :)\n    return 0;", "    // TODO: Implement this function.\n\
    \    long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j =\
    \ 0; j < n; j++) {\n            if(i == j) {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;", "    // Write your code here\n\
    \    return n*(n-1)/2;", "    // TODO: Implement this function.\n    // You may\
    \ assume that n is a positive integer.\n    // You may assume that the cars are\
    \ numbered from 0 to n-1.\n    // You may assume that the cars are moving at the\
    \ same speed.\n    // You may assume that the cars are infinitely strong.\n  \
    \  // You may assume that the cars are infinitely small.\n    // You may assume\
    \ that the cars are infinitely sturdy.\n    // You may assume that the cars are\
    \ infinitely fast.\n    // You may assume that the cars are infinitely precise.\n\
    \    // You may assume that the cars are infinitely smart.\n    // You may assume\
    \ that the cars are infinitely lucky.\n    // You may assume that the cars are\
    \ infinitely unlucky.\n    // You may assume that the cars are infinitely precise.\n\
    \    // You may assume that the cars are infinitely precise.\n    // You may assume\
    \ that the cars are infinitely precise.\n    // You may assume that the cars are\
    \ infinitely precise.\n    // You may assume that the cars are infinitely precise.\n\
    \    // You may assume that the cars are infinitely precise.\n    // You may assume\
    \ that the cars are infinitely precise.\n    // You may assume that the cars are\
    \ infinitely precise.\n    // You may assume that the cars are infinitely precise.\n\
    \    // You may assume that the cars are infinitely precise.\n    // You may assume\
    \ that the cars are infinitely precise.\n    // You may assume that the cars are\
    \ infinitely precise.\n    // You may assume that the cars are infinitely precise.\n\
    \    // You may assume that the cars are infinitely precise.\n    // You may assume\
    \ that the cars are infinitely precise.\n    // You may assume that the cars are\
    \ infinitely precise.\n    // You may assume that the cars are infinitely precise.\n\
    \    // You may assume that the cars are infinitely precise.\n    // You may assume\
    \ that the cars are infinitely precise.\n    // You may assume that the cars are\
    \ infinitely precise.\n    // You may assume that the cars are infinitely precise.\n\
    \    // You may assume that the cars are infinitely precise.\n    // You may assume\
    \ that the cars are infinitely precise.\n    // You may assume that the cars are\
    \ infinitely precise.\n    // You may assume that the cars are infinitely precise.\n\
    \    // You may assume that the cars are infinitely precise.\n    // You may assume\
    \ that the cars are infinitely precise.", "    // TODO: Implement this function.\n\
    \    // You can assume that n is a positive integer.\n    // You can assume that\
    \ n is a power of 2.\n    // You can assume that n is less than or equal to 1,000,000,000.\n\
    \    // You can assume that n is greater than or equal to 2.\n    // You can assume\
    \ that n is an integer.\n    // You can assume that n is a number.\n    // You\
    \ can assume that n is not a string.\n    // You can assume that n is not a boolean.\n\
    \    // You can assume that n is not a float.\n    // You can assume that n is\
    \ not a double.\n    // You can assume that n is not a long double.\n    // You\
    \ can assume that n is not a char.\n    // You can assume that n is not a short.\n\
    \    // You can assume that n is not a long.\n    // You can assume that n is\
    \ not a long long.\n    // You can assume that n is not a signed char.\n    //\
    \ You can assume that n is not an unsigned char.\n    // You can assume that n\
    \ is not an unsigned short.\n    // You can assume that n is not an unsigned int.\n\
    \    // You can assume that n is not an unsigned long.\n    // You can assume\
    \ that n is not an unsigned long long.\n    // You can assume that n is not a\
    \ wchar_t.\n    // You can assume that n is not a char16_t.\n    // You can assume\
    \ that n is not a char32_t.\n    // You can assume that n is not a float.\n  \
    \  // You can assume that n is not a double.\n    // You can assume that n is\
    \ not a long double.\n    // You can assume that n is not a float.\n    // You\
    \ can assume that n is not a double.\n    // You can assume that n is not a long\
    \ double.\n    // You can assume that n is not a float.\n    // You can assume\
    \ that n is not a double.\n    // You can assume that n is not a long double.\n\
    \    // You can assume that n is not a float.\n    // You can assume that n is\
    \ not a double.\n    // You can assume that n is not a long double.\n", "    //\
    \ Write your code here\n    // To debug: cerr << \"Debug messages...\" << endl;\n\
    \    long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j =\
    \ 0; j < n; j++) {\n            if(i == j) {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;", "    long count = 0;\n    for\
    \ (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n       \
    \     count++;\n        }\n    }\n    return count;", "    // TODO:  Implement\
    \ this function.\n    // For example, if n = 4, then the cars moving left to right\
    \ are\n    // 1, 2, 3, 4, and the cars moving right to left are 4, 3, 2, 1.\n\
    \    // There are two collisions:  2 collides with 3, and 4 collides with 1.\n\
    \    // So the function should return 2.\n    long count = 0;\n    for(long i\
    \ = 1; i <= n; i++) {\n        for(long j = n; j >= 1; j--) {\n            if(i\
    \ == j) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;", '  return n*(n-1)/2;', "    // TODO: Implement this function.\n   \
    \ // You can use any data structure you want.\n    // You can also add more functions\
    \ if you want.\n    // You can also add more data structures if you want.\n  \
    \  // You can also add more parameters to the function if you want.\n    // You\
    \ can also add more global variables if you want.\n    // You can also add more\
    \ classes if you want.\n    // You can also add more files if you want.\n    //\
    \ You can also add more namespaces if you want.\n    // You can also add more\
    \ macros if you want.\n    // You can also add more templates if you want.\n \
    \   // You can also add more typedefs if you want.\n    // You can also add more\
    \ constants if you want.\n    // You can also add more enums if you want.\n  \
    \  // You can also add more unions if you want.\n    // You can also add more\
    \ structs if you want.\n    // You can also add more classes if you want.\n  \
    \  // You can also add more functions if you want.\n    // You can also add more\
    \ variables if you want.\n    // You can also add more parameters if you want.\n\
    \    // You can also add more arguments if you want.\n    // You can also add\
    \ more parameters to the function if you want.\n    // You can also add more global\
    \ variables if you want.\n    // You can also add more classes if you want.\n\
    \    // You can also add more files if you want.\n    // You can also add more\
    \ namespaces if you want.\n    // You can also add more macros if you want.\n\
    \    // You can also add more templates if you want.\n    // You can also add\
    \ more typedefs if you want.\n    // You can also add more constants if you want.\n\
    \    // You can also add more enums if you want.\n    // You can also add more\
    \ unions if you want.\n    // You can also add more structs if you want.\n   \
    \ // You can also add more classes if you want.\n    // You can also add more\
    \ functions if you want.\n    // You can also add more variables if you want.\n\
    \    // You can also add more parameters if you want.\n    // You can also add\
    \ more arguments if you want.\n    //", "    // TODO: implement this function\n\
    \    // You can add more functions if you want.\n    // You can also add more\
    \ data structures if you want.\n    // You can also add more files if you want.\n\
    \    // You can also use any other programming language if you want.\n    // You\
    \ can also use any other computer if you want.\n    // You can also use any other\
    \ operating system if you want.\n    // You can also use any other compiler if\
    \ you want.\n    // You can also use any other editor if you want.\n    // You\
    \ can also use any other computer if you want.\n    // You can also use any other\
    \ operating system if you want.\n    // You can also use any other compiler if\
    \ you want.\n    // You can also use any other editor if you want.\n    // You\
    \ can also use any other computer if you want.\n    // You can also use any other\
    \ operating system if you want.\n    // You can also use any other compiler if\
    \ you want.\n    // You can also use any other editor if you want.\n    // You\
    \ can also use any other computer if you want.\n    // You can also use any other\
    \ operating system if you want.\n    // You can also use any other compiler if\
    \ you want.\n    // You can also use any other editor if you want.\n    // You\
    \ can also use any other computer if you want.\n    // You can also use any other\
    \ operating system if you want.\n    // You can also use any other compiler if\
    \ you want.\n    // You can also use any other editor if you want.\n    // You\
    \ can also use any other computer if you want.\n    // You can also use any other\
    \ operating system if you want.\n    // You can also use any other compiler if\
    \ you want.\n    // You can also use any other editor if you want.\n    // You\
    \ can also use any other computer if you want.\n    // You can also use any other\
    \ operating system if you want.\n    // You can also use any other compiler if\
    \ you want.\n    // You can also use any other editor if you want.\n    // You\
    \ can also use any other computer if you want.\n    // You can also use any other\
    \ operating system if you want.\n    // You can also use any other compiler if\
    \ you want.\n    // You can also use", '    return n*(n-1)/2;', "    // TODO:\
    \ Implement this function.\n    // You may assume that n is a positive integer.\n\
    \    // You may also assume that the cars are infinitely strong and sturdy.\n\
    \    // You may also assume that the cars are moving at the same speed.\n    //\
    \ You may also assume that the cars are moving in a straight line.\n    // You\
    \ may also assume that the cars are moving in the same direction.\n    // You\
    \ may also assume that the cars are moving in opposite directions.\n    // You\
    \ may also assume that the cars are moving in a straight line.\n    // You may\
    \ also assume that the cars are moving in the same direction.\n    // You may\
    \ also assume that the cars are moving in opposite directions.\n    // You may\
    \ also assume that the cars are moving in a straight line.\n    // You may also\
    \ assume that the cars are moving in the same direction.\n    // You may also\
    \ assume that the cars are moving in opposite directions.\n    // You may also\
    \ assume that the cars are moving in a straight line.\n    // You may also assume\
    \ that the cars are moving in the same direction.\n    // You may also assume\
    \ that the cars are moving in opposite directions.\n    // You may also assume\
    \ that the cars are moving in a straight line.\n    // You may also assume that\
    \ the cars are moving in the same direction.\n    // You may also assume that\
    \ the cars are moving in opposite directions.\n    // You may also assume that\
    \ the cars are moving in a straight line.\n    // You may also assume that the\
    \ cars are moving in the same direction.\n    // You may also assume that the\
    \ cars are moving in opposite directions.\n    // You may also assume that the\
    \ cars are moving in a straight line.\n    // You may also assume that the cars\
    \ are moving in the same direction.\n    // You may also assume that the cars\
    \ are moving in opposite directions.\n    // You may also assume that the cars\
    \ are moving in a straight line.\n    // You may also assume that the cars are\
    \ moving in the same direction.\n    // You may also assume that the cars are\
    \ moving in opposite directions.\n    // You may also assume that the cars are\
    \ moving in a straight line.\n    // You may also assume that the cars are moving\
    \ in the same direction.\n    // You may also assume that the cars are moving\
    \ in opposite directions.\n    // You may also", "    long collisions = 0;\n \
    \   // TODO: Implement this function.\n    // Hint:  You can use a priority queue\
    \ to simulate the cars.\n    //        The priority queue should be a max heap.\n\
    \    //        The priority queue should contain pairs of integers.\n    //  \
    \      The first integer in the pair should be the position of the car.\n    //\
    \        The second integer in the pair should be the direction of the car.\n\
    \    //        The direction of the car should be 1 if the car is moving right\
    \ to left\n    //        and -1 if the car is moving left to right.\n    //  \
    \      The priority queue should be ordered by the position of the car.\n    //\
    \        The priority queue should be ordered by the direction of the car\n  \
    \  //        if the positions of the cars are the same.\n    //        The priority\
    \ queue should be ordered by the position of the car\n    //        if the positions\
    \ and directions of the cars are the same.\n    //        The priority queue should\
    \ be ordered by the direction of the car\n    //        if the positions and directions\
    \ of the cars are the same.\n    //        The priority queue should be ordered\
    \ by the position of the car\n    //        if the positions, directions, and\
    \ speeds of the cars are the same.\n    //        The priority queue should be\
    \ ordered by the direction of the car\n    //        if the positions, directions,\
    \ and speeds of the cars are the same.\n    //        The priority queue should\
    \ be ordered by the speed of the car\n    //        if the positions, directions,\
    \ and speeds of the cars are the same.\n    //        The priority queue should\
    \ be ordered by the position of the car\n    //        if the positions, directions,\
    \ speeds, and colors of the cars are the same.\n    //        The priority queue\
    \ should be ordered by the direction of the car\n    //        if the positions,\
    \ directions, speeds, and colors of the cars are the same.\n    //        The\
    \ priority queue should be ordered by the speed of the car\n    //        if the\
    \ positions, directions, speeds, and colors of the cars are the same.\n    //\
    \        The priority queue should be ordered by the color of the car\n    //\
    \        if the positions, directions, speeds, and colors of the cars are the\
    \ same.\n    //        The priority queue should be ordered by the position of\
    \ the", "    // TODO: Implement this function\n    return n*(n-1)/2;", "    //\
    \ TODO: Implement this function.\n    // You can assume that n is a positive integer.\n\
    \    // You can assume that n is a power of 2.\n    // You can assume that n is\
    \ less than or equal to 2^32.\n    // You can assume that n is greater than or\
    \ equal to 2.\n    // You can assume that n is less than or equal to 2^16.\n \
    \   // You can assume that n is less than or equal to 2^8.\n    // You can assume\
    \ that n is less than or equal to 2^4.\n    // You can assume that n is less than\
    \ or equal to 2^2.\n    // You can assume that n is less than or equal to 2^1.\n\
    \    // You can assume that n is less than or equal to 2^0.\n    // You can assume\
    \ that n is less than or equal to 2^-1.\n    // You can assume that n is less\
    \ than or equal to 2^-2.\n    // You can assume that n is less than or equal to\
    \ 2^-4.\n    // You can assume that n is less than or equal to 2^-8.\n    // You\
    \ can assume that n is less than or equal to 2^-16.\n    // You can assume that\
    \ n is less than or equal to 2^-32.\n    // You can assume that n is less than\
    \ or equal to 2^-64.\n    // You can assume that n is less than or equal to 2^-128.\n\
    \    // You can assume that n is less than or equal to 2^-256.\n    // You can\
    \ assume that n is less than or equal to 2^-512.\n    // You can assume that n\
    \ is less than or equal to 2^-1024.\n    // You can assume that n is less than\
    \ or equal to 2^-2048.\n    // You can assume that n is less than or equal to\
    \ 2^-4096.\n    // You can assume that n is less than or equal to 2^-8192.\n \
    \   // You can assume that n is less than or equal to 2^-16384.\n    // You can\
    \ assume that n is less than or equal to 2^-32768.\n    // You can assume that\
    \ n is less than or equal to 2^-65536.\n    // You", "    // TODO: Implement this\
    \ function\n    return 0;", "    long collisions = 0;\n    // TODO: implement\
    \ this function\n    return collisions;", "    long count = 0;\n    for (long\
    \ i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            count++;\n\
    \        }\n    }\n    return count;", "    // TODO: implement this function\n\
    \    return 0;", '    return n*(n-1)/2;', "    // TODO: Implement this function\n\
    \    return 0;", "    // TODO: implement this function\n    return 0;", "    //\
    \ This function is already implemented for you.\n    // Please do not modify it.\n\
    \    return n*(n-1)/2;", "    // TODO:  Implement this function.\n    // You can\
    \ use the following code to test your function:\n    // assert(car_race_collision(0)\
    \ == 0);\n    // assert(car_race_collision(1) == 0);\n    // assert(car_race_collision(2)\
    \ == 1);\n    // assert(car_race_collision(3) == 3);\n    // assert(car_race_collision(4)\
    \ == 6);\n    // assert(car_race_collision(5) == 10);\n    // assert(car_race_collision(6)\
    \ == 15);\n    // assert(car_race_collision(7) == 21);\n    // assert(car_race_collision(8)\
    \ == 28);\n    // assert(car_race_collision(9) == 36);\n    // assert(car_race_collision(10)\
    \ == 45);\n    // assert(car_race_collision(11) == 55);\n    // assert(car_race_collision(12)\
    \ == 66);\n    // assert(car_race_collision(13) == 78);\n    // assert(car_race_collision(14)\
    \ == 91);\n    // assert(car_race_collision(15) == 105);\n    // assert(car_race_collision(16)\
    \ == 120);\n    // assert(car_race_collision(17) == 136);\n    // assert(car_race_collision(18)\
    \ == 153);\n    // assert(car_race_collision(19) == 171);\n    // assert(car_race_collision(20)\
    \ == 190);\n    // assert(car_race_collision(21) == 210);\n    // assert(car_race_collision(22)\
    \ == 231);\n    // assert(car_race_collision(23) == 253);\n    // assert(car_race_collision(24)\
    \ == 276);\n    // assert(car_race_collision(25) == 300);\n    // assert(car_race_collision(26)\
    \ == 325);\n    // assert(car_race_collision(27) == 351);\n    // assert(car_race_collision",
  "    // TODO:  Implement this function.\n    // You can use the following code to\
    \ test your function:\n    // assert(car_race_collision(0) == 0);\n    // assert(car_race_collision(1)\
    \ == 0);\n    // assert(car_race_collision(2) == 1);\n    // assert(car_race_collision(3)\
    \ == 3);\n    // assert(car_race_collision(4) == 6);\n    // assert(car_race_collision(5)\
    \ == 10);\n    // assert(car_race_collision(6) == 15);\n    // assert(car_race_collision(7)\
    \ == 21);\n    // assert(car_race_collision(8) == 28);\n    // assert(car_race_collision(9)\
    \ == 36);\n    // assert(car_race_collision(10) == 45);\n    // assert(car_race_collision(11)\
    \ == 55);\n    // assert(car_race_collision(12) == 66);\n    // assert(car_race_collision(13)\
    \ == 78);\n    // assert(car_race_collision(14) == 91);\n    // assert(car_race_collision(15)\
    \ == 105);\n    // assert(car_race_collision(16) == 120);\n    // assert(car_race_collision(17)\
    \ == 136);\n    // assert(car_race_collision(18) == 153);\n    // assert(car_race_collision(19)\
    \ == 171);\n    // assert(car_race_collision(20) == 190);\n    // assert(car_race_collision(21)\
    \ == 210);\n    // assert(car_race_collision(22) == 231);\n    // assert(car_race_collision(23)\
    \ == 253);\n    // assert(car_race_collision(24) == 276);\n    // assert(car_race_collision(25)\
    \ == 300);\n    // assert(car_race_collision(26) == 325);\n    // assert(car_race_collision(27)\
    \ == 351);\n    // assert(car_race_collision", "    // TODO: Implement me!\n \
    \   long count = 0;\n    long left[n];\n    long right[n];\n    for(long i = 0;\
    \ i < n; i++) {\n        left[i] = i;\n        right[i] = n - i - 1;\n    }\n\
    \    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < n; j++) {\n  \
    \          if(left[i] == right[j]) {\n                count++;\n            }\n\
    \        }\n    }\n    return count;", '    return n*(n-1)/2;', "    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;", "  // your code here\n  return n*(n-1)/2;",
  "    long count = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j =\
    \ 0; j < n; j++) {\n            if (i < j) {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;", "    long collisions = 0;\n \
    \   // TODO: implement this function\n    return collisions;", "    long count\
    \ = 0;\n    long left = 0;\n    long right = 0;\n    while (left < n && right\
    \ < n) {\n        if (left < right) {\n            left++;\n        } else if\
    \ (left > right) {\n            right++;\n        } else {\n            count++;\n\
    \            left++;\n            right++;\n        }\n    }\n    return count;",
  "    // TODO: Implement this function.\n    return 0;", "    // TODO: Implement\
    \ this function.\n    // Hint: You can use the modulo operator to find the remainder\
    \ of a number.\n    // For example, 5 % 3 = 2.\n    // Hint: You can use the floor\
    \ function to round a number down.\n    // For example, floor(5.3) = 5.\n    //\
    \ Hint: You can use the ceil function to round a number up.\n    // For example,\
    \ ceil(5.3) = 6.\n    // Hint: You can use the abs function to find the absolute\
    \ value of a number.\n    // For example, abs(-5) = 5.\n    // Hint: You can use\
    \ the pow function to raise a number to a power.\n    // For example, pow(2, 3)\
    \ = 8.\n    // Hint: You can use the sqrt function to find the square root of\
    \ a number.\n    // For example, sqrt(9) = 3.\n    // Hint: You can use the log\
    \ function to find the logarithm of a number.\n    // For example, log(2) = 0.693147180559945.\n\
    \    // Hint: You can use the exp function to raise e to a power.\n    // For\
    \ example, exp(1) = 2.718281828459045.\n    // Hint: You can use the sin function\
    \ to find the sine of a number.\n    // For example, sin(0) = 0.\n    // Hint:\
    \ You can use the cos function to find the cosine of a number.\n    // For example,\
    \ cos(0) = 1.\n    // Hint: You can use the tan function to find the tangent of\
    \ a number.\n    // For example, tan(0) = 0.\n    // Hint: You can use the asin\
    \ function to find the arcsine of a number.\n    // For example, asin(0) = 0.\n\
    \    // Hint: You can use the acos function to find the arccosine of a number.\n\
    \    // For example, acos(1) = 0.\n    // Hint: You can use the atan function\
    \ to find the arctangent of a number.\n    // For example, atan(0) = 0", '    return
    n*(n-1)/2;', "    // TODO: implement this function\n    // You can use the following\
    \ code to generate random numbers\n    // between 0 and 1.\n    // double r =\
    \ (double)rand() / RAND_MAX;\n    // You can use the following code to generate\
    \ random numbers\n    // between 0 and n.\n    // long r = rand() % n;\n    //\
    \ You can use the following code to generate random numbers\n    // between 0\
    \ and n.\n    // long r = rand() % n;\n    // You can use the following code to\
    \ generate random numbers\n    // between 0 and n.\n    // long r = rand() % n;\n\
    \    // You can use the following code to generate random numbers\n    // between\
    \ 0 and n.\n    // long r = rand() % n;\n    // You can use the following code\
    \ to generate random numbers\n    // between 0 and n.\n    // long r = rand()\
    \ % n;\n    // You can use the following code to generate random numbers\n   \
    \ // between 0 and n.\n    // long r = rand() % n;\n    // You can use the following\
    \ code to generate random numbers\n    // between 0 and n.\n    // long r = rand()\
    \ % n;\n    // You can use the following code to generate random numbers\n   \
    \ // between 0 and n.\n    // long r = rand() % n;\n    // You can use the following\
    \ code to generate random numbers\n    // between 0 and n.\n    // long r = rand()\
    \ % n;\n    // You can use the following code to generate random numbers\n   \
    \ // between 0 and n.\n    // long r = rand() % n;\n    // You can use the following\
    \ code to generate random numbers\n    // between 0 and n.\n    // long r = rand()\
    \ % n;\n    // You can use the following code to generate random numbers\n   \
    \ // between 0 and n.\n    // long r = rand() % n;\n    // You can use the following\
    \ code to generate random numbers\n    // between 0 and n.\n    // long r = rand()\
    \ % n;\n    // You can use the following code to generate random numbers\n   \
    \ // between 0 and n.\n    // long r = rand() % n;\n    // You can use the following\
    \ code to generate random numbers\n    // between 0", "    // Write your code\
    \ here\n    // To print results to the standard output you can use the printf\
    \ function\n    // For example, printf(\"%s\", \"Hello world!\");\n    //printf(\"\
    %ld\", n);\n    long count = 0;\n    std::vector<long> left_to_right;\n    std::vector<long>\
    \ right_to_left;\n    for(long i = 0; i < n; i++) {\n        left_to_right.push_back(i);\n\
    \        right_to_left.push_back(n-i-1);\n    }\n    for(long i = 0; i < n; i++)\
    \ {\n        for(long j = 0; j < n; j++) {\n            if(left_to_right[i] ==\
    \ right_to_left[j]) {\n                count++;\n            }\n        }\n  \
    \  }\n    return count;", "    // Write your code here\n    // To debug: cerr\
    \ << \"Debug messages...\" << endl;\n    long long int count = 0;\n    long long\
    \ int a[n], b[n];\n    for(long long int i = 0; i < n; i++) {\n        cin >>\
    \ a[i];\n    }\n    for(long long int i = 0; i < n; i++) {\n        cin >> b[i];\n\
    \    }\n    sort(a, a+n);\n    sort(b, b+n);\n    for(long long int i = 0; i <\
    \ n; i++) {\n        for(long long int j = 0; j < n; j++) {\n            if(a[i]\
    \ > b[j]) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;", "    // TODO: Implement this function\n    return 0;", '    return
    n*(n-1)/2;', "    // Write your code here\n    // To debug: cerr << \"Debug messages...\"\
    \ << endl;\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n        for(long\
    \ j = 0; j < n; j++) {\n            if(i < j) {\n                count++;\n  \
    \          }\n        }\n    }\n    return count;", "  // The cars are numbered\
    \ from 0 to n-1.\n  // The cars moving left to right are numbered from 0 to n-1.\n\
    \  // The cars moving right to left are numbered from n to 2n-1.\n  // The cars\
    \ moving left to right are at positions x[0] to x[n-1].\n  // The cars moving\
    \ right to left are at positions y[0] to y[n-1].\n  // Initially, x[i] = i and\
    \ y[i] = 2n-1-i.\n  // The cars move at the same speed.\n  // The cars are infinitely\
    \ sturdy and strong.\n  // The cars do not change their speed.\n  // The cars\
    \ do not change their direction.\n  // The cars do not change their position.\n\
    \  // The cars do not change their trajectory.\n  // The cars do not change their\
    \ acceleration.\n  // The cars do not change their deceleration.\n  // The cars\
    \ do not change their momentum.\n  // The cars do not change their velocity.\n\
    \  // The cars do not change their mass.\n  // The cars do not change their weight.\n\
    \  // The cars do not change their force.\n  // The cars do not change their energy.\n\
    \  // The cars do not change their power.\n  // The cars do not change their torque.\n\
    \  // The cars do not change their angular momentum.\n  // The cars do not change\
    \ their angular velocity.\n  // The cars do not change their angular acceleration.\n\
    \  // The cars do not change their angular deceleration.\n  // The cars do not\
    \ change their angular force.\n  // The cars do not change their angular energy.\n\
    \  // The cars do not change their angular power.\n  // The cars do not change\
    \ their angular torque.\n  // The cars do not change their angular mass.\n  //\
    \ The cars do not change their angular weight.\n  // The cars do not change their\
    \ angular force.\n  // The cars do not change their angular energy.\n  // The\
    \ cars do not change their angular power.\n  // The cars do not change their angular\
    \ torque.\n  // The cars do not change their angular momentum.\n  // The cars\
    \ do not change their angular velocity.\n  // The cars do not change their angular\
    \ acceleration.\n  // The cars do not", "    long count = 0;\n    for (long i\
    \ = 0; i < n; i++) {\n        for (long j = 0; j < n; j++) {\n            if (i\
    \ == j) {\n                continue;\n            }\n            if (i < j) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;",
  '    return n*(n-1)/2;', "    // TODO: implement this function\n    return 0;",
  "    // TODO: Implement this function\n    return n*(n-1)/2;", "    // TODO:  Implement\
    \ this function.\n    // You may use any data structure you want.\n    // You\
    \ may use any number of helper functions.\n    // You may use any number of loops.\n\
    \    // You may use any number of if statements.\n    // You may use any number\
    \ of return statements.\n    // You may use any number of break statements.\n\
    \    // You may use any number of continue statements.\n    // You may use any\
    \ number of goto statements.\n    // You may use any number of switch statements.\n\
    \    // You may use any number of case statements.\n    // You may use any number\
    \ of default statements.\n    // You may use any number of while statements.\n\
    \    // You may use any number of do-while statements.\n    // You may use any\
    \ number of for statements.\n    // You may use any number of nested loops.\n\
    \    // You may use any number of nested if statements.\n    // You may use any\
    \ number of nested switch statements.\n    // You may use any number of nested\
    \ while statements.\n    // You may use any number of nested do-while statements.\n\
    \    // You may use any number of nested for statements.\n    // You may use any\
    \ number of nested goto statements.\n    // You may use any number of nested break\
    \ statements.\n    // You may use any number of nested continue statements.\n\
    \    // You may use any number of nested return statements.\n    // You may use\
    \ any number of nested case statements.\n    // You may use any number of nested\
    \ default statements.\n    // You may use any number of nested functions.\n  \
    \  // You may use any number of nested classes.\n    // You may use any number\
    \ of nested structs.\n    // You may use any number of nested unions.\n    //\
    \ You may use any number of nested enums.\n    // You may use any number of nested\
    \ typedefs.\n    // You may use any number of nested consts.\n    // You may use\
    \ any number of nested volatile statements.\n    // You may use any number of\
    \ nested extern statements.\n    // You may use any number of nested static statements.\n\
    \    // You may use any number of nested auto statements.\n    // You may use\
    \ any number of nested register statements.\n    // You may use any number of\
    \ nested signed statements.\n    // You may use any"]
stop_tokens:
- "\n}"
