language: cpp
name: HumanEval_76_is_simple_power
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1)\n    return true;\n  if(n==1)\n    return false;\n\
    \  if(x==n)\n    return true;\n  if(x<n)\n    return false;\n  if(x%n!=0)\n  \
    \  return false;\n  return is_simple_power(x/n,n);\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1) return true;\n  if(n==1) return false;\n  if(x==n)\
    \ return true;\n  if(x%n!=0) return false;\n  return is_simple_power(x/n,n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099463
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1)\n    return true;\n  if(x==n)\n    return true;\n\
    \  if(x%n!=0)\n    return false;\n  return is_simple_power(x/n,n);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099463
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    if (x == n) {\n        return true;\n    }\n    if (x % n\
    \ != 0) {\n        return false;\n    }\n    return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    if (x == n) {\n        return true;\n    }\n    if (x % n\
    \ != 0) {\n        return false;\n    }\n    return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  long i = 1;\n  while (pow(n, i) <= x) {\n    if (pow(n, i) == x) {\n      return\
    \ true;\n    }\n    i++;\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099463
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x > n) {\n    return is_simple_power(x\
    \ / n, n);\n  }\n  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpkq7i6xa9: /tmp/tmpkq7i6xa9.cpp:35: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x < n) return false;\n  return is_simple_power(x/n, n);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjegptz5z: /tmp/tmpjegptz5z.cpp:27: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1)\n  return true;\n  if(n==1)\n  return false;\n  int\
    \ i=1;\n  while(pow(n,i)<=x)\n  {\n    if(pow(n,i)==x)\n    return true;\n   \
    \ i++;\n  }\n  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099463
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1)\n    return true;\n  if(n==1)\n    return false;\n\
    \  if(x==n)\n    return true;\n  if(x%n!=0)\n    return false;\n  return is_simple_power(x/n,n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    return is_simple_power(x/n, n);\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmps6amujwr: /tmp/tmps6amujwr.cpp:27: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x < n) {\n    return false;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    if (x == n) {\n        return true;\n    }\n    if (x % n\
    \ != 0) {\n        return false;\n    }\n    return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x < n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x < n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x < n) {\n    return false;\n \
    \ }\n  if (x % n != 0) {\n    return false;\n  }\n  return is_simple_power(x /\
    \ n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x < n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1)\n    return true;\n  if(n==1)\n    return false;\n\
    \  if(x==n)\n    return true;\n  if(x<n)\n    return false;\n  if(x%n!=0)\n  \
    \  return false;\n  return is_simple_power(x/n,n);\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    if (x == n) {\n        return true;\n    }\n    if (x % n\
    \ != 0) {\n        return false;\n    }\n    return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1) return x == 1;\n    if (x == 1) return n == 1;\n    if (x == n)\
    \ return true;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3aaynl8i: /tmp/tmp3aaynl8i.cpp:31: int main(): Assertion `candidate((1),
    (12)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x < n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    if (x == n) {\n        return true;\n    }\n    if (x % n\
    \ != 0) {\n        return false;\n    }\n    return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  long i = 1;\n  while (pow(n, i) <= x) {\n    if (pow(n, i)\
    \ == x) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8ibs18ip: /tmp/tmp8ibs18ip.cpp:35: int main(): Assertion `candidate((1),
    (12)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1)\n  return true;\n  if(n==1)\n  return false;\n  if(x==n)\n\
    \  return true;\n  if(x%n!=0)\n  return false;\n  return is_simple_power(x/n,n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x < n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1) return true;\n  if(n==1) return false;\n  if(x==n)\
    \ return true;\n  if(x%n!=0) return false;\n  return is_simple_power(x/n,n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099463
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x % n != 0) {\n    return false;\n  }\n  return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4zs4ddld: /tmp/tmp4zs4ddld.cpp:27: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    if (x == n) {\n        return true;\n    }\n    if (x < n)\
    \ {\n        return false;\n    }\n    if (x % n != 0) {\n        return false;\n\
    \    }\n    return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x < n) return false;\n  return is_simple_power(x / n, n);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxvv6sxj6: /tmp/tmpxvv6sxj6.cpp:27: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x < n) {\n    return false;\n \
    \ }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpasvppsy9: /tmp/tmpasvppsy9.cpp:35: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1)\n  return true;\n  if(n==1)\n  return false;\n  if(x==n)\n\
    \  return true;\n  if(x<n)\n  return false;\n  if(x%n!=0)\n  return false;\n \
    \ return is_simple_power(x/n,n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1)\n    return true;\n  if(n==1)\n    return false;\n\
    \  if(x==n)\n    return true;\n  if(x%n!=0)\n    return false;\n  return is_simple_power(x/n,n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x < n) return false;\n  return is_simple_power(x / n, n);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxvv6sxj6: /tmp/tmpxvv6sxj6.cpp:27: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    if (x == n) {\n        return true;\n    }\n    if (x % n\
    \ != 0) {\n        return false;\n    }\n    return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x < n) return false;\n  return is_simple_power(x / n, n);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxvv6sxj6: /tmp/tmpxvv6sxj6.cpp:27: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4zs4ddld: /tmp/tmp4zs4ddld.cpp:27: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    if (x == n) {\n        return true;\n    }\n    long temp\
    \ = n;\n    while (temp < x) {\n        temp *= n;\n    }\n    if (temp == x)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x < n) return false;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x < n) {\n    return false;\n \
    \ }\n  if (x % n != 0) {\n    return false;\n  }\n  return is_simple_power(x /\
    \ n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x < n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1)\n  return true;\n  if(n==1)\n  return false;\n  if(x==n)\n\
    \  return true;\n  if(x%n==0)\n  return is_simple_power(x/n,n);\n  return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1)\n    return true;\n  if(n==1)\n    return false;\n\
    \  if(x==n)\n    return true;\n  if(x%n!=0)\n    return false;\n  return is_simple_power(x/n,n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  long i = 1;\n  while (pow(n, i) < x) {\n    i++;\n  }\n  if (pow(n, i) == x)\
    \ {\n    return true;\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099463
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    if (x == n) {\n        return true;\n    }\n    if (x % n\
    \ != 0) {\n        return false;\n    }\n    return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    if (x == n) {\n        return true;\n    }\n    if (x % n\
    \ != 0) {\n        return false;\n    }\n    return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x < n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  long i = 1;\n  while (pow(n, i) <= x) {\n    if (pow(n, i) == x) {\n      return\
    \ true;\n    }\n    i++;\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099463
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x < n) return false;\n  return is_simple_power(x / n, n);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxvv6sxj6: /tmp/tmpxvv6sxj6.cpp:27: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (n == 1) {\n    return x == 1;\n  }\n  if (x == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_k2d4xh5: /tmp/tmp_k2d4xh5.cpp:39: int main(): Assertion `candidate((1),
    (12)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x % n != 0) {\n    return false;\n  }\n  return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    if (x == n) {\n        return true;\n    }\n    if (x < n)\
    \ {\n        return false;\n    }\n    if (x % n != 0) {\n        return false;\n\
    \    }\n    return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    if (x == n) {\n        return true;\n    }\n    if (x % n\
    \ != 0) {\n        return false;\n    }\n    return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1)\n    return true;\n  if(n==1)\n    return false;\n\
    \  if(x==n)\n    return true;\n  if(x%n!=0)\n    return false;\n  return is_simple_power(x/n,n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    if (x == n) {\n        return true;\n    }\n    if (x < n)\
    \ {\n        return false;\n    }\n    return is_simple_power(x / n, n);\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmph7pbpujv: /tmp/tmph7pbpujv.cpp:35: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  long power = n;\n  while (power < x) {\n    power *= n;\n  }\n  return power\
    \ == x;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1) return true;\n  if(n==1) return false;\n  long i=1;\n\
    \  while(pow(n,i)<=x){\n    if(pow(n,i)==x) return true;\n    i++;\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  int\
    \ i = 0;\n  while (pow(n, i) <= x) {\n    if (pow(n, i) == x) {\n      return\
    \ true;\n    }\n    i++;\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  long i = 1;\n  while (pow(n, i) <= x) {\n    if (pow(n, i) == x) {\n      return\
    \ true;\n    }\n    i++;\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099463
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x < n) return false;\n  return is_simple_power(x / n, n);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxvv6sxj6: /tmp/tmpxvv6sxj6.cpp:27: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    return is_simple_power(x/n, n);\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmps6amujwr: /tmp/tmps6amujwr.cpp:27: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    if (x == n) {\n        return true;\n    }\n    if (x % n\
    \ != 0) {\n        return false;\n    }\n    return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    long i = 1;\n    while (pow(n, i) < x) {\n        i++;\n\
    \    }\n    if (pow(n, i) == x) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // your code here\n    if(x==1){\n        return true;\n    }\n    if(n==1){\n\
    \        return false;\n    }\n    if(x==n){\n        return true;\n    }\n  \
    \  if(x%n!=0){\n        return false;\n    }\n    return is_simple_power(x/n,n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4zs4ddld: /tmp/tmp4zs4ddld.cpp:27: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  long i = 2;\n  while (i\
    \ <= x) {\n    if (i == x) return true;\n    i *= n;\n  }\n  return false;\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp17npafd9: /tmp/tmp17npafd9.cpp:28: int main(): Assertion `candidate((9),
    (3)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x < n) return false;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1)\n  return true;\n  if(x==0)\n  return false;\n  if(n==0)\n\
    \  return false;\n  if(n==1)\n  return false;\n  if(x==n)\n  return true;\n  if(x%n!=0)\n\
    \  return false;\n  return is_simple_power(x/n,n);\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x < n) return false;\n  return is_simple_power(x / n, n);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxvv6sxj6: /tmp/tmpxvv6sxj6.cpp:27: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x < n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x < n) return false;\n  return is_simple_power(x / n, n);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxvv6sxj6: /tmp/tmpxvv6sxj6.cpp:27: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x % n != 0) return\
    \ false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  double\
    \ y = log(x) / log(n);\n  return y == (int)y;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpf3qu4sun: /tmp/tmpf3qu4sun.cpp:27: int main(): Assertion `candidate((1),
    (1)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1)\n    return true;\n  if(n==1)\n    return false;\n\
    \  if(x==n)\n    return true;\n  if(x<n)\n    return false;\n  if(x%n!=0)\n  \
    \  return false;\n  return is_simple_power(x/n,n);\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1)\n    return true;\n  if(n==1)\n    return false;\n\
    \  if(x==n)\n    return true;\n  if(x%n!=0)\n    return false;\n  return is_simple_power(x/n,n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x < n) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x < n) return false;\n  return is_simple_power(x / n, n);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxvv6sxj6: /tmp/tmpxvv6sxj6.cpp:27: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1)\n  return true;\n  if(n==1)\n  return false;\n  if(x==n)\n\
    \  return true;\n  if(x%n!=0)\n  return false;\n  return is_simple_power(x/n,n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    if (x == n) {\n        return true;\n    }\n    if (x < n)\
    \ {\n        return false;\n    }\n    return is_simple_power(x / n, n);\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmph7pbpujv: /tmp/tmph7pbpujv.cpp:35: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x < n) return false;\n  return is_simple_power(x / n, n);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxvv6sxj6: /tmp/tmpxvv6sxj6.cpp:27: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  double result = log(x) / log(n);\n    return (result - (int)result == 0);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpuwjlm7ib: /tmp/tmpuwjlm7ib.cpp:27: int main(): Assertion `candidate((1),
    (1)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1)\n    return true;\n  if(x%n!=0)\n    return false;\n\
    \  else\n    return is_simple_power(x/n,n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  long power = n;\n  while (power < x) {\n    power *= n;\n  }\n  return power\
    \ == x;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    if (x == n) {\n        return true;\n    }\n    if (x % n\
    \ != 0) {\n        return false;\n    }\n    return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1)\n    return true;\n  if(x==0)\n    return false;\n\
    \  if(n==0)\n    return false;\n  if(n==1)\n    return false;\n  if(x==n)\n  \
    \  return true;\n  if(x<n)\n    return false;\n  if(x%n!=0)\n    return false;\n\
    \  return is_simple_power(x/n,n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x < n) return false;\n  return is_simple_power(x / n, n);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxvv6sxj6: /tmp/tmpxvv6sxj6.cpp:27: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (n == 0) return false;\n  if (x % n != 0) return false;\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099463
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1)\n    return true;\n  if(x==n)\n    return true;\n\
    \  if(x%n!=0)\n    return false;\n  return is_simple_power(x/n,n);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099463
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660099464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  if (x < n) return false;\n  return is_simple_power(x / n, n);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxvv6sxj6: /tmp/tmpxvv6sxj6.cpp:27: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099464
