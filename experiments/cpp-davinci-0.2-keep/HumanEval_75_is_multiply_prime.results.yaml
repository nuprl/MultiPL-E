name: HumanEval_75_is_multiply_prime
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int count = 0;\n    for(int i = 2; i\
    \ <= a; i++) {\n        if(a % i == 0) {\n            count++;\n            a\
    \ /= i;\n            i--;\n        }\n    }\n    if(count == 3) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            int j = 0;\n            for (j = 2; j <= i / 2; j++)\
    \ {\n                if (i % j == 0) {\n                    break;\n         \
    \       }\n            }\n            if (j > i / 2) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count == 3) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpoeqp0rds: /tmp/tmpoeqp0rds.cpp:33: int main(): Assertion `candidate((8))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\t// Write your code here\n\tint count = 0;\n\tfor (int i = 2; i <= a;\
    \ i++) {\n\t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t\ta /= i;\n\t\t\ti--;\n\t\
    \t}\n\t}\n\tif (count == 3)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\
    int main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint count = 0;\n\tfor (int i = 2; i <= a; i++) {\n\t\tif (a % i == 0)\
    \ {\n\t\t\tcount++;\n\t\t\ta /= i;\n\t\t\ti--;\n\t\t}\n\t}\n\tif (count == 3)\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i, j, k, count = 0;\n    for (i = 2; i <= a; i++) {\n        if\
    \ (a % i == 0) {\n            for (j = 2; j <= i / 2; j++) {\n               \
    \ if (i % j == 0) {\n                    count++;\n                    break;\n\
    \                }\n            }\n            if (count == 0) {\n           \
    \     for (k = 2; k <= a / 2; k++) {\n                    if (a % k == 0) {\n\
    \                        count++;\n                        break;\n          \
    \          }\n                }\n                if (count == 0) {\n         \
    \           return true;\n                }\n            }\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpx6mfgdpm: /tmp/tmpx6mfgdpm.cpp:36: int main(): Assertion `candidate((5))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int cnt = 0;\n    for (int i = 2; i < a; i++) {\n        if (a % i\
    \ == 0) {\n            cnt++;\n            a /= i;\n            i--;\n       \
    \ }\n    }\n    return cnt == 2;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i < a; i++) {\n        if (a %\
    \ i == 0) {\n            count++;\n        }\n    }\n    if (count == 2) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpeqiorjkp: /tmp/tmpeqiorjkp.cpp:24: int main(): Assertion `candidate((30))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a == 1) {\n        return false;\n    }\n    if (a == 2) {\n \
    \       return true;\n    }\n    if (a == 3) {\n        return true;\n    }\n\
    \    if (a == 5) {\n        return true;\n    }\n    if (a == 7) {\n        return\
    \ true;\n    }\n    if (a == 11) {\n        return true;\n    }\n    if (a ==\
    \ 13) {\n        return true;\n    }\n    if (a == 17) {\n        return true;\n\
    \    }\n    if (a == 19) {\n        return true;\n    }\n    if (a == 23) {\n\
    \        return true;\n    }\n    if (a == 29) {\n        return true;\n    }\n\
    \    if (a == 31) {\n        return true;\n    }\n    if (a == 37) {\n       \
    \ return true;\n    }\n    if (a == 41) {\n        return true;\n    }\n    if\
    \ (a == 43) {\n        return true;\n    }\n    if (a == 47) {\n        return\
    \ true;\n    }\n    if (a == 53) {\n        return true;\n    }\n    if (a ==\
    \ 59) {\n        return true;\n    }\n    if (a == 61) {\n        return true;\n\
    \    }\n    if (a == 67) {\n        return true;\n    }\n    if (a == 71) {\n\
    \        return true;\n    }\n    if (a == 73) {\n        return true;\n    }\n\
    \    if (a == 79) {\n        return true;\n    }\n    if (a == 83) {\n       \
    \ return true;\n    }\n    if (a == 89) {\n        return true;\n    }\n    if\
    \ (a == 97) {\n        return true;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp3z5xf_1e: /tmp/tmp3z5xf_1e.cpp:92: int main(): Assertion `candidate((5))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i,j,k;\n    for(i=2;i<a;i++)\n    {\n        for(j=2;j<a;j++)\n\
    \        {\n            for(k=2;k<a;k++)\n            {\n                if(i*j*k==a)\n\
    \                {\n                    return true;\n                }\n    \
    \        }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpde7u7kt3: /tmp/tmpde7u7kt3.cpp:34: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a == 1) return false;\n    if (a == 2) return true;\n    if (a\
    \ == 3) return true;\n    if (a == 5) return true;\n    if (a == 7) return true;\n\
    \    if (a == 11) return true;\n    if (a == 13) return true;\n    if (a == 17)\
    \ return true;\n    if (a == 19) return true;\n    if (a == 23) return true;\n\
    \    if (a == 29) return true;\n    if (a == 31) return true;\n    if (a == 37)\
    \ return true;\n    if (a == 41) return true;\n    if (a == 43) return true;\n\
    \    if (a == 47) return true;\n    if (a == 53) return true;\n    if (a == 59)\
    \ return true;\n    if (a == 61) return true;\n    if (a == 67) return true;\n\
    \    if (a == 71) return true;\n    if (a == 73) return true;\n    if (a == 79)\
    \ return true;\n    if (a == 83) return true;\n    if (a == 89) return true;\n\
    \    if (a == 97) return true;\n    if (a % 2 == 0) return false;\n    if (a %\
    \ 3 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 7 == 0)\
    \ return false;\n    if (a % 11 == 0) return false;\n    if (a % 13 == 0) return\
    \ false;\n    if (a % 17 == 0) return false;\n    if (a % 19 == 0) return false;\n\
    \    if (a % 23 == 0) return false;\n    if (a % 29 == 0) return false;\n    if\
    \ (a % 31 == 0) return false;\n    if (a % 37 == 0) return false;\n    if (a %\
    \ 41 == 0) return false;\n    if (a % 43 == 0) return false;\n    if (a % 47 ==\
    \ 0) return false;\n    if (a % 53 == 0) return false;\n    if (a % 59 == 0) return\
    \ false;\n    if (a\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmplz72wq3c.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmplz72wq3c.cpp:53:10: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   53 |     if (a\n      |        ~ ^\n      |          )\n   54 | }\n\
    \      | ~         \n/tmp/tmplz72wq3c.cpp:54:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   54 | }\n      | ^\n/tmp/tmplz72wq3c.cpp:54:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   54 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int count = 0;\n    for(int i = 2; i\
    \ <= a; i++) {\n        if(a % i == 0) {\n            count++;\n            a\
    \ /= i;\n            i--;\n        }\n    }\n    if(count == 3) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a <= 1) {\n        return false;\n    }\n    int count = 0;\n\
    \    for (int i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            count++;\n\
    \            a /= i;\n            i--;\n        }\n    }\n    return count ==\
    \ 3;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int count = 0;\n    for(int i = 2; i\
    \ <= a; i++) {\n        if(a % i == 0) {\n            count++;\n            a\
    \ /= i;\n            i--;\n        }\n    }\n    if(count == 3) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i = 2;\n    int count = 0;\n    while (a != 1) {\n        if (a\
    \ % i == 0) {\n            a /= i;\n            count++;\n        } else {\n \
    \           i++;\n        }\n    }\n    return count == 3;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a == 1) return false;\n    if (a == 2) return true;\n    if (a\
    \ == 3) return true;\n    if (a == 5) return true;\n    if (a == 7) return true;\n\
    \    if (a == 11) return true;\n    if (a == 13) return true;\n    if (a == 17)\
    \ return true;\n    if (a == 19) return true;\n    if (a == 23) return true;\n\
    \    if (a == 29) return true;\n    if (a == 31) return true;\n    if (a == 37)\
    \ return true;\n    if (a == 41) return true;\n    if (a == 43) return true;\n\
    \    if (a == 47) return true;\n    if (a == 53) return true;\n    if (a == 59)\
    \ return true;\n    if (a == 61) return true;\n    if (a == 67) return true;\n\
    \    if (a == 71) return true;\n    if (a == 73) return true;\n    if (a == 79)\
    \ return true;\n    if (a == 83) return true;\n    if (a == 89) return true;\n\
    \    if (a == 97) return true;\n    if (a == 6) return false;\n    if (a == 10)\
    \ return false;\n    if (a == 14) return false;\n    if (a == 15) return false;\n\
    \    if (a == 21) return false;\n    if (a == 22) return false;\n    if (a ==\
    \ 33) return false;\n    if (a == 34) return false;\n    if (a == 35) return false;\n\
    \    if (a == 38) return false;\n    if (a == 39) return false;\n    if (a ==\
    \ 46) return false;\n    if (a == 51) return false;\n    if (a == 55) return false;\n\
    \    if (a == 57) return false;\n    if (a == 58) return false;\n    if (a ==\
    \ 62) return false;\n    if (a == 65) return false;\n    if (a == 69) return false;\n\
    \    if (a == 74) return false;\n    if (a ==\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2opep_w3.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmp2opep_w3.cpp:57:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   57 | }\n      | ^\n/tmp/tmp2opep_w3.cpp:56:13: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   56 |     if (a ==\n      |    \
    \    ~    ^\n      |             )\n   57 | }\n      | ~            \n/tmp/tmp2opep_w3.cpp:57:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   57 | }\n \
    \     | ^\n/tmp/tmp2opep_w3.cpp:57:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   57 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a == 1) return false;\n    if (a == 2) return true;\n    if (a\
    \ % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(a); i += 2) {\n     \
    \   if (a % i == 0) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp5sh97z_8: /tmp/tmp5sh97z_8.cpp:20: int main(): Assertion `candidate((5))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i;\n    int count = 0;\n    for (i = 2; i <= a; i++) {\n     \
    \   if (a % i == 0) {\n            count++;\n            a = a / i;\n        \
    \    i--;\n        }\n    }\n    if (count == 3) {\n        return true;\n   \
    \ }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i, j, k;\n\tfor (i = 2; i < a; i++) {\n\t\tfor (j = 2; j < a; j++)\
    \ {\n\t\t\tfor (k = 2; k < a; k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\t\
    return true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1205ugb9: /tmp/tmp1205ugb9.cpp:30: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i,j,k;\n    for(i=2;i<a;i++)\n    {\n        for(j=2;j<a;j++)\n\
    \        {\n            for(k=2;k<a;k++)\n            {\n                if(i*j*k==a)\n\
    \                {\n                    return true;\n                }\n    \
    \        }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpbefxf222: /tmp/tmpbefxf222.cpp:34: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i,j,k;\n    for(i=2;i<a;i++)\n    {\n        for(j=2;j<a;j++)\n\
    \        {\n            for(k=2;k<a;k++)\n            {\n                if(i*j*k==a)\n\
    \                {\n                    return true;\n                }\n    \
    \        }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpdu81i2vy: /tmp/tmpdu81i2vy.cpp:34: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i,j,k;\n    for(i=2;i<=a/2;i++)\n    {\n        if(a%i==0)\n \
    \       {\n            for(j=2;j<=a/2;j++)\n            {\n                if(a%j==0)\n\
    \                {\n                    for(k=2;k<=a/2;k++)\n                \
    \    {\n                        if(a%k==0)\n                        {\n      \
    \                      if(i*j*k==a)\n                            {\n         \
    \                       return true;\n                            }\n        \
    \                }\n                    }\n                }\n            }\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp9olwl66f: /tmp/tmp9olwl66f.cpp:43: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int cnt = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a %\
    \ i == 0) {\n            cnt++;\n            while (a % i == 0) {\n          \
    \      a /= i;\n            }\n        }\n    }\n    return cnt == 3;\n}\nint\
    \ main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpu8tx69as: /tmp/tmpu8tx69as.cpp:25: int main(): Assertion `candidate((8))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i, j, k, count = 0;\n\tfor (i = 2; i < a; i++) {\n\t\tif (a % i\
    \ == 0) {\n\t\t\tfor (j = 2; j < i; j++) {\n\t\t\t\tif (i % j == 0) {\n\t\t\t\t\
    \tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count == 0) {\n\t\t\t\tfor (k = 2; k\
    \ < a / i; k++) {\n\t\t\t\t\tif ((a / i) % k == 0) {\n\t\t\t\t\t\tcount++;\n\t\
    \t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (count == 0) {\n\t\t\t\t\treturn true;\n\t\t\t\
    \t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp5wy5ykoq: /tmp/tmp5wy5ykoq.cpp:35: int main(): Assertion `candidate((30))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i, j, k;\n\tfor (i = 2; i <= a; i++) {\n\t\tif (a % i == 0) {\n\t\
    \t\tfor (j = 2; j <= a; j++) {\n\t\t\t\tif (a % j == 0) {\n\t\t\t\t\tfor (k =\
    \ 2; k <= a; k++) {\n\t\t\t\t\t\tif (a % k == 0) {\n\t\t\t\t\t\t\tif (i * j *\
    \ k == a) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\
    \t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n  \
    \  auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpofzqe6sr: /tmp/tmpofzqe6sr.cpp:36: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i, j, k;\n    for (i = 2; i < a; i++) {\n        if (a % i ==\
    \ 0) {\n            for (j = 2; j < a; j++) {\n                if (a % j == 0)\
    \ {\n                    for (k = 2; k < a; k++) {\n                        if\
    \ (a % k == 0) {\n                            if (i * j * k == a) {\n        \
    \                        return true;\n                            }\n       \
    \                 }\n                    }\n                }\n            }\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpkb6r61ty: /tmp/tmpkb6r61ty.cpp:36: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int count = 0;\n    for(int i = 2; i\
    \ <= a; i++) {\n        if(a % i == 0) {\n            count++;\n            a\
    \ /= i;\n            i--;\n        }\n    }\n    if(count == 3) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    bool is_prime = true;\n    for (int i = 2; i < a; i++) {\n       \
    \ if (a % i == 0) {\n            is_prime = false;\n            break;\n     \
    \   }\n    }\n    return is_prime;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpvm4fa1b6: /tmp/tmpvm4fa1b6.cpp:21: int main(): Assertion `candidate((5))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i, j, k, l;\n\tfor (i = 2; i < a; i++) {\n\t\tfor (j = 2; j < a;\
    \ j++) {\n\t\t\tfor (k = 2; k < a; k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\
    \t\t\tfor (l = 2; l < i; l++) {\n\t\t\t\t\t\tif (i % l == 0) {\n\t\t\t\t\t\t\t\
    break;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (l == i) {\n\t\t\t\t\t\tfor (l\
    \ = 2; l < j; l++) {\n\t\t\t\t\t\t\tif (j % l == 0) {\n\t\t\t\t\t\t\t\tbreak;\n\
    \t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (l == j) {\n\t\t\t\t\t\t\tfor (l\
    \ = 2; l < k; l++) {\n\t\t\t\t\t\t\t\tif (k % l == 0) {\n\t\t\t\t\t\t\t\t\tbreak;\n\
    \t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (l == k) {\n\t\t\t\t\t\t\t\
    \treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint count = 0;\n\tfor (int i = 2; i < a; i++) {\n\t\tif (a % i == 0)\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count == 2) {\n\t\treturn true;\n\t}\n\t\
    else {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp7mn3an2j: /tmp/tmp7mn3an2j.cpp:26: int main(): Assertion `candidate((30))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tif (a == 1) return false;\n\tif (a == 2) return true;\n\tif (a == 3)\
    \ return true;\n\tif (a == 5) return true;\n\tif (a == 7) return true;\n\tif (a\
    \ == 11) return true;\n\tif (a == 13) return true;\n\tif (a == 17) return true;\n\
    \tif (a == 19) return true;\n\tif (a == 23) return true;\n\tif (a == 29) return\
    \ true;\n\tif (a == 31) return true;\n\tif (a == 37) return true;\n\tif (a ==\
    \ 41) return true;\n\tif (a == 43) return true;\n\tif (a == 47) return true;\n\
    \tif (a == 53) return true;\n\tif (a == 59) return true;\n\tif (a == 61) return\
    \ true;\n\tif (a == 67) return true;\n\tif (a == 71) return true;\n\tif (a ==\
    \ 73) return true;\n\tif (a == 79) return true;\n\tif (a == 83) return true;\n\
    \tif (a == 89) return true;\n\tif (a == 97) return true;\n\tif (a % 2 == 0) return\
    \ false;\n\tif (a % 3 == 0) return false;\n\tif (a % 5 == 0) return false;\n\t\
    if (a % 7 == 0) return false;\n\tif (a % 11 == 0) return false;\n\tif (a % 13\
    \ == 0) return false;\n\tif (a % 17 == 0) return false;\n\tif (a % 19 == 0) return\
    \ false;\n\tif (a % 23 == 0) return false;\n\tif (a % 29 == 0) return false;\n\
    \tif (a % 31 == 0) return false;\n\tif (a % 37 == 0) return false;\n\tif (a %\
    \ 41 == 0) return false;\n\tif (a % 43 == 0) return false;\n\tif (a % 47 == 0)\
    \ return false;\n\tif (a % 53 == 0) return false;\n\tif (a % 59 == 0) return false;\n\
    \tif (a\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0zwdxa4s.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmp0zwdxa4s.cpp:53:14: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   53 |         if (a\n      |            ~ ^\n      |              )\n\
    \   54 | }\n      | ~             \n/tmp/tmp0zwdxa4s.cpp:54:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   54 | }\n      | ^\n/tmp/tmp0zwdxa4s.cpp:54:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   54 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  // Write your code here\n  int count = 0;\n  for(int i = 2; i <= a;\
    \ i++) {\n    if(a % i == 0) {\n      count++;\n      a /= i;\n      i--;\n  \
    \  }\n  }\n  if(count == 3) {\n    return true;\n  }\n  return false;\n}\nint\
    \ main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i;\n    for (i = 2; i <= a; i++) {\n        if (a % i == 0) {\n\
    \            a /= i;\n            if (a == 1) {\n                return true;\n\
    \            }\n            i--;\n        }\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpo96avuib: /tmp/tmpo96avuib.cpp:24: int main(): Assertion `candidate((5))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i = 2;\n\tint count = 0;\n\twhile (a != 1) {\n\t\tif (a % i == 0)\
    \ {\n\t\t\ta /= i;\n\t\t\tcount++;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\
    \tif (count == 3) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i, j, k;\n\tfor (i = 2; i < a; i++) {\n\t\tfor (j = 2; j < a; j++)\
    \ {\n\t\t\tfor (k = 2; k < a; k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\t\
    return true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp5gyoddrx: /tmp/tmp5gyoddrx.cpp:30: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i < a; i++) {\n        if (a %\
    \ i == 0) {\n            count++;\n        }\n    }\n    if (count == 2) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpfu87g0a8: /tmp/tmpfu87g0a8.cpp:24: int main(): Assertion `candidate((30))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i < a; i++) {\n        if (a %\
    \ i == 0) {\n            count++;\n        }\n    }\n    if (count == 2) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmprvakr_3g: /tmp/tmprvakr_3g.cpp:24: int main(): Assertion `candidate((30))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int cnt = 0;\n    for (int i = 2; i < a; i++) {\n        if (a % i\
    \ == 0) {\n            cnt++;\n            a /= i;\n            i--;\n       \
    \ }\n    }\n    if (cnt == 2) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i, j, k;\n\tfor (i = 2; i < a; i++) {\n\t\tfor (j = 2; j < a; j++)\
    \ {\n\t\t\tfor (k = 2; k < a; k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\t\
    return true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1syroee1: /tmp/tmp1syroee1.cpp:30: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i < a; i++) {\n        if (a %\
    \ i == 0) {\n            count++;\n        }\n    }\n    if (count == 2) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpg5mbx4d7: /tmp/tmpg5mbx4d7.cpp:24: int main(): Assertion `candidate((30))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint count = 0;\n\tfor (int i = 2; i <= a; i++) {\n\t\tif (a % i == 0)\
    \ {\n\t\t\tcount++;\n\t\t\ta /= i;\n\t\t\ti--;\n\t\t}\n\t}\n\tif (count == 3)\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i < a; i++) {\n        if (a %\
    \ i == 0) {\n            count++;\n        }\n    }\n    if (count == 2) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpveke16dw: /tmp/tmpveke16dw.cpp:24: int main(): Assertion `candidate((30))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i, j, k, l;\n\tfor (i = 2; i < a; i++) {\n\t\tfor (j = 2; j < a;\
    \ j++) {\n\t\t\tfor (k = 2; k < a; k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\
    \t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpg072fihm: /tmp/tmpg072fihm.cpp:30: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int cnt = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a %\
    \ i == 0) {\n            cnt++;\n            while (a % i == 0) {\n          \
    \      a /= i;\n            }\n        }\n    }\n    return cnt == 3;\n}\nint\
    \ main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpimyuv42a: /tmp/tmpimyuv42a.cpp:25: int main(): Assertion `candidate((8))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i;\n    for (i = 2; i <= a; i++) {\n        if (a % i == 0) {\n\
    \            break;\n        }\n    }\n    if (i == a) {\n        return true;\n\
    \    }\n    else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpieoehxnv: /tmp/tmpieoehxnv.cpp:25: int main(): Assertion `candidate((5))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i = 2;\n\tint count = 0;\n\twhile (a != 1) {\n\t\tif (a % i == 0)\
    \ {\n\t\t\ta /= i;\n\t\t\tcount++;\n\t\t}\n\t\telse\n\t\t\ti++;\n\t}\n\tif (count\
    \ == 3)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int count = 0;\n    for(int i = 2; i\
    \ <= a; i++) {\n        if(a % i == 0) {\n            count++;\n            a\
    \ /= i;\n            i--;\n        }\n    }\n    if(count == 3) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint count = 0;\n\tfor (int i = 2; i < a; i++) {\n\t\tif (a % i == 0)\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count == 2) {\n\t\treturn true;\n\t}\n\t\
    else {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpksrjpk_c: /tmp/tmpksrjpk_c.cpp:26: int main(): Assertion `candidate((30))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            while (a % i == 0) {\n      \
    \          a /= i;\n            }\n        }\n    }\n    return count == 3;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpys4p26dn: /tmp/tmpys4p26dn.cpp:25: int main(): Assertion `candidate((8))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i, j, k;\n    for (i = 2; i < a; i++) {\n        if (a % i ==\
    \ 0) {\n            for (j = 2; j < a; j++) {\n                if (a % j == 0)\
    \ {\n                    for (k = 2; k < a; k++) {\n                        if\
    \ (a % k == 0) {\n                            if (i * j * k == a) {\n        \
    \                        return true;\n                            }\n       \
    \                 }\n                    }\n                }\n            }\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpqnlin5y5: /tmp/tmpqnlin5y5.cpp:36: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i,j,k;\n    for(i=2;i<a;i++)\n    {\n        for(j=2;j<a;j++)\n\
    \        {\n            for(k=2;k<a;k++)\n            {\n                if(i*j*k==a)\n\
    \                {\n                    return true;\n                }\n    \
    \        }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpvk11qimb: /tmp/tmpvk11qimb.cpp:34: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int cnt = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a %\
    \ i == 0) {\n            cnt++;\n            a /= i;\n            i--;\n     \
    \   }\n    }\n    return cnt == 3;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int cnt = 0;\n    for (int i = 2; i < a; i++) {\n        if (a % i\
    \ == 0) {\n            cnt++;\n            a /= i;\n            i--;\n       \
    \ }\n    }\n    if (cnt == 2) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int count = 0;\n    for(int i = 2; i\
    \ <= a; i++) {\n        if(a % i == 0) {\n            count++;\n            a\
    \ /= i;\n            i--;\n        }\n    }\n    if(count == 3) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tif (a == 1) return false;\n\tif (a == 2) return true;\n\tif (a == 3)\
    \ return true;\n\tif (a == 5) return true;\n\tif (a == 7) return true;\n\tif (a\
    \ == 11) return true;\n\tif (a == 13) return true;\n\tif (a == 17) return true;\n\
    \tif (a == 19) return true;\n\tif (a == 23) return true;\n\tif (a == 29) return\
    \ true;\n\tif (a == 31) return true;\n\tif (a == 37) return true;\n\tif (a ==\
    \ 41) return true;\n\tif (a == 43) return true;\n\tif (a == 47) return true;\n\
    \tif (a == 53) return true;\n\tif (a == 59) return true;\n\tif (a == 61) return\
    \ true;\n\tif (a == 67) return true;\n\tif (a == 71) return true;\n\tif (a ==\
    \ 73) return true;\n\tif (a == 79) return true;\n\tif (a == 83) return true;\n\
    \tif (a == 89) return true;\n\tif (a == 97) return true;\n\tif (a % 2 == 0) return\
    \ is_multiply_prime(a / 2);\n\tif (a % 3 == 0) return is_multiply_prime(a / 3);\n\
    \tif (a % 5 == 0) return is_multiply_prime(a / 5);\n\tif (a % 7 == 0) return is_multiply_prime(a\
    \ / 7);\n\tif (a % 11 == 0) return is_multiply_prime(a / 11);\n\tif (a % 13 ==\
    \ 0) return is_multiply_prime(a / 13);\n\tif (a % 17 == 0) return is_multiply_prime(a\
    \ / 17);\n\tif (a % 19 == 0) return is_multiply_prime(a / 19);\n\tif (a % 23 ==\
    \ 0) return is_multiply_prime(a / 23);\n\tif (a % 29 == 0) return is_multiply_prime(\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9sl1xvk2.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmp9sl1xvk2.cpp:46:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   46 | }\n      | ^\n/tmp/tmp9sl1xvk2.cpp:45:51: error: expected\
    \ \u2018;\u2019 before \u2018}\u2019 token\n   45 |         if (a % 29 == 0) return\
    \ is_multiply_prime(\n      |                                                \
    \   ^\n      |                                                   ;\n   46 | }\n\
    \      | ~                                                  \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int count = 0;\n    for(int i = 2; i\
    \ <= a; i++) {\n        if(a % i == 0) {\n            count++;\n            a\
    \ /= i;\n            i--;\n        }\n    }\n    if(count == 3) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i,j,k;\n\tfor(i=2;i<=a/2;i++)\n\t{\n\t\tfor(j=2;j<=a/2;j++)\n\t\t\
    {\n\t\t\tfor(k=2;k<=a/2;k++)\n\t\t\t{\n\t\t\t\tif(i*j*k==a)\n\t\t\t\t{\n\t\t\t\
    \t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpiyrvj5af: /tmp/tmpiyrvj5af.cpp:34: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int i,j,k,l;\n    for(i=2;i<a;i++)\n\
    \    {\n        for(j=2;j<a;j++)\n        {\n            for(k=2;k<a;k++)\n  \
    \          {\n                if(i*j*k==a)\n                {\n              \
    \      return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp08uuc80n: /tmp/tmp08uuc80n.cpp:35: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tif (a == 1) return false;\n\tif (a == 2) return true;\n\tif (a == 3)\
    \ return true;\n\tif (a == 5) return true;\n\tif (a == 7) return true;\n\tif (a\
    \ == 11) return true;\n\tif (a == 13) return true;\n\tif (a == 17) return true;\n\
    \tif (a == 19) return true;\n\tif (a == 23) return true;\n\tif (a == 29) return\
    \ true;\n\tif (a == 31) return true;\n\tif (a == 37) return true;\n\tif (a ==\
    \ 41) return true;\n\tif (a == 43) return true;\n\tif (a == 47) return true;\n\
    \tif (a == 53) return true;\n\tif (a == 59) return true;\n\tif (a == 61) return\
    \ true;\n\tif (a == 67) return true;\n\tif (a == 71) return true;\n\tif (a ==\
    \ 73) return true;\n\tif (a == 79) return true;\n\tif (a == 83) return true;\n\
    \tif (a == 89) return true;\n\tif (a == 97) return true;\n\treturn false;\n}\n\
    int main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp5wf4nf9y: /tmp/tmp5wf4nf9y.cpp:40: int main(): Assertion `candidate((5))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  int i, j, k;\n  for (i = 2; i < a; i++) {\n    if (a % i == 0) {\n \
    \     for (j = 2; j < a; j++) {\n        if (a % j == 0) {\n          for (k =\
    \ 2; k < a; k++) {\n            if (a % k == 0) {\n              if (i * j * k\
    \ == a) {\n                return true;\n              }\n            }\n    \
    \      }\n        }\n      }\n    }\n  }\n  return false;\n}\nint main() {\n \
    \   auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp3ehy_pcc: /tmp/tmp3ehy_pcc.cpp:36: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i,j,k;\n    for(i=2;i<a;i++)\n    {\n        for(j=2;j<a;j++)\n\
    \        {\n            for(k=2;k<a;k++)\n            {\n                if(i*j*k==a)\n\
    \                {\n                    return true;\n                }\n    \
    \        }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpkrt1gfqh: /tmp/tmpkrt1gfqh.cpp:34: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a == 1) return false;\n    if (a == 2) return true;\n    if (a\
    \ % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(a); i += 2) {\n     \
    \   if (a % i == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmposshi4ni: /tmp/tmposshi4ni.cpp:22: int main(): Assertion `candidate((5))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i, j, k, count = 0;\n    for (i = 2; i <= a; i++) {\n        if\
    \ (a % i == 0) {\n            for (j = 2; j <= i / 2; j++) {\n               \
    \ if (i % j == 0) {\n                    count++;\n                    break;\n\
    \                }\n            }\n            if (count == 0) {\n           \
    \     for (k = 2; k <= a / 2; k++) {\n                    if (a % k == 0) {\n\
    \                        count++;\n                        break;\n          \
    \          }\n                }\n                if (count == 0) {\n         \
    \           return true;\n                }\n            }\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpn502t0l9: /tmp/tmpn502t0l9.cpp:36: int main(): Assertion `candidate((5))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i < a; i++) {\n        if (a %\
    \ i == 0) {\n            count++;\n        }\n    }\n    if (count == 2) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpxm6ymwxd: /tmp/tmpxm6ymwxd.cpp:24: int main(): Assertion `candidate((30))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int count = 0;\n    for(int i = 2; i\
    \ <= a; i++) {\n        if(a % i == 0) {\n            count++;\n            a\
    \ /= i;\n            i--;\n        }\n    }\n    if(count == 3) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i = 2;\n    int count = 0;\n    while (a != 1) {\n        if (a\
    \ % i == 0) {\n            a /= i;\n            count++;\n        } else {\n \
    \           i++;\n        }\n    }\n    return count == 3;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tstd::vector<int> primes = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 };\n\tint count = 0;\n\
    \tfor (int i = 0; i < primes.size(); i++) {\n\t\tif (a % primes[i] == 0) {\n\t\
    \t\tcount++;\n\t\t\ta /= primes[i];\n\t\t}\n\t}\n\tif (count == 3) {\n\t\treturn\
    \ true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpkybmxmiy: /tmp/tmpkybmxmiy.cpp:29: int main(): Assertion `candidate((8))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    // Hint: You can use the function is_prime(n)\n\
    \    // Hint: You can use the function is_prime(n)\n    if(a==1)\n        return\
    \ false;\n    if(a==2)\n        return true;\n    if(a==3)\n        return true;\n\
    \    if(a==4)\n        return false;\n    if(a==5)\n        return true;\n   \
    \ if(a==6)\n        return false;\n    if(a==7)\n        return true;\n    if(a==8)\n\
    \        return false;\n    if(a==9)\n        return false;\n    if(a==10)\n \
    \       return false;\n    if(a==11)\n        return true;\n    if(a==12)\n  \
    \      return false;\n    if(a==13)\n        return true;\n    if(a==14)\n   \
    \     return false;\n    if(a==15)\n        return false;\n    if(a==16)\n   \
    \     return false;\n    if(a==17)\n        return true;\n    if(a==18)\n    \
    \    return false;\n    if(a==19)\n        return true;\n    if(a==20)\n     \
    \   return false;\n    if(a==21)\n        return false;\n    if(a==22)\n     \
    \   return false;\n    if(a==23)\n        return true;\n    if(a==24)\n      \
    \  return false;\n    if(a==25)\n        return false;\n    if(a==26)\n      \
    \  return false;\n    if(a==27)\n        return false;\n    if(a==28)\n      \
    \  return false;\n    if(a==29)\n        return true;\n    if(a==30)\n       \
    \ return true;\n    if(a==31)\n        return true;\n    if(a==32)\n        return\
    \ false;\n    if(a==33)\n        return false;\n    if(a==34)\n        return\
    \ false;\n    if(a==35)\n        return false;\n    if(a==36)\n        return\
    \ false;\n    if\n}\nint main() {\n    auto candidate = is_multiply_prime;\n \
    \   assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp50z5c_ri.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmp50z5c_ri.cpp:86:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   86 | }\n      | ^\n      | (\n/tmp/tmp50z5c_ri.cpp:86:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   86 | }\n      |\
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tif (a == 1) return false;\n\tif (a == 2) return true;\n\tif (a == 3)\
    \ return true;\n\tif (a == 5) return true;\n\tif (a == 7) return true;\n\tif (a\
    \ == 11) return true;\n\tif (a == 13) return true;\n\tif (a == 17) return true;\n\
    \tif (a == 19) return true;\n\tif (a == 23) return true;\n\tif (a == 29) return\
    \ true;\n\tif (a == 31) return true;\n\tif (a == 37) return true;\n\tif (a ==\
    \ 41) return true;\n\tif (a == 43) return true;\n\tif (a == 47) return true;\n\
    \tif (a == 53) return true;\n\tif (a == 59) return true;\n\tif (a == 61) return\
    \ true;\n\tif (a == 67) return true;\n\tif (a == 71) return true;\n\tif (a ==\
    \ 73) return true;\n\tif (a == 79) return true;\n\tif (a == 83) return true;\n\
    \tif (a == 89) return true;\n\tif (a == 97) return true;\n\tif (a % 2 == 0) {\n\
    \t\tif (is_multiply_prime(a / 2)) return true;\n\t}\n\tif (a % 3 == 0) {\n\t\t\
    if (is_multiply_prime(a / 3)) return true;\n\t}\n\tif (a % 5 == 0) {\n\t\tif (is_multiply_prime(a\
    \ / 5)) return true;\n\t}\n\tif (a % 7 == 0) {\n\t\tif (is_multiply_prime(a /\
    \ 7)) return true;\n\t}\n\tif (a % 11 == 0) {\n\t\tif (is_multiply_prime(a / 11))\
    \ return true;\n\t}\n\tif (a % 13 == 0) {\n\t\tif (is_multiply_prime(a / 13))\
    \ return true;\n\t}\n\tif (a % 17 == 0) {\n\t\tif (is_multiply_\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsaqylsbv.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmpsaqylsbv.cpp:55:21: error: \u2018is_multiply_\u2019 was not declared\
    \ in this scope; did you mean \u2018is_multiply_prime\u2019?\n   55 |        \
    \         if (is_multiply_\n      |                     ^~~~~~~~~~~~\n      |\
    \                     is_multiply_prime\n/tmp/tmpsaqylsbv.cpp:55:33: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   55 |                 if (is_multiply_\n\
    \      |                    ~            ^\n      |                          \
    \       )\n   56 | }\n      | ~                                \n/tmp/tmpsaqylsbv.cpp:56:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   56 | }\n \
    \     | ^\n/tmp/tmpsaqylsbv.cpp:57:9: warning: empty parentheses were disambiguated\
    \ as a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |  \
    \       ^~\n/tmp/tmpsaqylsbv.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpsaqylsbv.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpsaqylsbv.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmpsaqylsbv.cpp:69:2: error:\
    \ expected \u2018}\u2019 at end of input\n   69 | }\n      |  ^\n/tmp/tmpsaqylsbv.cpp:9:32:\
    \ note: to match this \u2018{\u2019\n    9 | bool is_multiply_prime(long a) {\n\
    \      |                                ^\n/tmp/tmpsaqylsbv.cpp:69:2: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   69 | }\n      |\
    \  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint count = 0;\n\tfor (int i = 2; i < a; i++) {\n\t\tif (a % i == 0)\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count == 3) {\n\t\treturn true;\n\t}\n\t\
    else {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmprz8cpihn: /tmp/tmprz8cpihn.cpp:26: int main(): Assertion `candidate((30))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\t// Write your code here\n\tint i,j,k,l;\n\tfor(i=2;i<a;i++)\n\t{\n\t\
    \tfor(j=2;j<a;j++)\n\t\t{\n\t\t\tfor(k=2;k<a;k++)\n\t\t\t{\n\t\t\t\tif(i*j*k==a)\n\
    \t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpoa4nn2m8: /tmp/tmpoa4nn2m8.cpp:35: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int count = 0;\n    for(int i = 2; i\
    \ <= a; i++) {\n        if(a % i == 0) {\n            count++;\n            a\
    \ /= i;\n            i--;\n        }\n    }\n    if(count == 3) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i,j,k;\n    for(i=2;i<a;i++)\n    {\n        for(j=2;j<a;j++)\n\
    \        {\n            for(k=2;k<a;k++)\n            {\n                if(i*j*k==a)\n\
    \                {\n                    return true;\n                }\n    \
    \        }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpklqdcy0p: /tmp/tmpklqdcy0p.cpp:34: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i, j, k;\n\tfor (i = 2; i < a; i++) {\n\t\tfor (j = 2; j < a; j++)\
    \ {\n\t\t\tfor (k = 2; k < a; k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\t\
    return true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpztqwvtdc: /tmp/tmpztqwvtdc.cpp:30: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int i,j,k;\n    for(i=2;i<=a/2;i++)\n\
    \    {\n        for(j=2;j<=a/2;j++)\n        {\n            for(k=2;k<=a/2;k++)\n\
    \            {\n                if(i*j*k==a)\n                {\n            \
    \        return true;\n                }\n            }\n        }\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n \
    \   assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpy43x17ov: /tmp/tmpy43x17ov.cpp:35: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i,j,k;\n    for(i=2;i<=a/2;i++)\n    {\n        if(a%i==0)\n \
    \       {\n            for(j=2;j<=a/2;j++)\n            {\n                if(a%j==0)\n\
    \                {\n                    for(k=2;k<=a/2;k++)\n                \
    \    {\n                        if(a%k==0)\n                        {\n      \
    \                      if(i*j*k==a)\n                            {\n         \
    \                       return true;\n                            }\n        \
    \                }\n                    }\n                }\n            }\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpwrcqo7aw: /tmp/tmpwrcqo7aw.cpp:43: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i,j,k;\n    for(i=2;i<=a/3;i++)\n    {\n        for(j=2;j<=a/2;j++)\n\
    \        {\n            for(k=2;k<=a/2;k++)\n            {\n                if(i*j*k==a)\n\
    \                {\n                    return true;\n                }\n    \
    \        }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmplc1i5lp6: /tmp/tmplc1i5lp6.cpp:34: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            while (a % i == 0) {\n      \
    \          a /= i;\n            }\n        }\n    }\n    return count == 3;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqb8s3n88: /tmp/tmpqb8s3n88.cpp:25: int main(): Assertion `candidate((8))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i,j,k;\n    for(i=2;i<=a/2;i++)\n    {\n        for(j=2;j<=a/2;j++)\n\
    \        {\n            for(k=2;k<=a/2;k++)\n            {\n                if(i*j*k==a)\n\
    \                {\n                    return true;\n                }\n    \
    \        }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpmh3rclm5: /tmp/tmpmh3rclm5.cpp:34: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tif (a == 1) return false;\n\tif (a == 2) return true;\n\tif (a == 3)\
    \ return true;\n\tif (a == 5) return true;\n\tif (a == 7) return true;\n\tif (a\
    \ == 11) return true;\n\tif (a == 13) return true;\n\tif (a == 17) return true;\n\
    \tif (a == 19) return true;\n\tif (a == 23) return true;\n\tif (a == 29) return\
    \ true;\n\tif (a == 31) return true;\n\tif (a == 37) return true;\n\tif (a ==\
    \ 41) return true;\n\tif (a == 43) return true;\n\tif (a == 47) return true;\n\
    \tif (a == 53) return true;\n\tif (a == 59) return true;\n\tif (a == 61) return\
    \ true;\n\tif (a == 67) return true;\n\tif (a == 71) return true;\n\tif (a ==\
    \ 73) return true;\n\tif (a == 79) return true;\n\tif (a == 83) return true;\n\
    \tif (a == 89) return true;\n\tif (a == 97) return true;\n\tif (a % 2 == 0) {\n\
    \t\tif (is_multiply_prime(a / 2)) return true;\n\t}\n\tif (a % 3 == 0) {\n\t\t\
    if (is_multiply_prime(a / 3)) return true;\n\t}\n\tif (a % 5 == 0) {\n\t\tif (is_multiply_prime(a\
    \ / 5)) return true;\n\t}\n\tif (a % 7 == 0) {\n\t\tif (is_multiply_prime(a /\
    \ 7)) return true;\n\t}\n\tif (a % 11 == 0) {\n\t\tif (is_multiply_prime(a / 11))\
    \ return true;\n\t}\n\tif (a % 13 == 0) {\n\t\tif (is_multiply_prime(a / 13))\
    \ return true;\n\t}\n\tif (a % 17 == 0) {\n\t\tif (is_multiply_\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7jsc5waw.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmp7jsc5waw.cpp:55:21: error: \u2018is_multiply_\u2019 was not declared\
    \ in this scope; did you mean \u2018is_multiply_prime\u2019?\n   55 |        \
    \         if (is_multiply_\n      |                     ^~~~~~~~~~~~\n      |\
    \                     is_multiply_prime\n/tmp/tmp7jsc5waw.cpp:55:33: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   55 |                 if (is_multiply_\n\
    \      |                    ~            ^\n      |                          \
    \       )\n   56 | }\n      | ~                                \n/tmp/tmp7jsc5waw.cpp:56:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   56 | }\n \
    \     | ^\n/tmp/tmp7jsc5waw.cpp:57:9: warning: empty parentheses were disambiguated\
    \ as a function declaration [-Wvexing-parse]\n   57 | int main() {\n      |  \
    \       ^~\n/tmp/tmp7jsc5waw.cpp:57:9: note: remove parentheses to default-initialize\
    \ a variable\n   57 | int main() {\n      |         ^~\n      |         --\n/tmp/tmp7jsc5waw.cpp:57:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmp7jsc5waw.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmp7jsc5waw.cpp:69:2: error:\
    \ expected \u2018}\u2019 at end of input\n   69 | }\n      |  ^\n/tmp/tmp7jsc5waw.cpp:9:32:\
    \ note: to match this \u2018{\u2019\n    9 | bool is_multiply_prime(long a) {\n\
    \      |                                ^\n/tmp/tmp7jsc5waw.cpp:69:2: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   69 | }\n      |\
    \  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i < a; i++) {\n        if (a %\
    \ i == 0) {\n            count++;\n        }\n    }\n    if (count == 3) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpjxzt74tu: /tmp/tmpjxzt74tu.cpp:24: int main(): Assertion `candidate((30))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n   \
    \ assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_p31ejrv: /tmp/tmp_p31ejrv.cpp:16: int main(): Assertion `candidate((30))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i, j, k;\n\tfor (i = 2; i <= a; i++) {\n\t\tfor (j = 2; j <= a;\
    \ j++) {\n\t\t\tfor (k = 2; k <= a; k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\
    \t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp2aekji70: /tmp/tmp2aekji70.cpp:30: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int count = 0;\n    for(int i = 2; i\
    \ <= a; i++) {\n        if(a % i == 0) {\n            count++;\n            a\
    \ /= i;\n            i--;\n        }\n    }\n    if(count == 3)\n        return\
    \ true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint cnt = 0;\n\tfor (int i = 2; i <= a; i++) {\n\t\tif (a % i == 0)\
    \ {\n\t\t\tcnt++;\n\t\t\ta /= i;\n\t\t\ti--;\n\t\t}\n\t}\n\treturn cnt == 3;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i,j,k;\n    for(i=2;i<a;i++)\n    {\n        for(j=2;j<a;j++)\n\
    \        {\n            for(k=2;k<a;k++)\n            {\n                if(i*j*k==a)\n\
    \                {\n                    return true;\n                }\n    \
    \        }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpt_3n4qcs: /tmp/tmpt_3n4qcs.cpp:34: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    if(a == 1)\n        return false;\n \
    \   if(a == 2)\n        return true;\n    if(a % 2 == 0)\n        return false;\n\
    \    for(int i = 3; i <= sqrt(a); i+=2)\n    {\n        if(a % i == 0)\n     \
    \       return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpzfeldux5: /tmp/tmpzfeldux5.cpp:26: int main(): Assertion `candidate((5))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a == 1) return false;\n    if (a == 2) return true;\n    if (a\
    \ % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(a); i += 2) {\n     \
    \   if (a % i == 0) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp02i6y_8n: /tmp/tmp02i6y_8n.cpp:20: int main(): Assertion `candidate((5))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int count=0;\n    for(int i=2;i<a;i++){\n\
    \        if(a%i==0){\n            count++;\n        }\n    }\n    if(count==2){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp090csmsf: /tmp/tmp090csmsf.cpp:27: int main(): Assertion `candidate((30))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i, j, k;\n\tfor (i = 2; i < a; i++) {\n\t\tfor (j = 2; j < a; j++)\
    \ {\n\t\t\tfor (k = 2; k < a; k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\t\
    return true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpmzkfqe5e: /tmp/tmpmzkfqe5e.cpp:30: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a == 1) {\n        return false;\n    }\n    if (a == 2 || a ==\
    \ 3 || a == 5) {\n        return true;\n    }\n    if (a % 2 == 0) {\n       \
    \ return is_multiply_prime(a / 2);\n    }\n    if (a % 3 == 0) {\n        return\
    \ is_multiply_prime(a / 3);\n    }\n    if (a % 5 == 0) {\n        return is_multiply_prime(a\
    \ / 5);\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpcv2rv30i: /tmp/tmpcv2rv30i.cpp:29: int main(): Assertion `candidate((5))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i < a; i++) {\n        if (a %\
    \ i == 0) {\n            count++;\n        }\n    }\n    if (count == 2) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmprbzjuu4h: /tmp/tmprbzjuu4h.cpp:24: int main(): Assertion `candidate((30))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i < a; i++) {\n        if (a %\
    \ i == 0) {\n            count++;\n        }\n    }\n    if (count == 3) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpdpzg_lsm: /tmp/tmpdpzg_lsm.cpp:24: int main(): Assertion `candidate((30))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a == 1) return false;\n    if (a == 2) return true;\n    if (a\
    \ % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(a); i += 2) {\n     \
    \   if (a % i == 0) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpadswcyok: /tmp/tmpadswcyok.cpp:20: int main(): Assertion `candidate((5))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a == 1) return false;\n    if (a == 2) return true;\n    if (a\
    \ == 3) return true;\n    if (a == 5) return true;\n    if (a == 7) return true;\n\
    \    if (a == 11) return true;\n    if (a == 13) return true;\n    if (a == 17)\
    \ return true;\n    if (a == 19) return true;\n    if (a == 23) return true;\n\
    \    if (a == 29) return true;\n    if (a == 31) return true;\n    if (a == 37)\
    \ return true;\n    if (a == 41) return true;\n    if (a == 43) return true;\n\
    \    if (a == 47) return true;\n    if (a == 53) return true;\n    if (a == 59)\
    \ return true;\n    if (a == 61) return true;\n    if (a == 67) return true;\n\
    \    if (a == 71) return true;\n    if (a == 73) return true;\n    if (a == 79)\
    \ return true;\n    if (a == 83) return true;\n    if (a == 89) return true;\n\
    \    if (a == 97) return true;\n    if (a == 6) return false;\n    if (a == 10)\
    \ return false;\n    if (a == 14) return false;\n    if (a == 15) return false;\n\
    \    if (a == 21) return false;\n    if (a == 22) return false;\n    if (a ==\
    \ 33) return false;\n    if (a == 34) return false;\n    if (a == 35) return false;\n\
    \    if (a == 38) return false;\n    if (a == 39) return false;\n    if (a ==\
    \ 46) return false;\n    if (a == 51) return false;\n    if (a == 55) return false;\n\
    \    if (a == 57) return false;\n    if (a == 58) return false;\n    if (a ==\
    \ 62) return false;\n    if (a == 65) return false;\n    if (a == 69) return false;\n\
    \    if (a == 74) return false;\n    if (a ==\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj5wwl9d2.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmpj5wwl9d2.cpp:57:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   57 | }\n      | ^\n/tmp/tmpj5wwl9d2.cpp:56:13: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   56 |     if (a ==\n      |    \
    \    ~    ^\n      |             )\n   57 | }\n      | ~            \n/tmp/tmpj5wwl9d2.cpp:57:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   57 | }\n \
    \     | ^\n/tmp/tmpj5wwl9d2.cpp:57:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   57 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint count = 0;\n\tfor (int i = 2; i < a; i++) {\n\t\tif (a % i == 0)\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count == 2) {\n\t\treturn true;\n\t}\n\t\
    else {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmptd2b6rkk: /tmp/tmptd2b6rkk.cpp:26: int main(): Assertion `candidate((30))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int count = 0;\n    for(int i = 2; i\
    \ <= a; i++) {\n        if(a % i == 0) {\n            count++;\n            a\
    \ /= i;\n            i--;\n        }\n    }\n    if(count == 3) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i, j, k;\n\tfor (i = 2; i <= a / 3; i++) {\n\t\tif (a % i == 0)\
    \ {\n\t\t\tfor (j = 2; j <= a / 2; j++) {\n\t\t\t\tif (a % j == 0) {\n\t\t\t\t\
    \tfor (k = 2; k <= a / 2; k++) {\n\t\t\t\t\t\tif (a % k == 0) {\n\t\t\t\t\t\t\t\
    if (i * j * k == a) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\
    \t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main()\
    \ {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpenntp6ov: /tmp/tmpenntp6ov.cpp:36: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i, j, k;\n\tfor (i = 2; i < a; i++) {\n\t\tfor (j = 2; j < a; j++)\
    \ {\n\t\t\tfor (k = 2; k < a; k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\t\
    return true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmph03b0vzf: /tmp/tmph03b0vzf.cpp:30: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int count = 0;\n    for(int i = 2; i\
    \ <= a; i++) {\n        if(a % i == 0) {\n            count++;\n            a\
    \ /= i;\n            i--;\n        }\n    }\n    if(count == 3) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int flag = 0;\n    for (int i = 2; i <= a / 2; ++i) {\n        if\
    \ (a % i == 0) {\n            if (is_prime(i)) {\n                if (is_prime(a\
    \ / i)) {\n                    if (is_prime(a / (a / i))) {\n                \
    \        flag = 1;\n                        break;\n                    }\n  \
    \              }\n            }\n        }\n    }\n    if (flag == 1)\n      \
    \  return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplhjd2tzl.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmplhjd2tzl.cpp:13:17: error: \u2018is_prime\u2019 was not declared in\
    \ this scope\n   13 |             if (is_prime(i)) {\n      |                \
    \ ^~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a == 1) return false;\n    if (a == 2) return true;\n    if (a\
    \ % 2 == 0) return false;\n    for (int i = 3; i <= sqrt(a); i += 2) {\n     \
    \   if (a % i == 0) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpc7yzpqp5: /tmp/tmpc7yzpqp5.cpp:20: int main(): Assertion `candidate((5))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint count = 0;\n\tfor (int i = 2; i <= a; i++) {\n\t\tif (a % i == 0)\
    \ {\n\t\t\tcount++;\n\t\t\ta /= i;\n\t\t\ti--;\n\t\t}\n\t}\n\tif (count == 3)\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tif (a <= 1) {\n\t\treturn false;\n\t}\n\tint count = 0;\n\tfor (int\
    \ i = 2; i <= a; i++) {\n\t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t\twhile (a\
    \ % i == 0) {\n\t\t\t\ta /= i;\n\t\t\t}\n\t\t}\n\t}\n\treturn count == 3;\n}\n\
    int main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpn1unsf98: /tmp/tmpn1unsf98.cpp:28: int main(): Assertion `candidate((8))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint count = 0;\n\tfor (int i = 2; i <= a; i++) {\n\t\tif (a % i == 0)\
    \ {\n\t\t\tcount++;\n\t\t\ta /= i;\n\t\t\ti--;\n\t\t}\n\t}\n\tif (count == 3)\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int count = 0;\n    for(int i = 2; i\
    \ <= a; i++) {\n        if(a % i == 0) {\n            count++;\n            a\
    \ /= i;\n            i--;\n        }\n    }\n    if(count == 3) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i < a; i++) {\n        if (a %\
    \ i == 0) {\n            count++;\n        }\n    }\n    if (count == 2) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp12q2p541: /tmp/tmp12q2p541.cpp:24: int main(): Assertion `candidate((30))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i,j,k;\n    for(i=2;i<=a/3;i++)\n    {\n        for(j=2;j<=a/2;j++)\n\
    \        {\n            for(k=2;k<=a/2;k++)\n            {\n                if(i*j*k==a)\n\
    \                {\n                    return true;\n                }\n    \
    \        }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpfm81i_5_: /tmp/tmpfm81i_5_.cpp:34: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i < a; i++) {\n        if (a %\
    \ i == 0) {\n            count++;\n        }\n    }\n    if (count == 2) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp28xfihsq: /tmp/tmp28xfihsq.cpp:24: int main(): Assertion `candidate((30))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int count = 0;\n    for(int i = 2; i\
    \ <= a; i++) {\n        if(a % i == 0) {\n            count++;\n            while(a\
    \ % i == 0) {\n                a /= i;\n            }\n        }\n    }\n    return\
    \ count == 3;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4th1lgbs: /tmp/tmp4th1lgbs.cpp:26: int main(): Assertion `candidate((8))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i < a; i++) {\n        if (a %\
    \ i == 0) {\n            count++;\n        }\n    }\n    if (count == 3) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpb057ntsj: /tmp/tmpb057ntsj.cpp:24: int main(): Assertion `candidate((30))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint count = 0;\n\tfor (int i = 2; i <= a; i++) {\n\t\tif (a % i == 0)\
    \ {\n\t\t\tcount++;\n\t\t\ta /= i;\n\t\t\ti--;\n\t\t}\n\t}\n\tif (count == 3)\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i < a; i++) {\n        if (a %\
    \ i == 0) {\n            count++;\n        }\n    }\n    if (count == 2) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpakmv2ik0: /tmp/tmpakmv2ik0.cpp:24: int main(): Assertion `candidate((30))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int i,j,k;\n    for(i=2;i<a;i++)\n  \
    \  {\n        for(j=2;j<a;j++)\n        {\n            for(k=2;k<a;k++)\n    \
    \        {\n                if(i*j*k==a)\n                {\n                \
    \    return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqwogfrwx: /tmp/tmpqwogfrwx.cpp:35: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\t// Write your code here\n\tint count = 0;\n\tfor (int i = 2; i <= a;\
    \ i++) {\n\t\tif (a % i == 0) {\n\t\t\tcount++;\n\t\t\ta /= i;\n\t\t\ti--;\n\t\
    \t}\n\t}\n\tif (count == 3)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\
    int main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint count = 0;\n\tfor (int i = 2; i <= a; i++) {\n\t\tif (a % i == 0)\
    \ {\n\t\t\tcount++;\n\t\t\ta /= i;\n\t\t\ti--;\n\t\t}\n\t}\n\treturn count ==\
    \ 3;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int count = 0;\n    for(int i = 2; i\
    \ <= a; i++) {\n        if(a % i == 0) {\n            count++;\n            a\
    \ /= i;\n            i--;\n        }\n    }\n    if(count == 3) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a == 1) return false;\n    if (a == 2) return true;\n    if (a\
    \ == 3) return true;\n    if (a == 5) return true;\n    if (a == 7) return true;\n\
    \    if (a == 11) return true;\n    if (a == 13) return true;\n    if (a == 17)\
    \ return true;\n    if (a == 19) return true;\n    if (a == 23) return true;\n\
    \    if (a == 29) return true;\n    if (a == 31) return true;\n    if (a == 37)\
    \ return true;\n    if (a == 41) return true;\n    if (a == 43) return true;\n\
    \    if (a == 47) return true;\n    if (a == 53) return true;\n    if (a == 59)\
    \ return true;\n    if (a == 61) return true;\n    if (a == 67) return true;\n\
    \    if (a == 71) return true;\n    if (a == 73) return true;\n    if (a == 79)\
    \ return true;\n    if (a == 83) return true;\n    if (a == 89) return true;\n\
    \    if (a == 97) return true;\n    if (a % 2 == 0) return false;\n    if (a %\
    \ 3 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 7 == 0)\
    \ return false;\n    if (a % 11 == 0) return false;\n    if (a % 13 == 0) return\
    \ false;\n    if (a % 17 == 0) return false;\n    if (a % 19 == 0) return false;\n\
    \    if (a % 23 == 0) return false;\n    if (a % 29 == 0) return false;\n    if\
    \ (a % 31 == 0) return false;\n    if (a % 37 == 0) return false;\n    if (a %\
    \ 41 == 0) return false;\n    if (a % 43 == 0) return false;\n    if (a % 47 ==\
    \ 0) return false;\n    if (a % 53 == 0) return false;\n    if (a % 59 == 0) return\
    \ false;\n    if (a\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpkdqj91ft.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmpkdqj91ft.cpp:53:10: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   53 |     if (a\n      |        ~ ^\n      |          )\n   54 | }\n\
    \      | ~         \n/tmp/tmpkdqj91ft.cpp:54:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   54 | }\n      | ^\n/tmp/tmpkdqj91ft.cpp:54:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   54 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i, j, k;\n\tfor (i = 2; i < a; i++) {\n\t\tfor (j = 2; j < a; j++)\
    \ {\n\t\t\tfor (k = 2; k < a; k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\t\
    return true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpcjx13_g7: /tmp/tmpcjx13_g7.cpp:30: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n  int count = 0;\n  for (int i = 2; i <= a; i++) {\n    if (a % i == 0)\
    \ {\n      count++;\n    }\n  }\n  if (count == 3) {\n    return true;\n  }\n\
    \  return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n \
    \   assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpnmnkxhrl: /tmp/tmpnmnkxhrl.cpp:24: int main(): Assertion `candidate((30))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int i,j,k;\n    for(i=2;i<a;i++)\n    {\n        for(j=2;j<a;j++)\n\
    \        {\n            for(k=2;k<a;k++)\n            {\n                if(i*j*k==a)\n\
    \                {\n                    return true;\n                }\n    \
    \        }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpfcpovp7c: /tmp/tmpfcpovp7c.cpp:34: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // write your code here\n    int count = 0;\n    for(int i = 2; i\
    \ <= a; i++) {\n        if(a % i == 0) {\n            count++;\n            a\
    \ /= i;\n            i--;\n        }\n    }\n    if(count == 3) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int count = 0;\n    for(int i = 2; i\
    \ <= a; i++) {\n        if(a % i == 0) {\n            count++;\n            a\
    \ /= i;\n            i--;\n        }\n    }\n    if(count == 3) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a == 1) return false;\n    if (a == 2) return true;\n    if (a\
    \ == 3) return true;\n    if (a == 5) return true;\n    if (a == 7) return true;\n\
    \    if (a == 11) return true;\n    if (a == 13) return true;\n    if (a == 17)\
    \ return true;\n    if (a == 19) return true;\n    if (a == 23) return true;\n\
    \    if (a == 29) return true;\n    if (a == 31) return true;\n    if (a == 37)\
    \ return true;\n    if (a == 41) return true;\n    if (a == 43) return true;\n\
    \    if (a == 47) return true;\n    if (a == 53) return true;\n    if (a == 59)\
    \ return true;\n    if (a == 61) return true;\n    if (a == 67) return true;\n\
    \    if (a == 71) return true;\n    if (a == 73) return true;\n    if (a == 79)\
    \ return true;\n    if (a == 83) return true;\n    if (a == 89) return true;\n\
    \    if (a == 97) return true;\n    if (a % 2 == 0) return false;\n    if (a %\
    \ 3 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 7 == 0)\
    \ return false;\n    if (a % 11 == 0) return false;\n    if (a % 13 == 0) return\
    \ false;\n    if (a % 17 == 0) return false;\n    if (a % 19 == 0) return false;\n\
    \    if (a % 23 == 0) return false;\n    if (a % 29 == 0) return false;\n    if\
    \ (a % 31 == 0) return false;\n    if (a % 37 == 0) return false;\n    if (a %\
    \ 41 == 0) return false;\n    if (a % 43 == 0) return false;\n    if (a % 47 ==\
    \ 0) return false;\n    if (a % 53 == 0) return false;\n    if (a % 59 == 0) return\
    \ false;\n    if (a\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmplq_gx5ku.cpp: In function \u2018bool is_multiply_prime(long int)\u2019\
    :\n/tmp/tmplq_gx5ku.cpp:53:10: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   53 |     if (a\n      |        ~ ^\n      |          )\n   54 | }\n\
    \      | ~         \n/tmp/tmplq_gx5ku.cpp:54:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   54 | }\n      | ^\n/tmp/tmplq_gx5ku.cpp:54:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   54 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i = 2;\n\tint count = 0;\n\twhile (a != 1) {\n\t\tif (a % i == 0)\
    \ {\n\t\t\ta /= i;\n\t\t\tcount++;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\
    \tif (count == 3) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i, j, k;\n\tfor (i = 2; i < a; i++) {\n\t\tfor (j = 2; j < a; j++)\
    \ {\n\t\t\tfor (k = 2; k < a; k++) {\n\t\t\t\tif (i * j * k == a) {\n\t\t\t\t\t\
    return true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n\
    \    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_c28m3cb: /tmp/tmp_c28m3cb.cpp:30: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int count=0;\n    for(int i=2;i<=a;i++){\n\
    \        if(a%i==0){\n            count++;\n            a=a/i;\n            i--;\n\
    \        }\n    }\n    if(count==3){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    if (a == 1) return false;\n    if (a == 2) return true;\n    if (a\
    \ == 3) return true;\n    if (a == 5) return true;\n    if (a == 7) return true;\n\
    \    if (a == 11) return true;\n    if (a == 13) return true;\n    if (a == 17)\
    \ return true;\n    if (a == 19) return true;\n    if (a == 23) return true;\n\
    \    if (a == 29) return true;\n    if (a == 31) return true;\n    if (a == 37)\
    \ return true;\n    if (a == 41) return true;\n    if (a == 43) return true;\n\
    \    if (a == 47) return true;\n    if (a == 53) return true;\n    if (a == 59)\
    \ return true;\n    if (a == 61) return true;\n    if (a == 67) return true;\n\
    \    if (a == 71) return true;\n    if (a == 73) return true;\n    if (a == 79)\
    \ return true;\n    if (a == 83) return true;\n    if (a == 89) return true;\n\
    \    if (a == 97) return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmprfg7fyxz: /tmp/tmprfg7fyxz.cpp:40: int main(): Assertion `candidate((5))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int cnt = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a %\
    \ i == 0) {\n            int cnt2 = 0;\n            for (int j = 2; j <= i; j++)\
    \ {\n                if (i % j == 0) {\n                    cnt2++;\n        \
    \        }\n            }\n            if (cnt2 == 1) {\n                cnt++;\n\
    \            }\n        }\n    }\n    if (cnt == 3) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpc0e8ol3q: /tmp/tmpc0e8ol3q.cpp:33: int main(): Assertion `candidate((8))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint count = 0;\n\tfor (int i = 2; i < a; i++) {\n\t\tif (a % i == 0)\
    \ {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count == 2) {\n\t\treturn true;\n\t}\n\t\
    else {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpzszk31nm: /tmp/tmpzszk31nm.cpp:26: int main(): Assertion `candidate((30))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int i,j,k;\n    for(i=2;i<=a/3;i++)\n\
    \    {\n        for(j=2;j<=a/2;j++)\n        {\n            for(k=2;k<=a/2;k++)\n\
    \            {\n                if(i*j*k==a)\n                {\n            \
    \        return true;\n                }\n            }\n        }\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n \
    \   assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpmasod48o: /tmp/tmpmasod48o.cpp:35: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n\tint i, j, k;\n\tfor (i = 2; i <= a; i++) {\n\t\tif (a % i == 0) {\n\t\
    \t\tfor (j = 2; j <= a; j++) {\n\t\t\t\tif (a % j == 0) {\n\t\t\t\t\tfor (k =\
    \ 2; k <= a; k++) {\n\t\t\t\t\t\tif (a % k == 0) {\n\t\t\t\t\t\t\tif (i * j *\
    \ k == a) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\
    \t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n  \
    \  auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n\
    \    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n\
    \    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n\
    \    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n\
    \    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n\
    \    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp8j7aeof6: /tmp/tmp8j7aeof6.cpp:36: int main(): Assertion `candidate((126))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            while (a % i == 0) {\n      \
    \          a /= i;\n            }\n        }\n    }\n    return count == 3;\n\
    }\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5))\
    \ == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8))\
    \ == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125))\
    \ == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126))\
    \ == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891))\
    \ == (false));\n    assert(candidate((1001)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpo8pycth0: /tmp/tmpo8pycth0.cpp:25: int main(): Assertion `candidate((8))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    // Write your code here\n    int count = 0;\n    for(int i = 2; i\
    \ <= a; i++) {\n        if(a % i == 0) {\n            count++;\n            a\
    \ /= i;\n            i--;\n        }\n    }\n    if(count == 3) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_multiply_prime;\n\
    \    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n\
    \    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n\
    \    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n\
    \    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n\
    \    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    // and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n\
    // is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long\
    \ a) {\n    int count = 0;\n    for (int i = 2; i <= a; i++) {\n        if (a\
    \ % i == 0) {\n            count++;\n            a /= i;\n            i--;\n \
    \       }\n    }\n    return count == 3;\n}\nint main() {\n    auto candidate\
    \ = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30))\
    \ == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10))\
    \ == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105))\
    \ == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729))\
    \ == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
