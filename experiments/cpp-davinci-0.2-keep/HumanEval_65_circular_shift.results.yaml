name: HumanEval_65_circular_shift
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::string res = s.substr(shift) + s.substr(0, shift);\n\
    \    return res;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpgpumizvn: /tmp/tmpgpumizvn.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpagnibqne: /tmp/tmpagnibqne.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpfh7jo_7g: /tmp/tmpfh7jo_7g.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string a = s.substr(0, shift);\n    std::string b = s.substr(shift,\
    \ s.size() - shift);\n    return b + a;\n}\nint main() {\n    auto candidate =\
    \ circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmphkwjst0o: /tmp/tmphkwjst0o.cpp:22: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    // YOUR CODE HERE\n    std::string\
    \ str = std::to_string(x);\n    std::string result = \"\";\n    if (shift > str.length())\
    \ {\n        for (int i = str.length() - 1; i >= 0; i--) {\n            result\
    \ += str[i];\n        }\n        return result;\n    }\n    for (int i = shift;\
    \ i < str.length(); i++) {\n        result += str[i];\n    }\n    for (int i =\
    \ 0; i < shift; i++) {\n        result += str[i];\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp4crnzfru: /tmp/tmp4crnzfru.cpp:30: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp4jwjlg4c: /tmp/tmp4jwjlg4c.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp34zyrwe4: /tmp/tmp34zyrwe4.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpxvd9i3z3: /tmp/tmpxvd9i3z3.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp4bvolvhv: /tmp/tmp4bvolvhv.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp63h1dz44: /tmp/tmp63h1dz44.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpzswy8z_b: /tmp/tmpzswy8z_b.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpbv_o6al7: /tmp/tmpbv_o6al7.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpg27qq870: /tmp/tmpg27qq870.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    return s.substr(0, shift) + s.substr(shift);\n}\nint main() {\n\
    \    auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"\
    001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpyieyrua9: /tmp/tmpyieyrua9.cpp:21: int main(): Assertion `candidate((12),\
    \ (2)) == (\"12\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::string result = \"\";\n    if (shift > s.length()) {\n        for (int\
    \ i = s.length() - 1; i >= 0; i--) {\n            result += s[i];\n        }\n\
    \    } else {\n        for (int i = s.length() - shift; i < s.length(); i++) {\n\
    \            result += s[i];\n        }\n        for (int i = 0; i < s.length()\
    \ - shift; i++) {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpd16mkni9: /tmp/tmpd16mkni9.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpyau4br05: /tmp/tmpyau4br05.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpsjzyov7k: /tmp/tmpsjzyov7k.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpjxhcqcyg: /tmp/tmpjxhcqcyg.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    if (shift > str.length()) {\n        std::reverse(str.begin(), str.end());\n\
    \        return str;\n    }\n    std::rotate(str.begin(), str.begin() + shift,\
    \ str.end());\n    return str;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmprdyfmk08: /tmp/tmprdyfmk08.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::string t = s;\n    if (shift > s.size()) {\n        std::reverse(t.begin(),\
    \ t.end());\n        return t;\n    }\n    std::rotate(t.begin(), t.begin() +\
    \ shift, t.end());\n    return t;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpify39ipx: /tmp/tmpify39ipx.cpp:22: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpgokv4ows: /tmp/tmpgokv4ows.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpjs0g8gkp: /tmp/tmpjs0g8gkp.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpqvakw689: /tmp/tmpqvakw689.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n\
    \  std::reverse(s.begin(), s.end());\n  if (shift > s.size()) {\n    return s;\n\
    \  }\n  std::string s1 = s.substr(0, shift);\n  std::string s2 = s.substr(shift);\n\
    \  std::reverse(s1.begin(), s1.end());\n  std::reverse(s2.begin(), s2.end());\n\
    \  return s2 + s1;\n}\nint main() {\n    auto candidate = circular_shift;\n  \
    \  assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpp6rg3i8s: /tmp/tmpp6rg3i8s.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::string s2 = s;\n    if (shift > s.length()) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for (int i = 0; i < s.length(); i++)\
    \ {\n        s2[i] = s[(i + shift) % s.length()];\n    }\n    return s2;\n}\n\
    int main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpxffhrwjf: /tmp/tmpxffhrwjf.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpcsd4mnfz: /tmp/tmpcsd4mnfz.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpu5temrr1: /tmp/tmpu5temrr1.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp1d28y11_: /tmp/tmp1d28y11_.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    if (shift > str.length()) {\n        std::reverse(str.begin(), str.end());\n\
    \        return str;\n    }\n    std::rotate(str.begin(), str.begin() + shift,\
    \ str.end());\n    return str;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpz1yoriyh: /tmp/tmpz1yoriyh.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    std::string res = \"\";\n    if (shift > str.length()) {\n        for (int\
    \ i = str.length() - 1; i >= 0; i--) {\n            res += str[i];\n        }\n\
    \        return res;\n    }\n    for (int i = shift; i < str.length(); i++) {\n\
    \        res += str[i];\n    }\n    for (int i = 0; i < shift; i++) {\n      \
    \  res += str[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpup95kj9s: /tmp/tmpup95kj9s.cpp:29: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string a = s.substr(0, shift);\n    std::string b = s.substr(shift,\
    \ s.size() - shift);\n    return b + a;\n}\nint main() {\n    auto candidate =\
    \ circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp5xboxb3y: /tmp/tmp5xboxb3y.cpp:22: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpxlh96y3x: /tmp/tmpxlh96y3x.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::stringstream ss;\n\
    \    ss << x;\n    std::string s = ss.str();\n    if (shift > s.size()) {\n  \
    \      std::reverse(s.begin(), s.end());\n        return s;\n    }\n    std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n    return s;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp1up8bx4v: /tmp/tmp1up8bx4v.cpp:23: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    while (shift > s.size()) shift -=\
    \ s.size();\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n    return\
    \ s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpw8r4mb83: /tmp/tmpw8r4mb83.cpp:19: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string s1 = s.substr(0, shift);\n    std::string s2 = s.substr(shift);\n\
    \    std::reverse(s1.begin(), s1.end());\n    std::reverse(s2.begin(), s2.end());\n\
    \    return s2 + s1;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp6he27k_l: /tmp/tmp6he27k_l.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string res = s.substr(0, shift);\n    std::reverse(res.begin(),\
    \ res.end());\n    res += s.substr(shift);\n    return res;\n}\nint main() {\n\
    \    auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"\
    001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpl1hdbf1d: /tmp/tmpl1hdbf1d.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::string t = s;\n    if (shift > s.size()) {\n        std::reverse(t.begin(),\
    \ t.end());\n        return t;\n    }\n    std::rotate(t.begin(), t.begin() +\
    \ shift, t.end());\n    return t;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp0w_mnu43: /tmp/tmp0w_mnu43.cpp:22: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpdvvgl1xw: /tmp/tmpdvvgl1xw.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpersbpxnw: /tmp/tmpersbpxnw.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpsqr2l80f: /tmp/tmpsqr2l80f.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp82xp8y7n: /tmp/tmp82xp8y7n.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp1s49kdey: /tmp/tmp1s49kdey.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpirx3ct7e: /tmp/tmpirx3ct7e.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmplc4mfwx1: /tmp/tmplc4mfwx1.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpi35s4u69: /tmp/tmpi35s4u69.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpyd69s9bu: /tmp/tmpyd69s9bu.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpjshm88t8: /tmp/tmpjshm88t8.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    std::reverse(str.begin(), str.end());\n    if (shift > str.size()) {\n  \
    \      return str;\n    }\n    std::string str1 = str.substr(0, shift);\n    std::string\
    \ str2 = str.substr(shift, str.size() - shift);\n    std::reverse(str1.begin(),\
    \ str1.end());\n    std::reverse(str2.begin(), str2.end());\n    return str1 +\
    \ str2;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp7jsjbkax: /tmp/tmp7jsjbkax.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpy3clkq0h: /tmp/tmpy3clkq0h.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpn_17ug7a: /tmp/tmpn_17ug7a.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp6bo41fcz: /tmp/tmp6bo41fcz.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp_cx4dbsn: /tmp/tmp_cx4dbsn.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp6ekjvhjj: /tmp/tmp6ekjvhjj.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    if (shift > str.length()) {\n        std::reverse(str.begin(), str.end());\n\
    \        return str;\n    }\n    std::rotate(str.begin(), str.begin() + shift,\
    \ str.end());\n    return str;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp9dtt_keb: /tmp/tmp9dtt_keb.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift >= s.size()) {\n       \
    \ return s;\n    }\n    std::string result = s.substr(0, shift);\n    std::reverse(result.begin(),\
    \ result.end());\n    result += s.substr(shift);\n    return result;\n}\nint main()\
    \ {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) ==\
    \ (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpwsv6v384: /tmp/tmpwsv6v384.cpp:24: int main(): Assertion `candidate((12),\
    \ (2)) == (\"12\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n\
    \  if (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp6g079ajx: /tmp/tmp6g079ajx.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmptz15ieu4: /tmp/tmptz15ieu4.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpnhra0hs_: /tmp/tmpnhra0hs_.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    if (shift > str.length()) {\n        std::reverse(str.begin(), str.end());\n\
    \        return str;\n    }\n    std::rotate(str.begin(), str.begin() + shift,\
    \ str.end());\n    return str;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpq77x4ckr: /tmp/tmpq77x4ckr.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::string res = \"\";\n    if (shift > s.length()) {\n        for (int\
    \ i = s.length() - 1; i >= 0; i--) {\n            res += s[i];\n        }\n  \
    \      return res;\n    }\n    for (int i = shift; i < s.length(); i++) {\n  \
    \      res += s[i];\n    }\n    for (int i = 0; i < shift; i++) {\n        res\
    \ += s[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpaz8he8e7: /tmp/tmpaz8he8e7.cpp:29: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp_yqtz0qa: /tmp/tmp_yqtz0qa.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string s1 = s.substr(0, shift);\n    std::string s2 = s.substr(shift);\n\
    \    std::reverse(s1.begin(), s1.end());\n    std::reverse(s2.begin(), s2.end());\n\
    \    return s2 + s1;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmplwast8oj: /tmp/tmplwast8oj.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string a = s.substr(0, shift);\n    std::string b = s.substr(shift,\
    \ s.size() - shift);\n    std::reverse(a.begin(), a.end());\n    std::reverse(b.begin(),\
    \ b.end());\n    return b + a;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpz2kir8x7: /tmp/tmpz2kir8x7.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpm8w0k_ct: /tmp/tmpm8w0k_ct.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        return std::string(s.rbegin(), s.rend());\n\
    \    }\n    return s.substr(shift) + s.substr(0, shift);\n}\nint main() {\n  \
    \  auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"\
    ));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp4zlotcq9: /tmp/tmp4zlotcq9.cpp:19: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp04uqvpz7: /tmp/tmp04uqvpz7.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpanfu3azy: /tmp/tmpanfu3azy.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp3rvd09fm: /tmp/tmp3rvd09fm.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::string s2 = s;\n    int len = s.length();\n    if (shift > len) {\n\
    \        std::reverse(s.begin(), s.end());\n        return s;\n    }\n    for\
    \ (int i = 0; i < len; i++) {\n        s2[i] = s[(i + shift) % len];\n    }\n\
    \    return s2;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpxyue4dbz: /tmp/tmpxyue4dbz.cpp:25: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp1r1v2udc: /tmp/tmp1r1v2udc.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    std::rotate(s.begin(), s.begin() +\
    \ shift, s.end());\n    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpuf2yet38: /tmp/tmpuf2yet38.cpp:18: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n\
    \  if (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpvpihrpdd: /tmp/tmpvpihrpdd.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmprgg10kes: /tmp/tmprgg10kes.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpkx67bxww: /tmp/tmpkx67bxww.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpx49l05e6: /tmp/tmpx49l05e6.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmphddcggiq: /tmp/tmphddcggiq.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpjhp53hvb: /tmp/tmpjhp53hvb.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp9qnhobfg: /tmp/tmp9qnhobfg.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp089cv_ys: /tmp/tmp089cv_ys.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::string result;\n    if (shift > s.size()) {\n        for (int i = s.size()\
    \ - 1; i >= 0; i--) {\n            result += s[i];\n        }\n    } else {\n\
    \        for (int i = shift; i < s.size(); i++) {\n            result += s[i];\n\
    \        }\n        for (int i = 0; i < shift; i++) {\n            result += s[i];\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpmve1yud_: /tmp/tmpmve1yud_.cpp:29: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpiuueqdea: /tmp/tmpiuueqdea.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpetedz202: /tmp/tmpetedz202.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    if (shift > str.length()) {\n        std::reverse(str.begin(), str.end());\n\
    \        return str;\n    }\n    std::rotate(str.begin(), str.begin() + shift,\
    \ str.end());\n    return str;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpd1wiekes: /tmp/tmpd1wiekes.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpqrfvv8g1: /tmp/tmpqrfvv8g1.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    if (shift > str.length()) {\n        std::reverse(str.begin(), str.end());\n\
    \        return str;\n    }\n    std::rotate(str.begin(), str.begin() + shift,\
    \ str.end());\n    return str;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpb6quxdj8: /tmp/tmpb6quxdj8.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + s.size() - shift,\
    \ s.end());\n    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpc2xlrwrq: /tmp/tmpc2xlrwrq.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpn_a9hkk6: /tmp/tmpn_a9hkk6.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::string result;\n    if (shift > s.size()) {\n        result = std::string(s.rbegin(),\
    \ s.rend());\n    } else {\n        result = s.substr(shift) + s.substr(0, shift);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmplsunwyb1: /tmp/tmplsunwyb1.cpp:22: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp95mm1666: /tmp/tmp95mm1666.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpe8glr0we: /tmp/tmpe8glr0we.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp_cez9obv: /tmp/tmp_cez9obv.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpww1p2gu4: /tmp/tmpww1p2gu4.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string digits = std::to_string(x);\n\
    \    if (shift > digits.size()) {\n        std::reverse(digits.begin(), digits.end());\n\
    \        return digits;\n    }\n    std::rotate(digits.begin(), digits.begin()\
    \ + shift, digits.end());\n    return digits;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpmj4c54x2: /tmp/tmpmj4c54x2.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpto3b5cfo: /tmp/tmpto3b5cfo.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp381t9tpy: /tmp/tmp381t9tpy.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpbd9rj8zf: /tmp/tmpbd9rj8zf.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp2oi4cozf: /tmp/tmp2oi4cozf.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpk36ublf6: /tmp/tmpk36ublf6.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpdqetakhb: /tmp/tmpdqetakhb.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp43m0irwa: /tmp/tmp43m0irwa.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp_31g1gh4: /tmp/tmp_31g1gh4.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpxlnvric8: /tmp/tmpxlnvric8.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp16_h6qnj: /tmp/tmp16_h6qnj.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpvhgpz5la: /tmp/tmpvhgpz5la.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string s1 = s.substr(0, shift);\n    std::string s2 = s.substr(shift);\n\
    \    std::reverse(s1.begin(), s1.end());\n    std::reverse(s2.begin(), s2.end());\n\
    \    return s2 + s1;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp4xw60wrq: /tmp/tmp4xw60wrq.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpg9soxzbq: /tmp/tmpg9soxzbq.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpyhmzr5k8: /tmp/tmpyhmzr5k8.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpquitk0dr: /tmp/tmpquitk0dr.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::stringstream ss;\n\
    \    ss << x;\n    std::string s = ss.str();\n    if (shift > s.size()) {\n  \
    \      std::reverse(s.begin(), s.end());\n        return s;\n    }\n    std::string\
    \ s1 = s.substr(shift);\n    std::string s2 = s.substr(0, shift);\n    return\
    \ s1 + s2;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp6vjfffe6: /tmp/tmp6vjfffe6.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp4z9luxs9: /tmp/tmp4z9luxs9.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpaombpsi9: /tmp/tmpaombpsi9.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp9xugvftz: /tmp/tmp9xugvftz.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp1upa9_x0: /tmp/tmp1upa9_x0.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp0x0rsa2c: /tmp/tmp0x0rsa2c.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp5md4oj33: /tmp/tmp5md4oj33.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpkmv2yobn: /tmp/tmpkmv2yobn.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmph6vwi_sj: /tmp/tmph6vwi_sj.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpdw8ofjzd: /tmp/tmpdw8ofjzd.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string result = s.substr(0, shift);\n    std::reverse(result.begin(),\
    \ result.end());\n    result += s.substr(shift);\n    return result;\n}\nint main()\
    \ {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) ==\
    \ (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpageoas_m: /tmp/tmpageoas_m.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string result = s.substr(0, shift);\n    std::reverse(result.begin(),\
    \ result.end());\n    result += s.substr(shift);\n    return result;\n}\nint main()\
    \ {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) ==\
    \ (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift >= s.size()) {\n        std::reverse(s.begin(), s.end());\n   \
    \     return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpe_wi_kv_: /tmp/tmpe_wi_kv_.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n\
    \  if (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpou5aal86: /tmp/tmpou5aal86.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpridlwvxh: /tmp/tmpridlwvxh.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp8r4_c1mi: /tmp/tmp8r4_c1mi.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpmfllmdm7: /tmp/tmpmfllmdm7.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpdqq3ve95: /tmp/tmpdqq3ve95.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp48259i7b: /tmp/tmp48259i7b.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n\
    \  if (shift >= s.size()) {\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpij0o1mja: /tmp/tmpij0o1mja.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmphu1gilrb: /tmp/tmphu1gilrb.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpd5h3bxzt: /tmp/tmpd5h3bxzt.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp2msleat2: /tmp/tmp2msleat2.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpsmtdz57h: /tmp/tmpsmtdz57h.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp30hpfotm: /tmp/tmp30hpfotm.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpxo7razsm: /tmp/tmpxo7razsm.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp0iun3frq: /tmp/tmp0iun3frq.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string s1 = s.substr(0, shift);\n    std::string s2 = s.substr(shift);\n\
    \    std::reverse(s1.begin(), s1.end());\n    std::reverse(s2.begin(), s2.end());\n\
    \    return s2 + s1;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp1_f03gnq: /tmp/tmp1_f03gnq.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpsrolh9pm: /tmp/tmpsrolh9pm.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    if (shift > str.length()) {\n        std::reverse(str.begin(), str.end());\n\
    \        return str;\n    }\n    std::rotate(str.begin(), str.begin() + shift,\
    \ str.end());\n    return str;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpy1q3x2si: /tmp/tmpy1q3x2si.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    // TODO: Implement this\
    \ function.\n    std::string s = std::to_string(x);\n    if (shift > s.length())\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ std::string s1 = s.substr(0, shift);\n    std::string s2 = s.substr(shift, s.length()\
    \ - shift);\n    return s2 + s1;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpcggaylaj: /tmp/tmpcggaylaj.cpp:23: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpivm5hw9n: /tmp/tmpivm5hw9n.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpth6w9mwd: /tmp/tmpth6w9mwd.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpnsi4sd4y: /tmp/tmpnsi4sd4y.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmplccnuq_z: /tmp/tmplccnuq_z.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string a = s.substr(0, shift);\n    std::string b = s.substr(shift,\
    \ s.size() - shift);\n    return b + a;\n}\nint main() {\n    auto candidate =\
    \ circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp_1jjaoq9: /tmp/tmp_1jjaoq9.cpp:22: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp495k8l9h: /tmp/tmp495k8l9h.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string result;\n  \
    \  std::stringstream ss;\n    ss << x;\n    std::string s = ss.str();\n    if\
    \ (shift > s.length()) {\n        for (int i = s.length() - 1; i >= 0; i--) {\n\
    \            result += s[i];\n        }\n    } else {\n        for (int i = shift;\
    \ i < s.length(); i++) {\n            result += s[i];\n        }\n        for\
    \ (int i = 0; i < shift; i++) {\n            result += s[i];\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = circular_shift;\n \
    \   assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpcvza4rhw: /tmp/tmpcvza4rhw.cpp:31: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmppvpe5p_l: /tmp/tmppvpe5p_l.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpspqqy4h_: /tmp/tmpspqqy4h_.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n\
    \  if (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpvqxi0821: /tmp/tmpvqxi0821.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpxv0d5xg0: /tmp/tmpxv0d5xg0.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpow1hv2u8: /tmp/tmpow1hv2u8.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmppgn4ypbn: /tmp/tmppgn4ypbn.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp8tword5i: /tmp/tmp8tword5i.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\tstd::stringstream ss;\n\t\
    ss << x;\n\tstd::string s = ss.str();\n\tstd::reverse(s.begin(), s.end());\n\t\
    std::stringstream ss2;\n\tss2 << x;\n\tstd::string s2 = ss2.str();\n\tif (shift\
    \ > s.size()) {\n\t\treturn s2;\n\t}\n\tstd::string s3 = s.substr(0, shift);\n\
    \tstd::string s4 = s.substr(shift, s.size() - shift);\n\tstd::string s5 = s4 +\
    \ s3;\n\tstd::reverse(s5.begin(), s5.end());\n\treturn s5;\n}\nint main() {\n\
    \    auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"\
    001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpy39klfd6: /tmp/tmpy39klfd6.cpp:31: int main(): Assertion `candidate((97),\
    \ (8)) == (\"79\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpoe7vhfko: /tmp/tmpoe7vhfko.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpgi26kmsn: /tmp/tmpgi26kmsn.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpg54ijafh: /tmp/tmpg54ijafh.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\tstd::string s = std::to_string(x);\n\
    \tstd::reverse(s.begin(), s.end());\n\tif (shift > s.size()) {\n\t\treturn s;\n\
    \t}\n\tstd::string s1 = s.substr(0, shift);\n\tstd::string s2 = s.substr(shift,\
    \ s.size() - shift);\n\tstd::reverse(s1.begin(), s1.end());\n\tstd::reverse(s2.begin(),\
    \ s2.end());\n\treturn s2 + s1;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpxim5408g: /tmp/tmpxim5408g.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpzelbkv2k: /tmp/tmpzelbkv2k.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp_trxpg3x: /tmp/tmp_trxpg3x.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n\
    \  if (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp8xe9gmdy: /tmp/tmp8xe9gmdy.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::string result = \"\";\n    if (shift > s.length()) {\n        for (int\
    \ i = s.length() - 1; i >= 0; i--) {\n            result += s[i];\n        }\n\
    \    } else {\n        for (int i = shift; i < s.length(); i++) {\n          \
    \  result += s[i];\n        }\n        for (int i = 0; i < shift; i++) {\n   \
    \         result += s[i];\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) ==\
    \ (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpro1sq33k: /tmp/tmpro1sq33k.cpp:29: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpo2wy6plw: /tmp/tmpo2wy6plw.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpqk7fl0we: /tmp/tmpqk7fl0we.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n\
    \  if (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpg5aj6adx: /tmp/tmpg5aj6adx.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string s1 = s.substr(0, shift);\n    std::string s2 = s.substr(shift);\n\
    \    std::reverse(s1.begin(), s1.end());\n    std::reverse(s2.begin(), s2.end());\n\
    \    return s2 + s1;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpdglqenzr: /tmp/tmpdglqenzr.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpd8c73325: /tmp/tmpd8c73325.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpmd2f3myv: /tmp/tmpmd2f3myv.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    if (shift > str.length()) {\n        std::reverse(str.begin(), str.end());\n\
    \        return str;\n    }\n    std::rotate(str.begin(), str.begin() + shift,\
    \ str.end());\n    return str;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp550p0yq3: /tmp/tmp550p0yq3.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    if (shift > str.length()) {\n        std::reverse(str.begin(), str.end());\n\
    \        return str;\n    }\n    std::string str1 = str.substr(0, shift);\n  \
    \  std::string str2 = str.substr(shift, str.length() - shift);\n    return str2\
    \ + str1;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp4l1q9iw6: /tmp/tmp4l1q9iw6.cpp:22: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpu3f2nkrz: /tmp/tmpu3f2nkrz.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string s1 = s.substr(0, shift);\n    std::string s2 = s.substr(shift);\n\
    \    std::reverse(s1.begin(), s1.end());\n    std::reverse(s2.begin(), s2.end());\n\
    \    return s2 + s1;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpbhi55tng: /tmp/tmpbhi55tng.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n\
    \  if (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpr5ctn3up: /tmp/tmpr5ctn3up.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpeqzgya7b: /tmp/tmpeqzgya7b.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string s1 = s.substr(0, shift);\n    std::string s2 = s.substr(shift);\n\
    \    std::reverse(s1.begin(), s1.end());\n    std::reverse(s2.begin(), s2.end());\n\
    \    return s2 + s1;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp2c5xo82o: /tmp/tmp2c5xo82o.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp5zefsbni: /tmp/tmp5zefsbni.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    if (shift > str.length()) {\n        std::reverse(str.begin(), str.end());\n\
    \        return str;\n    }\n    std::rotate(str.begin(), str.begin() + shift,\
    \ str.end());\n    return str;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmprk5xomz5: /tmp/tmprk5xomz5.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n\
    \  if (shift > s.size()) {\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpxcoryx4j: /tmp/tmpxcoryx4j.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp7j4cjk32: /tmp/tmp7j4cjk32.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp66wxqip8: /tmp/tmp66wxqip8.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    if (shift > str.length()) {\n        std::reverse(str.begin(), str.end());\n\
    \        return str;\n    }\n    std::rotate(str.begin(), str.begin() + shift,\
    \ str.end());\n    return str;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp5ovbcnb3: /tmp/tmp5ovbcnb3.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpvnt_1oyh: /tmp/tmpvnt_1oyh.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmplqbeuo45: /tmp/tmplqbeuo45.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpbyct2h9e: /tmp/tmpbyct2h9e.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift >= s.size()) {\n        std::reverse(s.begin(), s.end());\n   \
    \     return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpn7h07azt: /tmp/tmpn7h07azt.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::string res = \"\";\n    if (shift > s.length()) {\n        for (int\
    \ i = s.length() - 1; i >= 0; i--) {\n            res += s[i];\n        }\n  \
    \      return res;\n    }\n    for (int i = shift; i < s.length(); i++) {\n  \
    \      res += s[i];\n    }\n    for (int i = 0; i < shift; i++) {\n        res\
    \ += s[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpyk5ruj3j: /tmp/tmpyk5ruj3j.cpp:29: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpyjw7mq1h: /tmp/tmpyjw7mq1h.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpzo9of4re: /tmp/tmpzo9of4re.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp8de4jqcq: /tmp/tmp8de4jqcq.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpc4aevdhj: /tmp/tmpc4aevdhj.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp1qyjycd0: /tmp/tmp1qyjycd0.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmptwf104az: /tmp/tmptwf104az.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    if (shift > s.size()) {\n        return\
    \ s;\n    }\n    std::string res = s.substr(0, shift);\n    std::reverse(res.begin(),\
    \ res.end());\n    res += s.substr(shift);\n    return res;\n}\nint main() {\n\
    \    auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"\
    001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    assert(shift >= 0);\n  \
    \  std::string s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n\
    \    if (shift >= s.size()) {\n        return s;\n    }\n    std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n    return s;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmplwc3utru: /tmp/tmplwc3utru.cpp:22: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        std::reverse(s.begin(), s.end());\n    \
    \    return s;\n    }\n    std::string s1 = s.substr(0, shift);\n    std::string\
    \ s2 = s.substr(shift, s.size() - shift);\n    return s2 + s1;\n}\nint main()\
    \ {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) ==\
    \ (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpnqetsyb6: /tmp/tmpnqetsyb6.cpp:22: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
