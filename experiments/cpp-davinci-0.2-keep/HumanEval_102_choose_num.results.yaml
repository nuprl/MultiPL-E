language: cpp
name: HumanEval_102_choose_num
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Your code here\n \
    \   if(x%2==0)\n    {\n        return x;\n    }\n    else\n    {\n        x=x+1;\n\
    \        return x;\n    }\n    \n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpz61qow_x: /tmp/tmpz61qow_x.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    else if (x + 1 == y) {\n        return -1;\n    }\n  \
    \  else {\n        return x + 1;\n    }\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfdvmrhmn: /tmp/tmpfdvmrhmn.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    else if (x + 1 <= y) {\n        return x + 1;\n    }\n\
    \    else {\n        return -1;\n    }\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpbyucerjh: /tmp/tmpbyucerjh.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Your code here\n    if(x%2==0)\n\
    \    {\n        return x;\n    }\n    else if(x%2!=0 && x+1<=y)\n    {\n     \
    \   return x+1;\n    }\n    else\n    {\n        return -1;\n    }\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp11jjla2f: /tmp/tmp11jjla2f.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: your code here\n \
    \   if(x%2==0)\n    {\n        return x;\n    }\n    else\n    {\n        if(x+1<=y)\n\
    \        {\n            return x+1;\n        }\n        else\n        {\n    \
    \        return -1;\n        }\n        \n    }\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpwxdxugbc: /tmp/tmpwxdxugbc.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x%2==0)\n        return\
    \ x;\n    else if(x+1==y)\n        return -1;\n    else\n        return x+2;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp8ob_ivvr: /tmp/tmp8ob_ivvr.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\t// TODO: Implement this function.\n\
    \t// You should remove the following line when you're done.\n\tif(x%2==0)\n\t\t\
    return x;\n\telse if(x+1<=y)\n\t\treturn x+1;\n\telse\n\t\treturn -1;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp6ilbmseg: /tmp/tmp6ilbmseg.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: your code here\n \
    \   long max = -1;\n    for(long i = x; i <= y; i++){\n        if(i % 2 == 0){\n\
    \            if(i > max){\n                max = i;\n            }\n        }\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long result = -1;\n    for\
    \ (long i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            result =\
    \ i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Implement this function.\n\
    \    if(x%2==0)\n    {\n        return x;\n    }\n    else if(x%2!=0 && y%2==0)\n\
    \    {\n        return y;\n    }\n    else\n    {\n        return -1;\n    }\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpk9uxhsjy: /tmp/tmpk9uxhsjy.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    else if (x + 1 == y) {\n        return -1;\n    }\n  \
    \  else {\n        return x + 1;\n    }\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfdvmrhmn: /tmp/tmpfdvmrhmn.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long result = -1;\n    for\
    \ (long i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            result =\
    \ i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    if (x + 1 == y) {\n        return -1;\n    }\n    return\
    \ choose_num(x + 1, y);\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp72d1vpt7: /tmp/tmp72d1vpt7.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Implement this function\n\
    \    long max = -1;\n    for(long i = x; i <= y; i++){\n        if(i % 2 == 0){\n\
    \            if(i > max){\n                max = i;\n            }\n        }\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: your code here\n \
    \   if(x%2==0)\n    {\n        return x;\n    }\n    else\n    {\n        x++;\n\
    \        return x;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp7r_7k3_4: /tmp/tmp7r_7k3_4.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x%2==0)\n        return\
    \ x;\n    else if(x+1<=y)\n        return x+1;\n    else\n        return -1;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfhr4_vdu: /tmp/tmpfhr4_vdu.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // TODO: Implement this function.\n\
    \  if(x%2==0)\n    return x;\n  else if(x+1<=y)\n    return x+1;\n  else\n   \
    \ return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp8w3d3sof: /tmp/tmp8w3d3sof.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x%2==0) {\n        return\
    \ x;\n    }\n    else if (x%2==1 && y%2==0) {\n        return y;\n    }\n    else\
    \ if (x%2==1 && y%2==1) {\n        return -1;\n    }\n    else {\n        return\
    \ -1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpujkxl_gj: /tmp/tmpujkxl_gj.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   // To print results to the standard output you can use the printf()\n    //\
    \ function. For example:\n    // printf(\"%s\", \"Hello world!\");\n    long num\
    \ = x;\n    if (num % 2 != 0) {\n        num++;\n    }\n    if (num > y) {\n \
    \       return -1;\n    }\n    return num;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmps1v9gllu: /tmp/tmps1v9gllu.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    if (x + 1 == y) {\n        return -1;\n    }\n    return\
    \ choose_num(x + 1, y);\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp72d1vpt7: /tmp/tmp72d1vpt7.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: implement this function\n\
    \    if(x%2==0)\n        return x;\n    else if(x+1<=y)\n        return x+1;\n\
    \    else\n        return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpxz2xxti0: /tmp/tmpxz2xxti0.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Implement this function.\n\
    \    if(x%2==0)\n    {\n        return x;\n    }\n    else\n    {\n        return\
    \ x+1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpm4cu65xi: /tmp/tmpm4cu65xi.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    } else if (x + 1 <= y) {\n        return x + 1;\n    } else {\n\
    \        return -1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpnk3a1rl5: /tmp/tmpnk3a1rl5.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\t// TODO: Implement this function\n\
    \tif(x%2==0)\n\t{\n\t\treturn x;\n\t}\n\telse\n\t{\n\t\tif(x+1<=y)\n\t\t{\n\t\t\
    \treturn x+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t}\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfljv3yw7: /tmp/tmpfljv3yw7.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x > 0 && y > 0);\n \
    \   if (x > y) {\n        return -1;\n    }\n    if (x % 2 == 0) {\n        return\
    \ x;\n    }\n    return choose_num(x + 1, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp13lynph0: /tmp/tmp13lynph0.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    if (x + 1 == y) {\n        return -1;\n    }\n    return\
    \ choose_num(x + 1, y);\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp72d1vpt7: /tmp/tmp72d1vpt7.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    } else if (x + 1 <= y) {\n        return x + 1;\n    } else {\n\
    \        return -1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpnk3a1rl5: /tmp/tmpnk3a1rl5.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    else if (x + 1 == y) {\n        return -1;\n    }\n  \
    \  else {\n        return x + 1;\n    }\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfdvmrhmn: /tmp/tmpfdvmrhmn.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x%2==0)\n        return\
    \ x;\n    else if(x+1<=y)\n        return x+1;\n    else\n        return -1;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfhr4_vdu: /tmp/tmpfhr4_vdu.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x % 2 == 0) {\n\t\treturn\
    \ x;\n\t}\n\telse if (x + 1 == y) {\n\t\treturn -1;\n\t}\n\telse {\n\t\treturn\
    \ choose_num(x + 1, y);\n\t}\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmprzbck1tr: /tmp/tmprzbck1tr.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Implement this function\n\
    \    if(x%2==0)\n    {\n        return x;\n    }\n    else if(x%2!=0 && y%2==0)\n\
    \    {\n        return y;\n    }\n    else\n    {\n        return -1;\n    }\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp639n1xdv: /tmp/tmp639n1xdv.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    if (x % 2 == 1) {\n        x++;\n        return x;\n \
    \   }\n    if (x % 2 == 0 && y % 2 == 0) {\n        return y;\n    }\n    if (x\
    \ % 2 == 0 && y % 2 == 1) {\n        y--;\n        return y;\n    }\n    if (x\
    \ % 2 == 1 && y % 2 == 0) {\n        x++;\n        return x;\n    }\n    if (x\
    \ % 2 == 1 && y % 2 == 1) {\n        x++;\n        y--;\n        return x;\n \
    \   }\n    return -1;\n}\nint main() {\n    auto candidate = choose_num;\n   \
    \ assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmplqxhw5xp: /tmp/tmplqxhw5xp.cpp:37: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // TODO: Your code here\n  if(x%2==0)\n\
    \  {\n      if(x>y)\n      {\n          return -1;\n      }\n      else\n    \
    \  {\n          return x;\n      }\n  }\n  else\n  {\n      if(x+1>y)\n      {\n\
    \          return -1;\n      }\n      else\n      {\n          return x+1;\n \
    \     }\n  }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpjoyyzh4g: /tmp/tmpjoyyzh4g.cpp:36: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    } else if (x + 1 == y) {\n        return -1;\n    } else {\n\
    \        return x + 1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfdum8zbn: /tmp/tmpfdum8zbn.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Implement this function.\n\
    \    // You can add more functions to this file.\n    // You can add more functions\
    \ to this file.\n    if(x%2==0)\n        return x;\n    else if(x%2!=0 && x+1<=y)\n\
    \        return x+1;\n    else\n        return -1;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpx15e7io3: /tmp/tmpx15e7io3.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Implement this function\n\
    \    if (x%2==0)\n        return x;\n    else if (x+1<=y)\n        return x+1;\n\
    \    else\n        return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp4jghoejw: /tmp/tmp4jghoejw.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    } else if (x + 1 <= y) {\n        return x + 1;\n    } else {\n\
    \        return -1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpnk3a1rl5: /tmp/tmpnk3a1rl5.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x%2==0)\n    {\n       \
    \ if(x<=y)\n        {\n            return x;\n        }\n        else\n      \
    \  {\n            return -1;\n        }\n    }\n    else\n    {\n        if(x+1<=y)\n\
    \        {\n            return x+1;\n        }\n        else\n        {\n    \
    \        return -1;\n        }\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmptm25jbam: /tmp/tmptm25jbam.cpp:35: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Your code here\n    long\
    \ i;\n    for(i=y;i>=x;i--)\n    {\n        if(i%2==0)\n        {\n          \
    \  return i;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Your code here\n \
    \   if(x%2==0)\n    {\n        return x;\n    }\n    else\n    {\n        if(x+1<=y)\n\
    \        {\n            return x+1;\n        }\n        else\n        {\n    \
    \        return -1;\n        }\n        \n    }\n    \n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpzzywmnil: /tmp/tmpzzywmnil.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long max = -1;\n    for (long\
    \ i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: implement this function\n\
    \    if(x%2==0)\n    {\n        return x;\n    }\n    else\n    {\n        return\
    \ x+1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp73jm9h1w: /tmp/tmp73jm9h1w.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Your code here\n    if(x%2==0)\n\
    \    {\n        return x;\n    }\n    else\n    {\n        if(x+1<=y)\n      \
    \  {\n            return x+1;\n        }\n        else\n        {\n          \
    \  return -1;\n        }\n        \n    }\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpqfm5sp1a: /tmp/tmpqfm5sp1a.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    } else if (x + 1 == y) {\n        return -1;\n    } else {\n\
    \        return x + 1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfdum8zbn: /tmp/tmpfdum8zbn.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: implement this function\n\
    \    if(x%2==0)\n    {\n        return x;\n    }\n    else if(x%2!=0 && y%2==0)\n\
    \    {\n        return y;\n    }\n    else\n    {\n        return -1;\n    }\n\
    \    \n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpuwgww9wv: /tmp/tmpuwgww9wv.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: your code here\n \
    \   if(x%2==0)\n        return x;\n    else if(x%2!=0 && x+1<=y)\n        return\
    \ x+1;\n    else\n        return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmprw7mdxcz: /tmp/tmprw7mdxcz.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Your code here\n \
    \   long z = x;\n    while(z <= y){\n        if(z % 2 == 0){\n            return\
    \ z;\n        }\n        z++;\n    }\n    return -1;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp981og1ri: /tmp/tmp981og1ri.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098586
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long max_even = -1;\n    for\
    \ (long i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            max_even\
    \ = i;\n        }\n    }\n    return max_even;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: write your code here\n\
    \    long max = -1;\n    for(long i = x; i <= y; i++){\n        if(i % 2 == 0){\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Implement this function\n\
    \    if (x % 2 == 0) {\n        return x;\n    }\n    else if (x % 2 != 0 && x\
    \ + 1 <= y) {\n        return x + 1;\n    }\n    else {\n        return -1;\n\
    \    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpckyz8_42: /tmp/tmpckyz8_42.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Implement this function\n\
    \    if(x%2==0)\n        return x;\n    else if(x%2!=0 && x+1<=y)\n        return\
    \ x+1;\n    else\n        return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpwjdx8_o_: /tmp/tmpwjdx8_o_.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Your code here\n    if(x%2==0)\n\
    \    {\n        if(x>y)\n        {\n            return -1;\n        }\n      \
    \  else\n        {\n            return x;\n        }\n    }\n    else\n    {\n\
    \        x++;\n        if(x>y)\n        {\n            return -1;\n        }\n\
    \        else\n        {\n            return x;\n        }\n    }\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpvkvcjow0: /tmp/tmpvkvcjow0.cpp:37: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: implement this function\n\
    \    if (x%2==0)\n    {\n        if (x<=y)\n        {\n            return x;\n\
    \        }\n        else\n        {\n            return -1;\n        }\n    }\n\
    \    else\n    {\n        if (x+1<=y)\n        {\n            return x+1;\n  \
    \      }\n        else\n        {\n            return -1;\n        }\n    }\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpn28ozzo_: /tmp/tmpn28ozzo_.cpp:36: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: write your code here\n\
    \    if(x%2==0)\n    {\n        return x;\n    }\n    else\n    {\n        return\
    \ x+1;\n    }\n    \n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp2mqg2gmn: /tmp/tmp2mqg2gmn.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Write your code here\n\
    \    long result = -1;\n    for(long i=x; i<=y; i++){\n        if(i%2==0){\n \
    \           result = i;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    else if (x + 1 == y) {\n        return -1;\n    }\n  \
    \  else {\n        return x + 1;\n    }\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfdvmrhmn: /tmp/tmpfdvmrhmn.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Your code here\n    if(x%2==0)\n\
    \    {\n        return x;\n    }\n    else\n    {\n        x=x+1;\n        return\
    \ x;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp0fc4qxph: /tmp/tmp0fc4qxph.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x > 0 && y > 0);\n \
    \   if (x % 2 == 0) {\n        return x;\n    }\n    if (x + 1 == y) {\n     \
    \   return -1;\n    }\n    return choose_num(x + 1, y);\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmprabdbls5: /tmp/tmprabdbls5.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: your code here\n \
    \   if(x%2==0)\n    {\n        return x;\n    }\n    else if(x%2!=0 && y%2==0)\n\
    \    {\n        return y;\n    }\n    else\n    {\n        return -1;\n    }\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpl1ym4gcz: /tmp/tmpl1ym4gcz.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x%2 == 0) {\n        return\
    \ x;\n    }\n    else if (x+1 == y) {\n        return -1;\n    }\n    else {\n\
    \        return x+2;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpt_raq211: /tmp/tmpt_raq211.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Implement this function.\n\
    \    if (x % 2 == 0) {\n        return x;\n    }\n    else if (x % 2 != 0 && y\
    \ % 2 == 0) {\n        return y;\n    }\n    else if (x % 2 != 0 && y % 2 != 0)\
    \ {\n        return -1;\n    }\n    else {\n        return -1;\n    }\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp6a9n88mh: /tmp/tmp6a9n88mh.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    } else if (x + 1 == y) {\n        return -1;\n    } else {\n\
    \        return x + 1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfdum8zbn: /tmp/tmpfdum8zbn.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Implement this function\n\
    \    if (x%2 == 0)\n        return x;\n    else if (x+1 <= y)\n        return\
    \ x+1;\n    else\n        return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp2fo39zqx: /tmp/tmp2fo39zqx.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    } else if (x + 1 <= y) {\n        return x + 1;\n    } else {\n\
    \        return -1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpnk3a1rl5: /tmp/tmpnk3a1rl5.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    else if (x % 2 != 0 && x + 1 <= y) {\n        return x\
    \ + 1;\n    }\n    else {\n        return -1;\n    }\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpcfp9ywkc: /tmp/tmpcfp9ywkc.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Your code here\n \
    \   // Hint: You can use the modulo operator (%) to check if a number is even.\n\
    \    long max = -1;\n    for(long i = x; i <= y; i++){\n        if(i % 2 == 0){\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: implement this function\n\
    \    long max = -1;\n    for(long i = x; i <= y; i++){\n        if(i % 2 == 0){\n\
    \            if(i > max){\n                max = i;\n            }\n        }\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    } else if (x + 1 <= y) {\n        return x + 1;\n    } else {\n\
    \        return -1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpnk3a1rl5: /tmp/tmpnk3a1rl5.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    else if (x + 1 == y) {\n        return -1;\n    }\n  \
    \  else {\n        return x + 1;\n    }\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfdvmrhmn: /tmp/tmpfdvmrhmn.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    if (x + 1 == y) {\n        return -1;\n    }\n    return\
    \ choose_num(x + 1, y);\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp72d1vpt7: /tmp/tmp72d1vpt7.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Your code here\n \
    \   if(x%2==0)\n    {\n        return x;\n    }\n    else\n    {\n        return\
    \ x+1;\n    }\n    \n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_xiszuw9: /tmp/tmp_xiszuw9.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    else if (x % 2 != 0 && x + 1 <= y) {\n        return x\
    \ + 1;\n    }\n    else {\n        return -1;\n    }\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpcfp9ywkc: /tmp/tmpcfp9ywkc.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long max = -1;\n    for (long\
    \ i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            max = i;\n   \
    \     }\n    }\n    return max;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098589
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long result = -1;\n    for\
    \ (long i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            result =\
    \ i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  if (x % 2 == 0) {\n    return\
    \ x;\n  } else if (x + 1 == y) {\n    return -1;\n  } else {\n    return x + 1;\n\
    \  }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpnfg1l8ua: /tmp/tmpnfg1l8ua.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Your code here\n    if(x%2==0)\n\
    \        return x;\n    else if(x+1<=y)\n        return x+1;\n    else\n     \
    \   return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpkda94xp1: /tmp/tmpkda94xp1.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  long result = -1;\n  for (long\
    \ i = x; i <= y; i++) {\n    if (i % 2 == 0) {\n      result = i;\n    }\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x % 2 == 0)\n\t\treturn x;\n\
    \tif (x + 1 == y)\n\t\treturn -1;\n\treturn choose_num(x + 1, y);\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpkpfbo0vx: /tmp/tmpkpfbo0vx.cpp:18: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    } else if (x + 1 == y) {\n        return -1;\n    } else {\n\
    \        return x + 1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfdum8zbn: /tmp/tmpfdum8zbn.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    else if (x + 1 == y) {\n        return -1;\n    }\n  \
    \  else {\n        return x + 1;\n    }\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfdvmrhmn: /tmp/tmpfdvmrhmn.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: your code here\n \
    \   long max = -1;\n    for(long i = x; i <= y; i++){\n        if(i % 2 == 0){\n\
    \            if(i > max){\n                max = i;\n            }\n        }\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    else if (x % 2 != 0 && x + 1 <= y) {\n        return x\
    \ + 1;\n    }\n    else {\n        return -1;\n    }\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpcfp9ywkc: /tmp/tmpcfp9ywkc.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: your code here\n \
    \   if(x%2==0){\n        return x;\n    }\n    else if(x%2!=0 && y%2==0){\n  \
    \      return y;\n    }\n    else{\n        return -1;\n    }\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpw0_wbt8k: /tmp/tmpw0_wbt8k.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // your code here\n    if(x%2==0)\n\
    \    {\n        return x;\n    }\n    else\n    {\n        if(x+1==y)\n      \
    \  {\n            return -1;\n        }\n        else\n        {\n           \
    \ return x+2;\n        }\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpm2s627al: /tmp/tmpm2s627al.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x%2==0){\n        return\
    \ x;\n    }\n    else{\n        if(x+1<=y){\n            return x+1;\n       \
    \ }\n        else{\n            return -1;\n        }\n    }\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpyzn71v73: /tmp/tmpyzn71v73.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x%2==0)\n        return\
    \ x;\n    else if(x%2!=0 && y%2==0)\n        return y;\n    else if(x%2!=0 &&\
    \ y%2!=0)\n        return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpyjgevds1: /tmp/tmpyjgevds1.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long max = -1;\n    for (long\
    \ i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // TODO: your code here\n  if(x%2==0)\n\
    \  {\n    if(x<=y)\n    {\n      return x;\n    }\n    else\n    {\n      return\
    \ -1;\n    }\n  }\n  else\n  {\n    if(x+1<=y)\n    {\n      return x+1;\n   \
    \ }\n    else\n    {\n      return -1;\n    }\n  }\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp7z7wr2d0: /tmp/tmp7z7wr2d0.cpp:36: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x % 2 == 0) {\n\t\treturn\
    \ x;\n\t}\n\telse if (x % 2 != 0 && x + 1 <= y) {\n\t\treturn x + 1;\n\t}\n\t\
    else {\n\t\treturn -1;\n\t}\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp0utm_eg7: /tmp/tmp0utm_eg7.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Your code here.\n\
    \    if(x%2==0)\n        return x;\n    else if(x%2!=0 && x+1<=y)\n        return\
    \ x+1;\n    else\n        return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpyjb6j8ih: /tmp/tmpyjb6j8ih.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        return\
    \ -1;\n    }\n    if (x % 2 == 0) {\n        return x;\n    }\n    return choose_num(x\
    \ + 1, y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp0v3oor5l: /tmp/tmp0v3oor5l.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Your code here\n    if(x%2==0){\n\
    \        return x;\n    }\n    else if(x%2!=0 && x+1<=y){\n        return x+1;\n\
    \    }\n    else{\n        return -1;\n    }\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpd4h3otpd: /tmp/tmpd4h3otpd.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Your code here\n \
    \   if (x%2==0) {\n        return x;\n    }\n    else if (x%2==1 && y%2==1) {\n\
    \        return -1;\n    }\n    else if (x%2==1 && y%2==0) {\n        return y;\n\
    \    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpkcs7wmyj: /tmp/tmpkcs7wmyj.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    else if (x + 1 == y) {\n        return -1;\n    }\n  \
    \  else {\n        return x + 1;\n    }\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfdvmrhmn: /tmp/tmpfdvmrhmn.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Your code here\n \
    \   if (x > y) {\n        return -1;\n    }\n    if (x % 2 == 0) {\n        return\
    \ x;\n    }\n    if (x % 2 == 1) {\n        return choose_num(x + 1, y);\n   \
    \ }\n    return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpqwnhxyz2: /tmp/tmpqwnhxyz2.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Implement this function.\n\
    \    long max = -1;\n    for(long i = x; i <= y; i++){\n        if(i % 2 == 0){\n\
    \            if(i > max){\n                max = i;\n            }\n        }\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: implement this function\n\
    \    if(x%2==0)\n    {\n        return x;\n    }\n    else if(x%2!=0 && y%2==0)\n\
    \    {\n        return y;\n    }\n    else if(x%2!=0 && y%2!=0)\n    {\n     \
    \   return -1;\n    }\n    else\n    {\n        return -1;\n    }\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpvu7bvy78: /tmp/tmpvu7bvy78.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\tif (x % 2 == 0) {\n\t\treturn\
    \ x;\n\t}\n\telse if (x % 2 != 0 && x == y) {\n\t\treturn -1;\n\t}\n\telse {\n\
    \t\treturn choose_num(x + 1, y);\n\t}\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpoum47ty8: /tmp/tmpoum47ty8.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: your code here\n \
    \   if(x%2==0)\n        return x;\n    else if(x%2!=0 && y%2==0)\n        return\
    \ y;\n    else\n        return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpyp6vf2kc: /tmp/tmpyp6vf2kc.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Implement your solution\
    \ here.\n    if(x%2==0)\n        return x;\n    else if(x%2!=0 && x+1<=y)\n  \
    \      return x+1;\n    else\n        return -1;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp2v3do8fq: /tmp/tmp2v3do8fq.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x%2==0)\n        return\
    \ x;\n    else if(x+1<=y)\n        return x+1;\n    else\n        return -1;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfhr4_vdu: /tmp/tmpfhr4_vdu.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: implement this function\n\
    \    long max = -1;\n    for(long i = x; i <= y; i++){\n        if(i % 2 == 0){\n\
    \            if(i > max){\n                max = i;\n            }\n        }\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    if (x + 1 == y) {\n        return -1;\n    }\n    return\
    \ choose_num(x + 1, y);\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp72d1vpt7: /tmp/tmp72d1vpt7.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x%2==0)\n        return\
    \ x;\n    else if(x+1<=y)\n        return x+1;\n    else\n        return -1;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfhr4_vdu: /tmp/tmpfhr4_vdu.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Implement this function\n\
    \    long max = -1;\n    for(long i = x; i <= y; i++){\n        if(i % 2 == 0){\n\
    \            if(i > max){\n                max = i;\n            }\n        }\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Your code here\n \
    \   if(x%2==0){\n        return x;\n    }\n    else if(x%2==1){\n        if(x+1<=y){\n\
    \            return x+1;\n        }\n        else{\n            return -1;\n \
    \       }\n    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpj3g2ogh2: /tmp/tmpj3g2ogh2.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    if (x + 1 == y) {\n        return -1;\n    }\n    return\
    \ choose_num(x + 1, y);\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp72d1vpt7: /tmp/tmp72d1vpt7.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: implement this function\n\
    \    if(x%2!=0)\n        x++;\n    if(y%2!=0)\n        y--;\n    if(x>y)\n   \
    \     return -1;\n    return y;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: implement this function\n\
    \    if (x%2==0)\n    {\n        return x;\n    }\n    else if (x%2!=0)\n    {\n\
    \        x++;\n        return x;\n    }\n    else if (x%2!=0 && y%2!=0)\n    {\n\
    \        return -1;\n    }\n    else if (x%2!=0 && y%2==0)\n    {\n        return\
    \ y;\n    }\n    else\n    {\n        return -1;\n    }\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpyhl7f004: /tmp/tmpyhl7f004.cpp:35: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    } else if (x + 1 <= y) {\n        return x + 1;\n    } else {\n\
    \        return -1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpnk3a1rl5: /tmp/tmpnk3a1rl5.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    } else if (x + 1 <= y) {\n        return x + 1;\n    } else {\n\
    \        return -1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpnk3a1rl5: /tmp/tmpnk3a1rl5.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Implement this function.\n\
    \    if(x%2==0)\n    {\n        return x;\n    }\n    else if(x%2!=0 && y%2==0)\n\
    \    {\n        return y;\n    }\n    else\n    {\n        return -1;\n    }\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpk9uxhsjy: /tmp/tmpk9uxhsjy.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Your code here\n    if(x%2==0)\n\
    \    {\n        return x;\n    }\n    else\n    {\n        return x+1;\n    }\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmppm03f2x3: /tmp/tmppm03f2x3.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: your code here\n \
    \   if(x%2==0)\n    {\n        return x;\n    }\n    else\n    {\n        return\
    \ x+1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpy5crpwpn: /tmp/tmpy5crpwpn.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // Your code here\n  long even\
    \ = 0;\n  for(long i = x; i <= y; i++){\n    if(i % 2 == 0){\n      even = i;\n\
    \    }\n  }\n  if(even == 0){\n    return -1;\n  }\n  return even;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: your code here\n \
    \   if(x%2==0)\n    {\n        if(x<=y)\n        {\n            return x;\n  \
    \      }\n        else\n        {\n            return -1;\n        }\n    }\n\
    \    else\n    {\n        if(x+1<=y)\n        {\n            return x+1;\n   \
    \     }\n        else\n        {\n            return -1;\n        }\n    }\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp6n1q35wd: /tmp/tmp6n1q35wd.cpp:36: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long result = -1;\n    for\
    \ (long i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            result =\
    \ i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Your code here\n \
    \   if(x%2==0){\n        return x;\n    }\n    else if(x%2!=0 && y%2==0){\n  \
    \      return y;\n    }\n    else if(x%2!=0 && y%2!=0){\n        return -1;\n\
    \    }\n    else{\n        return -1;\n    }\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpo6_8gnpo: /tmp/tmpo6_8gnpo.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\t// TODO: your code here\n\tif\
    \ (x % 2 == 0) {\n\t\treturn x;\n\t}\n\telse if (x % 2 != 0 && x + 1 <= y) {\n\
    \t\treturn x + 1;\n\t}\n\telse {\n\t\treturn -1;\n\t}\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpnnw7_ucy: /tmp/tmpnnw7_ucy.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    else if (x % 2 != 0 && x + 1 <= y) {\n        return x\
    \ + 1;\n    }\n    else {\n        return -1;\n    }\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpcfp9ywkc: /tmp/tmpcfp9ywkc.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long max_even = -1;\n    if\
    \ (x % 2 == 0) {\n        max_even = x;\n    } else {\n        max_even = x +\
    \ 1;\n    }\n    if (max_even > y) {\n        return -1;\n    }\n    return max_even;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmptblbicn5: /tmp/tmptblbicn5.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    else if (x % 2 != 0 && x + 1 <= y) {\n        return x\
    \ + 1;\n    }\n    else {\n        return -1;\n    }\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpcfp9ywkc: /tmp/tmpcfp9ywkc.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // TODO: implement this function\n\
    \  if(x%2==0)\n  {\n    return x;\n  }\n  else\n  {\n    return x+1;\n  }\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpg11e2y8c: /tmp/tmpg11e2y8c.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    else if (x + 1 == y) {\n        return -1;\n    }\n  \
    \  else {\n        return x + 1;\n    }\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfdvmrhmn: /tmp/tmpfdvmrhmn.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    } else if (x + 1 == y) {\n        return -1;\n    } else {\n\
    \        return x + 1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfdum8zbn: /tmp/tmpfdum8zbn.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Your code here\n \
    \   long max = -1;\n    for(long i = x; i <= y; i++){\n        if(i % 2 == 0){\n\
    \            if(i > max){\n                max = i;\n            }\n        }\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\t// TODO: implement this function\n\
    \tif (x % 2 == 0)\n\t\treturn x;\n\telse if (x + 1 == y)\n\t\treturn -1;\n\telse\n\
    \t\treturn x + 1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpqtowkayf: /tmp/tmpqtowkayf.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: your code here\n \
    \   if(x%2==0)\n    {\n        return x;\n    }\n    else\n    {\n        return\
    \ x+1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpy5crpwpn: /tmp/tmpy5crpwpn.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Your code here\n    if(x%2==0)\n\
    \    {\n        return x;\n    }\n    else\n    {\n        return x+1;\n    }\n\
    \    \n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpnxke6oba: /tmp/tmpnxke6oba.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  long result = -1;\n  for (long\
    \ i = x; i <= y; i++) {\n    if (i % 2 == 0) {\n      result = i;\n    }\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098589
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    else if (x + 1 == y) {\n        return -1;\n    }\n  \
    \  else {\n        return x + 1;\n    }\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfdvmrhmn: /tmp/tmpfdvmrhmn.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Your code here\n    if(x%2==0)\n\
    \    {\n        return x;\n    }\n    else if(x%2!=0)\n    {\n        x++;\n \
    \       return x;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpafjgkwll: /tmp/tmpafjgkwll.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long max = -1;\n    for (long\
    \ i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    if (x + 1 == y) {\n        return -1;\n    }\n    return\
    \ choose_num(x + 1, y);\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp72d1vpt7: /tmp/tmp72d1vpt7.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Your code here.\n\
    \    long max = -1;\n    for(long i = x; i <= y; i++){\n        if(i % 2 == 0){\n\
    \            if(i > max){\n                max = i;\n            }\n        }\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098591
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Implement this function.\n\
    \    if(x%2==0)\n    {\n        return x;\n    }\n    else\n    {\n        if(x+1<=y)\n\
    \        {\n            return x+1;\n        }\n        else\n        {\n    \
    \        return -1;\n        }\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfflykec_: /tmp/tmpfflykec_.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x%2==0)\n        return\
    \ x;\n    else if(x+1<=y)\n        return x+1;\n    else\n        return -1;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfhr4_vdu: /tmp/tmpfhr4_vdu.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // Your code here\n  if(x%2==0)\n\
    \  {\n      return x;\n  }\n  else if(x%2!=0 && x+1<=y)\n  {\n      return x+1;\n\
    \  }\n  else\n  {\n      return -1;\n  }\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmphfp5b08l: /tmp/tmphfp5b08l.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: implement this function\n\
    \    if(x%2==0)\n        return x;\n    else if(x%2==1 && y%2==1)\n        return\
    \ -1;\n    else\n        return x+1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpln2ou80p: /tmp/tmpln2ou80p.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098591
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: implement this function\n\
    \    if(x%2==0)\n    {\n        return x;\n    }\n    else\n    {\n        return\
    \ x+1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp73jm9h1w: /tmp/tmp73jm9h1w.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    } else if (x + 1 == y) {\n        return -1;\n    } else {\n\
    \        return x + 1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfdum8zbn: /tmp/tmpfdum8zbn.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x%2==0)\n        return\
    \ x;\n    else if(x+1<=y)\n        return x+1;\n    else\n        return -1;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfhr4_vdu: /tmp/tmpfhr4_vdu.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // TODO: your code here\n  if(x%2==0)\n\
    \  {\n      if(x<=y)\n      {\n          return x;\n      }\n      else\n    \
    \  {\n          return -1;\n      }\n  }\n  else\n  {\n      if(x+1<=y)\n    \
    \  {\n          return x+1;\n      }\n      else\n      {\n          return -1;\n\
    \      }\n  }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_1s06fzr: /tmp/tmp_1s06fzr.cpp:36: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: your code here\n \
    \   long result = -1;\n    for(long i = x; i <= y; i++){\n        if(i % 2 ==\
    \ 0){\n            result = i;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098591
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Your code here\n \
    \   // Hint: You can use the modulo operator (%) to check if a number is\n   \
    \ // even.\n    long max = -1;\n    for(long i = x; i <= y; i++){\n        if(i\
    \ % 2 == 0){\n            max = i;\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Implement this function\n\
    \    long num = -1;\n    for(long i = x; i <= y; i++){\n        if(i % 2 == 0){\n\
    \            num = i;\n        }\n    }\n    return num;\n}\nint main() {\n  \
    \  auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: implement this function\n\
    \    if(x%2==0)\n        return x;\n    else if(x%2!=0 && x+1<=y)\n        return\
    \ x+1;\n    else\n        return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpp0o754k6: /tmp/tmpp0o754k6.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Implement this function.\n\
    \    if (x % 2 == 0) {\n        return x;\n    } else if (x % 2 != 0 && x + 1\
    \ <= y) {\n        return x + 1;\n    } else {\n        return -1;\n    }\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmphu2r7qgt: /tmp/tmphu2r7qgt.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    if (x + 1 == y) {\n        return -1;\n    }\n    return\
    \ choose_num(x + 1, y);\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp72d1vpt7: /tmp/tmp72d1vpt7.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Your code here\n \
    \   if(x%2==0)\n    {\n        return x;\n    }\n    else\n    {\n        return\
    \ x+1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpnomq3j5e: /tmp/tmpnomq3j5e.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    } else if (x + 1 <= y) {\n        return x + 1;\n    } else {\n\
    \        return -1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpnk3a1rl5: /tmp/tmpnk3a1rl5.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    } else if (x + 1 == y) {\n        return -1;\n    } else {\n\
    \        return x + 1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfdum8zbn: /tmp/tmpfdum8zbn.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        return\
    \ -1;\n    }\n    if (x % 2 == 0) {\n        return x;\n    }\n    return choose_num(x\
    \ + 1, y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp0v3oor5l: /tmp/tmp0v3oor5l.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    else if (x % 2 != 0 && x + 1 <= y) {\n        return x\
    \ + 1;\n    }\n    else {\n        return -1;\n    }\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpcfp9ywkc: /tmp/tmpcfp9ywkc.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Your code here\n    if(x%2==0)\n\
    \        return x;\n    else if(x%2!=0 && y%2==0)\n        return y;\n    else\
    \ if(x%2!=0 && y%2!=0)\n        return -1;\n    else\n        return x+1;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpuufob45h: /tmp/tmpuufob45h.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long max = -1;\n    for (long\
    \ i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: implement this function\n\
    \    if(x%2==0)\n    {\n        return x;\n    }\n    else\n    {\n        return\
    \ x+1;\n    }\n    \n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpbwv0oq2b: /tmp/tmpbwv0oq2b.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Your code goes here\n  \
    \  if(x%2==0)\n    {\n        return x;\n    }\n    else if(x%2!=0 && x+1<=y)\n\
    \    {\n        return x+1;\n    }\n    else\n    {\n        return -1;\n    }\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp3365dxps: /tmp/tmp3365dxps.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x%2==0)\n        return\
    \ x;\n    else if(x+1==y)\n        return -1;\n    else\n        return x+2;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp8ob_ivvr: /tmp/tmp8ob_ivvr.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    else if (x % 2 != 0 && y % 2 == 0) {\n        return y;\n\
    \    }\n    else if (x % 2 != 0 && y % 2 != 0) {\n        return -1;\n    }\n\
    \    else {\n        return x + 1;\n    }\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp85k8cx4j: /tmp/tmp85k8cx4j.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Your code here\n    long\
    \ ans = -1;\n    for(long i = x; i <= y; i++){\n        if(i % 2 == 0){\n    \
    \        ans = i;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x%2==0)\n        return\
    \ x;\n    else if(x+1<=y)\n        return x+1;\n    else\n        return -1;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfhr4_vdu: /tmp/tmpfhr4_vdu.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Your code here\n    if(x%2==0)\n\
    \    {\n        return x;\n    }\n    else if(x%2!=0 && y%2==0)\n    {\n     \
    \   return y;\n    }\n    else\n    {\n        return -1;\n    }\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpwobrhs_t: /tmp/tmpwobrhs_t.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    if (x % 2 == 1 && y % 2 == 1) {\n        return -1;\n\
    \    }\n    return x + 1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp77ywlmkc: /tmp/tmp77ywlmkc.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // Your code here\n  if(x%2==0)\n\
    \    return x;\n  else if(x+1<=y)\n    return x+1;\n  else\n    return -1;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpwfm1uels: /tmp/tmpwfm1uels.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Write your code here\n\
    \    if(x%2==0)\n        return x;\n    else if(x+1<=y)\n        return x+1;\n\
    \    else\n        return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpbgzalak7: /tmp/tmpbgzalak7.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Your code here\n    if(x%2==0)\n\
    \        return x;\n    else if(x%2!=0 && y%2==0)\n        return y;\n    else\n\
    \        return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpsil50gs5: /tmp/tmpsil50gs5.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: implement this function\n\
    \    if(x%2==0)\n    {\n        return x;\n    }\n    else if(x%2!=0 && y%2==0)\n\
    \    {\n        return y;\n    }\n    else\n    {\n        return -1;\n    }\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpeaetlyoo: /tmp/tmpeaetlyoo.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    if (x + 1 == y) {\n        return -1;\n    }\n    return\
    \ choose_num(x + 1, y);\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp72d1vpt7: /tmp/tmp72d1vpt7.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x%2==0)\n        return\
    \ x;\n    else if(x+1<=y)\n        return x+1;\n    else\n        return -1;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfhr4_vdu: /tmp/tmpfhr4_vdu.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Implement this function.\n\
    \    if(x%2==0)\n        return x;\n    else if(x%2!=0 && y%2==0)\n        return\
    \ y;\n    else\n        return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpp1cxbc3v: /tmp/tmpp1cxbc3v.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // your code here\n    if(x%2==0)\n\
    \    {\n        if(x>y)\n        {\n            return -1;\n        }\n      \
    \  else\n        {\n            return x;\n        }\n    }\n    else\n    {\n\
    \        if(x+1>y)\n        {\n            return -1;\n        }\n        else\n\
    \        {\n            return x+1;\n        }\n    }\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmprrrvk4tu: /tmp/tmprrrvk4tu.cpp:36: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    } else if (x + 1 == y) {\n        return -1;\n    } else {\n\
    \        return x + 1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfdum8zbn: /tmp/tmpfdum8zbn.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: your code here\n \
    \   long z;\n    if(x%2==0)\n    {\n        z=x;\n    }\n    else\n    {\n   \
    \     z=x+1;\n    }\n    if(z>y)\n    {\n        return -1;\n    }\n    else\n\
    \    {\n        return z;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpndaj_yim: /tmp/tmpndaj_yim.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: your code here\n \
    \   long max = -1;\n    for(long i = x; i <= y; i++){\n        if(i % 2 == 0){\n\
    \            if(i > max){\n                max = i;\n            }\n        }\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   // To print results to the standard output you can use the printf()\n    //\
    \ function. For example:\n    // printf(\"%s\", \"Hello world!\");\n    if(x%2==0)\n\
    \    {\n        return x;\n    }\n    else\n    {\n        if(x+1<=y)\n      \
    \  {\n            return x+1;\n        }\n        else\n        {\n          \
    \  return -1;\n        }\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp48g14xo8: /tmp/tmp48g14xo8.cpp:32: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // TODO: implement this function\n\
    \  if(x%2==0)\n  {\n    return x;\n  }\n  else\n  {\n    return x+1;\n  }\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpg11e2y8c: /tmp/tmpg11e2y8c.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x%2==0)\n        return\
    \ x;\n    else if(x+1==y)\n        return -1;\n    else\n        return x+2;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp8ob_ivvr: /tmp/tmp8ob_ivvr.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    } else if (x + 1 == y) {\n        return -1;\n    } else {\n\
    \        return x + 1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfdum8zbn: /tmp/tmpfdum8zbn.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long max = -1;\n    for (long\
    \ i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: your code here\n \
    \   if (x%2==0)\n    {\n        return x;\n    }\n    else if (x%2!=0 && y%2==0)\n\
    \    {\n        return y;\n    }\n    else\n    {\n        return -1;\n    }\n\
    \    \n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpgimwedlj: /tmp/tmpgimwedlj.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if(x%2==0)\n        return\
    \ x;\n    else if(x+1<=y)\n        return x+1;\n    else\n        return -1;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfhr4_vdu: /tmp/tmpfhr4_vdu.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n\t// TODO: Implement this function\n\
    \tif (x % 2 == 0) {\n\t\treturn x;\n\t}\n\telse if (x % 2 != 0 && x + 1 <= y)\
    \ {\n\t\treturn x + 1;\n\t}\n\telse {\n\t\treturn -1;\n\t}\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmptf28071i: /tmp/tmptf28071i.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // TODO: Implement this function.\n\
    \  // Hint: Use the modulo operator (%) to check if a number is even.\n  // Hint:\
    \ Use a for loop to iterate from x to y.\n  // Hint: Use the max() function to\
    \ find the maximum number.\n  long max = -1;\n  for(long i = x; i <= y; i++){\n\
    \    if(i % 2 == 0){\n      max = std::max(max, i);\n    }\n  }\n  return max;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Implement this function.\n\
    \    if (x%2==0)\n    {\n        return x;\n    }\n    else\n    {\n        if\
    \ (x+1<=y)\n        {\n            return x+1;\n        }\n        else\n    \
    \    {\n            return -1;\n        }\n        \n    }\n    \n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpga6ue6uj: /tmp/tmpga6ue6uj.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: implement this function\n\
    \    if(x%2==0)\n    {\n        return x;\n    }\n    else if(x%2!=0 && y%2==0)\n\
    \    {\n        return y;\n    }\n    else\n    {\n        return -1;\n    }\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpeaetlyoo: /tmp/tmpeaetlyoo.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n  // TODO: Implement this function.\n\
    \  if(x%2==0)\n  {\n    return x;\n  }\n  else if(x%2!=0 && y%2==0)\n  {\n   \
    \ return y;\n  }\n  else if(x%2!=0 && y%2!=0)\n  {\n    return -1;\n  }\n  else\n\
    \  {\n    return -1;\n  }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_70z8r99: /tmp/tmp_70z8r99.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Implement this function\n\
    \    if(x%2==0)\n        return x;\n    if(x%2!=0)\n        x++;\n    if(x>y)\n\
    \        return -1;\n    return x;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp0o94n5b7: /tmp/tmp0o94n5b7.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   // To print results to the standard output you can use the printf()\n    //\
    \ function. For example:\n    // printf(\"%s\", \"Hello world!\");\n    if (x%2==0)\n\
    \        return x;\n    else if (x%2!=0 && x+1<=y)\n        return x+1;\n    else\n\
    \        return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp24wsbmer: /tmp/tmp24wsbmer.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: your code here\n \
    \   long max = -1;\n    for(long i = x; i <= y; i++){\n        if(i % 2 == 0){\n\
    \            if(i > max){\n                max = i;\n            }\n        }\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // your code here\n    if(x%2==0)\n\
    \    {\n        return x;\n    }\n    else\n    {\n        return x+1;\n    }\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpdbj7wxtg: /tmp/tmpdbj7wxtg.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Implement this function\n\
    \    long max = -1;\n    for(long i = x; i <= y; i++){\n        if(i % 2 == 0){\n\
    \            if(i > max){\n                max = i;\n            }\n        }\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Your code here\n \
    \   if(x%2==0)\n    {\n        return x;\n    }\n    else\n    {\n        return\
    \ x+1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpnomq3j5e: /tmp/tmpnomq3j5e.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // TODO: Write your code here\n\
    \    long res = -1;\n    for(long i=x; i<=y; i++){\n        if(i%2==0){\n    \
    \        res = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098592
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long max = -1;\n    for (long\
    \ i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    } else if (x + 1 == y) {\n        return -1;\n    } else {\n\
    \        return x + 1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfdum8zbn: /tmp/tmpfdum8zbn.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098587
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long max = -1;\n    for (long\
    \ i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098587
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x%2 == 0) {\n        return\
    \ x;\n    } else if (x+1 == y) {\n        return -1;\n    } else {\n        return\
    \ x+2;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpxerbfd2b: /tmp/tmpxerbfd2b.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x % 2 == 0) {\n       \
    \ return x;\n    }\n    else if (x % 2 != 0 && x + 1 <= y) {\n        return x\
    \ + 1;\n    }\n    else {\n        return -1;\n    }\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpcfp9ywkc: /tmp/tmpcfp9ywkc.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098590
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // your code here\n    if(x%2==0)\n\
    \        return x;\n    else if(x%2!=0 && x+1<=y)\n        return x+1;\n    else\n\
    \        return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpw_1mpq8b: /tmp/tmpw_1mpq8b.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098592
