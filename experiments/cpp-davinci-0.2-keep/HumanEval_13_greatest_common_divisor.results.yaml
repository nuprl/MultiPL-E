name: HumanEval_13_greatest_common_divisor
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a < b) {\n        std::swap(a, b);\n    }\n    while (b\
    \ != 0) {\n        long r = a % b;\n        a = b;\n        b = r;\n    }\n  \
    \  return a;\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    // TODO: implement this function\n    long gcd = 1;\n    for\
    \ (long i = 1; i <= a && i <= b; i++) {\n        if (a % i == 0 && b % i == 0)\
    \ {\n            gcd = i;\n        }\n    }\n    return gcd;\n}\nint main() {\n\
    \    auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    // TODO: implement this function\n    long gcd = 0;\n    for(long\
    \ i = 1; i <= a && i <= b; i++)\n    {\n        if(a % i == 0 && b % i == 0)\n\
    \            gcd = i;\n    }\n    return gcd;\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a >= 0 && b >= 0);\n    if (a == 0) {\n        return\
    \ b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if (a > b) {\n \
    \       return greatest_common_divisor(a % b, b);\n    } else {\n        return\
    \ greatest_common_divisor(a, b % a);\n    }\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    long c;\n    while ( a != 0 ) {\n        c = a; a = b%a; \
    \ b = c;\n    }\n    return b;\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a >= 0 && b >= 0);\n    if (a == 0) {\n        return\
    \ b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if (a > b) {\n \
    \       return greatest_common_divisor(a % b, b);\n    } else {\n        return\
    \ greatest_common_divisor(a, b % a);\n    }\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    long c;\n    while (a != 0) {\n        c = a; a = b%a;  b\
    \ = c;\n    }\n    return b;\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    long c;\n    while ( a != 0 ) {\n        c = a; a = b%a; \
    \ b = c;\n    }\n    return b;\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a == b) {\n        return a;\n    }\n    if\
    \ (a > b) {\n        return greatest_common_divisor(a - b, b);\n    }\n    return\
    \ greatest_common_divisor(a, b - a);\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a > 0 && b > 0);\n    while (a != b) {\n        if\
    \ (a > b) {\n            a = a - b;\n        } else {\n            b = b - a;\n\
    \        }\n    }\n    return a;\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    long c;\n    while (a != 0) {\n        c = a;\n        a =\
    \ b % a;\n        b = c;\n    }\n    return b;\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a > 0 && b > 0);\n    if (a == b) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a - b, b);\n\
    \    }\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n    auto\
    \ candidate = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n\
    \    assert(candidate((10), (15)) == (5));\n    assert(candidate((49), (14)) ==\
    \ (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a >= 0 && b >= 0);\n    if (a == 0) {\n        return\
    \ b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if (a >= b) {\n\
    \        return greatest_common_divisor(a % b, b);\n    }\n    return greatest_common_divisor(a,\
    \ b % a);\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n  \
    \  assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n\
    \    assert(candidate((49), (14)) == (7));\n    assert(candidate((144), (60))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a >= 0 && b >= 0);\n    if (a == 0) {\n        return\
    \ b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if (a == b) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ - b, b);\n    }\n    return greatest_common_divisor(a, b - a);\n}\nint main()\
    \ {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    long c;\n    while (a != 0) {\n        c = a;\n        a =\
    \ b % a;\n        b = c;\n    }\n    return b;\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n\tif (a == 0) {\n\t\treturn b;\n\t}\n\tif (b == 0) {\n\t\treturn\
    \ a;\n\t}\n\tif (a == b) {\n\t\treturn a;\n\t}\n\tif (a > b) {\n\t\treturn greatest_common_divisor(a\
    \ - b, b);\n\t}\n\treturn greatest_common_divisor(a, b - a);\n}\nint main() {\n\
    \    auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a >= 0 && b >= 0);\n    if (a == 0) {\n        return\
    \ b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if (a > b) {\n \
    \       return greatest_common_divisor(a % b, b);\n    } else {\n        return\
    \ greatest_common_divisor(a, b % a);\n    }\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a > b)\n        return greatest_common_divisor(a % b, b);\n    else\n\
    \        return greatest_common_divisor(a, b % a);\n}\nint main() {\n    auto\
    \ candidate = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n\
    \    assert(candidate((10), (15)) == (5));\n    assert(candidate((49), (14)) ==\
    \ (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a >= 0 && b >= 0);\n    if (a == 0) return b;\n   \
    \ if (b == 0) return a;\n    if (a > b) return greatest_common_divisor(a % b,\
    \ b);\n    else return greatest_common_divisor(a, b % a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a > 0 && b > 0);\n    if (a == b) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a - b, b);\n\
    \    }\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n    auto\
    \ candidate = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n\
    \    assert(candidate((10), (15)) == (5));\n    assert(candidate((49), (14)) ==\
    \ (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n\tlong c;\n\twhile (a != 0) {\n\t\tc = a;\n\t\ta = b % a;\n\t\t\
    b = c;\n\t}\n\treturn b;\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    // TODO: implement this function\n    if(a==0)\n    {\n  \
    \      return b;\n    }\n    else if(b==0)\n    {\n        return a;\n    }\n\
    \    else\n    {\n        return greatest_common_divisor(b,a%b);\n    }\n}\nint\
    \ main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a >= 0 && b >= 0);\n    if (a == 0) {\n        return\
    \ b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if (a > b) {\n \
    \       return greatest_common_divisor(a % b, b);\n    } else {\n        return\
    \ greatest_common_divisor(a, b % a);\n    }\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a > 0 && b > 0);\n    while (a != b) {\n        if\
    \ (a > b) {\n            a = a - b;\n        } else {\n            b = b - a;\n\
    \        }\n    }\n    return a;\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a < b) {\n        std::swap(a, b);\n    }\n    while (b\
    \ != 0) {\n        long r = a % b;\n        a = b;\n        b = r;\n    }\n  \
    \  return a;\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a < b) {\n        return greatest_common_divisor(b, a);\n\
    \    }\n    if (b == 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n  \
    \  assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n\
    \    assert(candidate((49), (14)) == (7));\n    assert(candidate((144), (60))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a >= 0 && b >= 0);\n    if (a == 0) return b;\n   \
    \ if (b == 0) return a;\n    if (a > b) return greatest_common_divisor(a % b,\
    \ b);\n    else return greatest_common_divisor(a, b % a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0 || b == 0) {\n        return 0;\n    }\n    if\
    \ (a == b) {\n        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ - b, b);\n    }\n    return greatest_common_divisor(a, b - a);\n}\nint main()\
    \ {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a == b) {\n        return a;\n    }\n    if\
    \ (a > b) {\n        return greatest_common_divisor(a - b, b);\n    }\n    return\
    \ greatest_common_divisor(a, b - a);\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a >= 0 && b >= 0);\n    if (a == 0 || b == 0) {\n \
    \       return a + b;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    }\n    return greatest_common_divisor(a, b % a);\n}\nint main()\
    \ {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a < b) {\n        std::swap(a, b);\n    }\n    while (b\
    \ != 0) {\n        long r = a % b;\n        a = b;\n        b = r;\n    }\n  \
    \  return a;\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a == b) {\n        return a;\n    }\n    if\
    \ (a > b) {\n        return greatest_common_divisor(a - b, b);\n    }\n    return\
    \ greatest_common_divisor(a, b - a);\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n\tif (a == 0) {\n\t\treturn b;\n\t}\n\tif (b == 0) {\n\t\treturn\
    \ a;\n\t}\n\tif (a > b) {\n\t\treturn greatest_common_divisor(a % b, b);\n\t}\n\
    \treturn greatest_common_divisor(a, b % a);\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a > 0 && b > 0);\n    if (a < b) {\n        std::swap(a,\
    \ b);\n    }\n    while (b != 0) {\n        long r = a % b;\n        a = b;\n\
    \        b = r;\n    }\n    return a;\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    long gcd = 1;\n    long min = std::min(a, b);\n    for (long\
    \ i = 2; i <= min; i++) {\n        if (a % i == 0 && b % i == 0) {\n         \
    \   gcd = i;\n        }\n    }\n    return gcd;\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a > 0 && b > 0);\n    while (a != b) {\n        if\
    \ (a > b) {\n            a = a - b;\n        } else {\n            b = b - a;\n\
    \        }\n    }\n    return a;\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a > 0 && b > 0);\n    while (b != 0) {\n        long\
    \ t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}\nint main()\
    \ {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a > b)\n        return greatest_common_divisor(a % b, b);\n    else\n\
    \        return greatest_common_divisor(a, b % a);\n}\nint main() {\n    auto\
    \ candidate = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n\
    \    assert(candidate((10), (15)) == (5));\n    assert(candidate((49), (14)) ==\
    \ (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a > 0 && b > 0);\n    if (a < b) {\n        std::swap(a,\
    \ b);\n    }\n    while (b != 0) {\n        long r = a % b;\n        a = b;\n\
    \        b = r;\n    }\n    return a;\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a > b)\n        return greatest_common_divisor(a % b, b);\n    else\n\
    \        return greatest_common_divisor(a, b % a);\n}\nint main() {\n    auto\
    \ candidate = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n\
    \    assert(candidate((10), (15)) == (5));\n    assert(candidate((49), (14)) ==\
    \ (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a >= 0 && b >= 0);\n    if (a == 0) return b;\n   \
    \ if (b == 0) return a;\n    if (a > b) return greatest_common_divisor(a % b,\
    \ b);\n    else return greatest_common_divisor(a, b % a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a < b) {\n        std::swap(a, b);\n    }\n    if (b ==\
    \ 0) {\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n\
    }\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a >= 0 && b >= 0);\n    if (a == 0) {\n        return\
    \ b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if (a > b) {\n \
    \       return greatest_common_divisor(a % b, b);\n    } else {\n        return\
    \ greatest_common_divisor(a, b % a);\n    }\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a >= 0 && b >= 0);\n    if (a == 0) {\n        return\
    \ b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if (a > b) {\n \
    \       return greatest_common_divisor(a % b, b);\n    } else {\n        return\
    \ greatest_common_divisor(a, b % a);\n    }\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a-b,\
    \ b);\n    return greatest_common_divisor(a, b-a);\n}\nint main() {\n    auto\
    \ candidate = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n\
    \    assert(candidate((10), (15)) == (5));\n    assert(candidate((49), (14)) ==\
    \ (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    // TODO: implement this function\n    if(a==0)\n        return\
    \ b;\n    if(b==0)\n        return a;\n    if(a==b)\n        return a;\n    if(a>b)\n\
    \        return greatest_common_divisor(a-b,b);\n    else\n        return greatest_common_divisor(a,b-a);\n\
    }\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a > b)\n        return greatest_common_divisor(a % b, b);\n    else\n\
    \        return greatest_common_divisor(a, b % a);\n}\nint main() {\n    auto\
    \ candidate = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n\
    \    assert(candidate((10), (15)) == (5));\n    assert(candidate((49), (14)) ==\
    \ (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a >= 0 && b >= 0);\n    if (a == 0) {\n        return\
    \ b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if (a > b) {\n \
    \       return greatest_common_divisor(a % b, b);\n    } else {\n        return\
    \ greatest_common_divisor(a, b % a);\n    }\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    long c;\n    while (a != 0) {\n        c = a;\n        a =\
    \ b % a;\n        b = c;\n    }\n    return b;\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a < b) {\n        std::swap(a, b);\n    }\n    while (b\
    \ != 0) {\n        long r = a % b;\n        a = b;\n        b = r;\n    }\n  \
    \  return a;\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    // TODO: implement this function\n    if(a==0)\n        return\
    \ b;\n    return greatest_common_divisor(b%a,a);\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    long c;\n    while (a != 0) {\n        c = a;\n        a =\
    \ b % a;\n        b = c;\n    }\n    return b;\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a > 0 && b > 0);\n    while (a != b) {\n        if\
    \ (a > b) {\n            a = a - b;\n        } else {\n            b = b - a;\n\
    \        }\n    }\n    return a;\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0 || b == 0) {\n        return 0;\n    }\n    if\
    \ (a == b) {\n        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ - b, b);\n    }\n    return greatest_common_divisor(a, b - a);\n}\nint main()\
    \ {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a == b) {\n        return a;\n    }\n    if\
    \ (a > b) {\n        return greatest_common_divisor(a - b, b);\n    }\n    return\
    \ greatest_common_divisor(a, b - a);\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    long r;\n    while (b != 0) {\n        r = a % b;\n      \
    \  a = b;\n        b = r;\n    }\n    return a;\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n  // TODO: implement this function\n  if(a==0 || b==0)\n  {\n\
    \    return 0;\n  }\n  if(a==b)\n  {\n    return a;\n  }\n  if(a>b)\n  {\n   \
    \ return greatest_common_divisor(a-b,b);\n  }\n  return greatest_common_divisor(a,b-a);\n\
    }\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a >= 0 && b >= 0);\n    if (a == 0) return b;\n   \
    \ if (b == 0) return a;\n    if (a > b) return greatest_common_divisor(a % b,\
    \ b);\n    else return greatest_common_divisor(a, b % a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n\tassert(a >= 0 && b >= 0);\n\tif (a == 0) {\n\t\treturn b;\n\t\
    }\n\tif (b == 0) {\n\t\treturn a;\n\t}\n\tif (a > b) {\n\t\treturn greatest_common_divisor(a\
    \ % b, b);\n\t}\n\treturn greatest_common_divisor(a, b % a);\n}\nint main() {\n\
    \    auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0 || b == 0)\n        return 0;\n    if (a == b)\n\
    \        return a;\n    if (a > b)\n        return greatest_common_divisor(a -\
    \ b, b);\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n   \
    \ auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7)) ==\
    \ (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    long c;\n    while (a != 0) {\n        c = a;\n        a =\
    \ b % a;\n        b = c;\n    }\n    return b;\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a == b) {\n        return a;\n    }\n    if\
    \ (a > b) {\n        return greatest_common_divisor(a - b, b);\n    }\n    return\
    \ greatest_common_divisor(a, b - a);\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    // TODO: implement this function\n    // Hint: Euclidean algorithm\n\
    \    if(a==0)\n        return b;\n    return greatest_common_divisor(b%a,a);\n\
    }\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a == b) {\n        return a;\n    }\n    if\
    \ (a > b) {\n        return greatest_common_divisor(a - b, b);\n    }\n    return\
    \ greatest_common_divisor(a, b - a);\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    // TODO: implement this function\n    long gcd = 1;\n    for\
    \ (long i = 1; i <= a && i <= b; i++) {\n        if (a % i == 0 && b % i == 0)\
    \ {\n            gcd = i;\n        }\n    }\n    return gcd;\n}\nint main() {\n\
    \    auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a < b) {\n        std::swap(a, b);\n    }\n    while (b\
    \ != 0) {\n        long r = a % b;\n        a = b;\n        b = r;\n    }\n  \
    \  return a;\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a >= 0 && b >= 0);\n    if (a == 0 || b == 0) {\n \
    \       return a + b;\n    }\n    while (a != b) {\n        if (a > b) {\n   \
    \         a = a - b;\n        } else {\n            b = b - a;\n        }\n  \
    \  }\n    return a;\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n\tif (a == 0 || b == 0) {\n\t\treturn 0;\n\t}\n\tif (a == b) {\n\
    \t\treturn a;\n\t}\n\tif (a > b) {\n\t\treturn greatest_common_divisor(a - b,\
    \ b);\n\t}\n\treturn greatest_common_divisor(a, b - a);\n}\nint main() {\n   \
    \ auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7)) ==\
    \ (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a >= 0 && b >= 0);\n    if (a == 0 || b == 0) {\n \
    \       return a + b;\n    }\n    return greatest_common_divisor(b, a % b);\n\
    }\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    // TODO: implement this function\n    long gcd = 1;\n    for\
    \ (long i = 1; i <= a && i <= b; i++) {\n        if (a % i == 0 && b % i == 0)\
    \ {\n            gcd = i;\n        }\n    }\n    return gcd;\n}\nint main() {\n\
    \    auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    // TODO: Write your code here\n    if(a==0)\n        return\
    \ b;\n    if(b==0)\n        return a;\n    if(a==b)\n        return a;\n    if(a>b)\n\
    \        return greatest_common_divisor(a-b,b);\n    return greatest_common_divisor(a,b-a);\n\
    }\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a >= 0 && b >= 0);\n    if (a == 0) {\n        return\
    \ b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if (a > b) {\n \
    \       return greatest_common_divisor(a % b, b);\n    } else {\n        return\
    \ greatest_common_divisor(a, b % a);\n    }\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a == b) {\n        return a;\n    }\n    if\
    \ (a > b) {\n        return greatest_common_divisor(a - b, b);\n    }\n    return\
    \ greatest_common_divisor(a, b - a);\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    long c;\n    while (a != 0) {\n        c = a; a = b%a;  b\
    \ = c;\n    }\n    return b;\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    long c;\n    while (a != 0) {\n        c = a;\n        a =\
    \ b % a;\n        b = c;\n    }\n    return b;\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a < b) {\n        std::swap(a, b);\n    }\n    while (b\
    \ != 0) {\n        long r = a % b;\n        a = b;\n        b = r;\n    }\n  \
    \  return a;\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a > b)\n        return greatest_common_divisor(a % b, b);\n    else\n\
    \        return greatest_common_divisor(a, b % a);\n}\nint main() {\n    auto\
    \ candidate = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n\
    \    assert(candidate((10), (15)) == (5));\n    assert(candidate((49), (14)) ==\
    \ (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a >= 0 && b >= 0);\n    if (a == 0) {\n        return\
    \ b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if (a > b) {\n \
    \       return greatest_common_divisor(a % b, b);\n    } else {\n        return\
    \ greatest_common_divisor(a, b % a);\n    }\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a > 0 && b > 0);\n    if (a < b) {\n        std::swap(a,\
    \ b);\n    }\n    while (b != 0) {\n        long r = a % b;\n        a = b;\n\
    \        b = r;\n    }\n    return a;\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    return greatest_common_divisor(b\
    \ % a, a);\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n \
    \   assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n\
    \    assert(candidate((49), (14)) == (7));\n    assert(candidate((144), (60))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a >= 0 && b >= 0);\n    if (a == 0) {\n        return\
    \ b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if (a > b) {\n \
    \       return greatest_common_divisor(a % b, b);\n    } else {\n        return\
    \ greatest_common_divisor(a, b % a);\n    }\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a == b) {\n        return a;\n    }\n    if\
    \ (a > b) {\n        return greatest_common_divisor(a - b, b);\n    }\n    return\
    \ greatest_common_divisor(a, b - a);\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    // TODO: implement this function\n    if(a<b)\n    {\n   \
    \     long temp=a;\n        a=b;\n        b=temp;\n    }\n    if(b==0)\n    {\n\
    \        return a;\n    }\n    else\n    {\n        return greatest_common_divisor(b,a%b);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    return greatest_common_divisor(b\
    \ % a, a);\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n \
    \   assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n\
    \    assert(candidate((49), (14)) == (7));\n    assert(candidate((144), (60))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a < b) {\n        std::swap(a, b);\n    }\n    if (b ==\
    \ 0) {\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n\
    }\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    // TODO: implement this function\n    if(a==0)\n        return\
    \ b;\n    if(b==0)\n        return a;\n    if(a==b)\n        return a;\n    if(a>b)\n\
    \        return greatest_common_divisor(a-b,b);\n    return greatest_common_divisor(a,b-a);\n\
    }\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a >= 0 && b >= 0);\n    if (a == 0) return b;\n   \
    \ if (b == 0) return a;\n    if (a == b) return a;\n    if (a > b) return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a >= 0 && b >= 0);\n    if (a == 0) {\n        return\
    \ b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if (a >= b) {\n\
    \        return greatest_common_divisor(a % b, b);\n    }\n    return greatest_common_divisor(a,\
    \ b % a);\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n  \
    \  assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n\
    \    assert(candidate((49), (14)) == (7));\n    assert(candidate((144), (60))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0 || b == 0) {\n        return a + b;\n    }\n  \
    \  return greatest_common_divisor(b, a % b);\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    long c;\n    while (a != 0) {\n        c = a;\n        a =\
    \ b % a;\n        b = c;\n    }\n    return b;\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    long c;\n    while (a != 0) {\n        c = a;\n        a =\
    \ b % a;\n        b = c;\n    }\n    return b;\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a > 0 && b > 0);\n    if (a < b) {\n        std::swap(a,\
    \ b);\n    }\n    while (b != 0) {\n        long r = a % b;\n        a = b;\n\
    \        b = r;\n    }\n    return a;\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    assert(a > 0 && b > 0);\n    if (a < b) {\n        std::swap(a,\
    \ b);\n    }\n    while (b > 0) {\n        long r = a % b;\n        a = b;\n \
    \       b = r;\n    }\n    return a;\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    // TODO: implement me\n    return 0;\n}\nint main() {\n  \
    \  auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7)) ==\
    \ (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: "tmp3lx1uxo8: /tmp/tmp3lx1uxo8.cpp:14: int main(): Assertion `candidate((3),\
    \ (7)) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a == b) {\n        return a;\n    }\n    if\
    \ (a > b) {\n        return greatest_common_divisor(a - b, b);\n    }\n    return\
    \ greatest_common_divisor(a, b - a);\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    long c;\n    while (a != 0) {\n        c = a;\n        a =\
    \ b % a;\n        b = c;\n    }\n    return b;\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a == b)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(a\
    \ - b, b);\n    return greatest_common_divisor(a, b - a);\n}\nint main() {\n \
    \   auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7))\
    \ == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a == b) {\n        return a;\n    }\n    if\
    \ (a > b) {\n        return greatest_common_divisor(a - b, b);\n    }\n    return\
    \ greatest_common_divisor(a, b - a);\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a < b) {\n        return greatest_common_divisor(b, a);\n\
    \    }\n    if (b == 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n  \
    \  assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n\
    \    assert(candidate((49), (14)) == (7));\n    assert(candidate((144), (60))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0)\n        return b;\n    if (b == 0)\n        return\
    \ a;\n    if (a > b)\n        return greatest_common_divisor(a % b, b);\n    else\n\
    \        return greatest_common_divisor(a, b % a);\n}\nint main() {\n    auto\
    \ candidate = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n\
    \    assert(candidate((10), (15)) == (5));\n    assert(candidate((49), (14)) ==\
    \ (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a == b) {\n        return a;\n    }\n    if\
    \ (a > b) {\n        return greatest_common_divisor(a - b, b);\n    }\n    return\
    \ greatest_common_divisor(a, b - a);\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a == b) {\n        return a;\n    }\n    if\
    \ (a > b) {\n        return greatest_common_divisor(a - b, b);\n    }\n    return\
    \ greatest_common_divisor(a, b - a);\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    // TODO: implement this function\n    if(a==0)\n        return\
    \ b;\n    if(b==0)\n        return a;\n    if(a==b)\n        return a;\n    if(a>b)\n\
    \        return greatest_common_divisor(a-b,b);\n    return greatest_common_divisor(a,b-a);\n\
    }\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0 || b == 0) {\n        return 0;\n    }\n    if\
    \ (a == b) {\n        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ - b, b);\n    }\n    return greatest_common_divisor(a, b - a);\n}\nint main()\
    \ {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a == b) {\n        return a;\n    }\n    if\
    \ (a > b) {\n        return greatest_common_divisor(a - b, b);\n    }\n    return\
    \ greatest_common_divisor(a, b - a);\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n\
    \    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) ==\
    \ (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    long c;\n    while (a != 0) {\n        c = a;\n        a =\
    \ b % a;\n        b = c;\n    }\n    return b;\n}\nint main() {\n    auto candidate\
    \ = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10),\
    \ (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144),\
    \ (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
    \ divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n\
    // >>> greatest_common_divisor(25, 15)\n// 5\nlong greatest_common_divisor(long\
    \ a, long b) {\n    // TODO: implement this function\n    if(a==0)\n        return\
    \ b;\n    if(b==0)\n        return a;\n    if(a==b)\n        return a;\n    if(a>b)\n\
    \        return greatest_common_divisor(a-b,b);\n    return greatest_common_divisor(a,b-a);\n\
    }\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
    \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
    \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
