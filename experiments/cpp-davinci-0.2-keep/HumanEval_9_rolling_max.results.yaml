name: HumanEval_9_rolling_max
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= numbers.size() - 1) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - numbers.size() + 1) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpf98j6tl4: /tmp/tmpf98j6tl4.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmtd2o33r: /tmp/tmpmtd2o33r.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpv_1sv3gx: /tmp/tmpv_1sv3gx.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqi3aw9g1: /tmp/tmpqi3aw9g1.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2lzymc5e: /tmp/tmp2lzymc5e.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_elements.empty() && numbers[i] >= numbers[max_elements.back()])\
    \ {\n            max_elements.pop_back();\n        }\n        max_elements.push_back(i);\n\
    \        if (max_elements.front() <= i - 3) {\n            max_elements.pop_front();\n\
    \        }\n        result.push_back(numbers[max_elements.front()]);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8wida1ls: /tmp/tmp8wida1ls.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::stack<long> stack;\n    for (auto number : numbers) {\n  \
    \      while (!stack.empty() && stack.top() < number) {\n            stack.pop();\n\
    \        }\n        stack.push(number);\n        result.push_back(stack.top());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmsqhvp_u: /tmp/tmpmsqhvp_u.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpi4o1uh25: /tmp/tmpi4o1uh25.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpn3lbhmc4: /tmp/tmpn3lbhmc4.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpp0eg1wxy: /tmp/tmpp0eg1wxy.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbbsksjb5: /tmp/tmpbbsksjb5.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmplwmpto_l: /tmp/tmplwmpto_l.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (auto n : numbers) {\n        while\
    \ (!dq.empty() && dq.back() < n) {\n            dq.pop_back();\n        }\n  \
    \      dq.push_back(n);\n        result.push_back(dq.front());\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (long\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3xz1payo: /tmp/tmp3xz1payo.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> q;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!q.empty() && numbers[i] >= numbers[q.back()]) {\n       \
    \     q.pop_back();\n        }\n        q.push_back(i);\n        if (i - q.front()\
    \ >= 3) {\n            q.pop_front();\n        }\n        result.push_back(numbers[q.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7almw_0c: /tmp/tmp7almw_0c.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwl9n7fwr: /tmp/tmpwl9n7fwr.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpp8wmtoo3: /tmp/tmpp8wmtoo3.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::stack<long> stack;\n    for (auto number : numbers) {\n  \
    \      while (!stack.empty() && stack.top() < number) {\n            stack.pop();\n\
    \        }\n        stack.push(number);\n        result.push_back(stack.top());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzypgwxka: /tmp/tmpzypgwxka.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i - dq.front()\
    \ >= 3) {\n            dq.pop_front();\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_0tqodny: /tmp/tmp_0tqodny.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp18nh5k0e: /tmp/tmp18nh5k0e.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    for (auto i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push_back(max);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3hkfvgdq: /tmp/tmp3hkfvgdq.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp11cx3cbj: /tmp/tmp11cx3cbj.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6aoclqbi: /tmp/tmp6aoclqbi.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpym4z0fmy: /tmp/tmpym4z0fmy.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_value = numbers[0];\n    result.push_back(max_value);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_value)\
    \ {\n            max_value = numbers[i];\n        }\n        result.push_back(max_value);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push_back(max);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4fu6xke7: /tmp/tmp4fu6xke7.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7q6vtpim: /tmp/tmp7q6vtpim.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbex9z2sj: /tmp/tmpbex9z2sj.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpq59ywhob: /tmp/tmpq59ywhob.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i - dq.front()\
    \ >= 3) {\n            dq.pop_front();\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpd4u85869: /tmp/tmpd4u85869.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpw0ds3gkh: /tmp/tmpw0ds3gkh.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvydjfb_h: /tmp/tmpvydjfb_h.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::stack<long> stack;\n    for (auto number : numbers) {\n  \
    \      while (!stack.empty() && stack.top() < number) {\n            stack.pop();\n\
    \        }\n        stack.push(number);\n        result.push_back(stack.top());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpkeedak0v: /tmp/tmpkeedak0v.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmph8xhipnz: /tmp/tmph8xhipnz.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp977lx5ud: /tmp/tmp977lx5ud.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        long number = numbers[i];\n        while (!window.empty() &&\
    \ window.back() < number) {\n            window.pop_back();\n        }\n     \
    \   window.push_back(number);\n        if (i >= window.size() - 1) {\n       \
    \     result.push_back(window.front());\n            if (window.front() == numbers[i\
    \ - window.size() + 1]) {\n                window.pop_front();\n            }\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmptp5ni9qi: /tmp/tmptp5ni9qi.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmprrnbdeeu: /tmp/tmprrnbdeeu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> q;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!q.empty() && numbers[i] >= numbers[q.back()]) {\n       \
    \     q.pop_back();\n        }\n        q.push_back(i);\n        if (i >= 2) {\n\
    \            result.push_back(numbers[q.front()]);\n        }\n        if (q.front()\
    \ == i - 2) {\n            q.pop_front();\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpamyssdh1: /tmp/tmpamyssdh1.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0jxqd8tg: /tmp/tmp0jxqd8tg.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpa09lorjy: /tmp/tmpa09lorjy.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpm34koisd: /tmp/tmpm34koisd.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdch8np7b: /tmp/tmpdch8np7b.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 3) {\n            result.push_back(numbers[dq.front()]);\n            if (dq.front()\
    \ == i - 3) {\n                dq.pop_front();\n            }\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4ji7agrw: /tmp/tmp4ji7agrw.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        if (dq.empty()) {\n            dq.push_back(i);\n        } else {\n\
    \            while (!dq.empty() && numbers[dq.back()] < numbers[i]) {\n      \
    \          dq.pop_back();\n            }\n            dq.push_back(i);\n     \
    \   }\n        if (i - dq.front() >= 3) {\n            dq.pop_front();\n     \
    \   }\n        result.push_back(numbers[dq.front()]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmppruy2z1l: /tmp/tmppruy2z1l.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        if (dq.empty()) {\n            dq.push_back(i);\n        } else {\n\
    \            while (!dq.empty() && numbers[dq.back()] < numbers[i]) {\n      \
    \          dq.pop_back();\n            }\n            dq.push_back(i);\n     \
    \   }\n        result.push_back(numbers[dq.front()]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> deque;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!deque.empty() && numbers[deque.back()] <= numbers[i])\
    \ {\n            deque.pop_back();\n        }\n        deque.push_back(i);\n \
    \       if (deque.front() <= i - numbers.size()) {\n            deque.pop_front();\n\
    \        }\n        result.push_back(numbers[deque.front()]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0pefauxs: /tmp/tmp0pefauxs.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpj1qsll6x: /tmp/tmpj1qsll6x.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpcbtfxje4: /tmp/tmpcbtfxje4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7im1qf5l: /tmp/tmp7im1qf5l.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpf1kxnh3u: /tmp/tmpf1kxnh3u.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpb6kxvojc: /tmp/tmpb6kxvojc.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmptonvucjk: /tmp/tmptonvucjk.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_deque;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_deque.empty() && numbers[i] >= numbers[max_deque.back()])\
    \ {\n            max_deque.pop_back();\n        }\n        max_deque.push_back(i);\n\
    \        if (i - max_deque.front() >= 3) {\n            max_deque.pop_front();\n\
    \        }\n        result.push_back(numbers[max_deque.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmporw1qogb: /tmp/tmporw1qogb.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpk8kde47_: /tmp/tmpk8kde47_.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjaz7fuve: /tmp/tmpjaz7fuve.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmppj0fpevt: /tmp/tmppj0fpevt.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> q;\n    for (auto i = 0; i < numbers.size(); i++)\
    \ {\n        while (!q.empty() && numbers[q.back()] <= numbers[i]) {\n       \
    \     q.pop_back();\n        }\n        q.push_back(i);\n        if (q.front()\
    \ == i - 3) {\n            q.pop_front();\n        }\n        result.push_back(numbers[q.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpygedv4im: /tmp/tmpygedv4im.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i - dq.front()\
    \ >= 3) {\n            dq.pop_front();\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6bq0szxp: /tmp/tmp6bq0szxp.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpnfe4u3li: /tmp/tmpnfe4u3li.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgyc6n9qm: /tmp/tmpgyc6n9qm.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_numbers;\n    for (auto number : numbers)\
    \ {\n        while (!max_numbers.empty() && max_numbers.back() < number) {\n \
    \           max_numbers.pop_back();\n        }\n        max_numbers.push_back(number);\n\
    \        result.push_back(max_numbers.front());\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp306y48fi: /tmp/tmp306y48fi.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (auto i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9zdwwrwl: /tmp/tmp9zdwwrwl.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    for (auto number : numbers) {\n   \
    \     if (number > max) {\n            max = number;\n        }\n        result.push_back(max);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmps1zih8rg: /tmp/tmps1zih8rg.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push_back(max);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpy4szs2uw: /tmp/tmpy4szs2uw.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i - dq.front()\
    \ >= 3) {\n            dq.pop_front();\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpui69te9q: /tmp/tmpui69te9q.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpccv0xa27: /tmp/tmpccv0xa27.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = 0;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmphypo779u: /tmp/tmphypo779u.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5v3oxc3y: /tmp/tmp5v3oxc3y.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (auto number : numbers) {\n \
    \       while (!window.empty() && window.back() < number) {\n            window.pop_back();\n\
    \        }\n        window.push_back(number);\n        result.push_back(window.front());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyzbqk9ti: /tmp/tmpyzbqk9ti.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::stack<long> stack;\n    for (auto number : numbers) {\n  \
    \      while (!stack.empty() && stack.top() < number) {\n            stack.pop();\n\
    \        }\n        stack.push(number);\n        result.push_back(stack.top());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmprel00az1: /tmp/tmprel00az1.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpn_8kncki: /tmp/tmpn_8kncki.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp21r96tay: /tmp/tmp21r96tay.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4y1mfxcy: /tmp/tmp4y1mfxcy.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6dhg48ed: /tmp/tmp6dhg48ed.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmppq53qokd: /tmp/tmppq53qokd.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ max_numbers;\n    long max = 0;\n    for (auto number : numbers) {\n       \
    \ if (number > max) {\n            max = number;\n        }\n        max_numbers.push_back(max);\n\
    \    }\n    return max_numbers;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_val = numbers[0];\n    result.push_back(max_val);\n  \
    \  for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_val)\
    \ {\n            max_val = numbers[i];\n        }\n        result.push_back(max_val);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = 0;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        long number = numbers[i];\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmppsqtxy2u: /tmp/tmppsqtxy2u.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    for (auto n : numbers) {\n \
    \       max_so_far = std::max(max_so_far, n);\n        result.push_back(max_so_far);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ - dq.front() >= numbers.size()) {\n            dq.pop_front();\n        }\n\
    \        result.push_back(numbers[dq.front()]);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5j3z_7as: /tmp/tmp5j3z_7as.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (max_queue.empty()) {\n            max_queue.push_back(i);\n\
    \        } else {\n            while (!max_queue.empty() && numbers[max_queue.back()]\
    \ < numbers[i]) {\n                max_queue.pop_back();\n            }\n    \
    \        max_queue.push_back(i);\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpm1951qq_: /tmp/tmpm1951qq_.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> deque;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!deque.empty() && numbers[i] >= numbers[deque.back()])\
    \ {\n            deque.pop_back();\n        }\n        deque.push_back(i);\n \
    \       if (i >= 2) {\n            result.push_back(numbers[deque.front()]);\n\
    \            if (deque.front() == i - 2) {\n                deque.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  stdout: ''
  stderr: "tmptttfomjx: /tmp/tmptttfomjx.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgvj05zha: /tmp/tmpgvj05zha.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpydibuqc1: /tmp/tmpydibuqc1.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_iwln6c1: /tmp/tmp_iwln6c1.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i - dq.front()\
    \ >= 3) {\n            dq.pop_front();\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyqg879lq: /tmp/tmpyqg879lq.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmptwx66cdh: /tmp/tmptwx66cdh.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i - dq.front()\
    \ >= numbers.size()) {\n            dq.pop_front();\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::stack<long> s;\n    for (long i = 0; i < numbers.size(); i++)\
    \ {\n        while (!s.empty() && s.top() < numbers[i]) {\n            s.pop();\n\
    \        }\n        s.push(numbers[i]);\n        result.push_back(s.top());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpidm2pnh8: /tmp/tmpidm2pnh8.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpx8015as5: /tmp/tmpx8015as5.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpguhsagvy: /tmp/tmpguhsagvy.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ - dq.front() >= numbers.size()) {\n            dq.pop_front();\n        }\n\
    \        result.push_back(numbers[dq.front()]);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!window.empty() && window.back() < numbers[i]) {\n  \
    \          window.pop_back();\n        }\n        window.push_back(numbers[i]);\n\
    \        if (i >= 3) {\n            if (window.front() == numbers[i - 3]) {\n\
    \                window.pop_front();\n            }\n        }\n        result.push_back(window.front());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1wccj4bq: /tmp/tmp1wccj4bq.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpukpf3o08: /tmp/tmpukpf3o08.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = 0;\n    for (auto number : numbers) {\n     \
    \   if (number > max_so_far) {\n            max_so_far = number;\n        }\n\
    \        result.push_back(max_so_far);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpoulhjics: /tmp/tmpoulhjics.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpb0443_rx: /tmp/tmpb0443_rx.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwl0hmnov: /tmp/tmpwl0hmnov.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_value = numbers[0];\n    for (auto it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        if (*it > max_value) {\n            max_value\
    \ = *it;\n        }\n        result.push_back(max_value);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        long number = numbers[i];\n        while (!max_queue.empty()\
    \ && max_queue.front() < i - 1) {\n            max_queue.pop_front();\n      \
    \  }\n        while (!max_queue.empty() && numbers[max_queue.back()] < number)\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        result.push_back(numbers[max_queue.front()]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpd6unhctb: /tmp/tmpd6unhctb.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpo9e3_vhq: /tmp/tmpo9e3_vhq.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_deque;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_deque.empty() && numbers[i] >= numbers[max_deque.back()])\
    \ {\n            max_deque.pop_back();\n        }\n        max_deque.push_back(i);\n\
    \        if (i - max_deque.front() >= 3) {\n            max_deque.pop_front();\n\
    \        }\n        result.push_back(numbers[max_deque.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmppxyfcw4o: /tmp/tmppxyfcw4o.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpybrgmlx7: /tmp/tmpybrgmlx7.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::stack<long> stack;\n    for (auto number : numbers) {\n  \
    \      while (!stack.empty() && stack.top() < number) {\n            stack.pop();\n\
    \        }\n        stack.push(number);\n        result.push_back(stack.top());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5v4d1roj: /tmp/tmp5v4d1roj.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    if (numbers.size() == 0) {\n        return result;\n    }\n   \
    \ long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far) {\n\
    \            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::stack<long> stack;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!stack.empty() && numbers[stack.top()] < numbers[i])\
    \ {\n            stack.pop();\n        }\n        if (stack.empty()) {\n     \
    \       result.push_back(numbers[i]);\n        } else {\n            result.push_back(numbers[stack.top()]);\n\
    \        }\n        stack.push(i);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpb9aw84dq: /tmp/tmpb9aw84dq.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpy6_on_q2: /tmp/tmpy6_on_q2.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_numbers;\n    for (auto number : numbers)\
    \ {\n        while (!max_numbers.empty() && max_numbers.back() < number) {\n \
    \           max_numbers.pop_back();\n        }\n        max_numbers.push_back(number);\n\
    \        result.push_back(max_numbers.front());\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (auto number : numbers) {\n \
    \       while (!window.empty() && window.back() < number) {\n            window.pop_back();\n\
    \        }\n        window.push_back(number);\n        result.push_back(window.front());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push_back(max);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> q;\n    for (long i = 0; i < numbers.size(); i++)\
    \ {\n        while (!q.empty() && numbers[q.back()] <= numbers[i]) {\n       \
    \     q.pop_back();\n        }\n        q.push_back(i);\n        if (q.front()\
    \ == i - 3) {\n            q.pop_front();\n        }\n        result.push_back(numbers[q.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgqhmrsz4: /tmp/tmpgqhmrsz4.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (auto i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmyse6fmn: /tmp/tmpmyse6fmn.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmppy867x3b: /tmp/tmppy867x3b.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbdt70033: /tmp/tmpbdt70033.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpio5_8par: /tmp/tmpio5_8par.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3m8vltk2: /tmp/tmp3m8vltk2.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpcp0ugzqe: /tmp/tmpcp0ugzqe.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!window.empty() && window.back() < numbers[i]) {\n  \
    \          window.pop_back();\n        }\n        window.push_back(numbers[i]);\n\
    \        if (i >= 2) {\n            result.push_back(window.front());\n      \
    \      if (window.front() == numbers[i - 2]) {\n                window.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  stdout: ''
  stderr: "tmpyk69ey0b: /tmp/tmpyk69ey0b.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i - dq.front()\
    \ >= 3) {\n            dq.pop_front();\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpi4308dwf: /tmp/tmpi4308dwf.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp96k9we6_: /tmp/tmp96k9we6_.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (size_t\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqydz587_: /tmp/tmpqydz587_.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    result.push_back(max_element);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n        }\n        result.push_back(max_element);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmptjvm9dcu: /tmp/tmptjvm9dcu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::stack<long> stack;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!stack.empty() && numbers[stack.top()] < numbers[i])\
    \ {\n            stack.pop();\n        }\n        if (stack.empty()) {\n     \
    \       result.push_back(numbers[i]);\n        } else {\n            result.push_back(numbers[stack.top()]);\n\
    \        }\n        stack.push(i);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpf4ro4cfy: /tmp/tmpf4ro4cfy.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmplobxryex: /tmp/tmplobxryex.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyeicwofy: /tmp/tmpyeicwofy.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!window.empty() && window.front() <= i - numbers.size())\
    \ {\n            window.pop_front();\n        }\n        while (!window.empty()\
    \ && numbers[window.back()] <= numbers[i]) {\n            window.pop_back();\n\
    \        }\n        window.push_back(i);\n        result.push_back(numbers[window.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpk1emgm50: /tmp/tmpk1emgm50.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpk55ce2v5: /tmp/tmpk55ce2v5.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() == i - 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpi1s17xqg: /tmp/tmpi1s17xqg.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpl3p932ys: /tmp/tmpl3p932ys.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpk_ieoq67: /tmp/tmpk_ieoq67.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpd1z6jh0t: /tmp/tmpd1z6jh0t.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (auto i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpssmnfjio: /tmp/tmpssmnfjio.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_number = 0;\n    for (auto number : numbers) {\n     \
    \   if (number > max_number) {\n            max_number = number;\n        }\n\
    \        result.push_back(max_number);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> maximums;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!maximums.empty() && numbers[maximums.back()] <= numbers[i])\
    \ {\n            maximums.pop_back();\n        }\n        maximums.push_back(i);\n\
    \        if (maximums.front() <= i - 3) {\n            maximums.pop_front();\n\
    \        }\n        result.push_back(numbers[maximums.front()]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpc19augjw: /tmp/tmpc19augjw.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp77xoiby2: /tmp/tmp77xoiby2.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= numbers.size() - 1) {\n            result.push_back(numbers[dq.front()]);\n\
    \        }\n        if (dq.front() == i - numbers.size() + 1) {\n            dq.pop_front();\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpkdnu_2d7: /tmp/tmpkdnu_2d7.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp35xlbbk7: /tmp/tmp35xlbbk7.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpb7215wbk: /tmp/tmpb7215wbk.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6tvny45z: /tmp/tmp6tvny45z.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpry6xlv5f: /tmp/tmpry6xlv5f.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_elements.empty() && numbers[i] >= numbers[max_elements.back()])\
    \ {\n            max_elements.pop_back();\n        }\n        max_elements.push_back(i);\n\
    \        if (max_elements.front() <= i - 3) {\n            max_elements.pop_front();\n\
    \        }\n        result.push_back(numbers[max_elements.front()]);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpw_rut0uc: /tmp/tmpw_rut0uc.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::stack<long> stack;\n    for (auto number : numbers) {\n  \
    \      while (!stack.empty() && stack.top() < number) {\n            stack.pop();\n\
    \        }\n        stack.push(number);\n        result.push_back(stack.top());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp28mo678e: /tmp/tmp28mo678e.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp83u5ijr5: /tmp/tmp83u5ijr5.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp95cq_lyy: /tmp/tmp95cq_lyy.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpuhiq_38z: /tmp/tmpuhiq_38z.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpr7j6kbli: /tmp/tmpr7j6kbli.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpl759535n: /tmp/tmpl759535n.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (auto n : numbers) {\n        while\
    \ (!dq.empty() && dq.back() < n) {\n            dq.pop_back();\n        }\n  \
    \      dq.push_back(n);\n        result.push_back(dq.front());\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (long\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvwqkvpj0: /tmp/tmpvwqkvpj0.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> q;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!q.empty() && numbers[i] >= numbers[q.back()]) {\n       \
    \     q.pop_back();\n        }\n        q.push_back(i);\n        if (i - q.front()\
    \ >= 3) {\n            q.pop_front();\n        }\n        result.push_back(numbers[q.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdlc4wpoy: /tmp/tmpdlc4wpoy.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqn1_96jf: /tmp/tmpqn1_96jf.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwrivhhxf: /tmp/tmpwrivhhxf.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::stack<long> stack;\n    for (auto number : numbers) {\n  \
    \      while (!stack.empty() && stack.top() < number) {\n            stack.pop();\n\
    \        }\n        stack.push(number);\n        result.push_back(stack.top());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpo32210t_: /tmp/tmpo32210t_.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i - dq.front()\
    \ >= 3) {\n            dq.pop_front();\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwkcwxjw9: /tmp/tmpwkcwxjw9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_1kzw0pw: /tmp/tmp_1kzw0pw.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    for (auto i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push_back(max);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqxmvgnfv: /tmp/tmpqxmvgnfv.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzf68p0kd: /tmp/tmpzf68p0kd.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmppmuo_87b: /tmp/tmppmuo_87b.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjxdg8ror: /tmp/tmpjxdg8ror.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_value = numbers[0];\n    result.push_back(max_value);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_value)\
    \ {\n            max_value = numbers[i];\n        }\n        result.push_back(max_value);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push_back(max);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpelp1hgy5: /tmp/tmpelp1hgy5.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp05pe_jsx: /tmp/tmp05pe_jsx.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4skb53zs: /tmp/tmp4skb53zs.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbej8tr8g: /tmp/tmpbej8tr8g.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i - dq.front()\
    \ >= 3) {\n            dq.pop_front();\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgr53c955: /tmp/tmpgr53c955.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpb0rvl1h2: /tmp/tmpb0rvl1h2.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp625bgrri: /tmp/tmp625bgrri.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::stack<long> stack;\n    for (auto number : numbers) {\n  \
    \      while (!stack.empty() && stack.top() < number) {\n            stack.pop();\n\
    \        }\n        stack.push(number);\n        result.push_back(stack.top());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9wlorsbp: /tmp/tmp9wlorsbp.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0982gy0x: /tmp/tmp0982gy0x.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxwzjhoqn: /tmp/tmpxwzjhoqn.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        long number = numbers[i];\n        while (!window.empty() &&\
    \ window.back() < number) {\n            window.pop_back();\n        }\n     \
    \   window.push_back(number);\n        if (i >= window.size() - 1) {\n       \
    \     result.push_back(window.front());\n            if (window.front() == numbers[i\
    \ - window.size() + 1]) {\n                window.pop_front();\n            }\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxdklqn1h: /tmp/tmpxdklqn1h.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjyzoaaay: /tmp/tmpjyzoaaay.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> q;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!q.empty() && numbers[i] >= numbers[q.back()]) {\n       \
    \     q.pop_back();\n        }\n        q.push_back(i);\n        if (i >= 2) {\n\
    \            result.push_back(numbers[q.front()]);\n        }\n        if (q.front()\
    \ == i - 2) {\n            q.pop_front();\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmplcfmq6ey: /tmp/tmplcfmq6ey.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2hv0cd2e: /tmp/tmp2hv0cd2e.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvk36n3_7: /tmp/tmpvk36n3_7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmtdq63c9: /tmp/tmpmtdq63c9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqkqy5_2a: /tmp/tmpqkqy5_2a.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 3) {\n            result.push_back(numbers[dq.front()]);\n            if (dq.front()\
    \ == i - 3) {\n                dq.pop_front();\n            }\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpntqqnxz8: /tmp/tmpntqqnxz8.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        if (dq.empty()) {\n            dq.push_back(i);\n        } else {\n\
    \            while (!dq.empty() && numbers[dq.back()] < numbers[i]) {\n      \
    \          dq.pop_back();\n            }\n            dq.push_back(i);\n     \
    \   }\n        if (i - dq.front() >= 3) {\n            dq.pop_front();\n     \
    \   }\n        result.push_back(numbers[dq.front()]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpa7i6x5t_: /tmp/tmpa7i6x5t_.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        if (dq.empty()) {\n            dq.push_back(i);\n        } else {\n\
    \            while (!dq.empty() && numbers[dq.back()] < numbers[i]) {\n      \
    \          dq.pop_back();\n            }\n            dq.push_back(i);\n     \
    \   }\n        result.push_back(numbers[dq.front()]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> deque;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!deque.empty() && numbers[deque.back()] <= numbers[i])\
    \ {\n            deque.pop_back();\n        }\n        deque.push_back(i);\n \
    \       if (deque.front() <= i - numbers.size()) {\n            deque.pop_front();\n\
    \        }\n        result.push_back(numbers[deque.front()]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_asaoqip: /tmp/tmp_asaoqip.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmps3uqdd1f: /tmp/tmps3uqdd1f.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgrzic5el: /tmp/tmpgrzic5el.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbjni2aeh: /tmp/tmpbjni2aeh.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpy9mx9stu: /tmp/tmpy9mx9stu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7xy25akw: /tmp/tmp7xy25akw.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpts6d7g51: /tmp/tmpts6d7g51.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_deque;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_deque.empty() && numbers[i] >= numbers[max_deque.back()])\
    \ {\n            max_deque.pop_back();\n        }\n        max_deque.push_back(i);\n\
    \        if (i - max_deque.front() >= 3) {\n            max_deque.pop_front();\n\
    \        }\n        result.push_back(numbers[max_deque.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpc6538058: /tmp/tmpc6538058.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpz4rj0sp_: /tmp/tmpz4rj0sp_.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmyuhq0hw: /tmp/tmpmyuhq0hw.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2m48r6u1: /tmp/tmp2m48r6u1.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> q;\n    for (auto i = 0; i < numbers.size(); i++)\
    \ {\n        while (!q.empty() && numbers[q.back()] <= numbers[i]) {\n       \
    \     q.pop_back();\n        }\n        q.push_back(i);\n        if (q.front()\
    \ == i - 3) {\n            q.pop_front();\n        }\n        result.push_back(numbers[q.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0l17uovg: /tmp/tmp0l17uovg.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i - dq.front()\
    \ >= 3) {\n            dq.pop_front();\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmprtz4nvcd: /tmp/tmprtz4nvcd.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4x36ub5a: /tmp/tmp4x36ub5a.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbrq3ak8e: /tmp/tmpbrq3ak8e.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_numbers;\n    for (auto number : numbers)\
    \ {\n        while (!max_numbers.empty() && max_numbers.back() < number) {\n \
    \           max_numbers.pop_back();\n        }\n        max_numbers.push_back(number);\n\
    \        result.push_back(max_numbers.front());\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_jdg_mrx: /tmp/tmp_jdg_mrx.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (auto i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7h60m3iy: /tmp/tmp7h60m3iy.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    for (auto number : numbers) {\n   \
    \     if (number > max) {\n            max = number;\n        }\n        result.push_back(max);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_yusr2ta: /tmp/tmp_yusr2ta.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push_back(max);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp07qx3t8v: /tmp/tmp07qx3t8v.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i - dq.front()\
    \ >= 3) {\n            dq.pop_front();\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0cty86tu: /tmp/tmp0cty86tu.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpokmd6_es: /tmp/tmpokmd6_es.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = 0;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7zka7h4k: /tmp/tmp7zka7h4k.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmph97wwy47: /tmp/tmph97wwy47.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (auto number : numbers) {\n \
    \       while (!window.empty() && window.back() < number) {\n            window.pop_back();\n\
    \        }\n        window.push_back(number);\n        result.push_back(window.front());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_svvmchk: /tmp/tmp_svvmchk.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::stack<long> stack;\n    for (auto number : numbers) {\n  \
    \      while (!stack.empty() && stack.top() < number) {\n            stack.pop();\n\
    \        }\n        stack.push(number);\n        result.push_back(stack.top());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpw01zbvi3: /tmp/tmpw01zbvi3.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjjw9u7aj: /tmp/tmpjjw9u7aj.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmponzx9i3t: /tmp/tmponzx9i3t.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpol3o1hk5: /tmp/tmpol3o1hk5.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpm5e2vlh4: /tmp/tmpm5e2vlh4.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpr657u0oq: /tmp/tmpr657u0oq.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ max_numbers;\n    long max = 0;\n    for (auto number : numbers) {\n       \
    \ if (number > max) {\n            max = number;\n        }\n        max_numbers.push_back(max);\n\
    \    }\n    return max_numbers;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_val = numbers[0];\n    result.push_back(max_val);\n  \
    \  for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_val)\
    \ {\n            max_val = numbers[i];\n        }\n        result.push_back(max_val);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = 0;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        long number = numbers[i];\n        while (!max_queue.empty()\
    \ && max_queue.back() < number) {\n            max_queue.pop_back();\n       \
    \ }\n        max_queue.push_back(number);\n        result.push_back(max_queue.front());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvsq1ggeh: /tmp/tmpvsq1ggeh.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    for (auto n : numbers) {\n \
    \       max_so_far = std::max(max_so_far, n);\n        result.push_back(max_so_far);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ - dq.front() >= numbers.size()) {\n            dq.pop_front();\n        }\n\
    \        result.push_back(numbers[dq.front()]);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpiav4qtxl: /tmp/tmpiav4qtxl.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (max_queue.empty()) {\n            max_queue.push_back(i);\n\
    \        } else {\n            while (!max_queue.empty() && numbers[max_queue.back()]\
    \ < numbers[i]) {\n                max_queue.pop_back();\n            }\n    \
    \        max_queue.push_back(i);\n        }\n        result.push_back(numbers[max_queue.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpn4n12zs7: /tmp/tmpn4n12zs7.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> deque;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!deque.empty() && numbers[i] >= numbers[deque.back()])\
    \ {\n            deque.pop_back();\n        }\n        deque.push_back(i);\n \
    \       if (i >= 2) {\n            result.push_back(numbers[deque.front()]);\n\
    \            if (deque.front() == i - 2) {\n                deque.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  stdout: ''
  stderr: "tmpl_e7eccn: /tmp/tmpl_e7eccn.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwwdr36n_: /tmp/tmpwwdr36n_.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpcmjto6cq: /tmp/tmpcmjto6cq.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6fgfpbmd: /tmp/tmp6fgfpbmd.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i - dq.front()\
    \ >= 3) {\n            dq.pop_front();\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5blddhnc: /tmp/tmp5blddhnc.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp37mbma0n: /tmp/tmp37mbma0n.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i - dq.front()\
    \ >= numbers.size()) {\n            dq.pop_front();\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::stack<long> s;\n    for (long i = 0; i < numbers.size(); i++)\
    \ {\n        while (!s.empty() && s.top() < numbers[i]) {\n            s.pop();\n\
    \        }\n        s.push(numbers[i]);\n        result.push_back(s.top());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpr8x_rbms: /tmp/tmpr8x_rbms.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmph6iifo4o: /tmp/tmph6iifo4o.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8dc4tol1: /tmp/tmp8dc4tol1.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ - dq.front() >= numbers.size()) {\n            dq.pop_front();\n        }\n\
    \        result.push_back(numbers[dq.front()]);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!window.empty() && window.back() < numbers[i]) {\n  \
    \          window.pop_back();\n        }\n        window.push_back(numbers[i]);\n\
    \        if (i >= 3) {\n            if (window.front() == numbers[i - 3]) {\n\
    \                window.pop_front();\n            }\n        }\n        result.push_back(window.front());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpaz8j7m1b: /tmp/tmpaz8j7m1b.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyagu4bef: /tmp/tmpyagu4bef.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = 0;\n    for (auto number : numbers) {\n     \
    \   if (number > max_so_far) {\n            max_so_far = number;\n        }\n\
    \        result.push_back(max_so_far);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4whw7gkj: /tmp/tmp4whw7gkj.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_mr6d2bx: /tmp/tmp_mr6d2bx.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmppqa_t3py: /tmp/tmppqa_t3py.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_value = numbers[0];\n    for (auto it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        if (*it > max_value) {\n            max_value\
    \ = *it;\n        }\n        result.push_back(max_value);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        long number = numbers[i];\n        while (!max_queue.empty()\
    \ && max_queue.front() < i - 1) {\n            max_queue.pop_front();\n      \
    \  }\n        while (!max_queue.empty() && numbers[max_queue.back()] < number)\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        result.push_back(numbers[max_queue.front()]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4_g0o_em: /tmp/tmp4_g0o_em.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzwe3q677: /tmp/tmpzwe3q677.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_deque;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_deque.empty() && numbers[i] >= numbers[max_deque.back()])\
    \ {\n            max_deque.pop_back();\n        }\n        max_deque.push_back(i);\n\
    \        if (i - max_deque.front() >= 3) {\n            max_deque.pop_front();\n\
    \        }\n        result.push_back(numbers[max_deque.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpr9d6i6h8: /tmp/tmpr9d6i6h8.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpada4cdvh: /tmp/tmpada4cdvh.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::stack<long> stack;\n    for (auto number : numbers) {\n  \
    \      while (!stack.empty() && stack.top() < number) {\n            stack.pop();\n\
    \        }\n        stack.push(number);\n        result.push_back(stack.top());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpolet1j7g: /tmp/tmpolet1j7g.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    if (numbers.size() == 0) {\n        return result;\n    }\n   \
    \ long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far) {\n\
    \            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::stack<long> stack;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!stack.empty() && numbers[stack.top()] < numbers[i])\
    \ {\n            stack.pop();\n        }\n        if (stack.empty()) {\n     \
    \       result.push_back(numbers[i]);\n        } else {\n            result.push_back(numbers[stack.top()]);\n\
    \        }\n        stack.push(i);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpx__n81yo: /tmp/tmpx__n81yo.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7ml7zje6: /tmp/tmp7ml7zje6.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_numbers;\n    for (auto number : numbers)\
    \ {\n        while (!max_numbers.empty() && max_numbers.back() < number) {\n \
    \           max_numbers.pop_back();\n        }\n        max_numbers.push_back(number);\n\
    \        result.push_back(max_numbers.front());\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (auto number : numbers) {\n \
    \       while (!window.empty() && window.back() < number) {\n            window.pop_back();\n\
    \        }\n        window.push_back(number);\n        result.push_back(window.front());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n   \
    \     }\n        result.push_back(max);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> q;\n    for (long i = 0; i < numbers.size(); i++)\
    \ {\n        while (!q.empty() && numbers[q.back()] <= numbers[i]) {\n       \
    \     q.pop_back();\n        }\n        q.push_back(i);\n        if (q.front()\
    \ == i - 3) {\n            q.pop_front();\n        }\n        result.push_back(numbers[q.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpv9v6zaex: /tmp/tmpv9v6zaex.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (auto number : numbers) {\n\
    \        while (!max_queue.empty() && max_queue.back() < number) {\n         \
    \   max_queue.pop_back();\n        }\n        max_queue.push_back(number);\n \
    \       result.push_back(max_queue.front());\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (auto i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpo0q6dz3_: /tmp/tmpo0q6dz3_.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0px3_l1x: /tmp/tmp0px3_l1x.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpswpa8r6i: /tmp/tmpswpa8r6i.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmps_u7ukzf: /tmp/tmps_u7ukzf.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyahu15vh: /tmp/tmpyahu15vh.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n \
    \       result.push_back(max);\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxepisv8w: /tmp/tmpxepisv8w.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!window.empty() && window.back() < numbers[i]) {\n  \
    \          window.pop_back();\n        }\n        window.push_back(numbers[i]);\n\
    \        if (i >= 2) {\n            result.push_back(window.front());\n      \
    \      if (window.front() == numbers[i - 2]) {\n                window.pop_front();\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3,\
    \ (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100,\
    \ (long)100})));\n}\n"
  stdout: ''
  stderr: "tmpn9lpyk6z: /tmp/tmpn9lpyk6z.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i - dq.front()\
    \ >= 3) {\n            dq.pop_front();\n        }\n        result.push_back(numbers[dq.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5vvi2fyt: /tmp/tmp5vvi2fyt.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpu4ex3_fe: /tmp/tmpu4ex3_fe.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (size_t\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpy45_fvy6: /tmp/tmpy45_fvy6.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_element = numbers[0];\n    result.push_back(max_element);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_element)\
    \ {\n            max_element = numbers[i];\n        }\n        result.push_back(max_element);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpb1msehj1: /tmp/tmpb1msehj1.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::stack<long> stack;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!stack.empty() && numbers[stack.top()] < numbers[i])\
    \ {\n            stack.pop();\n        }\n        if (stack.empty()) {\n     \
    \       result.push_back(numbers[i]);\n        } else {\n            result.push_back(numbers[stack.top()]);\n\
    \        }\n        stack.push(i);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8ttoobvi: /tmp/tmp8ttoobvi.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4_3go6o7: /tmp/tmp4_3go6o7.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7wjdum06: /tmp/tmp7wjdum06.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> window;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!window.empty() && window.front() <= i - numbers.size())\
    \ {\n            window.pop_front();\n        }\n        while (!window.empty()\
    \ && numbers[window.back()] <= numbers[i]) {\n            window.pop_back();\n\
    \        }\n        window.push_back(i);\n        result.push_back(numbers[window.front()]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1z42wexg: /tmp/tmp1z42wexg.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_elements;\n    for (auto number : numbers)\
    \ {\n        while (!max_elements.empty() && max_elements.back() < number) {\n\
    \            max_elements.pop_back();\n        }\n        max_elements.push_back(number);\n\
    \        result.push_back(max_elements.front());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpznior402: /tmp/tmpznior402.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() == i - 3) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3rdoxizx: /tmp/tmp3rdoxizx.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpva75eb8e: /tmp/tmpva75eb8e.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwpu59uog: /tmp/tmpwpu59uog.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n     \
    \       dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i >=\
    \ 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n      \
    \  if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmprt4bw9_w: /tmp/tmprt4bw9_w.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> dq;\n    for (auto i = 0; i < numbers.size();\
    \ i++) {\n        while (!dq.empty() && numbers[i] >= numbers[dq.back()]) {\n\
    \            dq.pop_back();\n        }\n        dq.push_back(i);\n        if (i\
    \ >= 2) {\n            result.push_back(numbers[dq.front()]);\n        }\n   \
    \     if (dq.front() == i - 2) {\n            dq.pop_front();\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpki3h3wqb: /tmp/tmpki3h3wqb.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_number = 0;\n    for (auto number : numbers) {\n     \
    \   if (number > max_number) {\n            max_number = number;\n        }\n\
    \        result.push_back(max_number);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> maximums;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        while (!maximums.empty() && numbers[maximums.back()] <= numbers[i])\
    \ {\n            maximums.pop_back();\n        }\n        maximums.push_back(i);\n\
    \        if (maximums.front() <= i - 3) {\n            maximums.pop_front();\n\
    \        }\n        result.push_back(numbers[maximums.front()]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpx_72xrj7: /tmp/tmpx_72xrj7.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,\
    \ (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max = numbers[0];\n    result.push_back(max);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push_back(max);\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    std::deque<long> max_queue;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        while (!max_queue.empty() && numbers[i] >= numbers[max_queue.back()])\
    \ {\n            max_queue.pop_back();\n        }\n        max_queue.push_back(i);\n\
    \        if (max_queue.front() <= i - numbers.size()) {\n            max_queue.pop_front();\n\
    \        }\n        result.push_back(numbers[max_queue.front()]);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: "tmpn8j8myw0: /tmp/tmpn8j8myw0.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given list of integers,\
    \ generate a list of rolling maximum element found until given moment\n// in the\
    \ sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4,\
    \ 4]\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long>\
    \ result;\n    long max_so_far = numbers[0];\n    result.push_back(max_so_far);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] > max_so_far)\
    \ {\n            max_so_far = numbers[i];\n        }\n        result.push_back(max_so_far);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rolling_max;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
    \ (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100,\
    \ (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
