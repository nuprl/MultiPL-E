name: HumanEval_118_get_closest_vowel
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp08tx9rmz: /tmp/tmp08tx9rmz.cpp:40: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n  // your code here\n  std::string vowels = \"aeiouAEIOU\";\n  std::string\
    \ result = \"\";\n  int index = -1;\n  for(int i = word.length() - 1; i >= 0;\
    \ i--) {\n    if(vowels.find(word[i]) != std::string::npos) {\n      index = i;\n\
    \      break;\n    }\n  }\n  if(index == -1) {\n    return result;\n  }\n  for(int\
    \ i = index - 1; i >= 0; i--) {\n    if(vowels.find(word[i]) == std::string::npos)\
    \ {\n      result = word[index];\n      break;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpojgqrain: /tmp/tmpojgqrain.cpp:41: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n  std::string vowels = \"aeiou\";\n  std::string result = \"\";\n \
    \ int index = -1;\n  for (int i = word.length() - 1; i >= 0; i--) {\n    if (vowels.find(word[i])\
    \ != std::string::npos) {\n      index = i;\n      break;\n    }\n  }\n  if (index\
    \ == -1) {\n    return result;\n  }\n  for (int i = index - 1; i >= 0; i--) {\n\
    \    if (vowels.find(word[i]) == std::string::npos) {\n      result = word[index];\n\
    \      break;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpq88nzctt: /tmp/tmpq88nzctt.cpp:40: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    int len = word.length();\n\
    \    int i = len - 1;\n    while(i >= 0) {\n        if(vowels.find(word[i]) !=\
    \ std::string::npos) {\n            if(i == len - 1) {\n                return\
    \ \"\";\n            }\n            if(vowels.find(word[i + 1]) == std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \     i--;\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpjnazigx1: /tmp/tmpjnazigx1.cpp:34: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_distance = INT_MAX;\n    int distance = 0;\n    for (int\
    \ i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i + 1; j < word.length(); j++) {\n             \
    \   if (consonants.find(word[j]) != std::string::npos) {\n                   \
    \ distance = j - i;\n                    if (distance < min_distance) {\n    \
    \                    min_distance = distance;\n                        result\
    \ = word[i];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpvxv0_axf: /tmp/tmpvxv0_axf.cpp:37: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string result =\
    \ \"\";\n    int index = word.size() - 1;\n    while (index >= 0) {\n        if\
    \ (vowels.find(word[index]) != std::string::npos) {\n            result = word[index];\n\
    \            break;\n        }\n        index--;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp5bbphnbv: /tmp/tmp5bbphnbv.cpp:30: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = word.size() -\
    \ 1;\n    int j = i;\n    while (i > 0) {\n        if (consonants.find(word[i])\
    \ != std::string::npos) {\n            while (j > 0) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    return word.substr(j, 1);\n   \
    \             }\n                j--;\n            }\n        }\n        i--;\n\
    \    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmppwcu4s5w: /tmp/tmppwcu4s5w.cpp:35: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            int\
    \ distance = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n   \
    \             if (vowels.find(word[j]) != std::string::npos) {\n             \
    \       break;\n                }\n                distance++;\n            }\n\
    \            if (distance < min_distance) {\n                min_distance = distance;\n\
    \                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp_0_n_odt: /tmp/tmp_0_n_odt.cpp:36: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    int len = word.length();\n    if(len == 0) return \"\";\n    if(len\
    \ == 1) return \"\";\n    int i = len - 1;\n    while(i >= 0) {\n        if(word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\
    \ {\n            if(i == len - 1) return \"\";\n            if(i == 0) return\
    \ \"\";\n            if(word[i-1] == 'a' || word[i-1] == 'e' || word[i-1] == 'i'\
    \ || word[i-1] == 'o' || word[i-1] == 'u') {\n                return \"\";\n \
    \           }\n            if(word[i+1] == 'a' || word[i+1] == 'e' || word[i+1]\
    \ == 'i' || word[i+1] == 'o' || word[i+1] == 'u') {\n                return \"\
    \";\n            }\n            return word.substr(i, 1);\n        }\n       \
    \ i--;\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpgsughp4r: /tmp/tmpgsughp4r.cpp:46: int main(): Assertion `candidate((\"\
    anime\")) == (\"i\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int vowel_index = -1;\n\
    \    int consonant_index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            vowel_index\
    \ = i;\n        }\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            consonant_index = i;\n            break;\n        }\n    }\n\
    \    if (vowel_index == -1 || consonant_index == -1) {\n        return \"\";\n\
    \    }\n    if (vowel_index > consonant_index) {\n        return \"\";\n    }\n\
    \    return word.substr(vowel_index, 1);\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpgasdz2h0: /tmp/tmpgasdz2h0.cpp:37: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            int\
    \ distance = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n   \
    \             if (vowels.find(word[j]) != std::string::npos) {\n             \
    \       break;\n                }\n                distance++;\n            }\n\
    \            if (distance < min_distance) {\n                min_distance = distance;\n\
    \                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp3kzcazj3: /tmp/tmp3kzcazj3.cpp:36: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpzcu0ost9: /tmp/tmpzcu0ost9.cpp:40: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n  std::vector<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n  std::vector<char>\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n  std::string result = \"\";\n  int\
    \ index = -1;\n  for (int i = word.length() - 1; i >= 0; i--) {\n    if (std::find(consonants.begin(),\
    \ consonants.end(), word[i]) != consonants.end()) {\n      if (i == word.length()\
    \ - 1) {\n        return result;\n      }\n      for (int j = i + 1; j < word.length();\
    \ j++) {\n        if (std::find(vowels.begin(), vowels.end(), word[j]) != vowels.end())\
    \ {\n          if (index == -1) {\n            index = j;\n          } else {\n\
    \            if (j < index) {\n              index = j;\n            }\n     \
    \     }\n        }\n      }\n      if (index != -1) {\n        result = word[index];\n\
    \      }\n      return result;\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpjkdio_jt: /tmp/tmpjkdio_jt.cpp:44: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int vowel_index = -1;\n\
    \    int consonant_index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            vowel_index\
    \ = i;\n        }\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            consonant_index = i;\n            break;\n        }\n    }\n\
    \    if (vowel_index == -1 || consonant_index == -1) {\n        return \"\";\n\
    \    }\n    if (vowel_index > consonant_index) {\n        return \"\";\n    }\n\
    \    return word.substr(vowel_index, 1);\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpt3sekhln: /tmp/tmpt3sekhln.cpp:37: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n\tstd::string vowels = \"aeiouAEIOU\";\n\tstd::string consonants =\
    \ \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\tstd::string result = \"\"\
    ;\n\tint index = -1;\n\tfor (int i = word.length() - 1; i >= 0; i--) {\n\t\tif\
    \ (consonants.find(word[i]) != std::string::npos) {\n\t\t\tindex = i;\n\t\t\t\
    break;\n\t\t}\n\t}\n\tif (index == -1) {\n\t\treturn result;\n\t}\n\tfor (int\
    \ i = index - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i]) != std::string::npos)\
    \ {\n\t\t\tresult = word[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\n\
    int main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmptj84avfr: /tmp/tmptj84avfr.cpp:39: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string closest_vowel\
    \ = \"\";\n    int closest_vowel_index = -1;\n    int closest_vowel_distance =\
    \ -1;\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            int distance = 0;\n            for (int\
    \ j = i; j < word.length(); j++) {\n                if (vowels.find(word[j]) !=\
    \ std::string::npos) {\n                    break;\n                }\n      \
    \          distance++;\n            }\n            if (distance > 0 && distance\
    \ < closest_vowel_distance) {\n                closest_vowel_distance = distance;\n\
    \                closest_vowel_index = i;\n            }\n        }\n    }\n \
    \   if (closest_vowel_index != -1) {\n        closest_vowel = word[closest_vowel_index];\n\
    \    }\n    return closest_vowel;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpycgej_ct: /tmp/tmpycgej_ct.cpp:40: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (consonants.find(word[i]) != std::string::npos) {\n          \
    \  for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    result = word[j];\n           \
    \         index = j;\n                    break;\n                }\n        \
    \    }\n            break;\n        }\n    }\n    if (index == -1) {\n       \
    \ return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if\
    \ (consonants.find(word[i]) != std::string::npos) {\n            return result;\n\
    \        }\n        if (vowels.find(word[i]) != std::string::npos) {\n       \
    \     result = word[i];\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp306s0b4z: /tmp/tmp306s0b4z.cpp:47: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = word.size() -\
    \ 1;\n    while (i >= 0) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            int j = i - 1;\n            while (j >= 0) {\n              \
    \  if (vowels.find(word[j]) != std::string::npos) {\n                    return\
    \ word.substr(j, 1);\n                }\n                if (consonants.find(word[j])\
    \ != std::string::npos) {\n                    break;\n                }\n   \
    \             j--;\n            }\n        }\n        i--;\n    }\n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpwedsg77c: /tmp/tmpwedsg77c.cpp:38: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int min_dist = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            int dist\
    \ = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n            \
    \    if (vowels.find(word[j]) != std::string::npos) {\n                    break;\n\
    \                }\n                dist++;\n            }\n            if (dist\
    \ < min_dist) {\n                min_dist = dist;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp2qlcz19v: /tmp/tmp2qlcz19v.cpp:36: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    int index = -1;\n   \
    \ for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) {\n        return \"\";\n    }\n    for (int\
    \ i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            return word.substr(index, 1);\n        }\n    }\n    return \"\
    \";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpl7lyvg8q: /tmp/tmpl7lyvg8q.cpp:38: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    int len = word.length();\n\
    \    int i = len - 1;\n    while(i >= 0) {\n        if(vowels.find(word[i]) !=\
    \ std::string::npos) {\n            if(i == len - 1) {\n                return\
    \ \"\";\n            }\n            if(vowels.find(word[i + 1]) == std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \     i--;\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp3cnnl248: /tmp/tmp3cnnl248.cpp:34: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (consonants.find(word[i]) != std::string::npos) {\n          \
    \  for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result = word[index];\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmprcoy5ph8: /tmp/tmprcoy5ph8.cpp:38: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n  std::string vowels = \"aeiou\";\n  std::string result = \"\";\n \
    \ int index = -1;\n  for (int i = word.length() - 1; i >= 0; i--) {\n    if (vowels.find(word[i])\
    \ != std::string::npos) {\n      if (index == -1) {\n        index = i;\n    \
    \  } else {\n        if (i == 0) {\n          return \"\";\n        }\n      \
    \  if (vowels.find(word[i - 1]) == std::string::npos) {\n          return word[index];\n\
    \        }\n      }\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo60z0aaw.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpo60z0aaw.cpp:26:28: error: could not convert \u2018word.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)index))\u2019\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   26 |           return word[index];\n      |                            ^\n\
    \      |                            |\n      |                            __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type {aka char}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    for (int i = word.length() - 1; i >= 0; i--) {\n        if (consonants.find(word[i])\
    \ != std::string::npos) {\n            for (int j = i - 1; j >= 0; j--) {\n  \
    \              if (vowels.find(word[j]) != std::string::npos) {\n            \
    \        result = word[j];\n                    break;\n                }\n  \
    \          }\n            break;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmppz1v9x1e: /tmp/tmppz1v9x1e.cpp:34: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int distance = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            int j =\
    \ i + 1;\n            while (j < word.size() && vowels.find(word[j]) != std::string::npos)\
    \ {\n                j++;\n            }\n            if (j < word.size()) {\n\
    \                if (j - i < distance) {\n                    distance = j - i;\n\
    \                    result = word[i];\n                }\n            }\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpvz64gm0f: /tmp/tmpvz64gm0f.cpp:35: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int len = word.length();\n\
    \    int i = len - 1;\n    int j = len - 1;\n    std::string res = \"\";\n   \
    \ while(i >= 0) {\n        if(vowels.find(word[i]) != std::string::npos) {\n \
    \           if(consonants.find(word[j]) != std::string::npos) {\n            \
    \    res = word[i];\n                break;\n            }\n        }\n      \
    \  i--;\n        j--;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpgrrj0k15: /tmp/tmpgrrj0k15.cpp:34: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (consonants.find(word[i]) != std::string::npos) {\n          \
    \  for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result = word[index];\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpzw2gjanb: /tmp/tmpzw2gjanb.cpp:38: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n  std::string vowels = \"aeiou\";\n  std::string result = \"\";\n \
    \ int min_distance = INT_MAX;\n  for (int i = 0; i < word.size(); i++) {\n   \
    \ for (int j = 0; j < vowels.size(); j++) {\n      if (word[i] == vowels[j]) {\n\
    \        int distance = 0;\n        for (int k = i + 1; k < word.size(); k++)\
    \ {\n          if (vowels.find(word[k]) == std::string::npos) {\n            distance++;\n\
    \          } else {\n            break;\n          }\n        }\n        if (distance\
    \ < min_distance) {\n          min_distance = distance;\n          result = word[i];\n\
    \        }\n      }\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpc_wrunlv: /tmp/tmpc_wrunlv.cpp:39: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int n = word.length();\n\
    \    for(int i = n-1; i >= 0; i--) {\n        if(consonants.find(word[i]) != std::string::npos)\
    \ {\n            for(int j = i-1; j >= 0; j--) {\n                if(vowels.find(word[j])\
    \ != std::string::npos) {\n                    return word.substr(j, 1);\n   \
    \             }\n            }\n        }\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpt9ajjvqh: /tmp/tmpt9ajjvqh.cpp:32: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int pos = -1;\n    for (int i = word.size() - 1; i >= 0; i--) {\n     \
    \   if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n\
    \            pos = i;\n            break;\n        }\n    }\n    if (pos == -1)\
    \ {\n        return \"\";\n    }\n    for (int i = pos - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) == std::string::npos) {\n            return result;\n\
    \        }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp4w1aisar: /tmp/tmp4w1aisar.cpp:40: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = word.size() -\
    \ 1;\n    while (i >= 0) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            int j = i - 1;\n            while (j >= 0) {\n              \
    \  if (vowels.find(word[j]) != std::string::npos) {\n                    return\
    \ word.substr(j, 1);\n                }\n                if (consonants.find(word[j])\
    \ != std::string::npos) {\n                    break;\n                }\n   \
    \             j--;\n            }\n        }\n        i--;\n    }\n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp0feo66g1: /tmp/tmp0feo66g1.cpp:38: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n\tstd::string vowels = \"aeiouAEIOU\";\n\tstd::string consonants =\
    \ \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\tint len = word.length();\n\
    \tint i = len - 1;\n\twhile (i >= 0) {\n\t\tif (consonants.find(word[i]) != std::string::npos)\
    \ {\n\t\t\tint j = i - 1;\n\t\t\twhile (j >= 0) {\n\t\t\t\tif (vowels.find(word[j])\
    \ != std::string::npos) {\n\t\t\t\t\treturn word.substr(j, 1);\n\t\t\t\t}\n\t\t\
    \t\tj--;\n\t\t\t}\n\t\t}\n\t\ti--;\n\t}\n\treturn \"\";\n}\nint main() {\n   \
    \ auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"\
    u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpteh5c2et: /tmp/tmpteh5c2et.cpp:36: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string result =\
    \ \"\";\n    int index = 0;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            index\
    \ = i;\n            break;\n        }\n    }\n    for (int i = index - 1; i >=\
    \ 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n      \
    \      result = word[index];\n            break;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp1c_6rzsg: /tmp/tmp1c_6rzsg.cpp:37: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n  std::string vowels = \"aeiou\";\n  std::string result = \"\";\n \
    \ int distance = word.size();\n  for (int i = 0; i < word.size(); i++) {\n   \
    \ if (vowels.find(word[i]) != std::string::npos) {\n      if (i > 0 && vowels.find(word[i\
    \ - 1]) == std::string::npos) {\n        if (i < distance) {\n          distance\
    \ = i;\n          result = word[i];\n        }\n      }\n      if (i < word.size()\
    \ - 1 && vowels.find(word[i + 1]) == std::string::npos) {\n        if (word.size()\
    \ - i < distance) {\n          distance = word.size() - i;\n          result =\
    \ word[i];\n        }\n      }\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpibvcil69: /tmp/tmpibvcil69.cpp:37: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpwf2u7lsz: /tmp/tmpwf2u7lsz.cpp:40: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int index = 0;\n    for (int i = word.length() - 1; i >= 0; i--) {\n  \
    \      if (vowels.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            break;\n        }\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpwhb54kw8: /tmp/tmpwhb54kw8.cpp:37: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string closest_vowel;\n\
    \    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            int j =\
    \ i + 1;\n            while (j < word.size() && vowels.find(word[j]) != std::string::npos)\
    \ {\n                j++;\n            }\n            if (j < word.size()) {\n\
    \                int distance = j - i;\n                if (distance < min_distance)\
    \ {\n                    min_distance = distance;\n                    closest_vowel\
    \ = word[i];\n                }\n            }\n        }\n    }\n    return closest_vowel;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp2ertbluu: /tmp/tmp2ertbluu.cpp:36: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n  std::string vowels = \"aeiou\";\n  std::string result = \"\";\n \
    \ int min_distance = INT_MAX;\n  for (int i = 0; i < word.size(); i++) {\n   \
    \ if (vowels.find(word[i]) != std::string::npos) {\n      int distance = word.size()\
    \ - i - 1;\n      if (distance < min_distance) {\n        min_distance = distance;\n\
    \        result = word[i];\n      }\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpv8ok6v5e: /tmp/tmpv8ok6v5e.cpp:32: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    int index = word.size() -\
    \ 1;\n    while (index >= 0) {\n        if (vowels.find(word[index]) != std::string::npos)\
    \ {\n            if (index == word.size() - 1) {\n                return \"\"\
    ;\n            }\n            if (vowels.find(word[index + 1]) == std::string::npos)\
    \ {\n                return word.substr(index, 1);\n            }\n        }\n\
    \        index--;\n    }\n    return \"\";\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpb45gfi9m: /tmp/tmpb45gfi9m.cpp:33: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n  std::string vowels = \"aeiou\";\n  std::string result = \"\";\n \
    \ int index = -1;\n  for (int i = word.length() - 1; i >= 0; i--) {\n    if (vowels.find(word[i])\
    \ != std::string::npos) {\n      index = i;\n      break;\n    }\n  }\n  if (index\
    \ == -1) {\n    return result;\n  }\n  for (int i = index - 1; i >= 0; i--) {\n\
    \    if (vowels.find(word[i]) == std::string::npos) {\n      result = word[index];\n\
    \      break;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp2dtp2ez6: /tmp/tmp2dtp2ez6.cpp:40: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    int index = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpedtz3t2v: /tmp/tmpedtz3t2v.cpp:38: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int index = -1;\n   \
    \ for(int i = word.length() - 1; i >= 0; i--) {\n        if(consonants.find(word[i])\
    \ != std::string::npos) {\n            for(int j = i - 1; j >= 0; j--) {\n   \
    \             if(vowels.find(word[j]) != std::string::npos) {\n              \
    \      index = j;\n                    break;\n                }\n           \
    \ }\n            break;\n        }\n    }\n    if(index == -1) {\n        return\
    \ \"\";\n    }\n    return word.substr(index, 1);\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp16542lwk: /tmp/tmp16542lwk.cpp:37: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n  std::string vowels = \"aeiou\";\n  int index = -1;\n  for (int i\
    \ = word.size() - 1; i >= 0; i--) {\n    if (vowels.find(word[i]) != std::string::npos)\
    \ {\n      index = i;\n      break;\n    }\n  }\n  if (index == -1) return \"\"\
    ;\n  for (int i = index - 1; i >= 0; i--) {\n    if (vowels.find(word[i]) == std::string::npos)\
    \ {\n      return word.substr(index, 1);\n    }\n  }\n  return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpkt1x1500: /tmp/tmpkt1x1500.cpp:36: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_dist = INT_MAX;\n    for (int i = 0; i < word.size(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            for\
    \ (int j = i + 1; j < word.size(); j++) {\n                if (consonants.find(word[j])\
    \ != std::string::npos) {\n                    if (j - i < min_dist) {\n     \
    \                   min_dist = j - i;\n                        result = word[i];\n\
    \                    }\n                    break;\n                }\n      \
    \      }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpv5ypqnkf: /tmp/tmpv5ypqnkf.cpp:35: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int pos = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n\
    \        if (consonants.find(word[i]) != std::string::npos) {\n            if\
    \ (pos == -1) {\n                pos = i;\n            } else {\n            \
    \    for (int j = pos; j >= i; j--) {\n                    if (vowels.find(word[j])\
    \ != std::string::npos) {\n                        result = word[j];\n       \
    \                 break;\n                    }\n                }\n         \
    \       break;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp5d6evltd: /tmp/tmp5d6evltd.cpp:37: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int index = -1;\n   \
    \ for(int i = word.length() - 1; i >= 0; i--) {\n        if(consonants.find(word[i])\
    \ != std::string::npos) {\n            if(i == word.length() - 1) {\n        \
    \        return \"\";\n            }\n            for(int j = i + 1; j < word.length();\
    \ j++) {\n                if(vowels.find(word[j]) != std::string::npos) {\n  \
    \                  index = j;\n                    break;\n                }\n\
    \            }\n            break;\n        }\n    }\n    if(index == -1) {\n\
    \        return \"\";\n    }\n    return word.substr(index, 1);\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpwsjk2o6w: /tmp/tmpwsjk2o6w.cpp:38: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    int index = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpoy3mopdc: /tmp/tmpoy3mopdc.cpp:38: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            int\
    \ distance = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n   \
    \             if (vowels.find(word[j]) != std::string::npos) {\n             \
    \       break;\n                }\n                distance++;\n            }\n\
    \            if (distance < min_distance) {\n                min_distance = distance;\n\
    \                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpxj4nr0my: /tmp/tmpxj4nr0my.cpp:36: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int index = -1;\n   \
    \ for(int i = word.length() - 1; i >= 0; i--) {\n        if(consonants.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if(index == -1) return \"\";\n    for(int i = index + 1; i <\
    \ word.length(); i++) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            return word.substr(i, 1);\n        }\n    }\n    return \"\"\
    ;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpfq6b71kv: /tmp/tmpfq6b71kv.cpp:33: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (consonants.find(word[i]) != std::string::npos) {\n     \
    \       for (int j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    if (j - i < min_distance) {\n \
    \                       min_distance = j - i;\n                        result\
    \ = word[j];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpnoflatyw: /tmp/tmpnoflatyw.cpp:35: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n  std::string vowels = \"aeiou\";\n  int pos = -1;\n  for (int i =\
    \ word.size() - 1; i >= 0; i--) {\n    if (vowels.find(word[i]) != std::string::npos)\
    \ {\n      pos = i;\n      break;\n    }\n  }\n  if (pos == -1) return \"\";\n\
    \  for (int i = pos - 1; i >= 0; i--) {\n    if (vowels.find(word[i]) == std::string::npos)\
    \ {\n      return word.substr(pos, 1);\n    }\n  }\n  return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpc0kug2kp: /tmp/tmpc0kug2kp.cpp:36: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int pos = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n\
    \        if (consonants.find(word[i]) != std::string::npos) {\n            for\
    \ (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j]) !=\
    \ std::string::npos) {\n                    pos = j;\n                    break;\n\
    \                }\n            }\n            break;\n        }\n    }\n    if\
    \ (pos != -1) {\n        result = word[pos];\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpscfi5ob2: /tmp/tmpscfi5ob2.cpp:38: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n  std::string vowels = \"aeiou\";\n  int pos = -1;\n  for (int i =\
    \ word.size() - 1; i >= 0; i--) {\n    if (vowels.find(word[i]) != std::string::npos)\
    \ {\n      pos = i;\n      break;\n    }\n  }\n  if (pos == -1) {\n    return\
    \ \"\";\n  }\n  for (int i = pos - 1; i >= 0; i--) {\n    if (vowels.find(word[i])\
    \ == std::string::npos) {\n      return word.substr(pos, 1);\n    }\n  }\n  return\
    \ \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpsuv4o7g6: /tmp/tmpsuv4o7g6.cpp:38: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    int index = word.size() -\
    \ 1;\n    int vowel_index = -1;\n    while (index >= 0) {\n        if (vowels.find(word[index])\
    \ != std::string::npos) {\n            vowel_index = index;\n            break;\n\
    \        }\n        index--;\n    }\n    if (vowel_index == -1) {\n        return\
    \ \"\";\n    }\n    index = vowel_index - 1;\n    while (index >= 0) {\n     \
    \   if (vowels.find(word[index]) == std::string::npos) {\n            return word[vowel_index];\n\
    \        }\n        index--;\n    }\n    return \"\";\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7k72ts38.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp7k72ts38.cpp:30:36: error: could not convert \u2018word.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)vowel_index))\u2019\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   30 |             return word[vowel_index];\n      |                    \
    \                ^\n      |                                    |\n      |    \
    \                                __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type {aka char}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (consonants.find(word[i]) != std::string::npos) {\n     \
    \       for (int j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    if (j - i < min_distance) {\n \
    \                       min_distance = j - i;\n                        result\
    \ = word[j];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpxbcyh5ee: /tmp/tmpxbcyh5ee.cpp:35: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string closest_vowel\
    \ = \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int j = i - 1;\n            while (j >= 0 && consonants.find(word[j]) == std::string::npos)\
    \ {\n                j--;\n            }\n            if (j >= 0) {\n        \
    \        int k = i + 1;\n                while (k < word.size() && consonants.find(word[k])\
    \ == std::string::npos) {\n                    k++;\n                }\n     \
    \           if (k < word.size()) {\n                    if (min_distance > k -\
    \ j) {\n                        min_distance = k - j;\n                      \
    \  closest_vowel = word[i];\n                    }\n                }\n      \
    \      }\n        }\n    }\n    return closest_vowel;\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpsz7d4982: /tmp/tmpsz7d4982.cpp:42: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (consonants.find(word[i]) != std::string::npos) {\n     \
    \       for (int j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    if (j - i < min_distance) {\n \
    \                       min_distance = j - i;\n                        result\
    \ = word[j];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpextbu9dm: /tmp/tmpextbu9dm.cpp:35: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = 0;\n    int min_index = 0;\n    int min_distance = INT_MAX;\n\
    \    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            for (int j = index\
    \ + 1; j < word.length(); j++) {\n                if (consonants.find(word[j])\
    \ != std::string::npos) {\n                    if (j - index < min_distance) {\n\
    \                        min_distance = j - index;\n                        min_index\
    \ = index;\n                    }\n                    break;\n              \
    \  }\n            }\n        }\n    }\n    if (min_distance != INT_MAX) {\n  \
    \      result = word[min_index];\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp8v64ythr: /tmp/tmp8v64ythr.cpp:41: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpau9dqjy4: /tmp/tmpau9dqjy4.cpp:40: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string result =\
    \ \"\";\n    int index = word.size() - 1;\n    while (index >= 0) {\n        if\
    \ (vowels.find(word[index]) != std::string::npos) {\n            result = word[index];\n\
    \            break;\n        }\n        index--;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmprnrrlzos: /tmp/tmprnrrlzos.cpp:30: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   for (int j = i + 1; j < word.size(); j++) {\n                if (consonants.find(word[j])\
    \ != std::string::npos) {\n                    if (j - i < min_distance) {\n \
    \                       min_distance = j - i;\n                        result\
    \ = word[i];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp40369ujp: /tmp/tmp40369ujp.cpp:35: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    int len = word.length();\n\
    \    for(int i = len - 1; i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            if(i == len - 1) {\n                return \"\";\n          \
    \  }\n            if(vowels.find(word[i + 1]) == std::string::npos) {\n      \
    \          return word.substr(i, 1);\n            }\n        }\n    }\n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpf90wbbqa: /tmp/tmpf90wbbqa.cpp:32: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = word.size() -\
    \ 1;\n    while (i >= 0) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            break;\n        }\n        i--;\n    }\n    if (i == -1) {\n\
    \        return \"\";\n    }\n    int j = i - 1;\n    while (j >= 0) {\n     \
    \   if (vowels.find(word[j]) != std::string::npos) {\n            break;\n   \
    \     }\n        j--;\n    }\n    if (j == -1) {\n        return \"\";\n    }\n\
    \    return word.substr(j, 1);\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp56zyvx1s: /tmp/tmp56zyvx1s.cpp:42: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            int\
    \ distance = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n   \
    \             if (vowels.find(word[j]) != std::string::npos) {\n             \
    \       break;\n                }\n                distance++;\n            }\n\
    \            if (distance < min_distance) {\n                min_distance = distance;\n\
    \                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpuwmt6o65: /tmp/tmpuwmt6o65.cpp:36: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            return word[index];\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpboy1yeup.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpboy1yeup.cpp:28:30: error: could not convert \u2018word.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)index))\u2019\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   28 |             return word[index];\n      |                          \
    \    ^\n      |                              |\n      |                      \
    \        __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type {aka\
    \ char}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpndq7a58l: /tmp/tmpndq7a58l.cpp:40: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n\tstd::string vowels = \"aeiouAEIOU\";\n\tstd::string consonants =\
    \ \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\tstd::string result = \"\"\
    ;\n\tint index = -1;\n\tint min_distance = INT_MAX;\n\tfor (int i = 0; i < word.length();\
    \ i++) {\n\t\tif (vowels.find(word[i]) != std::string::npos) {\n\t\t\tint distance\
    \ = 0;\n\t\t\tfor (int j = i; j < word.length(); j++) {\n\t\t\t\tif (consonants.find(word[j])\
    \ != std::string::npos) {\n\t\t\t\t\tdistance = j - i;\n\t\t\t\t\tbreak;\n\t\t\
    \t\t}\n\t\t\t}\n\t\t\tif (distance < min_distance) {\n\t\t\t\tmin_distance = distance;\n\
    \t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t}\n\tif (index != -1) {\n\t\tresult = word[index];\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpaxv0qnfv: /tmp/tmpaxv0qnfv.cpp:41: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (consonants.find(word[i]) != std::string::npos) {\n          \
    \  for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result = word[index];\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpkyr4o3_9: /tmp/tmpkyr4o3_9.cpp:38: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.length();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   for (int j = i + 1; j < word.length(); j++) {\n                if (consonants.find(word[j])\
    \ != std::string::npos) {\n                    if (j - i < min_distance) {\n \
    \                       min_distance = j - i;\n                        result\
    \ = word[i];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmplsb4_7gr: /tmp/tmplsb4_7gr.cpp:35: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    int len = word.length();\n\
    \    int pos = len - 1;\n    while(pos >= 0) {\n        if(vowels.find(word[pos])\
    \ != std::string::npos) {\n            if(pos == len - 1) return \"\";\n     \
    \       if(vowels.find(word[pos + 1]) == std::string::npos) return word.substr(pos,\
    \ 1);\n        }\n        pos--;\n    }\n    return \"\";\n}\nint main() {\n \
    \   auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp24yf1ee3: /tmp/tmp24yf1ee3.cpp:30: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    int len = word.length();\n\
    \    for(int i = len - 1; i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            if(i == len - 1) {\n                return \"\";\n          \
    \  }\n            if(vowels.find(word[i + 1]) == std::string::npos) {\n      \
    \          return word.substr(i, 1);\n            }\n        }\n    }\n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpaagkt8vs: /tmp/tmpaagkt8vs.cpp:32: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (consonants.find(word[i]) != std::string::npos) {\n          \
    \  for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result = word[index];\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpkgun2qqs: /tmp/tmpkgun2qqs.cpp:38: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string result =\
    \ \"\";\n    int min_distance = word.size();\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int j = i - 1;\n            while (j >= 0 && vowels.find(word[j]) != std::string::npos)\
    \ {\n                j--;\n            }\n            if (j >= 0) {\n        \
    \        int k = i + 1;\n                while (k < word.size() && vowels.find(word[k])\
    \ != std::string::npos) {\n                    k++;\n                }\n     \
    \           if (k < word.size()) {\n                    if (min_distance > k -\
    \ j) {\n                        min_distance = k - j;\n                      \
    \  result = word[i];\n                    }\n                }\n            }\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpja9361in: /tmp/tmpja9361in.cpp:41: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    int index = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpprd0v1ry: /tmp/tmpprd0v1ry.cpp:38: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int pos = -1;\n    for\
    \ (int i = word.size() - 1; i >= 0; i--) {\n        if (consonants.find(word[i])\
    \ != std::string::npos) {\n            pos = i;\n            break;\n        }\n\
    \    }\n    if (pos == -1) return \"\";\n    for (int i = pos - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            return\
    \ std::string(1, word[i]);\n        }\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpm7iw7i17: /tmp/tmpm7iw7i17.cpp:35: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n\tstd::string vowels = \"aeiouAEIOU\";\n\tstd::string result = \"\"\
    ;\n\tfor (int i = word.length() - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i])\
    \ != std::string::npos) {\n\t\t\tresult = word[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\
    \treturn result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n \
    \   assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpcwi1nkx1: /tmp/tmpcwi1nkx1.cpp:28: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    int len = word.length();\n\
    \    int i = len - 1;\n    while(i >= 0) {\n        if(vowels.find(word[i]) !=\
    \ std::string::npos) {\n            if(i == len - 1) {\n                return\
    \ \"\";\n            }\n            if(vowels.find(word[i+1]) == std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \     i--;\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmprzf0zrqh: /tmp/tmprzf0zrqh.cpp:34: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    int pos = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            pos = i;\n            break;\n        }\n    }\n    if (pos ==\
    \ -1) {\n        return \"\";\n    }\n    for (int i = pos - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(pos, 1);\n        }\n    }\n    return \"\";\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpbyoh1chh: /tmp/tmpbyoh1chh.cpp:38: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = 0;\n    for(int i = word.length() - 1; i >= 0; i--) {\n\
    \        if(consonants.find(word[i]) != std::string::npos) {\n            index\
    \ = i;\n            break;\n        }\n    }\n    for(int i = index - 1; i >=\
    \ 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos) {\n       \
    \     result = word[i];\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpfykfqivp: /tmp/tmpfykfqivp.cpp:36: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    int pos = word.length() -\
    \ 1;\n    while (pos > 0) {\n        if (vowels.find(word[pos]) != std::string::npos)\
    \ {\n            if (vowels.find(word[pos - 1]) == std::string::npos) {\n    \
    \            return word.substr(pos, 1);\n            }\n        }\n        pos--;\n\
    \    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp6zj4kfx0: /tmp/tmp6zj4kfx0.cpp:32: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::vector<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n    std::vector<char>\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};\n    std::string result = \"\";\n \
    \   int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n    \
    \    if (std::find(consonants.begin(), consonants.end(), word[i]) != consonants.end())\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return result;\n    }\n    int min_index = -1;\n    int min_distance\
    \ = INT_MAX;\n    for (int i = index; i >= 0; i--) {\n        if (std::find(vowels.begin(),\
    \ vowels.end(), word[i]) != vowels.end()) {\n            if (min_distance > index\
    \ - i) {\n                min_distance = index - i;\n                min_index\
    \ = i;\n            }\n        }\n    }\n    if (min_index != -1) {\n        result\
    \ = word[min_index];\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpac7lbyhz: /tmp/tmpac7lbyhz.cpp:46: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int word_size = word.size();\n\
    \    int vowel_pos = -1;\n    int consonant_pos = -1;\n    for (int i = word_size\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            vowel_pos = i;\n            break;\n        }\n    }\n    for\
    \ (int i = vowel_pos - 1; i >= 0; i--) {\n        if (consonants.find(word[i])\
    \ != std::string::npos) {\n            consonant_pos = i;\n            break;\n\
    \        }\n    }\n    if (vowel_pos == -1 || consonant_pos == -1) {\n       \
    \ return \"\";\n    }\n    return word.substr(vowel_pos, 1);\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp8md14otp: /tmp/tmp8md14otp.cpp:42: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n  std::string vowels = \"aeiou\";\n  std::string consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n  std::string result = \"\";\n  int index = 0;\n  for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n    if (consonants.find(word[i]) != std::string::npos)\
    \ {\n      index = i;\n      break;\n    }\n  }\n  for (int i = index; i >= 0;\
    \ i--) {\n    if (vowels.find(word[i]) != std::string::npos) {\n      result =\
    \ word[i];\n      break;\n    }\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp0lgereb3: /tmp/tmp0lgereb3.cpp:36: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    int index = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmps1xhszv9: /tmp/tmps1xhszv9.cpp:38: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   for (int j = i + 1; j < word.size(); j++) {\n                if (consonants.find(word[j])\
    \ != std::string::npos) {\n                    for (int k = j + 1; k < word.size();\
    \ k++) {\n                        if (vowels.find(word[k]) != std::string::npos)\
    \ {\n                            if (k - i < min_distance) {\n               \
    \                 min_distance = k - i;\n                                result\
    \ = word[k];\n                            }\n                        }\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpq835siog: /tmp/tmpq835siog.cpp:39: int main(): Assertion `candidate((\"\
    full\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int min_index = word.size();\n    for (int i = 0; i < word.size(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if\
    \ (i > 0 && vowels.find(word[i - 1]) == std::string::npos) {\n               \
    \ if (i < min_index) {\n                    min_index = i;\n                 \
    \   result = word[i];\n                }\n            }\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp17guekfg: /tmp/tmp17guekfg.cpp:31: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = word.size() -\
    \ 1;\n    while (i >= 0) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            break;\n        }\n        i--;\n    }\n    if (i < 0) {\n  \
    \      return \"\";\n    }\n    int j = i - 1;\n    while (j >= 0) {\n       \
    \ if (vowels.find(word[j]) != std::string::npos) {\n            break;\n     \
    \   }\n        j--;\n    }\n    if (j < 0) {\n        return \"\";\n    }\n  \
    \  return word.substr(j, 1);\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpyt0l1onz: /tmp/tmpyt0l1onz.cpp:42: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    int len = word.length();\n    int i = len - 1;\n    while(i >=\
    \ 0) {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u') {\n            if(i == len - 1) {\n              \
    \  return \"\";\n            }\n            else if(word[i - 1] == 'a' || word[i\
    \ - 1] == 'e' || word[i - 1] == 'i' || word[i - 1] == 'o' || word[i - 1] == 'u')\
    \ {\n                return \"\";\n            }\n            else {\n       \
    \         return word.substr(i, 1);\n            }\n        }\n        i--;\n\
    \    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpygmqr7u_: /tmp/tmpygmqr7u_.cpp:37: int main(): Assertion `candidate((\"\
    eAsy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int n = word.length();\n\
    \    for(int i = n-1; i >= 0; i--) {\n        if(consonants.find(word[i]) != std::string::npos)\
    \ {\n            for(int j = i-1; j >= 0; j--) {\n                if(vowels.find(word[j])\
    \ != std::string::npos) {\n                    return std::string(1, word[j]);\n\
    \                }\n            }\n        }\n    }\n    return \"\";\n}\nint\
    \ main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp1izavbae: /tmp/tmp1izavbae.cpp:32: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   for (int j = i + 1; j < word.size(); j++) {\n                if (consonants.find(word[j])\
    \ != std::string::npos) {\n                    if (j - i < min_distance) {\n \
    \                       min_distance = j - i;\n                        result\
    \ = word[i];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpmage5c0v: /tmp/tmpmage5c0v.cpp:35: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (consonants.find(word[i]) != std::string::npos) {\n     \
    \       for (int j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    if (j - i < min_distance) {\n \
    \                       min_distance = j - i;\n                        result\
    \ = word[j];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpdyihgwzr: /tmp/tmpdyihgwzr.cpp:35: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            index\
    \ = i;\n            break;\n        }\n    }\n    if (index == -1) {\n       \
    \ return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) == std::string::npos) {\n            result = word[index];\n\
    \            break;\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpursnhidm: /tmp/tmpursnhidm.cpp:40: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    int n = word.size();\n    for(int i = n-1; i >= 0; i--) {\n   \
    \     if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o'\
    \ || word[i] == 'u') {\n            if(i == n-1) {\n                return \"\"\
    ;\n            }\n            if(word[i+1] != 'a' && word[i+1] != 'e' && word[i+1]\
    \ != 'i' && word[i+1] != 'o' && word[i+1] != 'u') {\n                return word.substr(i,\
    \ 1);\n            }\n        }\n    }\n    return \"\";\n}\nint main() {\n  \
    \  auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp2578rjjs: /tmp/tmp2578rjjs.cpp:31: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n\tstd::string vowels = \"aeiou\";\n\tstd::string result = \"\";\n\t\
    int index = -1;\n\tfor (int i = word.length() - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i])\
    \ != std::string::npos) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index\
    \ != -1) {\n\t\tfor (int i = index - 1; i >= 0; i--) {\n\t\t\tif (vowels.find(word[i])\
    \ == std::string::npos) {\n\t\t\t\tresult = word[index];\n\t\t\t\tbreak;\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpgimvki4y: /tmp/tmpgimvki4y.cpp:39: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            int\
    \ j = i + 1;\n            while (j < word.size() && vowels.find(word[j]) != std::string::npos)\
    \ {\n                j++;\n            }\n            if (j < word.size()) {\n\
    \                int distance = j - i;\n                if (distance < min_distance)\
    \ {\n                    min_distance = distance;\n                    result\
    \ = word[i];\n                }\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpa_obcetg: /tmp/tmpa_obcetg.cpp:36: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int pos = -1;\n    for\
    \ (int i = word.size() - 1; i >= 0; i--) {\n        if (consonants.find(word[i])\
    \ != std::string::npos) {\n            pos = i;\n            break;\n        }\n\
    \    }\n    if (pos == -1) {\n        return \"\";\n    }\n    for (int i = pos\
    \ + 1; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            return word.substr(i, 1);\n        }\n    }\n    return \"\"\
    ;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpxa1pqkhd: /tmp/tmpxa1pqkhd.cpp:35: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    int n = word.length();\n\
    \    for(int i = n-1; i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            if(i == n-1) {\n                return \"\";\n            }\n\
    \            if(vowels.find(word[i+1]) == std::string::npos) {\n             \
    \   return word.substr(i, 1);\n            }\n        }\n    }\n    return \"\"\
    ;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp4bvj3i7j: /tmp/tmp4bvj3i7j.cpp:32: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n  std::string vowels = \"aeiouAEIOU\";\n  std::string consonants =\
    \ \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n  std::string result = \"\"\
    ;\n  int index = -1;\n  for (int i = word.length() - 1; i >= 0; i--) {\n    if\
    \ (consonants.find(word[i]) != std::string::npos) {\n      for (int j = i; j >=\
    \ 0; j--) {\n        if (vowels.find(word[j]) != std::string::npos) {\n      \
    \    index = j;\n          break;\n        }\n      }\n      break;\n    }\n \
    \ }\n  if (index != -1) {\n    for (int i = index; i >= 0; i--) {\n      if (consonants.find(word[i])\
    \ != std::string::npos) {\n        result = word[index];\n        break;\n   \
    \   }\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpxsq1ouns: /tmp/tmpxsq1ouns.cpp:50: int main(): Assertion `candidate((\"\
    quick\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n\tstd::string vowels = \"aeiouAEIOU\";\n\tint index = word.size() -\
    \ 1;\n\twhile (index >= 0) {\n\t\tif (vowels.find(word[index]) != std::string::npos)\
    \ {\n\t\t\tif (index == 0) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\telse if (vowels.find(word[index\
    \ - 1]) == std::string::npos) {\n\t\t\t\treturn word.substr(index, 1);\n\t\t\t\
    }\n\t\t}\n\t\tindex--;\n\t}\n\treturn \"\";\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpg922n4xv: /tmp/tmpg922n4xv.cpp:35: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = 0;\n    int min_index = 0;\n    int min_distance = 0;\n\
    \    int distance = 0;\n    for (int i = 0; i < word.length(); i++) {\n      \
    \  if (consonants.find(word[i]) != std::string::npos) {\n            index = i;\n\
    \            for (int j = 0; j < vowels.length(); j++) {\n                if (word.find(vowels[j],\
    \ index) != std::string::npos) {\n                    distance = word.find(vowels[j],\
    \ index) - index;\n                    if (distance < min_distance || min_distance\
    \ == 0) {\n                        min_distance = distance;\n                \
    \        min_index = word.find(vowels[j], index);\n                        result\
    \ = vowels[j];\n                    }\n                }\n            }\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp790ucc7q: /tmp/tmp790ucc7q.cpp:40: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            int\
    \ distance = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n   \
    \             if (vowels.find(word[j]) != std::string::npos) {\n             \
    \       break;\n                }\n                distance++;\n            }\n\
    \            if (distance < min_distance) {\n                min_distance = distance;\n\
    \                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmphlxrvjrj: /tmp/tmphlxrvjrj.cpp:36: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int min_distance = INT_MAX;\n\
    \    int min_index = -1;\n    for (int i = 0; i < word.size(); i++) {\n      \
    \  if (vowels.find(word[i]) != std::string::npos) {\n            int j = i + 1;\n\
    \            while (j < word.size() && consonants.find(word[j]) != std::string::npos)\
    \ {\n                j++;\n            }\n            if (j < word.size() && vowels.find(word[j])\
    \ == std::string::npos) {\n                if (j - i < min_distance) {\n     \
    \               min_distance = j - i;\n                    min_index = i;\n  \
    \              }\n            }\n        }\n    }\n    if (min_index == -1) {\n\
    \        return \"\";\n    }\n    return word.substr(min_index, 1);\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpsucu6dzu: /tmp/tmpsucu6dzu.cpp:39: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            int\
    \ distance = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n   \
    \             if (vowels.find(word[j]) != std::string::npos) {\n             \
    \       break;\n                }\n                distance++;\n            }\n\
    \            if (distance < min_distance) {\n                min_distance = distance;\n\
    \                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpoqpthdi6: /tmp/tmpoqpthdi6.cpp:36: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    int pos = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            pos = i;\n            break;\n        }\n    }\n    if (pos ==\
    \ -1) {\n        return \"\";\n    }\n    for (int i = pos - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(pos, 1);\n        }\n    }\n    return \"\";\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpxl0an2zs: /tmp/tmpxl0an2zs.cpp:38: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            if (i == 0) {\n                return result;\n\
    \            }\n            return word[index];\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp89ti_n3.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpp89ti_n3.cpp:31:30: error: could not convert \u2018word.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)index))\u2019\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   31 |             return word[index];\n      |                          \
    \    ^\n      |                              |\n      |                      \
    \        __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type {aka\
    \ char}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string consonants = \"\
    bcdfghjklmnpqrstvwxyz\";\n    std::string result = \"\";\n    int min_distance\
    \ = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            for (int j = i + 1; j < word.size(); j++)\
    \ {\n                if (consonants.find(word[j]) != std::string::npos) {\n  \
    \                  if (j - i < min_distance) {\n                        min_distance\
    \ = j - i;\n                        result = word[i];\n                    }\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpugnvy0kk: /tmp/tmpugnvy0kk.cpp:35: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (consonants.find(word[i]) != std::string::npos) {\n          \
    \  for (int j = i; j >= 0; j--) {\n                if (vowels.find(word[j]) !=\
    \ std::string::npos) {\n                    index = j;\n                    break;\n\
    \                }\n            }\n            break;\n        }\n    }\n    if\
    \ (index != -1) {\n        result = word[index];\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp_ea0m_x8: /tmp/tmp_ea0m_x8.cpp:38: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = 0;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (consonants.find(word[i]) != std::string::npos) {\n          \
    \  for (int j = i + 1; j < word.length(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    result = word[j];\n           \
    \         index = j;\n                    break;\n                }\n        \
    \    }\n            break;\n        }\n    }\n    for (int i = index + 1; i <\
    \ word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            result = \"\";\n            break;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpsmh9ts3n: /tmp/tmpsmh9ts3n.cpp:40: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string closest_vowel\
    \ = \"\";\n    int closest_vowel_index = -1;\n    for (int i = word.length() -\
    \ 1; i >= 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    if (closest_vowel_index == -1 ||\
    \ i - j < closest_vowel_index) {\n                        closest_vowel_index\
    \ = i - j;\n                        closest_vowel = word[j];\n               \
    \     }\n                }\n            }\n        }\n    }\n    return closest_vowel;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp20qr36tn: /tmp/tmp20qr36tn.cpp:36: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    int pos = word.length() -\
    \ 1;\n    while (pos > 0) {\n        if (vowels.find(word[pos]) != std::string::npos)\
    \ {\n            if (vowels.find(word[pos - 1]) == std::string::npos) {\n    \
    \            return word.substr(pos, 1);\n            }\n        }\n        pos--;\n\
    \    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpsydklnga: /tmp/tmpsydklnga.cpp:32: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp97eqbhde: /tmp/tmp97eqbhde.cpp:40: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            index\
    \ = i;\n            break;\n        }\n    }\n    if (index == -1) {\n       \
    \ return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) == std::string::npos) {\n            result = word[index];\n\
    \            break;\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp2kd8njff: /tmp/tmp2kd8njff.cpp:40: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   for (int j = i + 1; j < word.size(); j++) {\n                if (consonants.find(word[j])\
    \ != std::string::npos) {\n                    if (j - i < min_distance) {\n \
    \                       min_distance = j - i;\n                        result\
    \ = word[i];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp4x1ki598: /tmp/tmp4x1ki598.cpp:35: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            index\
    \ = i;\n            break;\n        }\n    }\n    if (index == -1) {\n       \
    \ return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) == std::string::npos) {\n            result = word[index];\n\
    \            break;\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpi_ahldsv: /tmp/tmpi_ahldsv.cpp:40: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    int min_distance = INT_MAX;\n    for (int i\
    \ = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            int distance = 0;\n            for (int j = i; j < word.length();\
    \ j++) {\n                if (consonants.find(word[j]) != std::string::npos) {\n\
    \                    distance = j - i;\n                    break;\n         \
    \       }\n            }\n            if (distance < min_distance) {\n       \
    \         min_distance = distance;\n                index = i;\n            }\n\
    \        }\n    }\n    if (index != -1) {\n        result = word[index];\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp0jvc7u5w: /tmp/tmp0jvc7u5w.cpp:41: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n\tstd::string vowels = \"aeiou\";\n\tint index = -1;\n\tfor (int i\
    \ = word.size() - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i]) != std::string::npos)\
    \ {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index == -1) {\n\t\treturn\
    \ \"\";\n\t}\n\tfor (int i = index - 1; i >= 0; i--) {\n\t\tif (vowels.find(word[i])\
    \ == std::string::npos) {\n\t\t\treturn word.substr(index, 1);\n\t\t}\n\t}\n\t\
    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpeixpp_ue: /tmp/tmpeixpp_ue.cpp:38: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    int distance = INT_MAX;\n    for (int i = 0;\
    \ i < word.length(); i++) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i + 1; j < word.length(); j++) {\n             \
    \   if (vowels.find(word[j]) != std::string::npos) {\n                    if (j\
    \ - i < distance) {\n                        distance = j - i;\n             \
    \           index = j;\n                    }\n                }\n           \
    \ }\n        }\n    }\n    if (index != -1) {\n        result = word[index];\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp7dj9g_rj: /tmp/tmp7dj9g_rj.cpp:38: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string res = \"\"\
    ;\n    int min_dist = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n\
    \        if (consonants.find(word[i]) != std::string::npos) {\n            for\
    \ (int j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    if (j - i < min_dist) {\n     \
    \                   min_dist = j - i;\n                        res = word[j];\n\
    \                    }\n                    break;\n                }\n      \
    \      }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp1qmxup2x: /tmp/tmp1qmxup2x.cpp:35: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int vowel_index = -1;\n    int consonant_index = -1;\n    for (int\
    \ i = word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            vowel_index = i;\n            break;\n        }\n    }\n    for\
    \ (int i = vowel_index - 1; i >= 0; i--) {\n        if (consonants.find(word[i])\
    \ != std::string::npos) {\n            consonant_index = i;\n            break;\n\
    \        }\n    }\n    if (vowel_index != -1 && consonant_index != -1) {\n   \
    \     result = word[vowel_index];\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp84jfkywd: /tmp/tmp84jfkywd.cpp:42: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            result = word[i];\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpzt6r7k2y: /tmp/tmpzt6r7k2y.cpp:28: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int distance = INT_MAX;\n    for (int i = word.size() - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            int\
    \ j = i - 1;\n            while (j >= 0 && vowels.find(word[j]) != std::string::npos)\
    \ {\n                j--;\n            }\n            if (j >= 0) {\n        \
    \        int temp = i - j;\n                if (temp < distance) {\n         \
    \           distance = temp;\n                    result = word[i];\n        \
    \        }\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpsr3w1uzz: /tmp/tmpsr3w1uzz.cpp:40: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (consonants.find(word[i]) != std::string::npos) {\n          \
    \  for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result = word[index];\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpq6ip0h2p: /tmp/tmpq6ip0h2p.cpp:38: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n  std::string vowels = \"aeiouAEIOU\";\n  int pos = word.size() - 1;\n\
    \  while (pos >= 0) {\n    if (vowels.find(word[pos]) != std::string::npos) {\n\
    \      if (pos == 0) {\n        return \"\";\n      }\n      if (vowels.find(word[pos\
    \ - 1]) == std::string::npos) {\n        return word.substr(pos, 1);\n      }\n\
    \    }\n    pos--;\n  }\n  return \"\";\n}\nint main() {\n    auto candidate =\
    \ get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp8ngiu01l: /tmp/tmp8ngiu01l.cpp:35: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int index = word.size() - 1;\n    while (index >= 0) {\n        if (vowels.find(word[index])\
    \ != std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n        index--;\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"\
    u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp1m_9ao6s: /tmp/tmp1m_9ao6s.cpp:30: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            index\
    \ = i;\n            break;\n        }\n    }\n    if (index == -1) {\n       \
    \ return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) == std::string::npos) {\n            result = word[index];\n\
    \            break;\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpr0xadcrs: /tmp/tmpr0xadcrs.cpp:40: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (consonants.find(word[i]) != std::string::npos) {\n          \
    \  for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result = word[index];\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpfbyjs83y: /tmp/tmpfbyjs83y.cpp:38: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    int len = word.length();\n\
    \    int i = len - 1;\n    while(i >= 0) {\n        if(vowels.find(word[i]) !=\
    \ std::string::npos) {\n            if(i == len - 1) {\n                return\
    \ \"\";\n            }\n            if(vowels.find(word[i+1]) == std::string::npos)\
    \ {\n                return word.substr(i, 1);\n            }\n        }\n   \
    \     i--;\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpt113wgzs: /tmp/tmpt113wgzs.cpp:34: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int len = word.length();\n\
    \    int i = len - 1;\n    while(i >= 0) {\n        if(consonants.find(word[i])\
    \ != std::string::npos) {\n            int j = i - 1;\n            while(j >=\
    \ 0) {\n                if(vowels.find(word[j]) != std::string::npos) {\n    \
    \                return word.substr(j, 1);\n                }\n              \
    \  j--;\n            }\n        }\n        i--;\n    }\n    return \"\";\n}\n\
    int main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp1rpzxqr8: /tmp/tmp1rpzxqr8.cpp:36: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int n = word.length();\n\
    \    for(int i = n-1; i >= 0; i--) {\n        if(consonants.find(word[i]) != std::string::npos)\
    \ {\n            for(int j = i-1; j >= 0; j--) {\n                if(vowels.find(word[j])\
    \ != std::string::npos) {\n                    return word.substr(j, 1);\n   \
    \             }\n            }\n        }\n    }\n    return \"\";\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpkkoj8cx0: /tmp/tmpkkoj8cx0.cpp:32: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    int pos = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            pos = i;\n            break;\n        }\n    }\n    if (pos ==\
    \ -1) {\n        return \"\";\n    }\n    for (int i = pos - 1; i >= 0; i--) {\n\
    \        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(pos, 1);\n        }\n    }\n    return \"\";\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpejngwyzy: /tmp/tmpejngwyzy.cpp:38: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (consonants.find(word[i]) != std::string::npos) {\n     \
    \       for (int j = 0; j < vowels.size(); j++) {\n                if (word.find(vowels[j])\
    \ != std::string::npos) {\n                    int distance = abs(i - word.find(vowels[j]));\n\
    \                    if (distance < min_distance) {\n                        min_distance\
    \ = distance;\n                        result = vowels[j];\n                 \
    \   }\n                }\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpedbuqec_: /tmp/tmpedbuqec_.cpp:35: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n  std::string vowels = \"aeiouAEIOU\";\n  int index = -1;\n  for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n    if (vowels.find(word[i]) != std::string::npos)\
    \ {\n      index = i;\n      break;\n    }\n  }\n  if (index == -1) {\n    return\
    \ \"\";\n  }\n  for (int i = index - 1; i >= 0; i--) {\n    if (vowels.find(word[i])\
    \ == std::string::npos) {\n      return word.substr(index, 1);\n    }\n  }\n \
    \ return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n   \
    \ assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp9ngj2lvh: /tmp/tmp9ngj2lvh.cpp:38: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n \
    \       if (vowels.find(word[i]) != std::string::npos) {\n            index =\
    \ i;\n            break;\n        }\n    }\n    if (index == -1) {\n        return\
    \ result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ == std::string::npos) {\n            result = word[index];\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp5sjojm2z: /tmp/tmp5sjojm2z.cpp:40: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n  std::string vowels = \"aeiou\";\n  std::string result = \"\";\n \
    \ int min_distance = word.size();\n  for (int i = 0; i < word.size(); i++) {\n\
    \    for (int j = 0; j < vowels.size(); j++) {\n      if (word[i] == vowels[j])\
    \ {\n        int distance = word.size() - i - 1;\n        if (distance < min_distance)\
    \ {\n          min_distance = distance;\n          result = word[i];\n       \
    \ }\n      }\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmppubkuofm: /tmp/tmppubkuofm.cpp:34: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int pos = -1;\n    for\
    \ (int i = word.size() - 1; i >= 0; i--) {\n        if (consonants.find(word[i])\
    \ != std::string::npos) {\n            pos = i;\n            break;\n        }\n\
    \    }\n    if (pos == -1) {\n        return \"\";\n    }\n    for (int i = pos\
    \ + 1; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            return std::string(1, word[i]);\n        }\n    }\n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpf1r8ttpk: /tmp/tmpf1r8ttpk.cpp:35: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            result = word[i];\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpw76yxmb5: /tmp/tmpw76yxmb5.cpp:28: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (consonants.find(word[i]) != std::string::npos) {\n          \
    \  for (int j = i + 1; j < word.length(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    if (index == -1) {\n          \
    \              index = j;\n                    } else {\n                    \
    \    if (j < index) {\n                            index = j;\n              \
    \          }\n                    }\n                }\n            }\n      \
    \  }\n    }\n    if (index != -1) {\n        result = word[index];\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpo_8lkqmr: /tmp/tmpo_8lkqmr.cpp:40: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    int pos = -1;\n    for\
    \ (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) !=\
    \ std::string::npos) {\n            pos = i;\n            break;\n        }\n\
    \    }\n    if (pos == -1) {\n        return \"\";\n    }\n    for (int i = pos\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos)\
    \ {\n            return word.substr(pos, 1);\n        }\n    }\n    return \"\"\
    ;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp5j2dmdh7: /tmp/tmp5j2dmdh7.cpp:38: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int len = word.length();\n\
    \    int i = len - 1;\n    while(i >= 0) {\n        if(consonants.find(word[i])\
    \ != std::string::npos) {\n            break;\n        }\n        i--;\n    }\n\
    \    if(i < 0) {\n        return \"\";\n    }\n    int j = i - 1;\n    while(j\
    \ >= 0) {\n        if(vowels.find(word[j]) != std::string::npos) {\n         \
    \   break;\n        }\n        j--;\n    }\n    if(j < 0) {\n        return \"\
    \";\n    }\n    int k = i + 1;\n    while(k < len) {\n        if(vowels.find(word[k])\
    \ != std::string::npos) {\n            break;\n        }\n        k++;\n    }\n\
    \    if(k == len) {\n        return \"\";\n    }\n    if(k - i < i - j) {\n  \
    \      return word.substr(k, 1);\n    }\n    return word.substr(j, 1);\n}\nint\
    \ main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp38xj0pto: /tmp/tmp38xj0pto.cpp:54: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int pos = -1;\n    for\
    \ (int i = word.size() - 1; i >= 0; i--) {\n        if (consonants.find(word[i])\
    \ != std::string::npos) {\n            pos = i;\n            break;\n        }\n\
    \    }\n    if (pos == -1) {\n        return \"\";\n    }\n    for (int i = pos\
    \ + 1; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            return std::string(1, word[i]);\n        }\n    }\n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpobv8egrm: /tmp/tmpobv8egrm.cpp:35: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int pos = -1;\n    for\
    \ (int i = word.size() - 1; i >= 0; i--) {\n        if (consonants.find(word[i])\
    \ != std::string::npos) {\n            pos = i;\n            break;\n        }\n\
    \    }\n    if (pos == -1) return \"\";\n    int min_dist = INT_MAX;\n    int\
    \ min_pos = -1;\n    for (int i = 0; i < vowels.size(); i++) {\n        int pos_vowel\
    \ = word.find(vowels[i]);\n        if (pos_vowel != std::string::npos && pos_vowel\
    \ < pos) {\n            if (pos - pos_vowel < min_dist) {\n                min_dist\
    \ = pos - pos_vowel;\n                min_pos = pos_vowel;\n            }\n  \
    \      }\n    }\n    if (min_pos == -1) return \"\";\n    return word.substr(min_pos,\
    \ 1);\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpa7f7lqet: /tmp/tmpa7f7lqet.cpp:42: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        for (int j = 0; j < vowels.size(); j++) {\n            if (word[i]\
    \ == vowels[j]) {\n                int distance = 0;\n                for (int\
    \ k = i; k < word.size(); k++) {\n                    if (consonants.find(word[k])\
    \ != std::string::npos) {\n                        distance++;\n             \
    \       } else {\n                        break;\n                    }\n    \
    \            }\n                if (distance < min_distance) {\n             \
    \       min_distance = distance;\n                    result = word[i];\n    \
    \            }\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpmf3k8810: /tmp/tmpmf3k8810.cpp:40: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n\tstd::string vowels = \"aeiouAEIOU\";\n\tstd::string consonants =\
    \ \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\tstd::string result = \"\"\
    ;\n\tint index = -1;\n\tfor (int i = word.length() - 1; i >= 0; i--) {\n\t\tif\
    \ (consonants.find(word[i]) != std::string::npos) {\n\t\t\tfor (int j = i - 1;\
    \ j >= 0; j--) {\n\t\t\t\tif (vowels.find(word[j]) != std::string::npos) {\n\t\
    \t\t\t\tindex = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\
    \t}\n\tif (index != -1) {\n\t\tresult = word[index];\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpyy_m7pp5: /tmp/tmpyy_m7pp5.cpp:38: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (consonants.find(word[i]) != std::string::npos) {\n     \
    \       for (int j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    if (j - i < min_distance) {\n \
    \                       min_distance = j - i;\n                        result\
    \ = word[j];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpcmged3a_: /tmp/tmpcmged3a_.cpp:35: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int pos = -1;\n    for (int i = word.length() - 1; i >= 0; i--) {\n\
    \        if (consonants.find(word[i]) != std::string::npos) {\n            for\
    \ (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j]) !=\
    \ std::string::npos) {\n                    pos = j;\n                    break;\n\
    \                }\n            }\n            break;\n        }\n    }\n    if\
    \ (pos != -1) {\n        result = word[pos];\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp76r63vs6: /tmp/tmp76r63vs6.cpp:38: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   for (int j = i + 1; j < word.size(); j++) {\n                if (consonants.find(word[j])\
    \ != std::string::npos) {\n                    for (int k = j + 1; k < word.size();\
    \ k++) {\n                        if (vowels.find(word[k]) != std::string::npos)\
    \ {\n                            if (k - i < min_distance) {\n               \
    \                 min_distance = k - i;\n                                result\
    \ = word[k];\n                            }\n                        }\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpra7nzpnh: /tmp/tmpra7nzpnh.cpp:39: int main(): Assertion `candidate((\"\
    full\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    int len = word.length();\n\
    \    for(int i = len - 1; i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            if(i == len - 1)\n                return \"\";\n            if(vowels.find(word[i+1])\
    \ == std::string::npos)\n                return word.substr(i, 1);\n        }\n\
    \    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpa4za4n48: /tmp/tmpa4za4n48.cpp:30: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (consonants.find(word[i]) != std::string::npos) {\n          \
    \  for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result = word[index];\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp6cyimglz: /tmp/tmp6cyimglz.cpp:38: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int pos = -1;\n    for\
    \ (int i = word.size() - 1; i >= 0; i--) {\n        if (consonants.find(word[i])\
    \ != std::string::npos) {\n            pos = i;\n            break;\n        }\n\
    \    }\n    if (pos == -1) return \"\";\n    int min_dist = INT_MAX;\n    int\
    \ min_pos = -1;\n    for (int i = 0; i < vowels.size(); i++) {\n        int pos_vowel\
    \ = word.find(vowels[i]);\n        if (pos_vowel != std::string::npos && pos_vowel\
    \ > pos) {\n            if (pos_vowel - pos < min_dist) {\n                min_dist\
    \ = pos_vowel - pos;\n                min_pos = pos_vowel;\n            }\n  \
    \      }\n    }\n    if (min_pos == -1) return \"\";\n    return word.substr(min_pos,\
    \ 1);\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpo343li0s: /tmp/tmpo343li0s.cpp:40: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            int\
    \ distance = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n   \
    \             if (vowels.find(word[j]) != std::string::npos) {\n             \
    \       break;\n                }\n                distance++;\n            }\n\
    \            if (distance < min_distance) {\n                min_distance = distance;\n\
    \                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpp39agtsm: /tmp/tmpp39agtsm.cpp:36: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    int n = word.size();\n   \
    \ for(int i = n-1; i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            if(i > 0 && vowels.find(word[i-1]) == std::string::npos) {\n\
    \                return word.substr(i, 1);\n            }\n            if(i <\
    \ n-1 && vowels.find(word[i+1]) == std::string::npos) {\n                return\
    \ word.substr(i, 1);\n            }\n        }\n    }\n    return \"\";\n}\nint\
    \ main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp2n5a2a68: /tmp/tmp2n5a2a68.cpp:32: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (consonants.find(word[i]) != std::string::npos) {\n     \
    \       for (int j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    if (j - i < min_distance) {\n \
    \                       min_distance = j - i;\n                        result\
    \ = word[j];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpf67mddzi: /tmp/tmpf67mddzi.cpp:35: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string closest_vowel\
    \ = \"\";\n    int closest_vowel_index = -1;\n    for (int i = word.length() -\
    \ 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n\
    \            if (closest_vowel_index == -1) {\n                closest_vowel_index\
    \ = i;\n                closest_vowel = word[i];\n            } else {\n     \
    \           if (i < closest_vowel_index) {\n                    closest_vowel_index\
    \ = i;\n                    closest_vowel = word[i];\n                }\n    \
    \        }\n        } else {\n            if (closest_vowel_index != -1) {\n \
    \               return closest_vowel;\n            }\n        }\n    }\n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp5bpvamb4: /tmp/tmp5bpvamb4.cpp:42: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n  std::string vowels = \"aeiou\";\n  std::string result = \"\";\n \
    \ int min_distance = INT_MAX;\n  for (int i = 0; i < word.size(); i++) {\n   \
    \ if (vowels.find(word[i]) != std::string::npos) {\n      int distance = 0;\n\
    \      for (int j = i + 1; j < word.size(); j++) {\n        if (vowels.find(word[j])\
    \ != std::string::npos) {\n          break;\n        }\n        distance++;\n\
    \      }\n      if (distance < min_distance) {\n        min_distance = distance;\n\
    \        result = word[i];\n      }\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp5w1_lzdj: /tmp/tmp5w1_lzdj.cpp:36: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string closest_vowel\
    \ = \"\";\n    int closest_vowel_index = -1;\n    for (int i = word.length() -\
    \ 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n\
    \            if (closest_vowel_index == -1) {\n                closest_vowel_index\
    \ = i;\n                closest_vowel = word[i];\n            } else {\n     \
    \           if (i < closest_vowel_index) {\n                    closest_vowel_index\
    \ = i;\n                    closest_vowel = word[i];\n                }\n    \
    \        }\n        } else {\n            if (closest_vowel_index != -1) {\n \
    \               return closest_vowel;\n            }\n        }\n    }\n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp7xwlnsyd: /tmp/tmp7xwlnsyd.cpp:42: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n\tstd::string vowels = \"aeiouAEIOU\";\n\tstd::string consonants =\
    \ \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\tstd::string result = \"\"\
    ;\n\tint index = -1;\n\tfor (int i = word.length() - 1; i >= 0; i--) {\n\t\tif\
    \ (consonants.find(word[i]) != std::string::npos) {\n\t\t\tfor (int j = i - 1;\
    \ j >= 0; j--) {\n\t\t\t\tif (vowels.find(word[j]) != std::string::npos) {\n\t\
    \t\t\t\tindex = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\
    \t}\n\tif (index != -1) {\n\t\tresult = word[index];\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmprma16yuh: /tmp/tmprma16yuh.cpp:38: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string closest_vowel\
    \ = \"\";\n    int closest_vowel_index = -1;\n    for (int i = word.length() -\
    \ 1; i >= 0; i--) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            for (int j = i + 1; j < word.length(); j++) {\n             \
    \   if (vowels.find(word[j]) != std::string::npos) {\n                    if (closest_vowel_index\
    \ == -1 || j < closest_vowel_index) {\n                        closest_vowel_index\
    \ = j;\n                        closest_vowel = word[j];\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return closest_vowel;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpmdiv5eab: /tmp/tmpmdiv5eab.cpp:34: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n  std::string vowels = \"aeiou\";\n  std::string result = \"\";\n \
    \ int min_distance = INT_MAX;\n  for (int i = 0; i < word.size(); i++) {\n   \
    \ if (vowels.find(word[i]) != std::string::npos) {\n      int j = i + 1;\n   \
    \   while (j < word.size() && vowels.find(word[j]) != std::string::npos) {\n \
    \       j++;\n      }\n      if (j < word.size()) {\n        int distance = j\
    \ - i;\n        if (distance < min_distance) {\n          min_distance = distance;\n\
    \          result = word[i];\n        }\n      }\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp57urh3is: /tmp/tmp57urh3is.cpp:36: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    int pos = -1;\n    for\
    \ (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) !=\
    \ std::string::npos) {\n            pos = i;\n            break;\n        }\n\
    \    }\n    if (pos == -1) return \"\";\n    for (int i = pos - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(pos, 1);\n        }\n    }\n    return \"\";\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpz13guhum: /tmp/tmpz13guhum.cpp:36: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (consonants.find(word[i]) != std::string::npos) {\n     \
    \       for (int j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    if (j - i < min_distance) {\n \
    \                       min_distance = j - i;\n                        result\
    \ = word[j];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpvxycjrts: /tmp/tmpvxycjrts.cpp:35: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (consonants.find(word[i]) != std::string::npos) {\n     \
    \       for (int j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    if (j - i < min_distance) {\n \
    \                       min_distance = j - i;\n                        result\
    \ = word[j];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpgz5mo8au: /tmp/tmpgz5mo8au.cpp:35: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            for\
    \ (int j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ == std::string::npos) {\n                    if (j - i < min_distance) {\n \
    \                       min_distance = j - i;\n                        result\
    \ = word[i];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp749g_b55: /tmp/tmp749g_b55.cpp:34: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int word_size = word.size();\n\
    \    int i = word_size - 1;\n    while(i >= 0) {\n        if(consonants.find(word[i])\
    \ != std::string::npos) {\n            int j = i - 1;\n            while(j >=\
    \ 0) {\n                if(vowels.find(word[j]) != std::string::npos) {\n    \
    \                return word.substr(j, 1);\n                }\n              \
    \  j--;\n            }\n        }\n        i--;\n    }\n    return \"\";\n}\n\
    int main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp_smjyot_: /tmp/tmp_smjyot_.cpp:36: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n\tstd::string vowels = \"aeiou\";\n\tstd::string result = \"\";\n\t\
    int index = word.length() - 1;\n\twhile (index >= 0) {\n\t\tif (vowels.find(word[index])\
    \ != std::string::npos) {\n\t\t\tresult = word[index];\n\t\t\tbreak;\n\t\t}\n\t\
    \tindex--;\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpwmqz7yy9: /tmp/tmpwmqz7yy9.cpp:30: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (consonants.find(word[i]) != std::string::npos) {\n          \
    \  for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    result = word[j];\n           \
    \         index = j;\n                    break;\n                }\n        \
    \    }\n            if (index != -1) {\n                break;\n            }\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp1rvevzob: /tmp/tmp1rvevzob.cpp:38: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            index\
    \ = i;\n            break;\n        }\n    }\n    if (index == -1) {\n       \
    \ return result;\n    }\n    for (int i = index - 1; i >= 0; i--) {\n        if\
    \ (vowels.find(word[i]) == std::string::npos) {\n            result = word[index];\n\
    \            break;\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpcnll0dbw: /tmp/tmpcnll0dbw.cpp:40: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = word.size() -\
    \ 1;\n    while (i >= 0) {\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            if (i == 0) {\n                return \"\";\n            }\n\
    \            if (vowels.find(word[i - 1]) != std::string::npos) {\n          \
    \      return word.substr(i - 1, 1);\n            }\n        }\n        i--;\n\
    \    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpddlnmd2l: /tmp/tmpddlnmd2l.cpp:34: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    int n = word.length();\n\
    \    int i = n - 1;\n    while(i >= 0) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            if(i == n - 1) {\n                return \"\";\n            }\n\
    \            if(vowels.find(word[i + 1]) == std::string::npos) {\n           \
    \     return word.substr(i, 1);\n            }\n        }\n        i--;\n    }\n\
    \    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp4q888dgk: /tmp/tmp4q888dgk.cpp:34: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string result =\
    \ \"\";\n    int index = word.size() - 1;\n    while (index >= 0) {\n        if\
    \ (vowels.find(word[index]) != std::string::npos) {\n            result = word[index];\n\
    \            break;\n        }\n        index--;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpl2n1phuy: /tmp/tmpl2n1phuy.cpp:30: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    int i = word.size() - 1;\n    while (i >= 0) {\n        if (word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\
    \ {\n            if (i == word.size() - 1) {\n                return \"\";\n \
    \           }\n            if (word[i - 1] == 'a' || word[i - 1] == 'e' || word[i\
    \ - 1] == 'i' || word[i - 1] == 'o' || word[i - 1] == 'u') {\n               \
    \ return \"\";\n            }\n            return word.substr(i, 1);\n       \
    \ }\n        i--;\n    }\n    return \"\";\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp6jyw614e: /tmp/tmp6jyw614e.cpp:34: int main(): Assertion `candidate((\"\
    eAsy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    int pos = word.size() - 1;\n\
    \    while (pos >= 0) {\n        if (vowels.find(word[pos]) != std::string::npos)\
    \ {\n            if (pos > 0 && vowels.find(word[pos - 1]) == std::string::npos)\
    \ {\n                return word.substr(pos, 1);\n            }\n        }\n \
    \       pos--;\n    }\n    return \"\";\n}\nint main() {\n    auto candidate =\
    \ get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp10z4mu63: /tmp/tmp10z4mu63.cpp:32: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_index = -1;\n    for (int i = 0; i < word.length(); i++)\
    \ {\n        if (consonants.find(word[i]) != std::string::npos) {\n          \
    \  for (int j = i + 1; j < word.length(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    if (min_index == -1) {\n      \
    \                  min_index = j;\n                        result = word[j];\n\
    \                    } else if (j < min_index) {\n                        min_index\
    \ = j;\n                        result = word[j];\n                    }\n   \
    \             }\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp0fys8vbh: /tmp/tmp0fys8vbh.cpp:37: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    int index = -1;\n   \
    \ for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            index = i;\n            break;\n      \
    \  }\n    }\n    if (index == -1) return \"\";\n    for (int i = index - 1; i\
    \ >= 0; i--) {\n        if (vowels.find(word[i]) == std::string::npos) {\n   \
    \         return word.substr(index, 1);\n        }\n    }\n    return \"\";\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpmrwsez3_: /tmp/tmpmrwsez3_.cpp:36: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string result =\
    \ \"\";\n    int index = 0;\n    int min_index = word.length();\n    for (int\
    \ i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            if (index > 0 && index < min_index) {\n\
    \                if (vowels.find(word[index - 1]) == std::string::npos && vowels.find(word[index\
    \ + 1]) == std::string::npos) {\n                    min_index = index;\n    \
    \                result = word[index];\n                }\n            }\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmphsxpuce0: /tmp/tmphsxpuce0.cpp:33: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    int len = word.length();\n\
    \    for(int i = len - 1; i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            if(i == len - 1) {\n                return \"\";\n          \
    \  }\n            if(vowels.find(word[i + 1]) == std::string::npos) {\n      \
    \          return word.substr(i, 1);\n            }\n        }\n    }\n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpabrixr1f: /tmp/tmpabrixr1f.cpp:32: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            int\
    \ distance = word.size() - i - 1;\n            if (distance < min_distance) {\n\
    \                min_distance = distance;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpo6am49_k: /tmp/tmpo6am49_k.cpp:32: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int min_dist = INT_MAX;\n    for (int i = 0; i < word.size(); i++) {\n\
    \        if (vowels.find(word[i]) != std::string::npos) {\n            int dist\
    \ = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n            \
    \    if (vowels.find(word[j]) != std::string::npos) {\n                    break;\n\
    \                }\n                dist++;\n            }\n            if (dist\
    \ < min_dist) {\n                min_dist = dist;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpmixz3d3s: /tmp/tmpmixz3d3s.cpp:36: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n\tstd::string vowels = \"aeiouAEIOU\";\n\tstd::string result = \"\"\
    ;\n\tint distance = 0;\n\tfor (int i = word.length() - 1; i >= 0; i--) {\n\t\t\
    if (vowels.find(word[i]) != std::string::npos) {\n\t\t\tif (i == word.length()\
    \ - 1) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tif (vowels.find(word[i + 1])\
    \ != std::string::npos) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (result == \"\"\
    ) {\n\t\t\t\tresult = word[i];\n\t\t\t\tdistance = word.length() - i;\n\t\t\t\
    }\n\t\t\telse {\n\t\t\t\tif (word.length() - i < distance) {\n\t\t\t\t\tresult\
    \ = word[i];\n\t\t\t\t\tdistance = word.length() - i;\n\t\t\t\t}\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpek2xthac: /tmp/tmpek2xthac.cpp:43: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (consonants.find(word[i]) != std::string::npos) {\n          \
    \  if (index == -1) {\n                index = i;\n            } else {\n    \
    \            if (vowels.find(word[i + 1]) != std::string::npos) {\n          \
    \          result = word[i + 1];\n                    break;\n               \
    \ }\n            }\n        }\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmppfuetst7: /tmp/tmppfuetst7.cpp:43: int main(): Assertion `candidate((\"\
    quick\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            int\
    \ distance = 0;\n            for (int j = i; j < word.size(); j++) {\n       \
    \         if (vowels.find(word[j]) != std::string::npos) {\n                 \
    \   distance = 0;\n                } else {\n                    distance++;\n\
    \                }\n                if (distance > 1) {\n                    break;\n\
    \                }\n            }\n            if (distance == 1) {\n        \
    \        if (min_distance > distance) {\n                    min_distance = distance;\n\
    \                    result = word[i];\n                }\n            }\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpr0mnq017: /tmp/tmpr0mnq017.cpp:42: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n\tstd::string vowels = \"aeiou\";\n\tint len = word.length();\n\tint\
    \ pos = len - 1;\n\twhile (pos >= 0) {\n\t\tif (vowels.find(word[pos]) != std::string::npos)\
    \ {\n\t\t\tif (pos == 0) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\tif (vowels.find(word[pos\
    \ - 1]) == std::string::npos) {\n\t\t\t\treturn word.substr(pos, 1);\n\t\t\t}\n\
    \t\t}\n\t\tpos--;\n\t}\n\treturn \"\";\n}\nint main() {\n    auto candidate =\
    \ get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp_ns114ka: /tmp/tmp_ns114ka.cpp:36: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    int index = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp_io3ab_c: /tmp/tmp_io3ab_c.cpp:38: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    int len = word.length();\n\
    \    for(int i = len - 1; i >= 0; i--) {\n        if(vowels.find(word[i]) != std::string::npos)\
    \ {\n            if(i == len - 1) {\n                return \"\";\n          \
    \  }\n            if(vowels.find(word[i + 1]) == std::string::npos) {\n      \
    \          return word.substr(i, 1);\n            }\n        }\n    }\n    return\
    \ \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpysqtt6xv: /tmp/tmpysqtt6xv.cpp:32: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            int\
    \ distance = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n   \
    \             if (vowels.find(word[j]) != std::string::npos) {\n             \
    \       break;\n                }\n                distance++;\n            }\n\
    \            if (distance < min_distance) {\n                min_distance = distance;\n\
    \                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpteindg3f: /tmp/tmpteindg3f.cpp:36: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (consonants.find(word[i]) != std::string::npos) {\n          \
    \  for (int j = i + 1; j < word.length(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result = word[index];\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp3ggtukgn: /tmp/tmp3ggtukgn.cpp:36: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    int index = -1;\n    for (int\
    \ i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            index = i;\n            break;\n        }\n    }\n    if (index\
    \ == -1) {\n        return \"\";\n    }\n    for (int i = index - 1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) == std::string::npos) {\n            return\
    \ word.substr(index, 1);\n        }\n    }\n    return \"\";\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpvs36_ul8: /tmp/tmpvs36_ul8.cpp:38: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = 0;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (consonants.find(word[i]) != std::string::npos) {\n          \
    \  index = i;\n            break;\n        }\n    }\n    for (int i = index; i\
    \ >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n   \
    \         result = word[i];\n            break;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpnt33phr7: /tmp/tmpnt33phr7.cpp:36: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (consonants.find(word[i]) != std::string::npos) {\n          \
    \  for (int j = i - 1; j >= 0; j--) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    if (index != -1) {\n        result += word[index];\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpbu1mb52q: /tmp/tmpbu1mb52q.cpp:38: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n  std::string vowels = \"aeiouAEIOU\";\n  std::string consonants =\
    \ \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n  std::string result = \"\"\
    ;\n  int pos = -1;\n  for (int i = word.length() - 1; i >= 0; i--) {\n    if (consonants.find(word[i])\
    \ != std::string::npos) {\n      for (int j = i - 1; j >= 0; j--) {\n        if\
    \ (vowels.find(word[j]) != std::string::npos) {\n          result = word[j];\n\
    \          pos = j;\n          break;\n        }\n      }\n      if (pos != -1)\
    \ break;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp2pvd76ru: /tmp/tmp2pvd76ru.cpp:36: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = -1;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (consonants.find(word[i]) != std::string::npos) {\n          \
    \  if (index == -1) {\n                index = i;\n            } else {\n    \
    \            for (int j = i + 1; j < index; j++) {\n                    if (vowels.find(word[j])\
    \ != std::string::npos) {\n                        result = word[j];\n       \
    \                 break;\n                    }\n                }\n         \
    \       break;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpmjh2pa27: /tmp/tmpmjh2pa27.cpp:37: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int index = 0;\n    for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n        if (consonants.find(word[i]) != std::string::npos) {\n          \
    \  index = i;\n            break;\n        }\n    }\n    for (int i = index -\
    \ 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n\
    \            result = word[i];\n            break;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp0rel6lua: /tmp/tmp0rel6lua.cpp:36: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string result =\
    \ \"\";\n    int distance = INT_MAX;\n    for (int i = word.size() - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int j = i - 1;\n            while (j >= 0 && vowels.find(word[j]) != std::string::npos)\
    \ {\n                j--;\n            }\n            if (j >= 0) {\n        \
    \        if (i - j < distance) {\n                    distance = i - j;\n    \
    \                result = word[i];\n                }\n            }\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp1zl01vjb: /tmp/tmp1zl01vjb.cpp:39: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int min_distance = INT_MAX;\n    for (int i = word.size() - 1; i >= 0;\
    \ i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   int j = i - 1;\n            while (j >= 0 && vowels.find(word[j]) != std::string::npos)\
    \ {\n                j--;\n            }\n            if (j >= 0) {\n        \
    \        int distance = i - j;\n                if (distance < min_distance) {\n\
    \                    min_distance = distance;\n                    result = word[i];\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmplziv9rld: /tmp/tmplziv9rld.cpp:40: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size(); i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            int\
    \ distance = 0;\n            for (int j = i + 1; j < word.size(); j++) {\n   \
    \             if (vowels.find(word[j]) != std::string::npos) {\n             \
    \       break;\n                }\n                distance++;\n            }\n\
    \            if (distance < min_distance) {\n                min_distance = distance;\n\
    \                result = word[i];\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpw43_iv7q: /tmp/tmpw43_iv7q.cpp:36: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            result = word[i];\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpsw6fyp1o: /tmp/tmpsw6fyp1o.cpp:28: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    int pos = word.size()\
    \ - 1;\n    while (pos >= 0) {\n        if (vowels.find(word[pos]) != std::string::npos)\
    \ {\n            if (pos == 0) {\n                return \"\";\n            }\n\
    \            if (vowels.find(word[pos - 1]) == std::string::npos) {\n        \
    \        return word.substr(pos, 1);\n            }\n        }\n        pos--;\n\
    \    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp9dkm85j5: /tmp/tmp9dkm85j5.cpp:35: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (consonants.find(word[i]) != std::string::npos) {\n     \
    \       for (int j = i + 1; j < word.size(); j++) {\n                if (vowels.find(word[j])\
    \ != std::string::npos) {\n                    if (j - i < min_distance) {\n \
    \                       min_distance = j - i;\n                        result\
    \ = word[j];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpeh9n80gl: /tmp/tmpeh9n80gl.cpp:35: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result =\
    \ \"\";\n    int min_distance = INT_MAX;\n    for (int i = 0; i < word.size();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   for (int j = i + 1; j < word.size(); j++) {\n                if (consonants.find(word[j])\
    \ != std::string::npos) {\n                    int distance = j - i;\n       \
    \             if (distance < min_distance) {\n                        min_distance\
    \ = distance;\n                        result = word[i];\n                   \
    \ }\n                    break;\n                }\n            }\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpvldqwmr4: /tmp/tmpvldqwmr4.cpp:36: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiou\";\n    std::string result = \"\"\
    ;\n    for (int i = word.size() - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            result = word[i];\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpbgawrvrj: /tmp/tmpbgawrvrj.cpp:28: int main(): Assertion `candidate((\"\
    easy\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n  std::string vowels = \"aeiou\";\n  int index = -1;\n  for (int i\
    \ = word.size() - 1; i >= 0; i--) {\n    if (vowels.find(word[i]) != std::string::npos)\
    \ {\n      index = i;\n      break;\n    }\n  }\n  if (index == -1) {\n    return\
    \ \"\";\n  }\n  for (int i = index - 1; i >= 0; i--) {\n    if (vowels.find(word[i])\
    \ == std::string::npos) {\n      return word.substr(index, 1);\n    }\n  }\n \
    \ return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n   \
    \ assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp94ohc2a5: /tmp/tmp94ohc2a5.cpp:38: int main(): Assertion `candidate((\"\
    ali\")) == (\"\")' failed.\n"
  exit_code: -6
  status: Exception
