name: HumanEval_80_is_happy
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int length = s.length();\n   \
    \ if(length < 3)\n        return false;\n    for(int i = 0; i < length-2; i++)\n\
    \    {\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n   \
    \         return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int len = s.length();\n    if(len\
    \ < 3)\n        return false;\n    for(int i = 0; i < len - 2; i++)\n    {\n \
    \       if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n           \
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length() < 3)\n    return false;\n\
    \  for(int i = 0; i < s.length() - 2; i++)\n    if(s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2])\n      return false;\n  return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int len = s.length();\n    if(len\
    \ < 3)\n        return false;\n    for(int i = 0; i < len - 2; i++)\n    {\n \
    \       if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n           \
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length() < 3)\n    return false;\n\
    \  for(int i = 0; i < s.length() - 2; i++)\n    if(s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2])\n      return false;\n  return true;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length()<3)\n    return false;\n\
    \  for(int i=0;i<s.length()-2;i++)\n  {\n    if(s[i]==s[i+1] || s[i]==s[i+2] ||\
    \ s[i+1]==s[i+2])\n      return false;\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length()<3)\n    return false;\n\
    \  for(int i=0;i<s.length()-2;i++)\n  {\n    if(s[i]==s[i+1] || s[i]==s[i+2] ||\
    \ s[i+1]==s[i+2])\n      return false;\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3) return false;\n\
    \    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2]\
    \ || s[i+1]==s[i+2]) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length()<3)\n    return false;\n\
    \  for(int i=0;i<s.length()-2;i++)\n  {\n    if(s[i]==s[i+1] || s[i]==s[i+2] ||\
    \ s[i+1]==s[i+2])\n      return false;\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // your code here\n    int len\
    \ = s.length();\n    if(len < 3)\n        return false;\n    for(int i = 0; i\
    \ < len - 2; i++)\n    {\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1]\
    \ == s[i+2])\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length()<3)\n    return false;\n\
    \  for(int i=0;i<s.length()-2;i++)\n  {\n    if(s[i]==s[i+1] || s[i]==s[i+2] ||\
    \ s[i+1]==s[i+2])\n      return false;\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i]==s[i+2])\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxpvz6rhp: /tmp/tmpxpvz6rhp.cpp:28: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length() < 3) return false;\n\
    \  for(int i = 0; i < s.length() - 2; i++) {\n    if(s[i] == s[i+1] || s[i] ==\
    \ s[i+2] || s[i+1] == s[i+2]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // your code here\n    if(s.length()\
    \ < 3)\n        return false;\n    for(int i = 0; i < s.length() - 2; i++)\n \
    \   {\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n    \
    \        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3) return false;\n\
    \    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2]\
    \ || s[i+1]==s[i+2]) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tif (s.length() < 3) {\n\t\treturn\
    \ false;\n\t}\n\tfor (int i = 0; i < s.length() - 2; i++) {\n\t\tif (s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Write your code here\n    if(s.length()<3)\n\
    \        return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int len = s.length();\n    if(len\
    \ < 3) return false;\n    for(int i = 0; i < len - 2; i++) {\n        if(s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int len = s.length();\n    if(len\
    \ < 3)\n        return false;\n    for(int i = 0; i < len - 2; i++)\n    {\n \
    \       if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n           \
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Write your code here\n    if(s.length()<3)\n\
    \        return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  int len = s.length();\n  if (len\
    \ < 3) return false;\n  for (int i = 0; i < len - 2; i++) {\n    if (s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Write your code here\n    if(s.length()<3)\n\
    \        return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Write your code here\n    if(s.length()<3)\n\
    \        return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tif (s.length() < 3) {\n\t\treturn\
    \ false;\n\t}\n\tfor (int i = 0; i < s.length() - 2; i++) {\n\t\tif (s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3) return false;\n\
    \    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2]\
    \ || s[i+1]==s[i+2]) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Write your code here\n    if(s.length()\
    \ < 3)\n        return false;\n    for(int i = 0; i < s.length() - 2; i++)\n \
    \   {\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n    \
    \        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length()<3)\n    return false;\n\
    \  for(int i=0;i<s.length()-2;i++)\n  {\n    if(s[i]==s[i+1] || s[i]==s[i+2] ||\
    \ s[i+1]==s[i+2])\n      return false;\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length() < 3) return false;\n\
    \  for(int i = 0; i < s.length() - 2; i++) {\n    if(s[i] == s[i+1] || s[i] ==\
    \ s[i+2] || s[i+1] == s[i+2]) return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3) return false;\n\
    \    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2]\
    \ || s[i+1]==s[i+2]) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length() < 3) return false;\n\
    \  for(int i = 0; i < s.length() - 2; i++) {\n    if(s[i] == s[i+1] || s[i] ==\
    \ s[i+2] || s[i+1] == s[i+2]) return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tif (s.length() < 3) {\n\t\treturn\
    \ false;\n\t}\n\tfor (int i = 0; i < s.length() - 2; i++) {\n\t\tif (s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length()<3)\n    return false;\n\
    \  for(int i=0;i<s.length()-2;i++)\n  {\n    if(s[i]==s[i+1] || s[i]==s[i+2] ||\
    \ s[i+1]==s[i+2])\n      return false;\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n\tif (s.length() < 3)\n\t\treturn\
    \ false;\n\tfor (int i = 0; i < s.length() - 2; i++) {\n\t\tif (s[i] == s[i +\
    \ 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n\t\t\treturn false;\n\t}\n\t\
    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3) return false;\n\
    \    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2]\
    \ || s[i+1]==s[i+2]) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ && s[i]==s[i+2])\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpaytmd8jh: /tmp/tmpaytmd8jh.cpp:28: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3) return false;\n\
    \    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2]\
    \ || s[i+1]==s[i+2]) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Write your code here\n    if(s.length()\
    \ < 3)\n        return false;\n    for(int i = 0; i < s.length() - 2; i++)\n \
    \   {\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n    \
    \        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3) return false;\n\
    \    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2]\
    \ || s[i+1]==s[i+2]) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  // your code here\n  if(s.length()<3)\n\
    \  return false;\n  for(int i=0;i<s.length()-2;i++)\n  {\n    if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])\n\
    \    return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate =\
    \ is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3) return false;\n\
    \    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2]\
    \ || s[i+1]==s[i+2]) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n  if(s.length()<3)\n    return false;\n\
    \  for(int i=0;i<s.length()-2;i++)\n  {\n    if(s[i]==s[i+1] || s[i]==s[i+2] ||\
    \ s[i+1]==s[i+2])\n      return false;\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Write your code here\n    if(s.length()<3)\n\
    \        return false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3) return false;\n\
    \    for(int i = 0; i < s.length() - 2; i++) {\n        if(s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int len = s.length();\n    if(len\
    \ < 3) return false;\n    for(int i = 0; i < len - 2; i++) {\n        if(s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length() < 3)\n        return\
    \ false;\n    for(int i = 0; i < s.length() - 2; i++)\n        if(s[i] == s[i\
    \ + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3) return false;\n\
    \    for(int i=0;i<s.length()-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2]\
    \ || s[i+1]==s[i+2]) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    if(s.length()<3)\n        return\
    \ false;\n    for(int i=0;i<s.length()-2;i++)\n    {\n        if(s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
