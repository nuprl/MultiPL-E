language: cpp
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (i % 2 == 0) {\n            res.push_back(lst[i / 2]);\n\
    \        } else {\n            res.push_back(lst[lst.size() - 1 - i / 2]);\n \
    \       }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi1eqvxm0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7z9hbh6y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    if (i != j) {\n\
    \      result.push_back(lst[j]);\n    }\n    i++;\n    j--;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxtd6zajt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while (i\
    \ < lst.size()) {\n        result.push_back(lst[i]);\n        if (i + 1 < lst.size())\
    \ {\n            result.push_back(lst[lst.size() - 1 - i]);\n        }\n     \
    \   i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfp3fukz_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n \
    \       if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpog_0l4ju.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) {\n        return lst;\n    }\n    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        if (i != j) {\n            result.push_back(lst[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpulebzd4q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i !=\
    \ j) {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprqfiyci7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  while (lst.size()\
    \ > 0) {\n    result.push_back(lst[i]);\n    lst.erase(lst.begin() + i);\n   \
    \ if (lst.size() > 0) {\n      result.push_back(lst[lst.size() - 1]);\n      lst.erase(lst.begin()\
    \ + lst.size() - 1);\n    }\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm_m33o3n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    int n\
    \ = lst.size();\n    if(n == 0) return lst;\n    std::vector<long> res;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0, j = n - 1;\n    while(i <= j) {\n        res.push_back(lst[i]);\n\
    \        if(i != j) res.push_back(lst[j]);\n        i++;\n        j--;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt1nbv8pi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while (i\
    \ < lst.size()) {\n        result.push_back(lst[i]);\n        if (i + 1 < lst.size())\
    \ {\n            result.push_back(lst[lst.size() - 1 - i]);\n        }\n     \
    \   i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfp3fukz_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if(lst.size() == 0)\n        return result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while(i <= j)\
    \ {\n        result.push_back(lst[i]);\n        if(i != j)\n            result.push_back(lst[j]);\n\
    \        i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd6yvotg8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7z9hbh6y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    if (i != j) {\n\
    \      result.push_back(lst[j]);\n    }\n    i++;\n    j--;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxtd6zajt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        if (i != j) {\n            result.push_back(lst[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp78wvjh5u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ sorted_lst;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int\
    \ j = lst.size() - 1;\n    while (i <= j) {\n        sorted_lst.push_back(lst[i]);\n\
    \        if (i != j) {\n            sorted_lst.push_back(lst[j]);\n        }\n\
    \        i++;\n        j--;\n    }\n    return sorted_lst;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqi68v8tx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n \
    \       if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpog_0l4ju.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n \
    \       if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpog_0l4ju.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  if (lst.size() == 0) {\n    return result;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n \
    \   result.push_back(lst[i]);\n    i++;\n    if (i <= j) {\n      result.push_back(lst[j]);\n\
    \      j--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7fv5k77g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  if (lst.size() == 0) {\n    return result;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  while (lst.size() > 0) {\n    result.push_back(lst[i]);\n\
    \    lst.erase(lst.begin() + i);\n    if (lst.size() == 0) {\n      break;\n \
    \   }\n    if (i == 0) {\n      i = lst.size() - 1;\n    } else {\n      i = 0;\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8yuv3vjg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    if (i != j) {\n\
    \      result.push_back(lst[j]);\n    }\n    i++;\n    j--;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxtd6zajt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) {\n        return lst;\n    }\n    std::vector<long> res;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        res.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n   \
    \         res.push_back(lst[j]);\n            j--;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqbeo7kmr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl1vvtbwg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        if (i != j) {\n            result.push_back(lst[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp78wvjh5u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i !=\
    \ j) {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprqfiyci7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n \
    \       if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpog_0l4ju.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::vector<long> sorted = lst;\n    std::sort(sorted.begin(),\
    \ sorted.end());\n    int i = 0;\n    int j = sorted.size() - 1;\n    while (i\
    \ <= j) {\n        result.push_back(sorted[i]);\n        if (i != j) {\n     \
    \       result.push_back(sorted[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5n32feu8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i < j) {\n        result.push_back(lst[i]);\n  \
    \      result.push_back(lst[j]);\n        i++;\n        j--;\n    }\n    if (i\
    \ == j) {\n        result.push_back(lst[i]);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgltaxj5o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n \
    \       if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpog_0l4ju.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  if (lst.size() == 0) {\n    return result;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n \
    \   result.push_back(lst[i]);\n    i++;\n    if (i <= j) {\n      result.push_back(lst[j]);\n\
    \      j--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7fv5k77g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) return lst;\n    std::vector<long> res;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0, j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i++]);\n\
    \        if (i <= j) res.push_back(lst[j--]);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsyi4okdp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7z9hbh6y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i !=\
    \ j) {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprqfiyci7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ sorted_lst = lst;\n  std::sort(sorted_lst.begin(), sorted_lst.end());\n  std::vector<long>\
    \ result;\n  int i = 0;\n  int j = sorted_lst.size() - 1;\n  while (i <= j) {\n\
    \    result.push_back(sorted_lst[i]);\n    i++;\n    if (i <= j) {\n      result.push_back(sorted_lst[j]);\n\
    \      j--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwwn_4mg9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while(lst.size()\
    \ > 0) {\n        if(i % 2 == 0) {\n            result.push_back(lst[0]);\n  \
    \          lst.erase(lst.begin());\n        } else {\n            result.push_back(lst[lst.size()\
    \ - 1]);\n            lst.erase(lst.end() - 1);\n        }\n        i++;\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwovep6zn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    if (lst.size() == 0) return res;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0, j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n\
    \        if (i != j) res.push_back(lst[j]);\n        i++;\n        j--;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzsynnw82.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i !=\
    \ j) {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprqfiyci7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    bool is_odd = true;\n \
    \   while(lst.size() > 0) {\n        if(is_odd) {\n            result.push_back(lst[0]);\n\
    \            lst.erase(lst.begin());\n        } else {\n            result.push_back(lst[lst.size()\
    \ - 1]);\n            lst.erase(lst.end() - 1);\n        }\n        is_odd = !is_odd;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpztxtnqzb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i !=\
    \ j) {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprqfiyci7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ sorted_lst;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int\
    \ j = lst.size() - 1;\n    while (i <= j) {\n        sorted_lst.push_back(lst[i]);\n\
    \        if (i != j) {\n            sorted_lst.push_back(lst[j]);\n        }\n\
    \        i++;\n        j--;\n    }\n    return sorted_lst;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqi68v8tx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  if (lst.size() == 0) {\n    return result;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n \
    \   result.push_back(lst[i]);\n    if (i != j) {\n      result.push_back(lst[j]);\n\
    \    }\n    i++;\n    j--;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv7w872jx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  if (lst.size() == 0) {\n    return result;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n \
    \   result.push_back(lst[i]);\n    i++;\n    if (i <= j) {\n      result.push_back(lst[j]);\n\
    \      j--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7fv5k77g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    if (i != j) {\n\
    \      result.push_back(lst[j]);\n    }\n    i++;\n    j--;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxtd6zajt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n \
    \       if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpog_0l4ju.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    if (lst.size() == 0) {\n        return res;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        res.push_back(lst[i]);\n        if (i != j) {\n            res.push_back(lst[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8iyls95z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    i++;\n    if (i\
    \ <= j) {\n      result.push_back(lst[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwcsz_t9b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    if (i != j) {\n\
    \      result.push_back(lst[j]);\n    }\n    i++;\n    j--;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxtd6zajt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    i++;\n    if (i\
    \ <= j) {\n      result.push_back(lst[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwcsz_t9b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    i++;\n    if (i\
    \ <= j) {\n      result.push_back(lst[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwcsz_t9b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  if (lst.size() == 0) {\n    return result;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n \
    \   result.push_back(lst[i]);\n    if (i != j) {\n      result.push_back(lst[j]);\n\
    \    }\n    i++;\n    j--;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv7w872jx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n \
    \       if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpog_0l4ju.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        if (i != j) {\n            result.push_back(lst[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp78wvjh5u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i !=\
    \ j) {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprqfiyci7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if(lst.size() == 0)\n        return result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while(i <= j)\
    \ {\n        result.push_back(lst[i]);\n        if(i != j)\n            result.push_back(lst[j]);\n\
    \        i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd6yvotg8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i !=\
    \ j) {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprqfiyci7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    i++;\n    if (i\
    \ <= j) {\n      result.push_back(lst[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwcsz_t9b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i !=\
    \ j) {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprqfiyci7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i !=\
    \ j) {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprqfiyci7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  if (lst.size() == 0) {\n    return result;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n \
    \   result.push_back(lst[i]);\n    i++;\n    if (i <= j) {\n      result.push_back(lst[j]);\n\
    \      j--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7fv5k77g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  if (lst.size() == 0) {\n    return result;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  while (i < j) {\n  \
    \  result.push_back(lst[i]);\n    result.push_back(lst[j]);\n    i++;\n    j--;\n\
    \  }\n  if (i == j) {\n    result.push_back(lst[i]);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbnfg3il4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) return lst;\n  std::vector<long> result;\n  std::sort(lst.begin(), lst.end());\n\
    \  int i = 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n\
    \    if (i != j) result.push_back(lst[j]);\n    i++;\n    j--;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph3p1grl9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    if (i != j) {\n\
    \      result.push_back(lst[j]);\n    }\n    i++;\n    j--;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxtd6zajt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ sorted_list;\n    std::sort(lst.begin(), lst.end());\n    for (int i = 0; i\
    \ < lst.size(); i++) {\n        if (i % 2 == 0) {\n            sorted_list.push_back(lst[i\
    \ / 2]);\n        } else {\n            sorted_list.push_back(lst[lst.size() -\
    \ (i / 2) - 1]);\n        }\n    }\n    return sorted_list;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz8_i8iz7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tstd::vector<long>\
    \ res;\n\tstd::sort(lst.begin(), lst.end());\n\tint i = 0, j = lst.size() - 1;\n\
    \twhile (i <= j) {\n\t\tres.push_back(lst[i++]);\n\t\tif (i <= j)\n\t\t\tres.push_back(lst[j--]);\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3y9w1q93.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    i++;\n    if (i\
    \ <= j) {\n      result.push_back(lst[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwcsz_t9b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while (lst.size()\
    \ > 0) {\n        if (i % 2 == 0) {\n            result.push_back(lst[0]);\n \
    \           lst.erase(lst.begin());\n        } else {\n            result.push_back(lst[lst.size()\
    \ - 1]);\n            lst.erase(lst.end() - 1);\n        }\n        i++;\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg00ue7fy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        if (i != j) {\n            result.push_back(lst[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp78wvjh5u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) return lst;\n    std::vector<long> res;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0, j = lst.size() - 1;\n    while (i <= j) {\n        res.push_back(lst[i++]);\n\
    \        if (i <= j) res.push_back(lst[j--]);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsyi4okdp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        if (i != j) {\n            result.push_back(lst[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp78wvjh5u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    i++;\n    if (i\
    \ <= j) {\n      result.push_back(lst[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwcsz_t9b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ res;\n  if (lst.size() == 0) return res;\n  int i = 0;\n  while (i < lst.size())\
    \ {\n    int min = i;\n    int max = i;\n    for (int j = i; j < lst.size(); j++)\
    \ {\n      if (lst[j] < lst[min]) min = j;\n      if (lst[j] > lst[max]) max =\
    \ j;\n    }\n    res.push_back(lst[min]);\n    if (min != max) res.push_back(lst[max]);\n\
    \    i++;\n  }\n  return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp054b9bhm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7z9hbh6y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    while(lst.size() > 0) {\n\
    \        result.push_back(lst[0]);\n        lst.erase(lst.begin());\n        if(lst.size()\
    \ > 0) {\n            result.push_back(lst[lst.size() - 1]);\n            lst.erase(lst.end()\
    \ - 1);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx56frj4z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if(lst.size() == 0)\n        return result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while(i <= j)\
    \ {\n        result.push_back(lst[i]);\n        if(i != j)\n            result.push_back(lst[j]);\n\
    \        i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd6yvotg8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    if (i != j) {\n\
    \      result.push_back(lst[j]);\n    }\n    i++;\n    j--;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxtd6zajt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) {\n    return lst;\n  }\n  std::vector<long> result;\n  std::sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n \
    \   result.push_back(lst[i]);\n    i++;\n    if (i <= j) {\n      result.push_back(lst[j]);\n\
    \      j--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprgtrlxs8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  if (lst.size() == 0) {\n    return result;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n \
    \   result.push_back(lst[i]);\n    i++;\n    if (i <= j) {\n      result.push_back(lst[j]);\n\
    \      j--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7fv5k77g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n \
    \       if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpog_0l4ju.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    if (i != j) {\n\
    \      result.push_back(lst[j]);\n    }\n    i++;\n    j--;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxtd6zajt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ res;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    res.push_back(lst[i]);\n    if (i != j) {\n  \
    \    res.push_back(lst[j]);\n    }\n    i++;\n    j--;\n  }\n  return res;\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp62cs61og.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i !=\
    \ j) {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprqfiyci7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    i++;\n    if (i\
    \ <= j) {\n      result.push_back(lst[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwcsz_t9b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    if (i != j) {\n\
    \      result.push_back(lst[j]);\n    }\n    i++;\n    j--;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxtd6zajt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    i++;\n    if (i\
    \ <= j) {\n      result.push_back(lst[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwcsz_t9b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i !=\
    \ j) {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprqfiyci7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    if (lst.size() == 0) return res;\n    std::sort(lst.begin(), lst.end());\n\
    \    int i = 0, j = lst.size() - 1;\n    while (i < j) {\n        res.push_back(lst[i++]);\n\
    \        res.push_back(lst[j--]);\n    }\n    if (i == j) res.push_back(lst[i]);\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiltp4g1y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  if (lst.size() == 0) {\n    return result;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n \
    \   result.push_back(lst[i]);\n    if (i != j) {\n      result.push_back(lst[j]);\n\
    \    }\n    i++;\n    j--;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv7w872jx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    i++;\n    if (i\
    \ <= j) {\n      result.push_back(lst[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwcsz_t9b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    if (i != j) {\n\
    \      result.push_back(lst[j]);\n    }\n    i++;\n    j--;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxtd6zajt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        if (i != j) {\n            result.push_back(lst[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp78wvjh5u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    i++;\n    if (i\
    \ <= j) {\n      result.push_back(lst[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwcsz_t9b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if (lst.size() == 0) return result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl1vvtbwg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  if (lst.size() == 0) {\n    return result;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n \
    \   result.push_back(lst[i]);\n    i++;\n    if (i <= j) {\n      result.push_back(lst[j]);\n\
    \      j--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7fv5k77g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while(lst.size()\
    \ > 0) {\n        if(i % 2 == 0) {\n            res.push_back(lst[0]);\n     \
    \       lst.erase(lst.begin());\n        } else {\n            res.push_back(lst[lst.size()\
    \ - 1]);\n            lst.erase(lst.end() - 1);\n        }\n        i++;\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnmky_rzs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n \
    \       if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpog_0l4ju.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  if (lst.size()\
    \ == 0) {\n    return lst;\n  }\n  std::vector<long> result;\n  std::sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n \
    \   result.push_back(lst[i]);\n    i++;\n    if (i <= j) {\n      result.push_back(lst[j]);\n\
    \      j--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprgtrlxs8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7z9hbh6y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  if (lst.size() == 0) {\n    return result;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n \
    \   result.push_back(lst[i]);\n    i++;\n    if (i <= j) {\n      result.push_back(lst[j]);\n\
    \      j--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7fv5k77g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7z9hbh6y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  if (lst.size() == 0) {\n    return result;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  while (i < j) {\n  \
    \  result.push_back(lst[i]);\n    result.push_back(lst[j]);\n    i++;\n    j--;\n\
    \  }\n  if (i == j) {\n    result.push_back(lst[i]);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbnfg3il4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) {\n        return lst;\n    }\n    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        if (i != j) {\n            result.push_back(lst[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpulebzd4q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    if (i != j) {\n\
    \      result.push_back(lst[j]);\n    }\n    i++;\n    j--;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxtd6zajt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7z9hbh6y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n \
    \       if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpog_0l4ju.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) {\n        return lst;\n    }\n    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp946vzt35.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n \
    \       if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpog_0l4ju.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ res;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    res.push_back(lst[i]);\n    if (i != j)\n    \
    \  res.push_back(lst[j]);\n    i++;\n    j--;\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0yybxs70.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        i++;\n \
    \       if (i <= j) {\n            res.push_back(lst[j]);\n            j--;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpog_0l4ju.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  if (lst.size() == 0) {\n    return result;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  int i = 0;\n  int j = lst.size() - 1;\n  while (i <= j) {\n \
    \   result.push_back(lst[i]);\n    i++;\n    if (i <= j) {\n      result.push_back(lst[j]);\n\
    \      j--;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8,\
    \ (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8,\
    \ (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5,\
    \ (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1,\
    \ (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7fv5k77g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int size = lst.size();\n\
    \    int i = 0;\n    int j = size - 1;\n    while (i < j) {\n        result.push_back(lst[i]);\n\
    \        result.push_back(lst[j]);\n        i++;\n        j--;\n    }\n    if\
    \ (i == j) {\n        result.push_back(lst[i]);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0dkqlubb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       if (i != j) {\n            result.push_back(lst[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_83z0aar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) {\n        return lst;\n    }\n    std::vector<long> result;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        if (i != j) {\n            result.push_back(lst[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpulebzd4q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while(i\
    \ < lst.size()){\n        if(i % 2 == 0){\n            result.push_back(lst[i]);\n\
    \        }\n        else{\n            result.push_back(lst[lst.size() - 1 - i]);\n\
    \        }\n        i++;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpben3_9im.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (i % 2 == 0) {\n      result.push_back(lst[i / 2]);\n    } else\
    \ {\n      result.push_back(lst[lst.size() - i / 2 - 1]);\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwx2cwz6s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    while(!lst.empty()) {\n\
    \        result.push_back(lst.front());\n        lst.erase(lst.begin());\n   \
    \     if(!lst.empty()) {\n            result.push_back(lst.back());\n        \
    \    lst.pop_back();\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9c6eb035.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j = lst.size()\
    \ - 1;\n    while (i <= j) {\n        res.push_back(lst[i]);\n        if (i !=\
    \ j) {\n            res.push_back(lst[j]);\n        }\n        i++;\n        j--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprqfiyci7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        if (i != j) {\n            result.push_back(lst[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp78wvjh5u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n\tstd::vector<long>\
    \ result;\n\tstd::sort(lst.begin(), lst.end());\n\tint i = 0;\n\tint j = lst.size()\
    \ - 1;\n\twhile (i <= j) {\n\t\tresult.push_back(lst[i]);\n\t\ti++;\n\t\tif (i\
    \ <= j) {\n\t\t\tresult.push_back(lst[j]);\n\t\t\tj--;\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgqtdlbtl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  while (i < lst.size())\
    \ {\n    result.push_back(lst[i]);\n    if (i + 1 < lst.size()) {\n      result.push_back(lst[lst.size()\
    \ - i - 1]);\n    }\n    i++;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy_4h2_61.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7z9hbh6y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    i++;\n    if (i\
    \ <= j) {\n      result.push_back(lst[j]);\n      j--;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwcsz_t9b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    if (i != j) {\n\
    \      result.push_back(lst[j]);\n    }\n    i++;\n    j--;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxtd6zajt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        result.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n\
    \            result.push_back(lst[j]);\n            j--;\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7z9hbh6y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    if (lst.size() == 0) {\n        return result;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i < j)\
    \ {\n        result.push_back(lst[i]);\n        result.push_back(lst[j]);\n  \
    \      i++;\n        j--;\n    }\n    if (i == j) {\n        result.push_back(lst[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9,\
    \ (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1,\
    \ (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfo6mzrr_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    if (i != j) {\n\
    \      result.push_back(lst[j]);\n    }\n    i++;\n    j--;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxtd6zajt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) {\n        return lst;\n    }\n    std::vector<long> res;\n    std::sort(lst.begin(),\
    \ lst.end());\n    int i = 0;\n    int j = lst.size() - 1;\n    while (i <= j)\
    \ {\n        res.push_back(lst[i]);\n        i++;\n        if (i <= j) {\n   \
    \         res.push_back(lst[j]);\n            j--;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqbeo7kmr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    int j =\
    \ lst.size() - 1;\n    while (i <= j) {\n        result.push_back(lst[i]);\n \
    \       i++;\n        if (i <= j) {\n            result.push_back(lst[j]);\n \
    \           j--;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphcli6rny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n  std::vector<long>\
    \ result;\n  std::sort(lst.begin(), lst.end());\n  int i = 0;\n  int j = lst.size()\
    \ - 1;\n  while (i <= j) {\n    result.push_back(lst[i]);\n    if (i != j) {\n\
    \      result.push_back(lst[j]);\n    }\n    i++;\n    j--;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8,\
    \ (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7,\
    \ (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5,\
    \ (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5,\
    \ (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8,\
    \ (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5,\
    \ (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111})))\
    \ == (std::vector<long>({(long)111111})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxtd6zajt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659823967
