name: HumanEval_122_add_elements
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] > 9 && arr[i] < 100) {\n            sum += arr[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmplmkmk_77: /tmp/tmplmkmk_77.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n      \
    \  if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] < 100)\
    \ {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 10) {\n      sum += arr[i];\n    } else if (arr[i] < 100) {\n      sum +=\
    \ arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] > 9 && arr[i] < 100) {\n            sum += arr[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpqim52vmv: /tmp/tmpqim52vmv.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] > 9 && arr[i] < 100) {\n            sum += arr[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp32y8el71: /tmp/tmp32y8el71.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (int i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 10) {\n      sum += arr[i];\n    } else if (arr[i] < 100) {\n      sum +=\
    \ arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n      \
    \  int num = arr[i];\n        if(num < 10) {\n            sum += num;\n      \
    \  } else if(num < 100) {\n            sum += num;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n      \
    \  if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n\tlong sum = 0;\n\tfor (long i = 0; i < k; i++) {\n\t\tif (arr[i]\
    \ < 10) {\n\t\t\tsum += arr[i];\n\t\t} else if (arr[i] < 100) {\n\t\t\tsum +=\
    \ arr[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] > 9 && arr[i] < 100) {\n            sum += arr[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpxj9ynyn1: /tmp/tmpxj9ynyn1.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] > 9 && arr[i] < 100) {\n            sum += arr[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp98kdgcvo: /tmp/tmp98kdgcvo.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] >= 10 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpdy494xy_: /tmp/tmpdy494xy_.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n      \
    \  if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n      \
    \  if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] < 100)\
    \ {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] > 9 && arr[i] < 100) {\n            sum += arr[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp6odol0j6: /tmp/tmp6odol0j6.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n      \
    \  if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (int i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n      \
    \  if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] < 100)\
    \ {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n      \
    \  if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] >= 10 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpg8c5wkqb: /tmp/tmpg8c5wkqb.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] >= 10 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmppz4pvw8k: /tmp/tmppz4pvw8k.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] > 9 && arr[i] < 100) {\n            sum += arr[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpdlu_y_y8: /tmp/tmpdlu_y_y8.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n      \
    \  if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] <\
    \ 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n      \
    \  if(arr[i] < 10) {\n            sum += arr[i];\n        } else if(arr[i] < 100)\
    \ {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n  long sum = 0;\n  for (long i = 0; i < k; i++) {\n    if (arr[i]\
    \ < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty array\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// Input: arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 21 + 3\n// Constraints:\n\
    // 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long>\
    \ arr, long k) {\n    long sum = 0;\n    for(long i = 0; i < k; i++) {\n     \
    \   if(arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
