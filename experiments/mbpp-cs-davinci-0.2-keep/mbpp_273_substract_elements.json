{
  "name": "mbpp_273_substract_elements",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    public static long SubstractElements(long test_tup1, long test_tup2) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SubstractElements((long)Tuple.Create(10L, 4L, 5L), (long)Tuple.Create(2L, 5L, 18L)) == (long)Tuple.Create(8L, -1L, -13L));\n    Debug.Assert(SubstractElements((long)Tuple.Create(11L, 2L, 3L), (long)Tuple.Create(24L, 45L, 16L)) == (long)Tuple.Create(-13L, -43L, -13L));\n    Debug.Assert(SubstractElements((long)Tuple.Create(7L, 18L, 9L), (long)Tuple.Create(10L, 11L, 12L)) == (long)Tuple.Create(-3L, 7L, -3L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return test_tup1 - test_tup2;",
    "        long result = test_tup1 - test_tup2;\n        return result;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        // Write your code here.\n        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        long result = test_tup1 - test_tup2;\n        return result;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        long result = test_tup1 - test_tup2;\n        return result;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        // Write your code here\n        return test_tup1 - test_tup2;",
    "        // Write your code here\n        return test_tup1 - test_tup2;",
    "        long result = test_tup1 - test_tup2;\n        return result;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        long result = test_tup1 - test_tup2;\n        return result;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        long result = test_tup1 - test_tup2;\n        return result;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        long result = test_tup1 - test_tup2;\n        return result;",
    "        return test_tup1 - test_tup2;",
    "        // Write your code here\n        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        long result = test_tup1 - test_tup2;\n        return result;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        long result = test_tup1 - test_tup2;\n        return result;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        long result = test_tup1 - test_tup2;\n        return result;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        // Write your code here\n        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        long result = test_tup1 - test_tup2;\n        return result;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        long result = test_tup1 - test_tup2;\n        return result;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        long result = test_tup1 - test_tup2;\n        return result;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        long result = test_tup1 - test_tup2;\n        return result;",
    "        long[] tup1 = { test_tup1 };\n        long[] tup2 = { test_tup2 };\n        long[] tup3 = new long[tup1.Length];\n        for (int i = 0; i < tup1.Length; i++) {\n            tup3[i] = tup1[i] - tup2[i];\n        }\n        return tup3[0];",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        long result = test_tup1 - test_tup2;\n        return result;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        long result = test_tup1 - test_tup2;\n        return result;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        var tup1 = new Tuple<long, long, long>(test_tup1, test_tup1, test_tup1);\n        var tup2 = new Tuple<long, long, long>(test_tup2, test_tup2, test_tup2);\n        var tup3 = new Tuple<long, long, long>(tup1.Item1 - tup2.Item1, tup1.Item2 - tup2.Item2, tup1.Item3 - tup2.Item3);\n        return tup3.Item1 + tup3.Item2 + tup3.Item3;",
    "        long result = test_tup1 - test_tup2;\n        return result;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        // Write your code here\n        return test_tup1 - test_tup2;",
    "        long result = test_tup1 - test_tup2;\n        return result;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        long result = test_tup1 - test_tup2;\n        return result;",
    "        long result = test_tup1 - test_tup2;\n        return result;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        long result = test_tup1 - test_tup2;\n        return result;",
    "        // Write your code here\n        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;",
    "        return test_tup1 - test_tup2;"
  ]
}