{
  "name": "mbpp_767_get_pairs_count",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number in the list\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (var num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        // Iterate through the dictionary and count the number of pairs\n        long counter = 0;\n        foreach (var key in dict.Keys) {\n            if (dict.ContainsKey(sum - key)) {\n                if (key == sum - key) {\n                    counter += dict[key] * (dict[key] - 1) / 2;\n                } else {\n                    counter += dict[key] * dict[sum - key];\n                }\n            }\n        }\n        return counter;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5fbec2a62f0340e28b8ad388701700f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5fbec2a62f0340e28b8ad388701700f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a hash table to store the counts of the elements in the array\n        Dictionary<long, long> counts = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (counts.ContainsKey(num)) {\n                counts[num]++;\n            } else {\n                counts.Add(num, 1);\n            }\n        }\n        // Iterate through the array and count the pairs\n        long pairsCount = 0;\n        foreach (long num in arr) {\n            long pair = sum - num;\n            if (counts.ContainsKey(pair)) {\n                pairsCount += counts[pair];\n            }\n        }\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bdc3d1f15cae48f183ef331ba09e25f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bdc3d1f15cae48f183ef331ba09e25f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // create a hashmap to store the number of occurences of each number in the list\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        // iterate through the list and add the number to the hashmap\n        // if the number is already in the hashmap, increment the count\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        // initialize the count to 0\n        long count = 0;\n        // iterate through the list\n        foreach (long num in arr) {\n            // if the number is less than half of the sum, then we can find a pair\n            if (num < sum / 2) {\n                // get the number that would make the sum equal to the sum\n                long num2 = sum - num;\n                // if the number is in the hashmap, then we can make a pair\n                if (dict.ContainsKey(num2)) {\n                    // add the number of occurences of the number to the count\n                    count += dict[num2];\n                    // if the number is equal to the number that would make the sum equal to the sum, then we need to subtract 1 from the count\n                    // because we don't want to count the number twice\n                    if (num == num2) {\n                        count--;\n                    }\n                }\n            }\n        }\n        // divide the count by 2 because we are counting each pair twice\n        return count / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4c5ce1e172944654b478c3379d05ae6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4c5ce1e172944654b478c3379d05ae6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        long count = 0;\n        foreach (long item in arr) {\n            if (dict.ContainsKey(item)) {\n                dict[item]++;\n            } else {\n                dict.Add(item, 1);\n            }\n        }\n        foreach (long item in arr) {\n            if (dict.ContainsKey(sum - item)) {\n                count += dict[sum - item];\n                if (sum - item == item) {\n                    count--;\n                }\n            }\n        }\n        return count / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++)\n        {\n            for (int j = i + 1; j < arr.Count; j++)\n            {\n                if (arr[i] + arr[j] == sum)\n                {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Your code goes here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        var dict = new Dictionary<long, long>();\n        foreach (var item in arr) {\n            if (dict.ContainsKey(item)) {\n                dict[item]++;\n            } else {\n                dict.Add(item, 1);\n            }\n        }\n        long result = 0;\n        foreach (var item in arr) {\n            if (dict.ContainsKey(sum - item)) {\n                result += dict[sum - item];\n                if (item == sum - item) {\n                    result--;\n                }\n            }\n        }\n        return result / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the frequency of each number in the list\n        Dictionary<long, long> freq = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (freq.ContainsKey(num)) {\n                freq[num]++;\n            } else {\n                freq.Add(num, 1);\n            }\n        }\n        // Count the number of pairs\n        long pairsCount = 0;\n        foreach (long num in arr) {\n            long complement = sum - num;\n            if (freq.ContainsKey(complement)) {\n                pairsCount += freq[complement];\n            }\n            if (complement == num) {\n                pairsCount--;\n            }\n        }\n        return pairsCount / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Your code goes here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f20cca293ca34d64b063cc33ee5aee2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f20cca293ca34d64b063cc33ee5aee2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // return arr.SelectMany((x, i) => arr.Skip(i + 1), (x, y) => new { x, y }).Where(x => x.x + x.y == sum).Count();\n        return arr.SelectMany((x, i) => arr.Skip(i + 1), (x, y) => new { x, y }).Count(x => x.x + x.y == sum);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a hash table to store the counts of the elements\n        Dictionary<long, long> hash = new Dictionary<long, long>();\n        // Iterate over the list and add the elements to the hash table\n        for (int i = 0; i < arr.Count; i++) {\n            if (hash.ContainsKey(arr[i])) {\n                hash[arr[i]]++;\n            } else {\n                hash.Add(arr[i], 1);\n            }\n        }\n        // Iterate over the list and check if the sum - arr[i] is in the hash table\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (hash.ContainsKey(sum - arr[i])) {\n                count += hash[sum - arr[i]];\n            }\n        }\n        // Return the count\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <04cf299eef4c48f1a15e77da4e36f079>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <04cf299eef4c48f1a15e77da4e36f079>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a hash table to store the counts of each number\n        Dictionary<long, long> counts = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (counts.ContainsKey(num)) {\n                counts[num]++;\n            } else {\n                counts.Add(num, 1);\n            }\n        }\n        // Count the number of pairs\n        long pairsCount = 0;\n        foreach (long num in arr) {\n            long target = sum - num;\n            if (counts.ContainsKey(target)) {\n                pairsCount += counts[target];\n                // Remove the number from the hash table to avoid counting the same pair twice\n                counts.Remove(target);\n            }\n        }\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <455347da7b8b4c1a9ec256d6011ed589>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <455347da7b8b4c1a9ec256d6011ed589>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Your code goes here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number in the array\n        Dictionary<long, long> occurences = new Dictionary<long, long>();\n        // For each number in the array\n        foreach (long num in arr) {\n            // If the number is not in the dictionary\n            if (!occurences.ContainsKey(num)) {\n                // Add it to the dictionary\n                occurences.Add(num, 0);\n            }\n            // Increment the number of occurences of the number\n            occurences[num]++;\n        }\n        // Create a variable to store the number of pairs\n        long pairs = 0;\n        // For each number in the array\n        foreach (long num in arr) {\n            // If the number of occurences of the number is greater than 0\n            if (occurences[num] > 0) {\n                // Decrement the number of occurences of the number\n                occurences[num]--;\n                // If the number of occurences of the number is greater than 0\n                if (occurences.ContainsKey(sum - num) && occurences[sum - num] > 0) {\n                    // Increment the number of pairs\n                    pairs++;\n                }\n            }\n        }\n        // Return the number of pairs\n        return pairs;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f40b7a54941340c0b393e9eb111b39f0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f40b7a54941340c0b393e9eb111b39f0>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // create a dictionary to store the number of occurences of each number\n        Dictionary<long, long> occurences = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (occurences.ContainsKey(num)) {\n                occurences[num]++;\n            } else {\n                occurences.Add(num, 1);\n            }\n        }\n        // count the number of pairs\n        long pairsCount = 0;\n        foreach (long num in arr) {\n            long otherNum = sum - num;\n            if (occurences.ContainsKey(otherNum)) {\n                pairsCount += occurences[otherNum];\n            }\n        }\n        // remove the pairs that contain the same number twice\n        pairsCount /= 2;\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ce57f5a06f9c496b870302bb06ed5201>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number\n        var dict = new Dictionary<long, long>();\n        // Iterate over the list and add the number of occurences to the dictionary\n        foreach (var num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        // Create a variable to store the number of pairs\n        long pairs = 0;\n        // Iterate over the list and check if the sum - current number is in the dictionary\n        foreach (var num in arr) {\n            if (dict.ContainsKey(sum - num)) {\n                // If the number is in the dictionary, add the number of occurences of the current number * the number of occurences of the sum - current number to the number of pairs\n                pairs += dict[num] * dict[sum - num];\n            }\n        }\n        // Return the number of pairs\n        return pairs;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6b6b8af370b04cc097f3015bdd5b3f1a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6b6b8af370b04cc097f3015bdd5b3f1a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a hash table to store the counts of each number\n        Dictionary<long, long> counts = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (counts.ContainsKey(num)) {\n                counts[num]++;\n            } else {\n                counts[num] = 1;\n            }\n        }\n\n        // Go through the hash table and count the pairs\n        long pairs = 0;\n        foreach (long num in counts.Keys) {\n            long other = sum - num;\n            if (counts.ContainsKey(other)) {\n                pairs += counts[num] * counts[other];\n            }\n        }\n        return pairs / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4b447aa3c2764a2090a06d7d04ebb030>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Your code goes here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c3c3a0d1c4024fd6ad3505dd34e8de7e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c3c3a0d1c4024fd6ad3505dd34e8de7e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Your code goes here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the frequency of each number\n        var dict = new Dictionary<long, long>();\n        foreach (var num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        // Iterate through the numbers and count the number of pairs\n        long count = 0;\n        foreach (var num in arr) {\n            if (dict.ContainsKey(sum - num)) {\n                count += dict[sum - num];\n            }\n            // If the number is equal to the sum, we need to subtract 1 from the count\n            if (num == sum - num) {\n                count--;\n            }\n        }\n        return count / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122960,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // create a hashmap to store the number of occurences of each number\n        Dictionary<long, long> nums = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (nums.ContainsKey(num)) {\n                nums[num]++;\n            } else {\n                nums[num] = 1;\n            }\n        }\n        // iterate through the hashmap and count the number of pairs\n        long pairs = 0;\n        foreach (KeyValuePair<long, long> kvp in nums) {\n            long num = kvp.Key;\n            long numOccurences = kvp.Value;\n            long otherNum = sum - num;\n            if (nums.ContainsKey(otherNum)) {\n                long otherNumOccurences = nums[otherNum];\n                if (num == otherNum) {\n                    // if the numbers are the same, then the number of pairs is the number of occurences of the number choose 2\n                    pairs += numOccurences * (numOccurences - 1) / 2;\n                } else {\n                    // if the numbers are different, then the number of pairs is the number of occurences of the number times the number of occurences of the other number\n                    pairs += numOccurences * otherNumOccurences;\n                }\n            }\n        }\n        return pairs;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <49482a5f80c340208da24cf8552667f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <49482a5f80c340208da24cf8552667f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a hash table to store the counts of each element\n        Dictionary<long, long> counts = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (counts.ContainsKey(num)) {\n                counts[num]++;\n            } else {\n                counts[num] = 1;\n            }\n        }\n\n        // Iterate through the hash table and count the number of pairs\n        long pairsCount = 0;\n        foreach (KeyValuePair<long, long> pair in counts) {\n            long num = pair.Key;\n            long count = pair.Value;\n            long target = sum - num;\n            if (counts.ContainsKey(target)) {\n                pairsCount += count * counts[target];\n            }\n        }\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <41f6866199684c50ad87e74a3348142a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <41f6866199684c50ad87e74a3348142a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Sort the array\n        arr.Sort();\n        // Initialize two index variables to find the candidate elements in the sorted array.\n        int l = 0;\n        int r = arr.Count - 1;\n        long count = 0;\n        while (l < r) {\n            if (arr[l] + arr[r] == sum) {\n                // If sum is equal to the sum of the current pair, increment the count\n                count++;\n                // Move to the next pair\n                l++;\n                r--;\n            } else if (arr[l] + arr[r] < sum) {\n                // If sum is less than the sum of the current pair, move to the higher sum\n                l++;\n            } else {\n                // If sum is greater than the sum of the current pair, move to the lower sum\n                r--;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5c2a0a15d4aa4017a681e7a2b22cbe5c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5c2a0a15d4aa4017a681e7a2b22cbe5c>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Your code goes here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // your code goes here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122960,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122960,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpokadm0ts.cs(10,24): error CS0161: 'Problem.GetPairsCount(List<long>, long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a hash table to store the counts of each number\n        var counts = new Dictionary<long, long>();\n        foreach (var num in arr) {\n            if (counts.ContainsKey(num)) {\n                counts[num]++;\n            } else {\n                counts[num] = 1;\n            }\n        }\n        // Iterate through the hash table and count the number of pairs\n        long pairsCount = 0;\n        foreach (var num in counts.Keys) {\n            long target = sum - num;\n            if (counts.ContainsKey(target)) {\n                pairsCount += counts[num] * counts[target];\n            }\n        }\n        // Divide by 2 because each pair was counted twice\n        return pairsCount / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c826523de4a24e06a25247d6eec49918>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122960,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpokadm0ts.cs(10,24): error CS0161: 'Problem.GetPairsCount(List<long>, long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the frequency of each number in the list\n        Dictionary<long, long> freq = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (freq.ContainsKey(num)) {\n                freq[num]++;\n            } else {\n                freq.Add(num, 1);\n            }\n        }\n        // Iterate over the numbers in the list\n        long count = 0;\n        foreach (long num in arr) {\n            // If the number is less than the sum, then there is a pair of numbers that sum to the sum\n            if (num < sum) {\n                // If the number is in the dictionary, then there is a pair of numbers that sum to the sum\n                if (freq.ContainsKey(sum - num)) {\n                    // If the number is equal to the sum minus the number, then there are two pairs of numbers that sum to the sum\n                    if (num == sum - num) {\n                        // The number of pairs is the number of times the number appears in the list\n                        count += freq[num] * (freq[num] - 1);\n                    } else {\n                        // The number of pairs is the number of times the number appears in the list times the number of times the sum minus the number appears in the list\n                        count += freq[num] * freq[sum - num];\n                    }\n                }\n            }\n        }\n        // Divide by two because each pair was counted twice\n        return count / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2cac7af5d3244795a124dc031336a52e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2cac7af5d3244795a124dc031336a52e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a hash table to store the counts of the elements\n        Dictionary<long, long> counts = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (counts.ContainsKey(num)) {\n                counts[num]++;\n            } else {\n                counts.Add(num, 1);\n            }\n        }\n\n        // Iterate through the hash table and count the number of pairs\n        long pairsCount = 0;\n        foreach (KeyValuePair<long, long> pair in counts) {\n            long num = pair.Key;\n            long count = pair.Value;\n            if (counts.ContainsKey(sum - num)) {\n                pairsCount += count * counts[sum - num];\n            }\n        }\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <24c1304129944107b67ce42b40124304>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <24c1304129944107b67ce42b40124304>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // create a hashmap to store the number of occurences of each number in the array\n        Dictionary<long, long> occurences = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (occurences.ContainsKey(num)) {\n                occurences[num]++;\n            } else {\n                occurences.Add(num, 1);\n            }\n        }\n        // iterate through the array and count the number of pairs whose sum is equal to sum\n        long pairsCount = 0;\n        foreach (long num in arr) {\n            long complement = sum - num;\n            if (occurences.ContainsKey(complement)) {\n                pairsCount += occurences[complement];\n            }\n            if (num == complement) {\n                pairsCount--;\n            }\n        }\n        return pairsCount / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122960,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f20cca293ca34d64b063cc33ee5aee2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f20cca293ca34d64b063cc33ee5aee2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        var dict = new Dictionary<long, long>();\n        long count = 0;\n        foreach (var item in arr) {\n            if (dict.ContainsKey(item)) {\n                dict[item]++;\n            } else {\n                dict.Add(item, 1);\n            }\n        }\n        foreach (var item in arr) {\n            if (dict.ContainsKey(sum - item)) {\n                count += dict[sum - item];\n            }\n            if (sum - item == item) {\n                count--;\n            }\n        }\n        return count / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        // Count the number of pairs\n        long pairsCount = 0;\n        foreach (long num in arr) {\n            long target = sum - num;\n            if (dict.ContainsKey(target)) {\n                pairsCount += dict[target];\n                if (target == num) {\n                    pairsCount--;\n                }\n            }\n        }\n        return pairsCount / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number\n        Dictionary<long, long> occurences = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (occurences.ContainsKey(num)) {\n                occurences[num]++;\n            } else {\n                occurences[num] = 1;\n            }\n        }\n        long pairsCount = 0;\n        foreach (long num in arr) {\n            long otherNum = sum - num;\n            if (occurences.ContainsKey(otherNum)) {\n                pairsCount += occurences[otherNum];\n            }\n            if (otherNum == num) {\n                pairsCount--;\n            }\n        }\n        return pairsCount / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122960,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the count of each number\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        long twice_count = 0;\n        foreach (long num in arr) {\n            if (dict.ContainsKey(sum - num)) {\n                twice_count += dict[sum - num];\n            }\n            if (sum - num == num) {\n                twice_count--;\n            }\n        }\n        return twice_count / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122960,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long pairsCount = 0;\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        foreach (long num in arr) {\n            if (dict.ContainsKey(sum - num)) {\n                pairsCount += dict[sum - num];\n                if (num == sum - num) {\n                    pairsCount--;\n                }\n            }\n        }\n        return pairsCount / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122960,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number in the list\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        // Iterate through the list and for each number, check if sum-number is in the dictionary\n        long count = 0;\n        foreach (long num in arr) {\n            if (dict.ContainsKey(sum - num)) {\n                count += dict[sum - num];\n            }\n            // If the number is equal to sum/2, then we need to remove the duplicate occurences\n            if (num == sum - num) {\n                count--;\n            }\n        }\n        // Divide the count by 2 because we are counting each pair twice\n        return count / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122960,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // return arr.Count(x => arr.Contains(sum - x));\n        var dict = new Dictionary<long, long>();\n        foreach(var x in arr) {\n            if(dict.ContainsKey(x)) {\n                dict[x]++;\n            } else {\n                dict.Add(x, 1);\n            }\n        }\n        long count = 0;\n        foreach(var x in arr) {\n            if(dict.ContainsKey(sum - x)) {\n                count += dict[sum - x];\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b4afc2ce292f4edfb86d097e9e7c0eff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b4afc2ce292f4edfb86d097e9e7c0eff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        // your code here\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (dict.ContainsKey(arr[i])) {\n                dict[arr[i]]++;\n            } else {\n                dict.Add(arr[i], 1);\n            }\n        }\n        for (int i = 0; i < arr.Count; i++) {\n            if (dict.ContainsKey(sum - arr[i])) {\n                count += dict[sum - arr[i]];\n            }\n            if (sum - arr[i] == arr[i]) {\n                count--;\n            }\n        }\n        return count / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        foreach (long num in arr) {\n            if (dict.ContainsKey(sum - num)) {\n                count += dict[sum - num];\n                if (sum - num == num) {\n                    count--;\n                }\n            }\n        }\n        return count / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        var dict = new Dictionary<long, long>();\n        foreach (var item in arr) {\n            if (dict.ContainsKey(item)) {\n                dict[item]++;\n            } else {\n                dict.Add(item, 1);\n            }\n        }\n        long result = 0;\n        foreach (var item in dict) {\n            if (dict.ContainsKey(sum - item.Key)) {\n                result += item.Value * dict[sum - item.Key];\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7d717930f3784e3d981cf2152477f64c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7d717930f3784e3d981cf2152477f64c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a hash table to store the counts of each number\n        Dictionary<long, long> counts = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (!counts.ContainsKey(num)) {\n                counts.Add(num, 0);\n            }\n            counts[num]++;\n        }\n        // Iterate through the hash table and count the number of pairs\n        long pairsCount = 0;\n        foreach (long num in counts.Keys) {\n            long target = sum - num;\n            if (counts.ContainsKey(target)) {\n                pairsCount += counts[num] * counts[target];\n            }\n        }\n        // Divide by 2 since each pair is counted twice\n        return pairsCount / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7966a32e916d4dd8bb1e6e809e025eb5>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of times each number appears in the list\n        Dictionary<long, long> numCount = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (!numCount.ContainsKey(num)) {\n                numCount.Add(num, 0);\n            }\n            numCount[num]++;\n        }\n        // For each number in the list, check if the number that would complete the sum is in the dictionary\n        // If it is, add the number of times the number appears in the list to the total count\n        long totalCount = 0;\n        foreach (long num in arr) {\n            if (numCount.ContainsKey(sum - num)) {\n                totalCount += numCount[sum - num];\n            }\n        }\n        // Divide the total count by 2 to account for double counting\n        return totalCount / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1a3dc1dda36e4fea86d9fdc25f58d32d>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        // Loop through the list and add each number to the dictionary\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        // Create a variable to store the number of pairs\n        long pairsCount = 0;\n        // Loop through the dictionary\n        foreach (KeyValuePair<long, long> pair in dict) {\n            // If the sum of the current number and the number that would make the sum is in the dictionary, add the number of occurences of the current number to the number of pairs\n            if (dict.ContainsKey(sum - pair.Key)) {\n                pairsCount += pair.Value;\n            }\n        }\n        // Return the number of pairs\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bebeb2ecc5f243008880fc3303263712>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bebeb2ecc5f243008880fc3303263712>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // return arr.Count(x => arr.Contains(sum - x));\n        var dict = new Dictionary<long, long>();\n        foreach (var item in arr) {\n            if (dict.ContainsKey(item)) {\n                dict[item]++;\n            } else {\n                dict[item] = 1;\n            }\n        }\n        long count = 0;\n        foreach (var item in arr) {\n            if (dict.ContainsKey(sum - item)) {\n                count += dict[sum - item];\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <32bba4438c3b4834b05fc5bddbfb97ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <32bba4438c3b4834b05fc5bddbfb97ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // return arr.Count(x => arr.Contains(sum - x));\n        // return arr.Select(x => arr.Contains(sum - x)).Count(x => x);\n        // return arr.Select(x => arr.Contains(sum - x)).Count(x => x);\n        // return arr.Select(x => arr.Contains(sum - x)).Count(x => x);\n        // return arr.Select(x => arr.Contains(sum - x)).Count(x => x);\n        // return arr.Select(x => arr.Contains(sum - x)).Count(x => x);\n        // return arr.Select(x => arr.Contains(sum - x)).Count(x => x);\n        // return arr.Select(x => arr.Contains(sum - x)).Count(x => x);\n        // return arr.Select(x => arr.Contains(sum - x)).Count(x => x);\n        // return arr.Select(x => arr.Contains(sum - x)).Count(x => x);\n        // return arr.Select(x => arr.Contains(sum - x)).Count(x => x);\n        // return arr.Select(x => arr.Contains(sum - x)).Count(x => x);\n        // return arr.Select(x => arr.Contains(sum - x)).Count(x => x);\n        // return arr.Select(x => arr.Contains(sum - x)).Count(x => x);\n        // return arr.Select(x => arr.Contains(sum - x)).Count(x => x);\n        // return arr.Select(x => arr.Contains(sum - x)).Count(x => x);\n        // return arr.Select(x => arr.Contains(sum - x)).Count(x => x);\n        // return arr.Select(x => arr.Contains(sum - x)).Count(x => x);\n        // return arr.Select(x => arr.Contains(sum - x)).Count(x => x);\n        // return arr.Select(x => arr.Contains(sum - x)).Count(x => x);\n        // return arr.Select(x => arr.Contains(sum - x\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn6q9l_cg.cs(10,24): error CS0161: 'Problem.GetPairsCount(List<long>, long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n        // return arr.Select(x => arr.Count(y => x + y == sum)).Sum();\n        // return arr.Select(x => arr.Count(y => x + y == sum)).Sum();\n        // return arr.Select(x => arr.Count(y => x + y == sum)).Sum();\n        // return arr.Select(x => arr.Count(y => x + y == sum)).Sum();\n        // return arr.Select(x => arr.Count(y => x + y == sum)).Sum();\n        // return arr.Select(x => arr.Count(y => x + y == sum)).Sum();\n        // return arr.Select(x => arr.Count(y => x + y == sum)).Sum();\n        // return arr.Select(x => arr.Count(y => x + y == sum)).Sum();\n        // return arr.Select(x => arr.Count(y => x + y == sum)).Sum();\n        // return arr.Select(x => arr.Count(y => x + y == sum)).Sum();\n        // return arr.Select(x => arr.Count(y => x + y == sum)).Sum();\n        // return arr.Select(x => arr.Count(y => x + y == sum)).Sum();\n        // return arr.Select(x => arr.Count(y => x + y == sum)).Sum();\n        // return arr.Select(x => arr.Count(y => x + y == sum)).Sum();\n        // return arr.Select(x => arr.Count(y => x + y == sum)).Sum();\n        // return arr.Select(x => arr.Count(y => x + y == sum)).Sum();\n        // return arr.Select(x => arr.Count(y => x + y == sum)).Sum();\n        // return arr.Select(x => arr.Count(y => x + y == sum)).Sum();\n        // return arr.Select(x => arr.Count(y => x + y == sum)).Sum();\n        // return arr.Select(x => arr.Count(y => x + y == sum)).Sum();\n        // return arr\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplhf3nx3l.cs(10,24): error CS0161: 'Problem.GetPairsCount(List<long>, long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n        return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b55ed289dd49aa8487e261376c5cd6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27b55ed289dd49aa8487e261376c5cd6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        // Iterate through the dictionary to find the number of pairs\n        long pairsCount = 0;\n        foreach (KeyValuePair<long, long> pair in dict) {\n            long num = pair.Key;\n            long numOccurences = pair.Value;\n            long numToFind = sum - num;\n            if (dict.ContainsKey(numToFind)) {\n                pairsCount += numOccurences * dict[numToFind];\n            }\n        }\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8f6b22ca9f414f15a4e4d6948cf6ccee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8f6b22ca9f414f15a4e4d6948cf6ccee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Your code goes here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        Dictionary<long, long> d = new Dictionary<long, long>();\n        long count = 0;\n        foreach (long i in arr) {\n            if (d.ContainsKey(sum - i)) {\n                count += d[sum - i];\n            }\n            if (d.ContainsKey(i)) {\n                d[i] += 1;\n            } else {\n                d[i] = 1;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number in the list\n        Dictionary<long, long> nums = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (nums.ContainsKey(num)) {\n                nums[num]++;\n            } else {\n                nums[num] = 1;\n            }\n        }\n        // Create a dictionary to store the number of occurences of each number in the list\n        Dictionary<long, long> sums = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (sums.ContainsKey(num)) {\n                sums[num]++;\n            } else {\n                sums[num] = 1;\n            }\n        }\n        // Iterate over the dictionary and count the number of pairs\n        long pairsCount = 0;\n        foreach (long num in nums.Keys) {\n            long otherNum = sum - num;\n            if (sums.ContainsKey(otherNum)) {\n                pairsCount += nums[num] * sums[otherNum];\n            }\n        }\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <71fe12bc4cda4f429ce868bac324fadc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <71fe12bc4cda4f429ce868bac324fadc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number\n        Dictionary<long, long> numOccurences = new Dictionary<long, long>();\n        // For each number in the list, add it to the dictionary if it doesn't exist, or increment its value if it does\n        foreach (long num in arr) {\n            if (!numOccurences.ContainsKey(num)) {\n                numOccurences.Add(num, 1);\n            } else {\n                numOccurences[num]++;\n            }\n        }\n        // Create a variable to store the number of pairs\n        long pairsCount = 0;\n        // For each number in the list, check if the number that would complete the pair exists in the dictionary\n        foreach (long num in arr) {\n            if (numOccurences.ContainsKey(sum - num)) {\n                // If the number is the same as the number that would complete the pair, then we only want to count it once\n                if (num == sum - num) {\n                    pairsCount += numOccurences[num] - 1;\n                } else {\n                    pairsCount += numOccurences[num];\n                }\n            }\n        }\n        // Return the number of pairs\n        return pairsCount / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number in the list\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        // Iterate through the list and count the number of pairs\n        long count = 0;\n        foreach (long num in arr) {\n            if (dict.ContainsKey(sum - num)) {\n                count += dict[sum - num];\n            }\n            // If the number is equal to the sum/2, then we need to subtract 1 from the count\n            if (sum - num == num) {\n                count--;\n            }\n        }\n        // Divide the count by 2 since each pair is counted twice\n        return count / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Your code goes here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number\n        Dictionary<long, long> num_occurences = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (num_occurences.ContainsKey(num)) {\n                num_occurences[num]++;\n            } else {\n                num_occurences.Add(num, 1);\n            }\n        }\n        // Count the number of pairs\n        long pairs_count = 0;\n        foreach (long num in arr) {\n            long other_num = sum - num;\n            if (num_occurences.ContainsKey(other_num)) {\n                pairs_count += num_occurences[other_num];\n                if (other_num == num) {\n                    pairs_count--;\n                }\n            }\n        }\n        return pairs_count / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        // Loop through the array and add the number of occurences to the dictionary\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num] += 1;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        // Loop through the array and count the number of pairs\n        long pairsCount = 0;\n        foreach (long num in arr) {\n            long diff = sum - num;\n            if (dict.ContainsKey(diff)) {\n                pairsCount += dict[diff];\n            }\n        }\n        // Return the number of pairs\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f01f9ab71c54470f95b4dc07ec9a55a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f01f9ab71c54470f95b4dc07ec9a55a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count();\n        return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7bfb65eebefe4dfcad46d37b2ff285bc>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // create a dictionary to store the number of occurences of each number in the list\n        Dictionary<long, long> occurences = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (occurences.ContainsKey(num)) {\n                occurences[num] += 1;\n            } else {\n                occurences.Add(num, 1);\n            }\n        }\n        // count the number of pairs\n        long pairsCount = 0;\n        foreach (long num in arr) {\n            long otherNum = sum - num;\n            if (occurences.ContainsKey(otherNum)) {\n                pairsCount += occurences[otherNum];\n                if (num == otherNum) {\n                    pairsCount -= 1;\n                }\n            }\n        }\n        return pairsCount / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of times each number appears in the list\n        Dictionary<long, long> nums = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (nums.ContainsKey(num)) {\n                nums[num]++;\n            } else {\n                nums.Add(num, 1);\n            }\n        }\n        // Count the number of pairs whose sum is equal to sum\n        long pairsCount = 0;\n        foreach (long num in arr) {\n            long complement = sum - num;\n            if (nums.ContainsKey(complement)) {\n                pairsCount += nums[complement];\n            }\n        }\n        // Remove the pairs that contain the same number twice\n        pairsCount /= 2;\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3e4d189f79e145f4b8f37d0ec8a1aa10>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // your code goes here\n        // sort the array\n        arr.Sort();\n        // initialize the count\n        long count = 0;\n        // initialize the left and right pointers\n        int left = 0;\n        int right = arr.Count - 1;\n        // loop until the left pointer is less than the right pointer\n        while (left < right) {\n            // if the sum of the left and right pointers is less than the sum, increment the left pointer\n            if (arr[left] + arr[right] < sum) {\n                left++;\n            }\n            // if the sum of the left and right pointers is greater than the sum, decrement the right pointer\n            else if (arr[left] + arr[right] > sum) {\n                right--;\n            }\n            // if the sum of the left and right pointers is equal to the sum, increment the count and increment the left pointer\n            else {\n                count++;\n                left++;\n            }\n        }\n        // return the count\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5701cfd3dd4448dc988ebca2da61d952>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5701cfd3dd4448dc988ebca2da61d952>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long val in arr) {\n            if (dict.ContainsKey(sum - val)) {\n                count += dict[sum - val];\n            }\n            if (dict.ContainsKey(val)) {\n                dict[val]++;\n            } else {\n                dict.Add(val, 1);\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number in the array\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (dict.ContainsKey(arr[i]))\n                dict[arr[i]]++;\n            else\n                dict.Add(arr[i], 1);\n        }\n        // Count the number of pairs\n        long pairsCount = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            long diff = sum - arr[i];\n            if (dict.ContainsKey(diff))\n                pairsCount += dict[diff];\n        }\n        // Return the number of pairs\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6425b614fc9f4919ac26e6b308cd1a95>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6425b614fc9f4919ac26e6b308cd1a95>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Your code goes here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        // Iterate through the dictionary and count the number of pairs\n        long pairsCount = 0;\n        foreach (KeyValuePair<long, long> pair in dict) {\n            long num = pair.Key;\n            long numOccurences = pair.Value;\n            long complement = sum - num;\n            if (dict.ContainsKey(complement)) {\n                pairsCount += numOccurences * dict[complement];\n            }\n        }\n        // Divide by 2 because each pair is counted twice\n        return pairsCount / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5481c5de571d46acac8ae3db4855705e>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the frequency of each number\n        Dictionary<long, long> freq = new Dictionary<long, long>();\n        // Loop through the list and add the frequency of each number to the dictionary\n        foreach (long num in arr) {\n            if (freq.ContainsKey(num)) {\n                freq[num]++;\n            } else {\n                freq.Add(num, 1);\n            }\n        }\n        // Create a variable to store the number of pairs\n        long pairs = 0;\n        // Loop through the dictionary\n        foreach (KeyValuePair<long, long> entry in freq) {\n            // If the difference between the sum and the current number is in the dictionary, add the frequency of the current number to the number of pairs\n            if (freq.ContainsKey(sum - entry.Key)) {\n                pairs += entry.Value;\n            }\n            // If the current number is equal to half of the sum, subtract 1 from the number of pairs\n            if (entry.Key == sum / 2) {\n                pairs--;\n            }\n        }\n        // Divide the number of pairs by 2 and return it\n        return pairs / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e969c9d896d249ea863761a017dd4d60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e969c9d896d249ea863761a017dd4d60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the counts of each number\n        Dictionary<long, long> counts = new Dictionary<long, long>();\n        // Iterate through the array and add the counts to the dictionary\n        foreach (long num in arr) {\n            if (counts.ContainsKey(num)) {\n                counts[num]++;\n            } else {\n                counts.Add(num, 1);\n            }\n        }\n        // Iterate through the dictionary and count the number of pairs\n        long pairs = 0;\n        foreach (KeyValuePair<long, long> pair in counts) {\n            long num = pair.Key;\n            long count = pair.Value;\n            // If the number is less than the sum, then we can find a pair\n            if (num < sum) {\n                // If the number is the same as the sum, then we have to divide the count by 2\n                if (num == sum - num) {\n                    pairs += count * (count - 1) / 2;\n                } else {\n                    // Otherwise, we can just multiply the count by the count of the other number\n                    pairs += count * counts[sum - num];\n                }\n            }\n        }\n        return pairs;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <19a93f6a6fbc4e4584c53ad986eaa0b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <19a93f6a6fbc4e4584c53ad986eaa0b6>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        var dict = new Dictionary<long, long>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (dict.ContainsKey(arr[i])) {\n                dict[arr[i]]++;\n            } else {\n                dict.Add(arr[i], 1);\n            }\n        }\n        long twice_count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (dict.ContainsKey(sum - arr[i])) {\n                twice_count += dict[sum - arr[i]];\n            }\n            if (sum - arr[i] == arr[i]) {\n                twice_count--;\n            }\n        }\n        return twice_count / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a hash table to store the counts of the elements\n        Dictionary<long, long> counts = new Dictionary<long, long>();\n        foreach (long x in arr) {\n            if (counts.ContainsKey(x)) {\n                counts[x]++;\n            } else {\n                counts[x] = 1;\n            }\n        }\n        // For each element x, find the number of elements y such that x + y = sum\n        long ans = 0;\n        foreach (long x in arr) {\n            long y = sum - x;\n            if (counts.ContainsKey(y)) {\n                ans += counts[y];\n            }\n        }\n        // Divide by 2 since each pair is counted twice\n        return ans / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c22680248dc5439f91fd6f2ac0fd4edf>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Your code goes here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <67dc669ff59a4431a6e3dbd274d6e15e>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the frequency of each number\n        Dictionary<long, long> freq = new Dictionary<long, long>();\n        foreach (var num in arr) {\n            if (freq.ContainsKey(num)) {\n                freq[num]++;\n            } else {\n                freq.Add(num, 1);\n            }\n        }\n        // Now, for each number, find the frequency of the number that would make the sum\n        long count = 0;\n        foreach (var num in arr) {\n            long target = sum - num;\n            if (freq.ContainsKey(target)) {\n                count += freq[target];\n            }\n        }\n        // If the sum is even, then we have counted the pairs twice, so divide by 2\n        if (sum % 2 == 0) {\n            count /= 2;\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ab95ebfccaf44a51bbb28c76f7e7a1d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ab95ebfccaf44a51bbb28c76f7e7a1d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        Dictionary<long, long> d = new Dictionary<long, long>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (d.ContainsKey(sum - arr[i])) {\n                count += d[sum - arr[i]];\n            }\n            if (d.ContainsKey(arr[i])) {\n                d[arr[i]]++;\n            } else {\n                d.Add(arr[i], 1);\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long i in arr) {\n            if (dict.ContainsKey(i)) {\n                dict[i]++;\n            } else {\n                dict.Add(i, 1);\n            }\n        }\n        foreach (long i in arr) {\n            if (dict.ContainsKey(sum - i)) {\n                count += dict[sum - i];\n            }\n            if (sum - i == i) {\n                count--;\n            }\n        }\n        return count / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum();\n        // return arr.Select(x => arr.Where(y => x + y == sum).Count()).Sum\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpx3vn5bvk.cs(10,24): error CS0161: 'Problem.GetPairsCount(List<long>, long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++)\n        {\n            for (int j = i + 1; j < arr.Count; j++)\n            {\n                if (arr[i] + arr[j] == sum)\n                {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the frequency of each number in the array\n        Dictionary<long, long> freq = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (freq.ContainsKey(num)) {\n                freq[num]++;\n            } else {\n                freq.Add(num, 1);\n            }\n        }\n        // Iterate through the array and count the number of pairs\n        long pairsCount = 0;\n        foreach (long num in arr) {\n            long complement = sum - num;\n            if (freq.ContainsKey(complement)) {\n                pairsCount += freq[complement];\n            }\n            // If the number is equal to its complement, then we need to subtract 1 from the count\n            if (num == complement) {\n                pairsCount--;\n            }\n        }\n        // Divide the count by 2 since we counted each pair twice\n        return pairsCount / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number in the input list\n        Dictionary<long, long> numberCount = new Dictionary<long, long>();\n        // Iterate through the input list and add the number of occurences of each number to the dictionary\n        foreach (long num in arr) {\n            if (numberCount.ContainsKey(num)) {\n                numberCount[num] += 1;\n            } else {\n                numberCount.Add(num, 1);\n            }\n        }\n        // Create a variable to store the number of pairs\n        long pairsCount = 0;\n        // Iterate through the input list and add the number of pairs to the variable\n        foreach (long num in arr) {\n            if (numberCount.ContainsKey(sum - num)) {\n                pairsCount += numberCount[sum - num];\n            }\n        }\n        // Return the number of pairs\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1280e93e4b6c481c97ca5670a52ae4b2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1280e93e4b6c481c97ca5670a52ae4b2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Your code goes here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c3c3a0d1c4024fd6ad3505dd34e8de7e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c3c3a0d1c4024fd6ad3505dd34e8de7e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        // Iterate through the dictionary and count the number of pairs\n        long pairsCount = 0;\n        foreach (KeyValuePair<long, long> pair in dict) {\n            long num = pair.Key;\n            long numOccurences = pair.Value;\n            long otherNum = sum - num;\n            if (dict.ContainsKey(otherNum)) {\n                long otherNumOccurences = dict[otherNum];\n                pairsCount += numOccurences * otherNumOccurences;\n            }\n        }\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7dfc95e53360407082d6b4e520af1bfb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7dfc95e53360407082d6b4e520af1bfb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // return arr.Count(x => arr.Contains(sum - x));\n        var dict = new Dictionary<long, long>();\n        foreach (var x in arr) {\n            if (dict.ContainsKey(x)) {\n                dict[x]++;\n            } else {\n                dict[x] = 1;\n            }\n        }\n        long count = 0;\n        foreach (var x in arr) {\n            if (dict.ContainsKey(sum - x)) {\n                count += dict[sum - x];\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ada0e0cb767f44508c4f794814c31956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ada0e0cb767f44508c4f794814c31956>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // your code goes here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122960,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each element\n        Dictionary<long, long> occurences = new Dictionary<long, long>();\n        // Iterate through the array\n        foreach (long element in arr) {\n            // If the element is already in the dictionary, increment the number of occurences\n            if (occurences.ContainsKey(element)) {\n                occurences[element]++;\n            }\n            // Otherwise, add the element to the dictionary with 1 occurence\n            else {\n                occurences.Add(element, 1);\n            }\n        }\n        // Initialize the number of pairs to 0\n        long pairs = 0;\n        // Iterate through the array\n        foreach (long element in arr) {\n            // If the element is less than the sum, and the dictionary contains the difference between the sum and the element\n            if (element < sum && occurences.ContainsKey(sum - element)) {\n                // If the element is equal to the difference between the sum and the element, the number of pairs is the number of occurences of the element\n                if (element == sum - element) {\n                    pairs += occurences[element] * (occurences[element] - 1) / 2;\n                }\n                // Otherwise, the number of pairs is the number of occurences of the element multiplied by the number of occurences of the difference between the sum and the element\n                else {\n                    pairs += occurences[element] * occurences[sum - element];\n                }\n            }\n        }\n        // Return the number of pairs\n        return pairs;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f43d3ea8fe9b45188ceabba5f4f243f7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f43d3ea8fe9b45188ceabba5f4f243f7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Your code goes here\n        // return 0;\n        long pairs = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    pairs++;\n                }\n            }\n        }\n        return pairs;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e6087b863c8c48419a4a573c6aa5d124>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e6087b863c8c48419a4a573c6aa5d124>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        // Iterate through the dictionary and calculate the number of pairs\n        long pairsCount = 0;\n        foreach (KeyValuePair<long, long> kvp in dict) {\n            long num = kvp.Key;\n            long count = kvp.Value;\n            long complement = sum - num;\n            if (dict.ContainsKey(complement)) {\n                pairsCount += count * dict[complement];\n            }\n        }\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d43538541ccc4ab883dfe7b4e1e0825b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d43538541ccc4ab883dfe7b4e1e0825b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a hash table to store the counts of each number\n        Dictionary<long, long> counts = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (!counts.ContainsKey(num)) {\n                counts.Add(num, 0);\n            }\n            counts[num] += 1;\n        }\n\n        // Iterate through the numbers, and for each number, check if the complement exists in the hash table\n        long pairsCount = 0;\n        foreach (long num in arr) {\n            long complement = sum - num;\n            if (counts.ContainsKey(complement)) {\n                pairsCount += counts[complement];\n            }\n        }\n\n        // If the sum is equal to the number itself, we counted each pair twice, so divide by 2\n        if (sum % 2 == 0 && counts.ContainsKey(sum / 2)) {\n            pairsCount /= 2;\n        }\n\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <353eaca2e403403f94f30d30fc748ec2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <353eaca2e403403f94f30d30fc748ec2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a hash table to store the counts of the elements\n        Dictionary<long, long> counts = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (counts.ContainsKey(num)) {\n                counts[num]++;\n            } else {\n                counts.Add(num, 1);\n            }\n        }\n        // Iterate through the array and find the pairs\n        long pairsCount = 0;\n        foreach (long num in arr) {\n            long target = sum - num;\n            if (counts.ContainsKey(target)) {\n                pairsCount += counts[target];\n            }\n            if (target == num) {\n                pairsCount--;\n            }\n        }\n        return pairsCount / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Distinct().Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Distinct().Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Distinct().Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Distinct().Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Distinct().Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Distinct().Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Distinct().Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Distinct().Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Distinct().Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Distinct().Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Distinct().Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Distinct().Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Distinct().Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Distinct().Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x + y == sum)).Distinct().Count() / 2;\n        // return arr.SelectMany(x => arr.Where(y => x +\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyo6f2t27.cs(10,24): error CS0161: 'Problem.GetPairsCount(List<long>, long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        var dict = new Dictionary<long, long>();\n        foreach (var item in arr) {\n            if (dict.ContainsKey(item)) {\n                dict[item]++;\n            } else {\n                dict[item] = 1;\n            }\n        }\n        foreach (var item in arr) {\n            if (dict.ContainsKey(sum - item)) {\n                count += dict[sum - item];\n                if (sum - item == item) {\n                    count--;\n                }\n            }\n        }\n        return count / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a hash table to store the counts of each element.\n        Dictionary<long, long> counts = new Dictionary<long, long>();\n        // For each element in the array, add it to the hash table if it doesn't exist, or increment its count if it does.\n        foreach (long num in arr) {\n            if (counts.ContainsKey(num)) {\n                counts[num]++;\n            } else {\n                counts.Add(num, 1);\n            }\n        }\n        // Create a variable to store the number of pairs.\n        long pairs = 0;\n        // For each element in the array, check if the hash table contains the element that would make a pair with it.\n        foreach (long num in arr) {\n            // If the element is the same as the sum, and the element's count is greater than 1, then there are pairs.\n            if (num == sum && counts[num] > 1) {\n                pairs += counts[num] * (counts[num] - 1) / 2;\n            } else if (num != sum && counts.ContainsKey(sum - num)) {\n                pairs += counts[num] * counts[sum - num];\n            }\n        }\n        // Return the number of pairs.\n        return pairs;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7f2f208eb1c34bd5aa7c7f4a6a2902a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7f2f208eb1c34bd5aa7c7f4a6a2902a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number\n        Dictionary<long, long> occurences = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (occurences.ContainsKey(num)) {\n                occurences[num]++;\n            } else {\n                occurences[num] = 1;\n            }\n        }\n        // Now, for each number in the array, check if the number of occurences of sum - num is greater than 0\n        long count = 0;\n        foreach (long num in arr) {\n            if (occurences.ContainsKey(sum - num) && occurences[sum - num] > 0) {\n                count++;\n                occurences[sum - num]--;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3f714eb3a548438d96b41aa9b6f74807>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3f714eb3a548438d96b41aa9b6f74807>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // return arr.Count(x => arr.Contains(sum - x));\n        var dict = new Dictionary<long, long>();\n        foreach (var item in arr) {\n            if (dict.ContainsKey(item)) {\n                dict[item]++;\n            } else {\n                dict.Add(item, 1);\n            }\n        }\n        long result = 0;\n        foreach (var item in arr) {\n            if (dict.ContainsKey(sum - item)) {\n                result += dict[sum - item];\n            }\n            if (sum - item == item) {\n                result--;\n            }\n        }\n        return result / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long pairsCount = 0;\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b615cd599d154cd895818247f556d1b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b615cd599d154cd895818247f556d1b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a hash table to store the counts of each number\n        Dictionary<long, long> counts = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (counts.ContainsKey(num)) {\n                counts[num]++;\n            } else {\n                counts[num] = 1;\n            }\n        }\n\n        // Iterate through the hash table and count the number of pairs\n        long pairsCount = 0;\n        foreach (KeyValuePair<long, long> pair in counts) {\n            long num = pair.Key;\n            long count = pair.Value;\n            long otherNum = sum - num;\n            if (counts.ContainsKey(otherNum)) {\n                pairsCount += count * counts[otherNum];\n            }\n        }\n\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f07b5252f2c5452397dcfaaf61250a35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f07b5252f2c5452397dcfaaf61250a35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long pairsCount = 0;\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        foreach (long num in arr) {\n            long diff = sum - num;\n            if (dict.ContainsKey(diff)) {\n                pairsCount += dict[diff];\n                if (diff == num) {\n                    pairsCount--;\n                }\n            }\n        }\n        return pairsCount / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        var dict = new Dictionary<long, long>();\n        long count = 0;\n        foreach (var item in arr) {\n            if (dict.ContainsKey(sum - item)) {\n                count += dict[sum - item];\n            }\n            if (dict.ContainsKey(item)) {\n                dict[item]++;\n            } else {\n                dict.Add(item, 1);\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // return arr.Count(x => arr.Contains(sum - x));\n        var dict = new Dictionary<long, long>();\n        foreach (var i in arr) {\n            if (dict.ContainsKey(i)) {\n                dict[i]++;\n            } else {\n                dict[i] = 1;\n            }\n        }\n        var count = 0L;\n        foreach (var i in arr) {\n            if (dict.ContainsKey(sum - i)) {\n                count += dict[sum - i];\n            }\n            if (i == sum - i) {\n                count--;\n            }\n        }\n        return count / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number in the list\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        // Count the number of pairs whose sum is equal to 'sum'\n        long pairsCount = 0;\n        foreach (long num in arr) {\n            if (dict.ContainsKey(sum - num)) {\n                pairsCount += dict[sum - num];\n            }\n            if (num == sum - num) {\n                pairsCount--;\n            }\n        }\n        return pairsCount / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        // Create a list of unique numbers\n        List<long> unique = new List<long>(dict.Keys);\n        // Sort the list\n        unique.Sort();\n        // Count the number of pairs\n        long count = 0;\n        foreach (long num in unique) {\n            long other = sum - num;\n            if (dict.ContainsKey(other)) {\n                count += dict[num] * dict[other];\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6affc41099ae4fbfbfcebfb09d55ed11>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6affc41099ae4fbfbfcebfb09d55ed11>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Your code goes here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a frequency table\n        Dictionary<long, long> freq = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (freq.ContainsKey(num)) {\n                freq[num]++;\n            } else {\n                freq.Add(num, 1);\n            }\n        }\n\n        // Iterate through each element and increment the count (Notice that every pair is counted twice)\n        long twice_count = 0;\n        foreach (long num in arr) {\n            twice_count += freq[sum - num];\n            // if (sum - num == num) {\n            //     twice_count--;\n            // }\n        }\n\n        // return the answer\n        return twice_count / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f5427156afd044a38a58930eed150af7>:0 \n\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException: The given key '0' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.GetPairsCount (System.Collections.Generic.List`1[T] arr, System.Int64 sum) [0x00085] in <f5427156afd044a38a58930eed150af7>:0 \n  at Problem.Main (System.String[] args) [0x00065] in <f5427156afd044a38a58930eed150af7>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException: The given key '0' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.GetPairsCount (System.Collections.Generic.List`1[T] arr, System.Int64 sum) [0x00085] in <f5427156afd044a38a58930eed150af7>:0 \n  at Problem.Main (System.String[] args) [0x00065] in <f5427156afd044a38a58930eed150af7>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of times each number appears in the list\n        Dictionary<long, long> nums = new Dictionary<long, long>();\n        // Add the numbers to the dictionary\n        foreach (long num in arr) {\n            if (nums.ContainsKey(num)) {\n                nums[num]++;\n            } else {\n                nums.Add(num, 1);\n            }\n        }\n        // Create a variable to store the number of pairs\n        long pairs = 0;\n        // Iterate over the dictionary\n        foreach (KeyValuePair<long, long> num in nums) {\n            // If the sum minus the current number is in the dictionary, add the number of times it appears to the number of pairs\n            if (nums.ContainsKey(sum - num.Key)) {\n                pairs += nums[sum - num.Key];\n            }\n            // If the current number is half the sum, subtract one from the number of pairs\n            if (num.Key == sum / 2) {\n                pairs--;\n            }\n        }\n        // Divide the number of pairs by two and return it\n        return pairs / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <491fe6d92638415e9f8de755852bedba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <491fe6d92638415e9f8de755852bedba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // create a dictionary to store the number of occurences of each number\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        // iterate through the dictionary and count the number of pairs\n        long pairsCount = 0;\n        foreach (KeyValuePair<long, long> entry in dict) {\n            long num = entry.Key;\n            long numOccurences = entry.Value;\n            long otherNum = sum - num;\n            if (dict.ContainsKey(otherNum)) {\n                long otherNumOccurences = dict[otherNum];\n                pairsCount += numOccurences * otherNumOccurences;\n            }\n        }\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3793585301d440ff8a006a92eca7f6dd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3793585301d440ff8a006a92eca7f6dd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the count of each number\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (!dict.ContainsKey(num)) {\n                dict.Add(num, 1);\n            } else {\n                dict[num]++;\n            }\n        }\n        // Iterate through the dictionary and count the number of pairs\n        long pairsCount = 0;\n        foreach (KeyValuePair<long, long> pair in dict) {\n            long num = pair.Key;\n            long count = pair.Value;\n            // If the number is equal to the sum, then the number of pairs is the number of times the number appears in the list\n            if (num == sum) {\n                pairsCount += count;\n            } else {\n                // If the number is not equal to the sum, then the number of pairs is the number of times the number appears in the list multiplied by the number of times the number that is equal to the sum minus the number appears in the list\n                if (dict.ContainsKey(sum - num)) {\n                    pairsCount += count * dict[sum - num];\n                }\n            }\n        }\n        // Divide the number of pairs by 2 because each pair is counted twice\n        return pairsCount / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e0dfd24bb9fa4f5da3032e6c1a4cffc1>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // your code goes here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122960,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the counts of the numbers in the list\n        Dictionary<long, long> counts = new Dictionary<long, long>();\n        // Iterate over the list and add the counts to the dictionary\n        foreach (long num in arr) {\n            if (counts.ContainsKey(num)) {\n                counts[num]++;\n            } else {\n                counts.Add(num, 1);\n            }\n        }\n        // Iterate over the dictionary and count the pairs\n        long pairsCount = 0;\n        foreach (KeyValuePair<long, long> pair in counts) {\n            long num = pair.Key;\n            long count = pair.Value;\n            long numToFind = sum - num;\n            if (counts.ContainsKey(numToFind)) {\n                pairsCount += count * counts[numToFind];\n            }\n        }\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <571bb6b8eac74fcb96bca747edff2c6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <571bb6b8eac74fcb96bca747edff2c6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of times each number appears in the array\n        Dictionary<long, long> numCounts = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (numCounts.ContainsKey(num)) {\n                numCounts[num]++;\n            } else {\n                numCounts.Add(num, 1);\n            }\n        }\n        // Create a dictionary to store the number of times each number appears in the array\n        Dictionary<long, long> numCounts2 = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (numCounts2.ContainsKey(num)) {\n                numCounts2[num]++;\n            } else {\n                numCounts2.Add(num, 1);\n            }\n        }\n        // Create a dictionary to store the number of times each number appears in the array\n        Dictionary<long, long> numCounts3 = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (numCounts3.ContainsKey(num)) {\n                numCounts3[num]++;\n            } else {\n                numCounts3.Add(num, 1);\n            }\n        }\n        // Create a dictionary to store the number of times each number appears in the array\n        Dictionary<long, long> numCounts4 = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (numCounts4.ContainsKey(num)) {\n                numCounts4[num]++;\n            } else {\n                numCounts4.Add(num, 1);\n            }\n        }\n        // Create a dictionary to store the number of times each number appears in the array\n        Dictionary<long, long> numCounts5 = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (numCounts5.ContainsKey(num)) {\n                numCounts5[num]++;\n            } else {\n                numCounts5.Add(num, 1);\n            }\n        }\n        // Create a dictionary to store the number of times each number appears in\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1rxlm958.cs(10,24): error CS0161: 'Problem.GetPairsCount(List<long>, long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the frequency of each number in the list\n        Dictionary<long, long> freq = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (!freq.ContainsKey(num)) {\n                freq.Add(num, 0);\n            }\n            freq[num]++;\n        }\n        // Iterate through the list and check the frequency of the number 'sum - num'\n        long count = 0;\n        foreach (long num in arr) {\n            if (freq.ContainsKey(sum - num)) {\n                count += freq[sum - num];\n            }\n            // If the number is the same as 'sum - num', then we have to decrement the count by 1\n            if (num == sum - num) {\n                count--;\n            }\n        }\n        return count / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number\n        var dict = new Dictionary<long, long>();\n        foreach (var num in arr) {\n            if (!dict.ContainsKey(num)) {\n                dict[num] = 0;\n            }\n            dict[num]++;\n        }\n        // Iterate through the dictionary and count the number of pairs\n        long pairsCount = 0;\n        foreach (var kvp in dict) {\n            var num = kvp.Key;\n            var numOccurences = kvp.Value;\n            var otherNum = sum - num;\n            if (dict.ContainsKey(otherNum)) {\n                pairsCount += numOccurences * dict[otherNum];\n            }\n        }\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ca18c3ad3b5845129e807058fb4c7815>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ca18c3ad3b5845129e807058fb4c7815>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the counts of each number\n        Dictionary<long, long> counts = new Dictionary<long, long>();\n        // Iterate through the list and add each number to the dictionary\n        foreach (long num in arr) {\n            // If the number is already in the dictionary, increment the count\n            if (counts.ContainsKey(num)) {\n                counts[num]++;\n            } else {\n                // Otherwise, add the number to the dictionary with a count of 1\n                counts.Add(num, 1);\n            }\n        }\n        // Initialize the count of pairs to 0\n        long pairCount = 0;\n        // Iterate through the dictionary\n        foreach (KeyValuePair<long, long> pair in counts) {\n            // If the number is less than half of the sum, add the count of the number to the pair count\n            if (pair.Key < sum / 2) {\n                pairCount += pair.Value;\n            } else if (pair.Key == sum / 2) {\n                // If the number is equal to half of the sum, add the count of the number divided by 2 to the pair count\n                pairCount += pair.Value / 2;\n            }\n        }\n        // Return the pair count\n        return pairCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <60b32f2750224c528397ab1c0c1ae89d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <60b32f2750224c528397ab1c0c1ae89d>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // return arr.SelectMany((x, i) => arr.Skip(i + 1).Select(y => new { x, y })).Count(z => z.x + z.y == sum);\n        var dict = new Dictionary<long, long>();\n        foreach (var item in arr) {\n            if (dict.ContainsKey(item)) {\n                dict[item]++;\n            } else {\n                dict[item] = 1;\n            }\n        }\n        long count = 0;\n        foreach (var item in dict) {\n            if (dict.ContainsKey(sum - item.Key)) {\n                count += dict[sum - item.Key];\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <36a5e103b70c42d8b768b54117414096>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <36a5e103b70c42d8b768b54117414096>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // return arr.SelectMany((x, i) => arr.Skip(i + 1), (x, y) => new { x, y }).Where(z => z.x + z.y == sum).Count();\n        return arr.SelectMany((x, i) => arr.Skip(i + 1), (x, y) => new { x, y }).Where(z => z.x + z.y == sum).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Your code goes here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        for (int i = 0; i < arr.Count; i++) {\n            if (dict.ContainsKey(arr[i])) {\n                dict[arr[i]]++;\n            } else {\n                dict.Add(arr[i], 1);\n            }\n        }\n\n        for (int i = 0; i < arr.Count; i++) {\n            if (dict.ContainsKey(sum - arr[i])) {\n                count += dict[sum - arr[i]];\n            }\n        }\n\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f2b0cd492a94927bb4ac2c504870f26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1f2b0cd492a94927bb4ac2c504870f26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of times each number appears in the list\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        long twice_count = 0;\n        // Iterate through each number in the list\n        foreach (long num in arr) {\n            // If the number is in the dictionary, then there is a pair of numbers that sums to the given sum\n            if (dict.ContainsKey(sum - num)) {\n                twice_count += dict[sum - num];\n            }\n            // If the number is the same as the sum, then we need to subtract one from the count\n            if (sum - num == num) {\n                twice_count--;\n            }\n        }\n        // Divide the count by two since each pair is counted twice\n        return twice_count / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number\n        Dictionary<long, long> occurences = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (occurences.ContainsKey(num)) {\n                occurences[num]++;\n            } else {\n                occurences[num] = 1;\n            }\n        }\n        // Count the number of pairs\n        long pairsCount = 0;\n        foreach (long num in arr) {\n            long numToFind = sum - num;\n            if (occurences.ContainsKey(numToFind)) {\n                // If the number is the same as the number to find, we need to divide the number of occurences by 2\n                if (num == numToFind) {\n                    pairsCount += occurences[num] / 2;\n                } else {\n                    pairsCount += occurences[numToFind];\n                }\n            }\n        }\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122964,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc1a0aa02cfe4e21ab26601a428cf7e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <dc1a0aa02cfe4e21ab26601a428cf7e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // create a dictionary to store the number of occurences of each number\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        // count the number of pairs\n        long pairsCount = 0;\n        foreach (long num in arr) {\n            // if the number is in the dictionary, then we can find a pair\n            if (dict.ContainsKey(sum - num)) {\n                // if the number is the same as the other number in the pair, then we need to divide by 2 to get the number of pairs\n                if (num == sum - num) {\n                    pairsCount += dict[num] / 2;\n                } else {\n                    pairsCount += dict[num] * dict[sum - num];\n                }\n            }\n        }\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122964,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ac98f2a722c648a0a10ef47071094e50>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ac98f2a722c648a0a10ef47071094e50>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        var dict = new Dictionary<long, long>();\n        foreach (var item in arr) {\n            if (dict.ContainsKey(item)) {\n                dict[item] = dict[item] + 1;\n            } else {\n                dict.Add(item, 1);\n            }\n        }\n        long result = 0;\n        foreach (var item in arr) {\n            if (dict.ContainsKey(sum - item)) {\n                result += dict[sum - item];\n            }\n            if (sum - item == item) {\n                result--;\n            }\n        }\n        return result / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122964,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Your code goes here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c3c3a0d1c4024fd6ad3505dd34e8de7e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c3c3a0d1c4024fd6ad3505dd34e8de7e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long i in arr) {\n            if (dict.ContainsKey(i)) {\n                dict[i]++;\n            } else {\n                dict.Add(i, 1);\n            }\n        }\n        foreach (long i in arr) {\n            if (dict.ContainsKey(sum - i)) {\n                count += dict[sum - i];\n            }\n            if (sum - i == i) {\n                count--;\n            }\n        }\n        return count / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of times each number appears in the list\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            }\n            else {\n                dict.Add(num, 1);\n            }\n        }\n        // Iterate through the dictionary and count the number of pairs\n        long pairsCount = 0;\n        foreach (long num in dict.Keys) {\n            long otherNum = sum - num;\n            if (dict.ContainsKey(otherNum)) {\n                pairsCount += dict[num] * dict[otherNum];\n            }\n        }\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122964,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <67b1f6b28f304bb7ac32a5edf4fcfa29>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <67b1f6b28f304bb7ac32a5edf4fcfa29>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // return arr.Count(x => arr.Contains(sum - x));\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122964,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // your code goes here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122960,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number in the array\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        // Iterate through the dictionary and count the number of pairs\n        long pairsCount = 0;\n        foreach (KeyValuePair<long, long> pair in dict) {\n            long num = pair.Key;\n            long numOccurences = pair.Value;\n            long otherNum = sum - num;\n            if (dict.ContainsKey(otherNum)) {\n                long otherNumOccurences = dict[otherNum];\n                // If the other number is the same as the current number, we need to divide the number of pairs by 2\n                if (otherNum == num) {\n                    pairsCount += numOccurences * (numOccurences - 1) / 2;\n                } else {\n                    pairsCount += numOccurences * otherNumOccurences;\n                }\n            }\n        }\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122964,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <34685683848a4f389d501ca284052f20>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <34685683848a4f389d501ca284052f20>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // return arr.Count(x => arr.Contains(sum - x));\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122964,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (dict.ContainsKey(arr[i])) {\n                dict[arr[i]]++;\n            } else {\n                dict.Add(arr[i], 1);\n            }\n        }\n        for (int i = 0; i < arr.Count; i++) {\n            if (dict.ContainsKey(sum - arr[i])) {\n                count += dict[sum - arr[i]];\n            }\n            if (sum - arr[i] == arr[i]) {\n                count--;\n            }\n        }\n        return count / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122964,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number in the list\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num] += 1;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        // Create a list of the unique numbers in the list\n        List<long> uniqueNums = new List<long>(dict.Keys);\n        // Create a list of the number of occurences of each unique number in the list\n        List<long> numOccurences = new List<long>(dict.Values);\n        // Create a list of the number of pairs that can be made with each unique number\n        List<long> numPairs = new List<long>();\n        for (int i = 0; i < uniqueNums.Count; i++) {\n            numPairs.Add(numOccurences[i] * (numOccurences[i] - 1) / 2);\n        }\n        // Create a list of the unique numbers that can be added to each unique number to get the sum\n        List<long> uniquePairs = new List<long>();\n        for (int i = 0; i < uniqueNums.Count; i++) {\n            if (uniqueNums.Contains(sum - uniqueNums[i])) {\n                uniquePairs.Add(sum - uniqueNums[i]);\n            }\n        }\n        // Create a list of the number of occurences of each unique number that can be added to each unique number to get the sum\n        List<long> numOccurencesUniquePairs = new List<long>();\n        for (int i = 0; i < uniquePairs.Count; i++) {\n            numOccurencesUniquePairs.Add(dict[uniquePairs[i]]);\n        }\n        // Create a list of the number of pairs that can be made with each unique number and each unique number that can be added to it to get the sum\n        List<long> numPairsUniquePairs = new List<long>();\n        for (int i = 0; i < uniquePairs\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpj2h7zif6.cs(43,40): error CS1002: ; expected\n/tmp/tmpj2h7zif6.cs(43,40): error CS1026: ) expected\n/tmp/tmpj2h7zif6.cs(43,40): error CS1525: Invalid expression term '}'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // return arr.Count(x => arr.Contains(sum - x));\n        // return arr.Select(x => arr.Contains(sum - x)).Count(x => x);\n        return arr.Select(x => arr.Contains(sum - x)).Count(x => x);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122964,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c7809deec4e4420a8c647bf0b27b9166>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c7809deec4e4420a8c647bf0b27b9166>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            }\n            else {\n                dict.Add(num, 1);\n            }\n        }\n        // Create a list of unique numbers\n        List<long> uniqueNums = new List<long>();\n        foreach (long num in dict.Keys) {\n            uniqueNums.Add(num);\n        }\n        // Create a list of pairs\n        List<Tuple<long, long>> pairs = new List<Tuple<long, long>>();\n        foreach (long num in uniqueNums) {\n            if (dict.ContainsKey(sum - num)) {\n                pairs.Add(new Tuple<long, long>(num, sum - num));\n            }\n        }\n        // Count the number of pairs\n        long count = 0;\n        foreach (Tuple<long, long> pair in pairs) {\n            if (pair.Item1 == pair.Item2) {\n                count += dict[pair.Item1] * (dict[pair.Item1] - 1) / 2;\n            }\n            else {\n                count += dict[pair.Item1] * dict[pair.Item2];\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122964,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bfbbb7c9f4a740f997efcc7880dc3b1c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bfbbb7c9f4a740f997efcc7880dc3b1c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f20cca293ca34d64b063cc33ee5aee2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f20cca293ca34d64b063cc33ee5aee2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number in the list\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        // Iterate through the dictionary and count the number of pairs\n        long pairsCount = 0;\n        foreach (KeyValuePair<long, long> pair in dict) {\n            long num = pair.Key;\n            long numOccurences = pair.Value;\n            long otherNum = sum - num;\n            if (dict.ContainsKey(otherNum)) {\n                long otherNumOccurences = dict[otherNum];\n                pairsCount += numOccurences * otherNumOccurences;\n            }\n        }\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122964,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ea93eabcd52b46398fa63af6e68bb464>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ea93eabcd52b46398fa63af6e68bb464>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // Create a dictionary to store the number of occurences of each number\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        // Iterate over the dictionary and count the number of pairs\n        long pairsCount = 0;\n        foreach (KeyValuePair<long, long> pair in dict) {\n            long num = pair.Key;\n            long numOccurences = pair.Value;\n            long complement = sum - num;\n            if (dict.ContainsKey(complement)) {\n                long complementOccurences = dict[complement];\n                if (complement == num) {\n                    pairsCount += numOccurences * (numOccurences - 1) / 2;\n                } else {\n                    pairsCount += numOccurences * complementOccurences;\n                }\n            }\n        }\n        return pairsCount;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122964,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bd25e8c4a63b412db1e90b5fb1e128a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bd25e8c4a63b412db1e90b5fb1e128a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        // your code goes here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1666122960,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}