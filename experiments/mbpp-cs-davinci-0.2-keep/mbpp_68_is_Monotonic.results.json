{
  "name": "mbpp_68_is_Monotonic",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        long last = A[0];\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < last) {\n                increasing = false;\n            }\n            if (A[i] > last) {\n                decreasing = false;\n            }\n            last = A[i];\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bfe09e1ca9ee4b9c8ac77f4a8b1f5a6b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Time: O(n)\n        // Space: O(1)\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool is_increasing = true;\n        bool is_decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                is_increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                is_decreasing = false;\n            }\n        }\n        return is_increasing || is_decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        if (A.Count <= 1) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 1) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Time: O(n)\n        // Space: O(1)\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing && A[i] > A[i + 1]) {\n                return false;\n            }\n            if (!increasing && A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        long last = A[0];\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < last) {\n                increasing = false;\n            }\n            if (A[i] > last) {\n                decreasing = false;\n            }\n            last = A[i];\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing) {\n                if (A[i] > A[i + 1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 1) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing && A[i] > A[i + 1]) {\n                return false;\n            }\n            if (!increasing && A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 1) {\n            return true;\n        }\n\n        bool increasing = true;\n        bool decreasing = true;\n\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 2) {\n            return true;\n        }\n        bool increasing = A[0] <= A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing && A[i] > A[i + 1]) {\n                return false;\n            }\n            if (!increasing && A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        return A.SequenceEqual(A.OrderBy(x => x)) || A.SequenceEqual(A.OrderByDescending(x => x));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 3) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing) {\n                if (A[i] > A[i + 1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bfe09e1ca9ee4b9c8ac77f4a8b1f5a6b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing) {\n                if (A[i] > A[i + 1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // A is monotonic if it is either monotone increasing or monotone decreasing.\n        // An array A is monotone increasing if for all i <= j, A[i] <= A[j].  An array A is monotone decreasing if for all i <= j, A[i] >= A[j].\n        // Return true if and only if the given array A is monotonic.\n        // Example 1:\n        // Input: [1,2,2,3]\n        // Output: true\n        // Example 2:\n        // Input: [6,5,4,4]\n        // Output: true\n        // Example 3:\n        // Input: [1,3,2]\n        // Output: false\n        // Example 4:\n        // Input: [1,2,4,5]\n        // Output: true\n        // Example 5:\n        // Input: [1,1,1]\n        // Output: true\n        // Note:\n        // 1 <= A.length <= 50000\n        // -100000 <= A[i] <= 100000\n        // Solution:\n        // If the array is monotonic, then the difference between each element and the next element should be the same.\n        // If the array is monotone increasing, then the difference between each element and the next element should be positive.\n        // If the array is monotone decreasing, then the difference between each element and the next element should be negative.\n        // If the array is not monotonic, then the difference between each element and the next element should be different.\n        // If the array is not monotone increasing, then the difference between each element and the next element should be negative.\n        // If the array is not monotone decreasing, then the difference between each element and the next element should be positive.\n        // If the array is monotonic, then the difference between each element and the next element should be the same.\n        // If the array is monotone increasing, then the difference between each element and the next element should be positive.\n        // If the array is monotone decreasing, then the difference between each element and the next element should be negative.\n        // If the array is not monotonic, then the difference between each element and the next element should\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp40xxmsn5.cs(10,24): error CS0161: 'Problem.IsMonotonic(List<long>)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 3) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        if (A.Count == 0) {\n            return false;\n        }\n        if (A.Count == 1) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 1) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing) {\n                if (A[i] > A[i + 1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 1) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing) {\n                if (A[i] > A[i + 1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 3) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Time: O(n)\n        // Space: O(1)\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] <= A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing && A[i] > A[i + 1]) {\n                return false;\n            }\n            if (!increasing && A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing) {\n                if (A[i] > A[i + 1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        // return true or false\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 1) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 1) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n\n        long prev = A[0];\n        bool increasing = true;\n        bool decreasing = true;\n\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < prev) {\n                increasing = false;\n            } else if (A[i] > prev) {\n                decreasing = false;\n            }\n\n            if (!increasing && !decreasing) {\n                return false;\n            }\n\n            prev = A[i];\n        }\n\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Time: O(n)\n        // Space: O(1)\n        if (A.Count <= 2) return true;\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing) {\n                if (A[i] > A[i + 1]) return false;\n            } else {\n                if (A[i] < A[i + 1]) return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 3) return true;\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        var increasing = true;\n        var decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; ++i) {\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            } else if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        long prev = A[0];\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < prev) {\n                increasing = false;\n            }\n            if (A[i] > prev) {\n                decreasing = false;\n            }\n            prev = A[i];\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            } else if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 3) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing) {\n                if (A[i] > A[i + 1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        if (A.Count == 1) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        // return true or false\n        if (A.Count == 1) {\n            return true;\n        }\n        long prev = A[0];\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] > prev) {\n                decreasing = false;\n            } else if (A[i] < prev) {\n                increasing = false;\n            }\n            prev = A[i];\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing) {\n                if (A[i] > A[i + 1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Time: O(n)\n        // Space: O(1)\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] <= A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing && A[i] > A[i + 1]) {\n                return false;\n            }\n            if (!increasing && A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        long prev = A[0];\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < prev) {\n                increasing = false;\n            }\n            if (A[i] > prev) {\n                decreasing = false;\n            }\n            prev = A[i];\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2)\n            return true;\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i - 1] > A[i])\n                increasing = false;\n            if (A[i - 1] < A[i])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 1) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 0) {\n            return false;\n        }\n        if (A.Count == 1) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i-1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i-1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                isIncreasing = false;\n            if (A[i] < A[i + 1])\n                isDecreasing = false;\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 1) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            increasing &= A[i] >= A[i - 1];\n            decreasing &= A[i] <= A[i - 1];\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 0) {\n            return false;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Pythonic way\n        // return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n        //         all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n\n        // C# way\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Time: O(n)\n        // Space: O(1)\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing && A[i] > A[i + 1]) {\n                return false;\n            }\n            if (!increasing && A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        long prev = A[0];\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < prev) {\n                increasing = false;\n            }\n            if (A[i] > prev) {\n                decreasing = false;\n            }\n            prev = A[i];\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 3) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        long last = A[0];\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < last) {\n                increasing = false;\n            }\n            if (A[i] > last) {\n                decreasing = false;\n            }\n            last = A[i];\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) return true;\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) increasing = false;\n            if (A[i] > A[i - 1]) decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bfe09e1ca9ee4b9c8ac77f4a8b1f5a6b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) return true;\n        bool increasing = false;\n        bool decreasing = false;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] > A[i - 1]) {\n                increasing = true;\n            } else if (A[i] < A[i - 1]) {\n                decreasing = true;\n            }\n            if (increasing && decreasing) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = A[0] < A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing) {\n                if (A[i] > A[i + 1]) {\n                    return false;\n                }\n            } else {\n                if (A[i] < A[i + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 1) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1])\n                increasing = false;\n            if (A[i] < A[i + 1])\n                decreasing = false;\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        if (A.Count == 1) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            } else if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        // Write your code here\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count <= 2) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122898,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count == 0) {\n            return true;\n        }\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] < A[i - 1]) {\n                increasing = false;\n            }\n            if (A[i] > A[i - 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122899,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                isIncreasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                isDecreasing = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A.Count < 2) {\n            return true;\n        }\n        bool increasing = A[0] <= A[1];\n        for (int i = 1; i < A.Count - 1; i++) {\n            if (increasing && A[i] > A[i + 1]) {\n                return false;\n            }\n            if (!increasing && A[i] < A[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        bool increasing = true;\n        bool decreasing = true;\n        for (int i = 0; i < A.Count - 1; i++) {\n            if (A[i] > A[i + 1]) {\n                increasing = false;\n            }\n            if (A[i] < A[i + 1]) {\n                decreasing = false;\n            }\n        }\n        return increasing || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510053,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}