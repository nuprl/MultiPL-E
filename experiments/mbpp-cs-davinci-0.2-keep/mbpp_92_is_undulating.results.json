{
  "name": "mbpp_92_is_undulating",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i + 1] == s[i + 2] || s[i] == s[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ea7547e26a534a2abc187fa1c651eeb2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ea7547e26a534a2abc187fa1c651eeb2>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // TODO: Implement this function\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1eaa03ccac5a45699a4211d4d0d0a837>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1eaa03ccac5a45699a4211d4d0d0a837>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // TODO: Implement this function.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d907572838864258bd14ca7d9d43ee27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d907572838864258bd14ca7d9d43ee27>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // TODO: Implement this function.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d907572838864258bd14ca7d9d43ee27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d907572838864258bd14ca7d9d43ee27>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <501fcfdce33a453080e7a25fd8d406e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <501fcfdce33a453080e7a25fd8d406e5>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // The number is undulating if it has at least three digits, and\n        // the difference between the digits at even positions and the digits\n        // at odd positions is a constant.\n        if (n < 100) return false;\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        int diff = digits[1] - digits[0];\n        for (int i = 2; i < digits.Count; i++) {\n            if (digits[i] - digits[i - 1] != diff) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bed74415e414903be5e8cf69187d885>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5bed74415e414903be5e8cf69187d885>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().ToCharArray().Select(x => x - '0').ToArray();\n        var len = digits.Length;\n        for (int i = 0; i < len - 2; i++) {\n            if (digits[i] != digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1])\n                return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var last = digits[0];\n        var lastSign = 0;\n        for (int i = 1; i < digits.Length; i++) {\n            var sign = Math.Sign(digits[i] - last);\n            if (sign == 0) continue;\n            if (sign == lastSign) return false;\n            lastSign = sign;\n            last = digits[i];\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d7eff191066e4fcaa68166d10119f606>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // TODO: Implement this function.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d907572838864258bd14ca7d9d43ee27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d907572838864258bd14ca7d9d43ee27>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        if (n < 10) return false;\n        var s = n.ToString();\n        var last = s[0];\n        var lastDiff = 0;\n        for (int i = 1; i < s.Length; i++) {\n            var diff = s[i] - last;\n            if (diff == 0) return false;\n            if (lastDiff != 0 && diff != lastDiff) return false;\n            lastDiff = diff;\n            last = s[i];\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2090767f09f449de932d573e189031d2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2090767f09f449de932d573e189031d2>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().ToCharArray().Select(x => x - '0').ToArray();\n        var last = digits[0];\n        var lastDiff = 0;\n        for (int i = 1; i < digits.Length; i++) {\n            var diff = digits[i] - last;\n            if (diff == 0) return false;\n            if (lastDiff != 0 && diff != lastDiff) return false;\n            last = digits[i];\n            lastDiff = diff;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ff44c9425cfb42e8a125637b77f13c79>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ff44c9425cfb42e8a125637b77f13c79>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var l = s.Length;\n        for (int i = 0; i < l - 1; i++) {\n            if (s[i] == s[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i] != digits[i - 1] && digits[i] != digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // An undulating number is a number that has alternating digits.\n        // For example, the number 1214 is undulating because it has the digits 1, 2, 1, and 4.\n        // The number 1234 is not undulating because it has the digits 1, 2, 3, and 4.\n        // The number 12 is not undulating because it has only two digits.\n        // The number 1 is not undulating because it has only one digit.\n        // The number 0 is not undulating because it has only one digit.\n        // The number -1 is not undulating because it has only one digit.\n        // The number -12 is not undulating because it has only two digits.\n        // The number -123 is not undulating because it has only three digits.\n        // The number -1234 is not undulating because it has only four digits.\n        // The number -12345 is not undulating because it has only five digits.\n        // The number -123456 is not undulating because it has only six digits.\n        // The number -1234567 is not undulating because it has only seven digits.\n        // The number -12345678 is not undulating because it has only eight digits.\n        // The number -123456789 is not undulating because it has only nine digits.\n        // The number -1234567890 is not undulating because it has only ten digits.\n        // The number -12345678901 is not undulating because it has only eleven digits.\n        // The number -123456789012 is not undulating because it has only twelve digits.\n        // The number -1234567890123 is not undulating because it has only thirteen digits.\n        // The number -12345678901234 is not undulating because it has only fourteen digits.\n        // The number -123456789012345 is not undulating because it has only fifteen digits.\n        // The number -1234567890123456 is not undulating because it has only sixteen digits.\n        // The number -12345678901234567 is not undulating because it has only seventeen digits.\n        // The number -123456789012345678 is not undulating because it has only eighteen digits.\n        // The number -123456789012345\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp4kssvq95.cs(10,24): error CS0161: 'Problem.IsUndulating(long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var count = 1;\n        var undulating = false;\n        for (var i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (count > 2) {\n                    undulating = true;\n                }\n                count = 1;\n                last = s[i];\n            }\n        }\n        return undulating || count > 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c5e6337997be4687bf4ce793496903ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c5e6337997be4687bf4ce793496903ab>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 0; i < digits.Length - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // Your code goes here.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ffe08c907ff4c2f89fb904851db4f47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ffe08c907ff4c2f89fb904851db4f47>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // TODO: Implement this function\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1eaa03ccac5a45699a4211d4d0d0a837>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1eaa03ccac5a45699a4211d4d0d0a837>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var last = digits[0];\n        var lastDiff = 0;\n        for (int i = 1; i < digits.Length; i++) {\n            var diff = digits[i] - last;\n            if (diff == 0) {\n                return false;\n            }\n            if (lastDiff == 0) {\n                lastDiff = diff;\n            } else if (lastDiff != diff) {\n                return false;\n            }\n            last = digits[i];\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <693135b7d1d446c9993b898c5b990105>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <693135b7d1d446c9993b898c5b990105>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var len = s.Length;\n        if (len < 3) return false;\n        for (int i = 1; i < len - 1; i++) {\n            var a = s[i - 1] - s[i];\n            var b = s[i] - s[i + 1];\n            if (a * b <= 0) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f11789366bd547389797e9aa81b92752>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f11789366bd547389797e9aa81b92752>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var count = 0;\n        var isIncreasing = true;\n        for (int i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (isIncreasing) {\n                    if (s[i] < last) {\n                        isIncreasing = false;\n                    }\n                } else {\n                    if (s[i] > last) {\n                        return false;\n                    }\n                }\n                last = s[i];\n                count = 0;\n            }\n            if (count > 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7316b3e325c24c58952d38f2a8d5bddd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7316b3e325c24c58952d38f2a8d5bddd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 0; i < digits.Length - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1])\n                return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 0; i < digits.Length - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var count = 1;\n        var undulating = false;\n        for (int i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (count > 1) {\n                    undulating = true;\n                }\n                count = 1;\n                last = s[i];\n            }\n        }\n        if (count > 1) {\n            undulating = true;\n        }\n        return undulating;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ad5908c57b8947fa9e5603e098b0dc96>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ad5908c57b8947fa9e5603e098b0dc96>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        for (int i = 1; i < s.Length - 1; i++) {\n            if (s[i] == s[i - 1] || s[i] == s[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] % 2 == 0 && digits[i + 1] % 2 == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122537,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ff4a5e3e6dc14cb68a0f5784f8ef06c9>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] % 2 == 0 && digits[i + 1] % 2 == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122537,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ff4a5e3e6dc14cb68a0f5784f8ef06c9>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // The number is undulating if it has at least 3 digits and\n        // the difference between the digits at even and odd positions\n        // alternates between even and odd.\n        if (n < 100) {\n            return false;\n        }\n        int diff = 0;\n        int lastDiff = 0;\n        int count = 0;\n        while (n > 0) {\n            int d = (int)(n % 10);\n            n /= 10;\n            if (count % 2 == 0) {\n                diff = d - (int)(n % 10);\n            } else {\n                if (diff % 2 != lastDiff % 2) {\n                    return false;\n                }\n                lastDiff = diff;\n            }\n            count++;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9d85b9a46473479698111b77cda749f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9d85b9a46473479698111b77cda749f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var len = digits.Length;\n        var i = 0;\n        while (i < len - 1) {\n            if (digits[i] == digits[i + 1]) {\n                i++;\n            } else {\n                break;\n            }\n        }\n        if (i == len - 1) {\n            return false;\n        }\n        var increasing = digits[i] < digits[i + 1];\n        for (i = i + 1; i < len - 1; i++) {\n            if (digits[i] == digits[i + 1]) {\n                return false;\n            }\n            if (increasing) {\n                if (digits[i] > digits[i + 1]) {\n                    return false;\n                }\n            } else {\n                if (digits[i] < digits[i + 1]) {\n                    return false;\n                }\n            }\n            increasing = !increasing;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a76b6552ac8b4312ab601ec486e19c76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a76b6552ac8b4312ab601ec486e19c76>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i] != digits[i - 1] && digits[i] != digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i] || digits[i] == digits[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var count = 1;\n        for (int i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (count < 3) {\n                    return false;\n                }\n                last = s[i];\n                count = 1;\n            }\n        }\n        return count >= 3;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122537,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b5fd21852eaa49bc9d4ea16d07f23d6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b5fd21852eaa49bc9d4ea16d07f23d6b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var nDigits = digits.Length;\n        if (nDigits < 3) return false;\n        var isIncreasing = digits[0] < digits[1];\n        for (int i = 1; i < nDigits - 1; i++) {\n            if (isIncreasing) {\n                if (digits[i] > digits[i + 1]) return false;\n            } else {\n                if (digits[i] < digits[i + 1]) return false;\n            }\n            isIncreasing = !isIncreasing;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <61b871bf55e04887ac8796265740c6f7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <61b871bf55e04887ac8796265740c6f7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var count = 1;\n        for (int i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (count < 3) {\n                    return false;\n                }\n                count = 1;\n            }\n            last = s[i];\n        }\n        return count >= 3;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122537,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3c9d8a8fe2b5451e9b8e268e80784e7f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3c9d8a8fe2b5451e9b8e268e80784e7f>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var l = s.Length;\n        for (int i = 0; i < l - 2; i++) {\n            if ((s[i] - '0') % 2 == 0) {\n                continue;\n            }\n            if ((s[i + 1] - '0') % 2 == 0) {\n                continue;\n            }\n            if ((s[i] - '0') == (s[i + 2] - '0')) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d16e8270376e4a64bed6b787b7987691>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d16e8270376e4a64bed6b787b7987691>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // TODO: Implement this function.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d907572838864258bd14ca7d9d43ee27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d907572838864258bd14ca7d9d43ee27>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var count = 1;\n        var even = false;\n        for (int i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (count % 2 == 0) {\n                    if (even) {\n                        return false;\n                    } else {\n                        even = true;\n                    }\n                }\n                count = 1;\n                last = s[i];\n            }\n        }\n        if (count % 2 == 0) {\n            if (even) {\n                return false;\n            } else {\n                even = true;\n            }\n        }\n        return even;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4db697a5c93b4cb0864c15d943e828be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4db697a5c93b4cb0864c15d943e828be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // A number is undulating if it has alternating digits of the same value.\n        // For example, the number 122333444455555666666777777788888888 is undulating.\n        // The number 1223334444555556666667777777888888889 is not undulating.\n        // The number 122333444455555666666777777788888888 is not undulating.\n        // The number 1223334444555556666667777777888888888 is not undulating.\n        // The number 12233344445555566666677777778888888888 is not undulating.\n        // The number 122333444455555666666777777788888888888 is not undulating.\n        // The number 1223334444555556666667777777888888888888 is not undulating.\n        // The number 12233344445555566666677777778888888888888 is not undulating.\n        // The number 122333444455555666666777777788888888888888 is not undulating.\n        // The number 1223334444555556666667777777888888888888888 is not undulating.\n        // The number 12233344445555566666677777778888888888888888 is not undulating.\n        // The number 122333444455555666666777777788888888888888888 is not undulating.\n        // The number 1223334444555556666667777777888888888888888888 is not undulating.\n        // The number 12233344445555566666677777778888888888888888888 is not undulating.\n        // The number 122333444455555666666777777788888888888888888888 is not undulating.\n        // The number 1223334444555556666667777777888888888888888888888 is not undulating.\n        // The number 12233344445555566666677777778888888888888888888888 is not undulating.\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzzhto6y_.cs(10,24): error CS0161: 'Problem.IsUndulating(long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var prev = s[0];\n        var prevDiff = 0;\n        for (var i = 1; i < s.Length; i++) {\n            var diff = s[i] - prev;\n            if (prevDiff != 0 && diff != prevDiff) {\n                return false;\n            }\n            prevDiff = diff;\n            prev = s[i];\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9bebefaec9294f6e8960ebc207d3c93d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9bebefaec9294f6e8960ebc207d3c93d>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 0; i < digits.Length - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var count = 1;\n        var undulating = false;\n        for (int i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (count > 2) {\n                    undulating = true;\n                }\n                count = 1;\n                last = s[i];\n            }\n        }\n        if (count > 2) {\n            undulating = true;\n        }\n        return undulating;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <427c3d1e70854c43b8ad560e4c676ad1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <427c3d1e70854c43b8ad560e4c676ad1>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i] != digits[i - 1] && digits[i] != digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        for (int i = 1; i < s.Length; i++) {\n            if (s[i] == s[i - 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var last = digits[0];\n        var lastDiff = 0;\n        for (int i = 1; i < digits.Length; i++) {\n            var diff = digits[i] - last;\n            if (diff == 0) {\n                return false;\n            }\n            if (lastDiff != 0 && diff != lastDiff) {\n                return false;\n            }\n            lastDiff = diff;\n            last = digits[i];\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0e80b7c730744e64816d708da7b40cc1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0e80b7c730744e64816d708da7b40cc1>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var ndigits = digits.Length;\n        for (int i = 1; i < ndigits - 1; i++) {\n            if (digits[i] != digits[i - 1] && digits[i] != digits[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1a0aef457731449d89e864fbed2db477>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1a0aef457731449d89e864fbed2db477>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        for (int i = 1; i < s.Length - 1; i++) {\n            if (s[i - 1] == s[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var last = digits[0];\n        var lastDelta = 0;\n        for (int i = 1; i < digits.Length; i++) {\n            var delta = digits[i] - last;\n            if (delta == 0) {\n                return false;\n            }\n            if (lastDelta != 0 && delta != lastDelta) {\n                return false;\n            }\n            last = digits[i];\n            lastDelta = delta;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9007a98e03cb4538992f74cc1cbd736b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9007a98e03cb4538992f74cc1cbd736b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        if (n < 10) return false;\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i] == digits[i - 1] || digits[i] == digits[i + 1]) continue;\n            if (digits[i] > digits[i - 1] && digits[i] > digits[i + 1]) continue;\n            if (digits[i] < digits[i - 1] && digits[i] < digits[i + 1]) continue;\n            return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <762835ec0da247f89f2792cd3ba170d6>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1])\n                return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] != digits[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var count = 1;\n        var undulating = false;\n        for (int i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (count > 2) {\n                    undulating = true;\n                }\n                count = 1;\n            }\n            last = s[i];\n        }\n        if (count > 2) {\n            undulating = true;\n        }\n        return undulating;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ac4cbb28ed049b1a0b870b8a10b808f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ac4cbb28ed049b1a0b870b8a10b808f>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().ToCharArray().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i] != digits[i - 1] && digits[i] != digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // TODO: Implement this function\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1eaa03ccac5a45699a4211d4d0d0a837>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1eaa03ccac5a45699a4211d4d0d0a837>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var count = 1;\n        for (int i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (count < 3) {\n                    return false;\n                }\n                last = s[i];\n                count = 1;\n            }\n        }\n        return count >= 3;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122537,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b5fd21852eaa49bc9d4ea16d07f23d6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b5fd21852eaa49bc9d4ea16d07f23d6b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 1; i < digits.Count - 1; i++) {\n            if (digits[i - 1] == digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 0; i < digits.Length - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i + 1] == s[i + 2] || s[i] == s[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ea7547e26a534a2abc187fa1c651eeb2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ea7547e26a534a2abc187fa1c651eeb2>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        for (int i = 1; i < s.Length - 1; i++) {\n            if (s[i] == s[i - 1] || s[i] == s[i + 1])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // TODO: Implement this function.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d907572838864258bd14ca7d9d43ee27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d907572838864258bd14ca7d9d43ee27>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var last = digits[0];\n        var lastSign = 0;\n        for (int i = 1; i < digits.Length; i++) {\n            var sign = Math.Sign(digits[i] - last);\n            if (sign == lastSign) {\n                return false;\n            }\n            lastSign = sign;\n            last = digits[i];\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <754437001819460498b2be7777b1a90b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var count = 1;\n        var even = false;\n        for (var i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (count % 2 == 0) {\n                    even = true;\n                } else {\n                    even = false;\n                }\n                last = s[i];\n                count = 1;\n            }\n        }\n        if (count % 2 == 0) {\n            even = true;\n        } else {\n            even = false;\n        }\n        return even;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <669c46b019774cde83fc2681014d4564>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <669c46b019774cde83fc2681014d4564>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var count = 1;\n        var isIncreasing = true;\n        for (int i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (isIncreasing) {\n                    if (s[i] < last) {\n                        isIncreasing = false;\n                        count = 1;\n                    } else {\n                        return false;\n                    }\n                } else {\n                    if (s[i] > last) {\n                        isIncreasing = true;\n                        count = 1;\n                    } else {\n                        return false;\n                    }\n                }\n            }\n            last = s[i];\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8361d9e79f254a9c9894df180761d50c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8361d9e79f254a9c9894df180761d50c>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var i = 0;\n        while (i < s.Length - 2) {\n            if (s[i] == s[i + 2]) {\n                i += 3;\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        var last = digits[0];\n        var count = 1;\n        for (int i = 1; i < digits.Count; i++) {\n            if (digits[i] == last) {\n                count++;\n            } else {\n                if (count < 3) {\n                    return false;\n                }\n                count = 1;\n            }\n            last = digits[i];\n        }\n        if (count < 3) {\n            return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <09041996c24b41beaf081b116ef3c938>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <09041996c24b41beaf081b116ef3c938>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 0; i < digits.Length - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 0; i < digits.Length - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 2]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var nDigits = digits.Length;\n        if (nDigits < 3) {\n            return false;\n        }\n        var isIncreasing = digits[0] < digits[1];\n        for (int i = 1; i < nDigits - 1; i++) {\n            if (digits[i] == digits[i + 1]) {\n                return false;\n            }\n            if (isIncreasing && digits[i] > digits[i + 1]) {\n                return false;\n            }\n            if (!isIncreasing && digits[i] < digits[i + 1]) {\n                return false;\n            }\n            isIncreasing = !isIncreasing;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <663390a42bf54314a1f2b527eb76342c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <663390a42bf54314a1f2b527eb76342c>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 0; i < digits.Length - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var undulating = false;\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i] == digits[i - 1] || digits[i] == digits[i + 1]) {\n                undulating = true;\n            } else {\n                return false;\n            }\n        }\n        return undulating;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ddc24023cf434467b52c3c376dc0eb6a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ddc24023cf434467b52c3c376dc0eb6a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // Convert number to string\n        string s = n.ToString();\n        // Check if the number is undulating\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] != s[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var i = 0;\n        while (i < s.Length - 1) {\n            if (s[i] == s[i + 1]) {\n                i++;\n                continue;\n            }\n            if (i == s.Length - 2) {\n                return false;\n            }\n            if (s[i] > s[i + 1]) {\n                if (s[i + 1] > s[i + 2]) {\n                    return false;\n                }\n            } else {\n                if (s[i + 1] < s[i + 2]) {\n                    return false;\n                }\n            }\n            i++;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2323196a50c54a60a5531559448bf695>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2323196a50c54a60a5531559448bf695>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] != s[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var undulating = true;\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i + 1] == s[i + 2] || s[i + 2] == s[i]) {\n                undulating = false;\n                break;\n            }\n        }\n        return undulating;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8f5ce804e52841748818061b09ff4a5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8f5ce804e52841748818061b09ff4a5a>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] != s[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // TODO: Implement this function\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1eaa03ccac5a45699a4211d4d0d0a837>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1eaa03ccac5a45699a4211d4d0d0a837>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 1; i < digits.Count - 1; i++) {\n            if (digits[i] != digits[i - 1] && digits[i] != digits[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f63286391cad4462b46b072b076d28bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f63286391cad4462b46b072b076d28bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var last = digits[0];\n        var count = 1;\n        for (var i = 1; i < digits.Length; i++) {\n            if (digits[i] == last) {\n                count++;\n            } else {\n                if (count < 3) return false;\n                count = 1;\n                last = digits[i];\n            }\n        }\n        return count >= 3;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3e6f7a2f40704c4a96fc51020149c8b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3e6f7a2f40704c4a96fc51020149c8b6>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] != s[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().ToCharArray().Select(x => x - '0').ToArray();\n        var ndigits = digits.Length;\n        for (int i = 0; i < ndigits - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 1; i < digits.Count - 1; i++) {\n            if (digits[i] != digits[i - 1] && digits[i] != digits[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f63286391cad4462b46b072b076d28bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f63286391cad4462b46b072b076d28bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var last2 = ' ';\n        var last3 = ' ';\n        for (int i = 1; i < s.Length; i++) {\n            if (last == s[i]) {\n                if (last2 == ' ') {\n                    last2 = last;\n                    last = s[i];\n                } else if (last2 == last) {\n                    last3 = last2;\n                    last2 = last;\n                    last = s[i];\n                } else if (last3 == ' ') {\n                    last3 = last2;\n                    last2 = last;\n                    last = s[i];\n                } else if (last3 == last2) {\n                    last3 = last2;\n                    last2 = last;\n                    last = s[i];\n                } else {\n                    return false;\n                }\n            } else {\n                last3 = last2;\n                last2 = last;\n                last = s[i];\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <51d6b3457666463ebccee6bb1ed27e05>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i + 1] == s[i + 2] || s[i] == s[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ea7547e26a534a2abc187fa1c651eeb2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ea7547e26a534a2abc187fa1c651eeb2>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // TODO: Implement this function\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1eaa03ccac5a45699a4211d4d0d0a837>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1eaa03ccac5a45699a4211d4d0d0a837>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] != s[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // Find the number of digits in the number.\n        int digits = (int)Math.Log10(n) + 1;\n        // If the number has less than 3 digits, it can't be undulating.\n        if (digits < 3) return false;\n        // Get the first digit.\n        int first = (int)(n / Math.Pow(10, digits - 1));\n        // Get the last digit.\n        int last = (int)(n % 10);\n        // If the first and last digits are the same, it can't be undulating.\n        if (first == last) return false;\n        // If the first and last digits are different, it is undulating.\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7f94890d462749e9973849909277e101>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7f94890d462749e9973849909277e101>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i] || digits[i] == digits[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 1; i < digits.Count - 1; i++) {\n            if (digits[i] != digits[i - 1] && digits[i] != digits[i + 1])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <35ce9eff81a54c8e9e7763d7a745e5ec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <35ce9eff81a54c8e9e7763d7a745e5ec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        for (int i = 1; i < s.Length - 1; i++) {\n            if (s[i - 1] == s[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // TODO: Implement\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d15feafca263438c9ccd12948520a97b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d15feafca263438c9ccd12948520a97b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var l = s.Length;\n        for (int i = 0; i < l - 2; i++) {\n            if (s[i] != s[i + 2])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var ndigits = digits.Length;\n        for (int i = 0; i < ndigits - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var l = digits.Length;\n        if (l < 3) return false;\n        for (int i = 0; i < l - 2; i++) {\n            if (digits[i] != digits[i + 2]) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().ToCharArray().Select(x => int.Parse(x.ToString())).ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] % 2 == 0 && digits[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c1887eb10a1c47279908cb8e782da080>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // Your code goes here.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpugqzqu0j.cs(10,24): error CS0161: 'Problem.IsUndulating(long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 0; i < digits.Length - 2; i++) {\n            if (digits[i] == digits[i + 2])\n                return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i + 1] == s[i + 2] || s[i] == s[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ea7547e26a534a2abc187fa1c651eeb2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ea7547e26a534a2abc187fa1c651eeb2>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 2; i < digits.Length; i++) {\n            if (digits[i] == digits[i - 1] || digits[i] == digits[i - 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7c718af57c444f31b61ca4da577570e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7c718af57c444f31b61ca4da577570e1>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] != s[i + 2]) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var last = digits[0];\n        var lastSign = 0;\n        for (int i = 1; i < digits.Length; i++) {\n            var sign = Math.Sign(digits[i] - last);\n            if (sign == 0) {\n                return false;\n            }\n            if (sign == lastSign) {\n                return false;\n            }\n            lastSign = sign;\n            last = digits[i];\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // TODO: Implement this function\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1eaa03ccac5a45699a4211d4d0d0a837>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1eaa03ccac5a45699a4211d4d0d0a837>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        if (n < 100) return false;\n        var s = n.ToString();\n        for (int i = 1; i < s.Length - 1; i++) {\n            if (s[i - 1] != s[i + 1]) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var prev = s[0];\n        var inc = true;\n        for (int i = 1; i < s.Length; i++) {\n            if (s[i] == prev) {\n                return false;\n            }\n            if (s[i] > prev) {\n                if (!inc) {\n                    return false;\n                }\n            } else {\n                if (inc) {\n                    return false;\n                }\n            }\n            prev = s[i];\n            inc = !inc;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var count = 1;\n        var even = true;\n        for (int i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (count % 2 == 0) {\n                    even = !even;\n                }\n                count = 1;\n                last = s[i];\n            }\n        }\n        if (count % 2 == 0) {\n            even = !even;\n        }\n        return even;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i + 1] == s[i + 2] || s[i] == s[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ea7547e26a534a2abc187fa1c651eeb2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ea7547e26a534a2abc187fa1c651eeb2>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 0; i < digits.Length - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 0; i < digits.Length - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i + 1] == s[i + 2] || s[i] == s[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ea7547e26a534a2abc187fa1c651eeb2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ea7547e26a534a2abc187fa1c651eeb2>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var count = 1;\n        for (int i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (count < 3) {\n                    return false;\n                }\n                count = 1;\n                last = s[i];\n            }\n        }\n        return count >= 3;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ab8af613e8f4a02a726d6fd74e8e2d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ab8af613e8f4a02a726d6fd74e8e2d5>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().ToCharArray();\n        var last = digits[0];\n        var last_was_odd = last % 2 == 1;\n        for (int i = 1; i < digits.Length; i++) {\n            var cur = digits[i];\n            var cur_is_odd = cur % 2 == 1;\n            if (cur_is_odd == last_was_odd) {\n                return false;\n            }\n            last = cur;\n            last_was_odd = cur_is_odd;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var len = s.Length;\n        for (var i = 0; i < len - 2; i++) {\n            if (s[i] == s[i + 2]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        var count = 0;\n        for (int i = 1; i < digits.Count; i++) {\n            if (digits[i] == digits[i - 1]) {\n                count++;\n            } else {\n                if (count < 2) {\n                    count = 0;\n                } else {\n                    break;\n                }\n            }\n        }\n        return count >= 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8e8c298d11d6482d83364c1fef6240f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <8e8c298d11d6482d83364c1fef6240f9>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var count = 1;\n        for (int i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (count < 3) {\n                    return false;\n                }\n                count = 1;\n                last = s[i];\n            }\n        }\n        return count >= 3;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ab8af613e8f4a02a726d6fd74e8e2d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <6ab8af613e8f4a02a726d6fd74e8e2d5>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var prev = s[0];\n        var prevDiff = 0;\n        for (int i = 1; i < s.Length; i++) {\n            var curr = s[i];\n            var currDiff = curr - prev;\n            if (currDiff == 0)\n                return false;\n            if (i == 1) {\n                prevDiff = currDiff;\n            } else if (currDiff != -prevDiff) {\n                return false;\n            }\n            prev = curr;\n            prevDiff = currDiff;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] != s[i + 2]) return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var lastDiff = 0;\n        for (int i = 1; i < s.Length; i++) {\n            var diff = s[i] - last;\n            if (diff == 0) {\n                return false;\n            }\n            if (lastDiff != 0 && diff != lastDiff) {\n                return false;\n            }\n            lastDiff = diff;\n            last = s[i];\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <67f4ab92685e4393942fca66ae32a132>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <67f4ab92685e4393942fca66ae32a132>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var c = s[0];\n        var d = s[1];\n        var e = s[2];\n        var f = s[3];\n        var g = s[4];\n        var h = s[5];\n        var i = s[6];\n        var j = s[7];\n        var k = s[8];\n        var l = s[9];\n        return (c < d && d > e && e < f && f > g && g < h && h > i && i < j && j > k && k < l) ||\n               (c > d && d < e && e > f && f < g && g > h && h < i && i > j && j < k && k > l);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside the bounds of the array.\n  at Problem.IsUndulating (System.Int64 n) [0x00045] in <cbf2d008c7bf4a009b8263e617736dac>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <cbf2d008c7bf4a009b8263e617736dac>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the array.\n  at Problem.IsUndulating (System.Int64 n) [0x00045] in <cbf2d008c7bf4a009b8263e617736dac>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <cbf2d008c7bf4a009b8263e617736dac>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var count = 1;\n        for (int i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (count < 3) {\n                    count = 1;\n                    last = s[i];\n                } else {\n                    return true;\n                }\n            }\n        }\n        return count >= 3;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9226d94211d44cc0bcc6673e5964a5ce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9226d94211d44cc0bcc6673e5964a5ce>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        for (int i = 1; i < s.Length - 1; i++) {\n            if (s[i - 1] == s[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var last = digits[0];\n        var lastDiff = 0;\n        for (int i = 1; i < digits.Length; i++) {\n            var diff = digits[i] - last;\n            if (diff == 0) return false;\n            if (lastDiff != 0 && diff != lastDiff) return false;\n            lastDiff = diff;\n            last = digits[i];\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <136530bdab2e475382cb692556338602>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <136530bdab2e475382cb692556338602>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        for (int i = 0; i < s.Length - 2; i++) {\n            if (s[i] == s[i + 1] || s[i + 1] == s[i + 2] || s[i] == s[i + 2])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ba55fd6f06c54cec94bf7b187039a360>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <ba55fd6f06c54cec94bf7b187039a360>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 2]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = GetDigits(n);\n        if (digits.Count < 3) {\n            return false;\n        }\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfaejaemk.cs(11,22): error CS0103: The name 'GetDigits' does not exist in the current context\n/tmp/tmpfaejaemk.cs(12,13): error CS0019: Operator '<' cannot be applied to operands of type 'method group' and 'int'\n/tmp/tmpfaejaemk.cs(15,29): error CS0019: Operator '-' cannot be applied to operands of type 'method group' and 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var count = 1;\n        var odd = false;\n        for (int i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (count % 2 == 1) {\n                    if (odd) {\n                        return false;\n                    }\n                    odd = true;\n                }\n                count = 1;\n                last = s[i];\n            }\n        }\n        if (count % 2 == 1) {\n            if (odd) {\n                return false;\n            }\n            odd = true;\n        }\n        return odd;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7cbf3606cacd4f0ba28918121735c2ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7cbf3606cacd4f0ba28918121735c2ef>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] != digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().ToCharArray();\n        for (int i = 0; i < digits.Length - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122537,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // We can use the fact that the number of digits in a number is\n        // equal to the number of digits in the number's square root.\n        // We can also use the fact that the number of digits in a number\n        // is equal to the number of digits in the number's cube root.\n        // We can also use the fact that the number of digits in a number\n        // is equal to the number of digits in the number's fourth root.\n        // We can also use the fact that the number of digits in a number\n        // is equal to the number of digits in the number's fifth root.\n        // We can also use the fact that the number of digits in a number\n        // is equal to the number of digits in the number's sixth root.\n        // We can also use the fact that the number of digits in a number\n        // is equal to the number of digits in the number's seventh root.\n        // We can also use the fact that the number of digits in a number\n        // is equal to the number of digits in the number's eighth root.\n        // We can also use the fact that the number of digits in a number\n        // is equal to the number of digits in the number's ninth root.\n        // We can also use the fact that the number of digits in a number\n        // is equal to the number of digits in the number's tenth root.\n        // We can also use the fact that the number of digits in a number\n        // is equal to the number of digits in the number's eleventh root.\n        // We can also use the fact that the number of digits in a number\n        // is equal to the number of digits in the number's twelfth root.\n        // We can also use the fact that the number of digits in a number\n        // is equal to the number of digits in the number's thirteenth root.\n        // We can also use the fact that the number of digits in a number\n        // is equal to the number of digits in the number's fourteenth root.\n        // We can also use the fact that the number of digits in a number\n        // is equal to the number of digits in the number's fifteenth root.\n        // We can also use the fact that the number of digits in a number\n        // is equal to the number of digits in the number's\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0359191y.cs(10,24): error CS0161: 'Problem.IsUndulating(long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var count = 1;\n        for (int i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (count < 3) {\n                    return false;\n                }\n                last = s[i];\n                count = 1;\n            }\n        }\n        return count >= 3;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122537,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b5fd21852eaa49bc9d4ea16d07f23d6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b5fd21852eaa49bc9d4ea16d07f23d6b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var count = 1;\n        var undulating = false;\n        for (int i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (count > 2) {\n                    undulating = true;\n                }\n                count = 1;\n                last = s[i];\n            }\n        }\n        if (count > 2) {\n            undulating = true;\n        }\n        return undulating;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <427c3d1e70854c43b8ad560e4c676ad1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <427c3d1e70854c43b8ad560e4c676ad1>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var l = s.Length;\n        for (int i = 0; i < l - 2; i++) {\n            if (s[i] != s[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i] == digits[i - 1] || digits[i] == digits[i + 1])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var len = s.Length;\n        for (int i = 0; i < len - 2; i++) {\n            var a = s[i];\n            var b = s[i + 1];\n            var c = s[i + 2];\n            if (a != c && (a == b || b == c)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <08d64ab9fa214145b921482efce01292>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <08d64ab9fa214145b921482efce01292>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var l = s.Length;\n        var i = 0;\n        while (i < l - 1) {\n            var c = s[i];\n            var d = s[i + 1];\n            if (c == d) {\n                return false;\n            }\n            i += 2;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <cd34cdb01947450a8c4d0f6cc6ce89cc>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        if (n < 100) return false;\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 1; i < digits.Count - 1; i++) {\n            if (digits[i - 1] == digits[i + 1]) return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i] || digits[i] == digits[i + 1])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var count = 1;\n        for (var i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (count < 3) {\n                    return false;\n                }\n                last = s[i];\n                count = 1;\n            }\n        }\n        return count >= 3;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27d9589e3318400892ce0f03dd95c79d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <27d9589e3318400892ce0f03dd95c79d>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().ToCharArray();\n        var last = digits[0];\n        var lastSign = 0;\n        for (int i = 1; i < digits.Length; i++) {\n            var sign = Math.Sign(digits[i] - last);\n            if (sign == 0) {\n                return false;\n            }\n            if (sign == lastSign) {\n                return false;\n            }\n            lastSign = sign;\n            last = digits[i];\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var last_diff = 0;\n        for (int i = 1; i < s.Length; i++) {\n            var diff = s[i] - last;\n            if (diff == 0) {\n                return false;\n            }\n            if (last_diff == 0) {\n                last_diff = diff;\n            } else if (last_diff != diff) {\n                return false;\n            }\n            last = s[i];\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3962416dd3354ca394bcef09063c1602>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3962416dd3354ca394bcef09063c1602>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // TODO: Implement this function.\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d907572838864258bd14ca7d9d43ee27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d907572838864258bd14ca7d9d43ee27>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().ToCharArray().Select(c => c - '0').ToArray();\n        var undulating = true;\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i] || digits[i] == digits[i + 1]) {\n                undulating = false;\n                break;\n            }\n        }\n        return undulating;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var count = 1;\n        var undulating = true;\n        for (var i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (count == 1) {\n                    undulating = false;\n                    break;\n                }\n                count = 1;\n                last = s[i];\n            }\n        }\n        return undulating && count > 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f9ab9f98d4ff4a358d81e04078937caf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f9ab9f98d4ff4a358d81e04078937caf>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // The number is undulating if it has at least 3 digits,\n        // and the digit in the middle is different from the digits on the sides.\n        if (n < 100) return false;\n        var s = n.ToString();\n        for (int i = 1; i < s.Length - 1; i++) {\n            if (s[i - 1] != s[i + 1]) return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d3aa4904ac874f0f89ba827699cde290>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d3aa4904ac874f0f89ba827699cde290>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var isIncreasing = digits[0] < digits[1];\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i] == digits[i + 1])\n                return false;\n            if (isIncreasing && digits[i] > digits[i + 1])\n                return false;\n            if (!isIncreasing && digits[i] < digits[i + 1])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bff7f3ecf4d744a8b50d8fc08e9cd971>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <bff7f3ecf4d744a8b50d8fc08e9cd971>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 0; i < digits.Length - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i + 2] == digits[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2cb9f935669d454fa898c96b357fb2bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <2cb9f935669d454fa898c96b357fb2bd>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var last = digits[0];\n        var lastDiff = 0;\n        for (int i = 1; i < digits.Length; i++) {\n            var diff = digits[i] - last;\n            if (diff == 0) return false;\n            if (lastDiff != 0 && diff != lastDiff) return false;\n            lastDiff = diff;\n            last = digits[i];\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <136530bdab2e475382cb692556338602>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <136530bdab2e475382cb692556338602>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var isIncreasing = digits[0] < digits[1];\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (isIncreasing && digits[i] > digits[i + 1]) {\n                isIncreasing = false;\n            } else if (!isIncreasing && digits[i] < digits[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122537,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3aced86ef52047a380fdaca35f0ed08f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3aced86ef52047a380fdaca35f0ed08f>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 0; i < digits.Length - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var last = digits[0];\n        var lastDiff = 0;\n        for (int i = 1; i < digits.Length; i++) {\n            var diff = digits[i] - last;\n            if (diff == 0) {\n                return false;\n            }\n            if (lastDiff == 0) {\n                lastDiff = diff;\n            } else if (lastDiff != diff) {\n                return false;\n            }\n            last = digits[i];\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <693135b7d1d446c9993b898c5b990105>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <693135b7d1d446c9993b898c5b990105>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 1; i < digits.Count - 1; i++) {\n            if (digits[i - 1] > digits[i] && digits[i] < digits[i + 1])\n                return true;\n            if (digits[i - 1] < digits[i] && digits[i] > digits[i + 1])\n                return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var l = s.Length;\n        if (l < 3) return false;\n        for (int i = 1; i < l - 1; i++) {\n            if (s[i - 1] == s[i + 1]) return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // The number is undulating if it has at least 3 digits, and\n        // the first digit is different from the second, the third\n        // digit is different from the second and fourth, and so on.\n        // For example, the number 1201 is undulating because the\n        // first digit is different from the second, the third digit\n        // is different from the second and fourth, and the fourth\n        // digit is different from the fifth.\n        //\n        // The number 12001 is not undulating because the first digit\n        // is different from the second, but the third digit is the\n        // same as the second and fourth.\n        //\n        // The number 120121 is undulating because the first digit is\n        // different from the second, the third digit is different\n        // from the second and fourth, the fifth digit is different\n        // from the fourth and sixth, and the sixth digit is different\n        // from the seventh.\n        //\n        // The number 1201221 is not undulating because the first digit\n        // is different from the second, the third digit is different\n        // from the second and fourth, but the fifth digit is the same\n        // as the fourth and sixth.\n        //\n        // The number 12012221 is undulating because the first digit is\n        // different from the second, the third digit is different from\n        // the second and fourth, the fifth digit is different from the\n        // fourth and sixth, the seventh digit is different from the\n        // sixth and eighth, and the eighth digit is different from the\n        // ninth.\n        //\n        // The number 120122221 is not undulating because the first digit\n        // is different from the second, the third digit is different\n        // from the second and fourth, the fifth digit is different from\n        // the fourth and sixth, but the seventh digit is the same as the\n        // sixth and eighth.\n        //\n        // The number 1201222221 is undulating because the first digit is\n        // different from the second, the third digit is different from\n        // the second and fourth, the fifth digit is different from the\n        // fourth and sixth, the seventh digit is different from the\n        // sixth and eighth, the ninth digit is different from the\n        // eighth and tenth, and the\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp59m5q0qz.cs(10,24): error CS0161: 'Problem.IsUndulating(long)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i] != digits[i - 1] && digits[i] != digits[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0bec38bd88d1414e8aeb84ba6497cb4b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0bec38bd88d1414e8aeb84ba6497cb4b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 0; i < digits.Length - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var count = 1;\n        var isUndulating = false;\n        for (int i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (count > 2) {\n                    isUndulating = true;\n                }\n                count = 1;\n                last = s[i];\n            }\n        }\n        if (count > 2) {\n            isUndulating = true;\n        }\n        return isUndulating;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <724452ec1ba444b5be7442c1e2e30a13>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <724452ec1ba444b5be7442c1e2e30a13>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().ToCharArray().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] != digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 0; i < digits.Length - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var last = digits[0];\n        var lastDiff = 0;\n        for (int i = 1; i < digits.Length; i++) {\n            var diff = digits[i] - last;\n            if (diff == 0) {\n                return false;\n            }\n            if (lastDiff != 0 && diff != lastDiff) {\n                return false;\n            }\n            lastDiff = diff;\n            last = digits[i];\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0e80b7c730744e64816d708da7b40cc1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0e80b7c730744e64816d708da7b40cc1>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var count = digits.Length;\n        var i = 0;\n        while (i < count - 1) {\n            if (digits[i] == digits[i + 1]) {\n                return false;\n            }\n            i += 2;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <3dc16e19c8444a178c591933719cc76f>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().ToCharArray();\n        var lastDigit = digits[0];\n        var lastDigitType = lastDigit % 2;\n        for (int i = 1; i < digits.Length; i++) {\n            var digit = digits[i];\n            var digitType = digit % 2;\n            if (digitType == lastDigitType) {\n                return false;\n            }\n            lastDigitType = digitType;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        var len = digits.Length;\n        for (int i = 0; i < len - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // We can use the fact that the number is undulating if and only if\n        // the number of digits is odd and the number of digits is the same\n        // as the number of distinct digits.\n        var digits = new HashSet<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        return digits.Count == digits.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fb54c4ccdd6845b8823817b25f5d821f>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var last = s[0];\n        var count = 1;\n        for (int i = 1; i < s.Length; i++) {\n            if (s[i] == last) {\n                count++;\n            } else {\n                if (count < 3) {\n                    return false;\n                }\n                last = s[i];\n                count = 1;\n            }\n        }\n        return count >= 3;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122537,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b5fd21852eaa49bc9d4ea16d07f23d6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b5fd21852eaa49bc9d4ea16d07f23d6b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        for (int i = 1; i < s.Length - 1; i++) {\n            if (s[i - 1] == s[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = new List<int>();\n        while (n > 0) {\n            digits.Add((int)(n % 10));\n            n /= 10;\n        }\n        digits.Reverse();\n        for (int i = 0; i < digits.Count - 2; i++) {\n            if (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var s = n.ToString();\n        var i = 0;\n        while (i < s.Length - 1) {\n            if (s[i] == s[i + 1]) {\n                i++;\n                continue;\n            }\n            if (i == s.Length - 2) {\n                return false;\n            }\n            if (s[i] < s[i + 1]) {\n                if (s[i + 1] > s[i + 2]) {\n                    return false;\n                }\n            } else {\n                if (s[i + 1] < s[i + 2]) {\n                    return false;\n                }\n            }\n            i++;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <58b94bb9844c4acb97aae38aa285f998>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <58b94bb9844c4acb97aae38aa285f998>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // TODO\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <eddedfe4bd8b41148f172313d2fdf37f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <eddedfe4bd8b41148f172313d2fdf37f>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        // TODO: Implement this function\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1eaa03ccac5a45699a4211d4d0d0a837>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <1eaa03ccac5a45699a4211d4d0d0a837>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510012,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i] || digits[i] == digits[i + 1])\n                return false;\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        var digits = n.ToString().Select(c => c - '0').ToArray();\n        for (int i = 1; i < digits.Length - 1; i++) {\n            if (digits[i - 1] == digits[i + 1])\n                return true;\n        }\n        return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510013,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}