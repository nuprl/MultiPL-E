{
  "name": "mbpp_769_Diff",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to get the difference between two lists.\n    public static List<long> Diff(List<long> li1, List<long> li2) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Diff((new List<long>(new long[]{(long)10L, (long)15L, (long)20L, (long)25L, (long)30L, (long)35L, (long)40L})), (new List<long>(new long[]{(long)25L, (long)40L, (long)35L}))).Equals((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)15L}))));\n    Debug.Assert(Diff((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new List<long>(new long[]{(long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))));\n    Debug.Assert(Diff((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return li1.Except(li2).ToList();",
    "        List<long> li3 = new List<long>();\n        foreach (long i in li1) {\n            if (!li2.Contains(i)) {\n                li3.Add(i);\n            }\n        }\n        return li3;",
    "        List<long> li3 = new List<long>();\n        foreach (long i in li1) {\n            if (!li2.Contains(i)) {\n                li3.Add(i);\n            }\n        }\n        return li3;",
    "        return li1.Except(li2).ToList();",
    "        var result = new List<long>();\n        foreach (var item in li1) {\n            if (!li2.Contains(item)) {\n                result.Add(item);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        foreach (var i in li1) {\n            if (!li2.Contains(i)) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        return li1.Except(li2).ToList();",
    "        return li1.Except(li2).ToList();",
    "        return li1.Except(li2).ToList();",
    "        List<long> li3 = new List<long>();\n        foreach (long i in li1) {\n            if (!li2.Contains(i)) {\n                li3.Add(i);\n            }\n        }\n        return li3;",
    "        List<long> li3 = new List<long>();\n        foreach (long i in li1) {\n            if (!li2.Contains(i)) {\n                li3.Add(i);\n            }\n        }\n        return li3;",
    "        return li1.Except(li2).ToList();",
    "        var result = new List<long>();\n        foreach (var i in li1) {\n            if (!li2.Contains(i))\n                result.Add(i);\n        }\n        return result;",
    "        var res = new List<long>();\n        foreach (var i in li1) {\n            if (!li2.Contains(i)) {\n                res.Add(i);\n            }\n        }\n        return res;",
    "        List<long> li3 = new List<long>();\n        li3.AddRange(li1);\n        li3.AddRange(li2);\n        return li3.Distinct().ToList();",
    "        return li1.Except(li2).ToList();",
    "        var result = new List<long>();\n        foreach (var i in li1) {\n            if (!li2.Contains(i)) {\n                result.Add(i);\n            }\n        }\n        return result;",
    "        var ret = new List<long>();\n        foreach (var i in li1) {\n            if (!li2.Contains(i)) {\n                ret.Add(i);\n            }\n        }\n        return ret;",
    "        return li1.Except(li2).ToList();",
    "        List<long> li3 = new List<long>();\n        foreach (long i in li1) {\n            if (!li2.Contains(i)) {\n                li3.Add(i);\n            }\n        }\n        return li3;"
  ]
}