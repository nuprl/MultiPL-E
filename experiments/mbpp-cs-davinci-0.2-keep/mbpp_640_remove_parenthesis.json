{
  "name": "mbpp_640_remove_parenthesis",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to remove the parenthesis and what is inbetween them from a string.\n    public static string RemoveParenthesis(List<string> items) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveParenthesis((new List<string>(new string[]{(string)\"python (chrome)\"}))).Equals((\"python\")));\n    Debug.Assert(RemoveParenthesis((new List<string>(new string[]{(string)\"string(.abc)\"}))).Equals((\"string\")));\n    Debug.Assert(RemoveParenthesis((new List<string>(new string[]{(string)\"alpha(num)\"}))).Equals((\"alpha\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var sb = new StringBuilder();\n        var stack = new Stack<string>();\n        foreach (var item in items) {\n            if (item == \"(\") {\n                stack.Push(item);\n            } else if (item == \")\") {\n                stack.Pop();\n            } else {\n                if (stack.Count == 0) {\n                    sb.Append(item);\n                }\n            }\n        }\n        return sb.ToString();",
    "        var sb = new StringBuilder();\n        var stack = new Stack<string>();\n        foreach (var item in items) {\n            if (item == \"(\") {\n                stack.Push(item);\n            } else if (item == \")\") {\n                stack.Pop();\n            } else {\n                if (stack.Count == 0) {\n                    sb.Append(item);\n                }\n            }\n        }\n        return sb.ToString();",
    "        var sb = new StringBuilder();\n        var stack = new Stack<string>();\n        foreach (var item in items) {\n            if (item == \"(\") {\n                stack.Push(item);\n            } else if (item == \")\") {\n                stack.Pop();\n            } else {\n                if (stack.Count == 0) {\n                    sb.Append(item);\n                }\n            }\n        }\n        return sb.ToString();",
    "        string result = \"\";\n        foreach (string item in items) {\n            if (item.Contains(\"(\")) {\n                int index = item.IndexOf(\"(\");\n                result += item.Substring(0, index);\n            }\n            else {\n                result += item;\n            }\n        }\n        return result;",
    "        var sb = new StringBuilder();\n        var stack = new Stack<int>();\n        for (int i = 0; i < items.Count; i++) {\n            if (items[i] == \"(\") {\n                stack.Push(i);\n            } else if (items[i] == \")\") {\n                int start = stack.Pop();\n                items.RemoveRange(start, i - start + 1);\n                i = start;\n            }\n        }\n        return string.Join(\"\", items);",
    "        string result = \"\";\n        foreach (string item in items) {\n            if (item.Contains(\"(\") && item.Contains(\")\")) {\n                result += item.Substring(0, item.IndexOf(\"(\"));\n                result += item.Substring(item.IndexOf(\")\") + 1);\n            } else {\n                result += item;\n            }\n        }\n        return result;",
    "        string result = \"\";\n        foreach (string item in items) {\n            if (item.Contains(\"(\")) {\n                result += item.Substring(0, item.IndexOf(\"(\"));\n            } else {\n                result += item;\n            }\n        }\n        return result;",
    "        StringBuilder sb = new StringBuilder();\n        foreach (var item in items) {\n            if (item.Contains(\"(\")) {\n                sb.Append(item.Substring(0, item.IndexOf(\"(\")).Trim());\n            } else {\n                sb.Append(item.Trim());\n            }\n        }\n        return sb.ToString();",
    "        var result = new List<string>();\n        var stack = new Stack<string>();\n        foreach (var item in items) {\n            if (item == \"(\") {\n                stack.Push(item);\n            } else if (item == \")\") {\n                stack.Pop();\n            } else {\n                if (stack.Count == 0) {\n                    result.Add(item);\n                }\n            }\n        }\n        return string.Join(\"\", result);",
    "        var sb = new StringBuilder();\n        var stack = new Stack<string>();\n        foreach (var item in items) {\n            if (item == \"(\") {\n                stack.Push(item);\n            } else if (item == \")\") {\n                stack.Pop();\n            } else {\n                if (stack.Count == 0) {\n                    sb.Append(item);\n                }\n            }\n        }\n        return sb.ToString();",
    "        var sb = new StringBuilder();\n        var stack = new Stack<string>();\n        foreach (var item in items) {\n            if (item == \"(\") {\n                stack.Push(item);\n            } else if (item == \")\") {\n                stack.Pop();\n            } else {\n                if (stack.Count == 0) {\n                    sb.Append(item);\n                }\n            }\n        }\n        return sb.ToString();",
    "        var sb = new StringBuilder();\n        foreach (var item in items) {\n            if (item[0] == '(') {\n                continue;\n            }\n            sb.Append(item);\n        }\n        return sb.ToString();",
    "        string result = \"\";\n        int open = 0;\n        int close = 0;\n        bool start = false;\n        foreach (string item in items) {\n            if (item == \"(\") {\n                open++;\n                start = true;\n            } else if (item == \")\") {\n                close++;\n                start = false;\n            } else if (start == false) {\n                result += item;\n            }\n        }\n        return result;",
    "        var sb = new StringBuilder();\n        var stack = new Stack<int>();\n        for (int i = 0; i < items.Count; i++) {\n            if (items[i] == \"(\") {\n                stack.Push(i);\n            } else if (items[i] == \")\") {\n                var start = stack.Pop();\n                items[start] = null;\n                items[i] = null;\n            }\n        }\n        foreach (var item in items) {\n            if (item != null) {\n                sb.Append(item);\n            }\n        }\n        return sb.ToString();",
    "        var result = new StringBuilder();\n        var stack = new Stack<string>();\n        foreach (var item in items) {\n            if (item == \"(\") {\n                stack.Push(item);\n            } else if (item == \")\") {\n                while (stack.Count > 0 && stack.Peek() != \"(\") {\n                    stack.Pop();\n                }\n                stack.Pop();\n            } else {\n                if (stack.Count == 0) {\n                    result.Append(item);\n                }\n            }\n        }\n        return result.ToString();",
    "        var sb = new StringBuilder();\n        var stack = new Stack<int>();\n        for (int i = 0; i < items.Count; i++) {\n            if (items[i] == \"(\") {\n                stack.Push(i);\n            } else if (items[i] == \")\") {\n                var start = stack.Pop();\n                var end = i;\n                for (int j = start; j <= end; j++) {\n                    items[j] = \"\";\n                }\n            }\n        }\n        foreach (var item in items) {\n            if (item != \"\") {\n                sb.Append(item);\n            }\n        }\n        return sb.ToString();",
    "        string output = \"\";\n        foreach (string item in items) {\n            if (item.Contains(\"(\") || item.Contains(\")\")) {\n                output += item.Replace(\"(\", \"\").Replace(\")\", \"\");\n            } else {\n                output += item;\n            }\n        }\n        return output;",
    "        var sb = new StringBuilder();\n        var stack = new Stack<string>();\n        foreach (var item in items) {\n            if (item == \"(\") {\n                stack.Push(item);\n            } else if (item == \")\") {\n                stack.Pop();\n            } else {\n                if (stack.Count == 0) {\n                    sb.Append(item);\n                }\n            }\n        }\n        return sb.ToString();",
    "        var sb = new StringBuilder();\n        var stack = new Stack<int>();\n        for (int i = 0; i < items.Count; i++) {\n            if (items[i] == \"(\") {\n                stack.Push(i);\n            } else if (items[i] == \")\") {\n                var start = stack.Pop();\n                items.RemoveRange(start, i - start + 1);\n                i = start - 1;\n            }\n        }\n        foreach (var item in items) {\n            sb.Append(item);\n        }\n        return sb.ToString();",
    "        var sb = new StringBuilder();\n        var stack = new Stack<char>();\n        foreach (var item in items) {\n            foreach (var c in item) {\n                if (c == '(') {\n                    stack.Push(c);\n                } else if (c == ')') {\n                    stack.Pop();\n                } else if (stack.Count == 0) {\n                    sb.Append(c);\n                }\n            }\n        }\n        return sb.ToString();"
  ]
}