{
  "name": "mbpp_752_jacobsthal_num",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        long a = 0, b = 1;\n        for (long i = 0; i < n; i++) {\n            long c = a + 2 * b;\n            a = b;\n            b = c;\n        }\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <94900d8ad5264afc90953e8bdc02838c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <94900d8ad5264afc90953e8bdc02838c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        long a = 0, b = 1, c = 0;\n        if (n == 0) return a;\n        if (n == 1) return b;\n        for (int i = 2; i <= n; i++) {\n            c = a + 2 * b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509980,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fe81b8cfe88946c2bfdb363a4d597258>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fe81b8cfe88946c2bfdb363a4d597258>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        long a = 0;\n        long b = 1;\n        for (long i = 0; i < n; i++) {\n            long c = a + 2 * b;\n            a = b;\n            b = c;\n        }\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5f91891902bd48c5bb4da2fab0c02828>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5f91891902bd48c5bb4da2fab0c02828>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        long a = 0;\n        long b = 1;\n        for (long i = 0; i < n; i++) {\n            long c = a + 2 * b;\n            a = b;\n            b = c;\n        }\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5f91891902bd48c5bb4da2fab0c02828>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5f91891902bd48c5bb4da2fab0c02828>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n-1) + 2 * JacobsthalNum(n-2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        long a = 0;\n        long b = 1;\n        long c = 0;\n        for (int i = 0; i < n; i++) {\n            c = a + 2 * b;\n            a = b;\n            b = c;\n        }\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <12b2be2bd9404bccbbec657bd3fe3ed9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <12b2be2bd9404bccbbec657bd3fe3ed9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        long a = 0;\n        long b = 1;\n        for (long i = 0; i < n; i++) {\n            long c = a + 2 * b;\n            a = b;\n            b = c;\n        }\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5f91891902bd48c5bb4da2fab0c02828>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5f91891902bd48c5bb4da2fab0c02828>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0 || n == 1) {\n            return n;\n        }\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        long a = 0, b = 1, c = 0;\n        if (n == 0) return a;\n        if (n == 1) return b;\n        for (int i = 2; i <= n; i++) {\n            c = a + 2 * b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c971591bcdde40eface3d3a70def8f96>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c971591bcdde40eface3d3a70def8f96>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        long a = 0, b = 1, c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + 2 * b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <58f70ed54f9e4d1db2cd51dce618966b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <58f70ed54f9e4d1db2cd51dce618966b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        long a = 0, b = 1;\n        for (int i = 0; i < n; i++) {\n            long c = a + 2 * b;\n            a = b;\n            b = c;\n        }\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <eb2f9beb0d5e4d06949af596dca696a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <eb2f9beb0d5e4d06949af596dca696a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        long a = 0;\n        long b = 1;\n        for (int i = 0; i < n; i++) {\n            long c = a + 2 * b;\n            a = b;\n            b = c;\n        }\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <674445f005e04a1485780e934f5736a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <674445f005e04a1485780e934f5736a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        long a = 0;\n        long b = 1;\n        for (long i = 2; i <= n; i++) {\n            long c = a + 2 * b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <63bee9bf65b84ef18387b62a4430ad97>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <63bee9bf65b84ef18387b62a4430ad97>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n-1) + 2 * JacobsthalNum(n-2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        long a = 0;\n        long b = 1;\n        for (int i = 0; i < n; i++) {\n            long c = a + 2 * b;\n            a = b;\n            b = c;\n        }\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <674445f005e04a1485780e934f5736a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <674445f005e04a1485780e934f5736a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        long a = 0;\n        long b = 1;\n        for (int i = 0; i < n; i++) {\n            long c = a + 2 * b;\n            a = b;\n            b = c;\n        }\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <674445f005e04a1485780e934f5736a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <674445f005e04a1485780e934f5736a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        long[] jacobsthal = new long[n + 1];\n        jacobsthal[0] = 0;\n        jacobsthal[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            jacobsthal[i] = jacobsthal[i - 1] + 2 * jacobsthal[i - 2];\n        }\n        return jacobsthal[n];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        long a = 0;\n        long b = 1;\n        for (int i = 0; i < n; i++) {\n            long c = a + 2 * b;\n            a = b;\n            b = c;\n        }\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <674445f005e04a1485780e934f5736a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <674445f005e04a1485780e934f5736a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        long a = 0, b = 1;\n        for (long i = 0; i < n; i++) {\n            long c = a + 2 * b;\n            a = b;\n            b = c;\n        }\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <94900d8ad5264afc90953e8bdc02838c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <94900d8ad5264afc90953e8bdc02838c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        long a = 0;\n        long b = 1;\n        for (long i = 0; i < n; i++) {\n            long c = a + 2 * b;\n            a = b;\n            b = c;\n        }\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5f91891902bd48c5bb4da2fab0c02828>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5f91891902bd48c5bb4da2fab0c02828>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        long a = 0;\n        long b = 1;\n        for (long i = 0; i < n; i++) {\n            long c = a + 2 * b;\n            a = b;\n            b = c;\n        }\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5f91891902bd48c5bb4da2fab0c02828>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5f91891902bd48c5bb4da2fab0c02828>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        long a = 0;\n        long b = 1;\n        long c = 0;\n        for (int i = 0; i < n; i++) {\n            c = a + 2 * b;\n            a = b;\n            b = c;\n        }\n        return a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <12b2be2bd9404bccbbec657bd3fe3ed9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <12b2be2bd9404bccbbec657bd3fe3ed9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
      "timestamp": 1665509979,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}