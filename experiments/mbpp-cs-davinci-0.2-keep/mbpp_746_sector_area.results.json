{
  "name": "mbpp_746_sector_area",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r) * (a / 360));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0033fc5856c34f3d8350914ce0a87d1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0033fc5856c34f3d8350914ce0a87d1f>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)Math.PI * r * r * a / 360;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <67b166d30dd14f8cadfae7903638d888>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <67b166d30dd14f8cadfae7903638d888>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * Math.Pow(r, 2) * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a * Math.PI / 180);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)r * r * a / 360;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b25f083ba9f9421ba18fd5a20c6c30ee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b25f083ba9f9421ba18fd5a20c6c30ee>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        var area = (a / 360.0) * Math.PI * r * r;\n        return (float)area;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)Math.PI * r * r * a / 360;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a * Math.PI / 180);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a * Math.PI / 180);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        } else {\n            return (float)((a / 360.0) * Math.PI * r * r);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (r * r * a / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <155e2ae620ba49149fdacbebc98ea950>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <155e2ae620ba49149fdacbebc98ea950>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * Math.Pow(r, 2) * (a / 360.0));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a * Math.PI / 180);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * Math.Pow(r, 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)r * r * a / 360;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b25f083ba9f9421ba18fd5a20c6c30ee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <b25f083ba9f9421ba18fd5a20c6c30ee>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        } else {\n            return (float)((a / 360.0) * Math.PI * r * r);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(r * r * a / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122412,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d07993e5ae62477abb06d9eaa79dbbdc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <d07993e5ae62477abb06d9eaa79dbbdc>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360)\n            return null;\n        return (float)(Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122412,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4243826918d143719b3b059a43eff062>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4243826918d143719b3b059a43eff062>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * Math.Pow(r, 2) * (a / 360));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <95336809694e4a4cb09c4dcdce1f3e1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <95336809694e4a4cb09c4dcdce1f3e1f>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)Math.PI * r * r * a / 360;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a * Math.PI / 180);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(a * Math.PI * r * r / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a * Math.PI / 180);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(Math.PI * Math.Pow(r, 2) * (a / 360));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <67cd83db9d1f42a2afbe81fd1c8f7407>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <67cd83db9d1f42a2afbe81fd1c8f7407>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a * Math.PI / 180);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * Math.Pow(r, 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360)\n            return null;\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a * Math.PI / 180);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * Math.Pow(r, 2) * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a * Math.PI / 180);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r) * (a / 360.0));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) return null;\n        return (float)(r * r * a / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9944477c7b8e4c8a8bb1421a6be78cf0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <9944477c7b8e4c8a8bb1421a6be78cf0>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r) * (a / 360));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0033fc5856c34f3d8350914ce0a87d1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0033fc5856c34f3d8350914ce0a87d1f>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(a * Math.PI * r * r) / 360;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(Math.PI * Math.Pow(r, 2) * (a / 360));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <67cd83db9d1f42a2afbe81fd1c8f7407>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <67cd83db9d1f42a2afbe81fd1c8f7407>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(r * r * a * Math.PI / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * Math.Pow(r, 2));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) return null;\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <139d17b386f54472aadaca708cfc1f34>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <139d17b386f54472aadaca708cfc1f34>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <20340d90f4964d599c686108df2d2e5b>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        } else {\n            return (float) (Math.PI * Math.Pow(r, 2) * (a / 360));\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c72eb4bce9d74b57b1db2b96d5a5e8bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c72eb4bce9d74b57b1db2b96d5a5e8bf>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)0.5 * r * r * a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <efa40fe6a6f94a15807e71401d6aeb95>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <efa40fe6a6f94a15807e71401d6aeb95>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)(Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)Math.PI * r * r * a / 360;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a * Math.PI / 180);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((Math.PI * r * r) * (a / 360));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0033fc5856c34f3d8350914ce0a87d1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <0033fc5856c34f3d8350914ce0a87d1f>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (r * r * a / 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <155e2ae620ba49149fdacbebc98ea950>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <155e2ae620ba49149fdacbebc98ea950>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122412,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fd66659007cd4e549fdcadd47fa89b48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fd66659007cd4e549fdcadd47fa89b48>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((r * r * a) / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <67b166d30dd14f8cadfae7903638d888>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <67b166d30dd14f8cadfae7903638d888>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (0.5 * r * r * a);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122411,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <65c5b13902ec4eb38ca0cc21b3281835>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        float area = (float) (Math.PI * r * r * a / 360);\n        return area;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1666122412,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float)((a / 360.0) * Math.PI * r * r);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        return (float) (Math.PI * r * r * a / 360);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n",
      "timestamp": 1665517243,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}