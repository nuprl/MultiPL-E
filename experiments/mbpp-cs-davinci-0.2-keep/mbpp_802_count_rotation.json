{
  "name": "mbpp_802_count_rotation",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;",
    "        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            }\n            else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long n = arr.Count;\n        long i = 0;\n        long j = n - 1;\n        while (i < j) {\n            long mid = (i + j) / 2;\n            if (arr[mid] > arr[j]) {\n                i = mid + 1;\n            } else {\n                j = mid;\n            }\n        }\n        return i;",
    "        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            }\n            else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;",
    "        long count = 0;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] > arr[i + 1]) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;",
    "        long left = 0;\n        long right = arr.Count - 1;\n        long mid = 0;\n        while (left < right) {\n            mid = (left + right) / 2;\n            if (mid < right && arr[mid] > arr[mid + 1]) {\n                return mid + 1;\n            }\n            if (mid > left && arr[mid] < arr[mid - 1]) {\n                return mid;\n            }\n            if (arr[left] < arr[mid]) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return 0;",
    "        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            }\n            else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;",
    "        long low = 0;\n        long high = arr.Count - 1;\n        long n = arr.Count;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;"
  ]
}