{
  "name": "mbpp_577_last_Digit_Factorial",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the last digit in factorial of a given number.\n    public static long LastDigitFactorial(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LastDigitFactorial((4L)) == (4L));\n    Debug.Assert(LastDigitFactorial((21L)) == (0L));\n    Debug.Assert(LastDigitFactorial((30L)) == (0L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative\");\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        // The last digit of a factorial is the same as the last digit of the sum of the factorials of all the numbers from 0 to n.\n        // We can use this to calculate the last digit of a factorial.\n        long lastDigit = 0;\n        for (long i = 0; i <= n; i++) {\n            lastDigit += i;\n            lastDigit %= 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] lastDigits = new long[] { 1, 1, 2, 6, 4 };\n        long[] factorials = new long[] { 1, 1, 2, 6, 24 };\n        long[] powersOfFive = new long[] { 1, 5, 25, 125, 625 };\n        long[] powersOfTwo = new long[] { 1, 2, 4, 8, 16 };\n        long lastDigit = 1;\n        for (int i = 5; i <= n; i++) {\n            if (i % 5 == 0) {\n                lastDigit = lastDigits[4];\n            } else if (i % 5 == 1) {\n                lastDigit = lastDigits[0];\n            } else if (i % 5 == 2) {\n                lastDigit = lastDigits[1];\n            } else if (i % 5 == 3) {\n                lastDigit = lastDigits[2];\n            } else if (i % 5 == 4) {\n                lastDigit = lastDigits[3];\n            }\n            lastDigit = (lastDigit * i) % 10;\n            lastDigits[i % 5] = lastDigit;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative\");\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long[] factorials = new long[n + 1];\n        factorials[0] = 1;\n        factorials[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            factorials[i] = factorials[i - 1] * i;\n            factorials[i] %= 10;\n        }\n        return factorials[n];",
    "        long lastDigit = 1;\n        for (long i = 1; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) return -1;\n        if (n < 2) return 1;\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"n must be non-negative\");\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            return 0;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n == 0) return 1;\n        long result = 1;\n        for (long i = 1; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative\");\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit *= i;\n            lastDigit %= 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            return -1;\n        }\n        if (n <= 1) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit *= i;\n            lastDigit %= 10;\n        }\n        return lastDigit;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative\");\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit *= i;\n            lastDigit %= 10;\n        }\n        return lastDigit;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"n must be non-negative\");\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long lastDigit = 1;\n        for (long i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n        }\n        return lastDigit;",
    "        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"n must be non-negative\");\n        }\n        if (n < 2) {\n            return 1;\n        }\n        long result = 1;\n        for (long i = 2; i <= n; i++) {\n            result = (result * i) % 10;\n        }\n        return result;"
  ]
}