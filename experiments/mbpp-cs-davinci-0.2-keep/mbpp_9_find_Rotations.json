{
  "name": "mbpp_9_find_Rotations",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    public static long FindRotations(string str) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindRotations((\"aaaa\")) == (1L));\n    Debug.Assert(FindRotations((\"ab\")) == (2L));\n    Debug.Assert(FindRotations((\"abc\")) == (3L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long rotations = 0;\n        int i = 0;\n        while (i < str.Length) {\n            if (str[i] == '1') {\n                rotations += 1;\n                break;\n            }\n            i += 1;\n        }\n        return rotations;",
    "        // Write your code here\n        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        long min = long.MaxValue;\n        for (long i = 1; i < str.Length; i++) {\n            long rotations = 0;\n            for (long j = 0; j < str.Length; j++) {\n                if (str[j] != str[(j + i) % str.Length]) {\n                    rotations++;\n                }\n            }\n            min = Math.Min(min, rotations);\n        }\n        return min;",
    "        // TODO: Implement this function\n        return 0;",
    "        var sb = new StringBuilder(str);\n        var min = long.MaxValue;\n        for (long i = 0; i < str.Length; i++) {\n            sb.Append(sb[0]);\n            sb.Remove(0, 1);\n            if (sb.ToString() == str)\n                return i + 1;\n        }\n        return -1;",
    "        long rotations = 0;\n        // Write your code here\n        return rotations;",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long rotations = 0;\n        long minRotations = 0;\n        string minString = str;\n        string tempString = str;\n        while (rotations < str.Length) {\n            tempString = tempString.Substring(1) + tempString[0];\n            if (tempString.CompareTo(minString) < 0) {\n                minString = tempString;\n                minRotations = rotations;\n            }\n            rotations++;\n        }\n        return minRotations;",
    "        long rotations = 0;\n        long min = long.MaxValue;\n        for (long i = 0; i < str.Length; i++) {\n            string rotated = str.Substring((int)i) + str.Substring(0, (int)i);\n            if (rotated == str) {\n                return rotations;\n            }\n            rotations++;\n        }\n        return rotations;",
    "        var sb = new StringBuilder(str);\n        var min = long.MaxValue;\n        for (int i = 0; i < str.Length; i++) {\n            sb.Append(sb[0]);\n            sb.Remove(0, 1);\n            if (sb.ToString() == str) {\n                min = Math.Min(min, i + 1);\n            }\n        }\n        return min;",
    "        // Write your code here\n        var n = str.Length;\n        var s = str + str;\n        var z = new int[n];\n        z[0] = n;\n        var l = 0;\n        var r = 0;\n        for (var i = 1; i < n; i++) {\n            if (i > r) {\n                l = r = i;\n                while (r < n && s[r - l] == s[r]) {\n                    r++;\n                }\n                z[i] = r - l;\n                r--;\n            } else {\n                var k = i - l;\n                if (z[k] < r - i + 1) {\n                    z[i] = z[k];\n                } else {\n                    l = i;\n                    while (r < n && s[r - l] == s[r]) {\n                        r++;\n                    }\n                    z[i] = r - l;\n                    r--;\n                }\n            }\n        }\n        var min = n;\n        for (var i = 1; i < n; i++) {\n            if (z[i] == n) {\n                min = i;\n                break;\n            }\n        }\n        return min;",
    "        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i;\n                break;\n            }\n        }\n        return rotations;",
    "        long min = long.MaxValue;\n        for (long i = 1; i < str.Length; i++) {\n            if (str.Substring(0, (int)i) == str.Substring((int)i)) {\n                min = Math.Min(min, i);\n            }\n        }\n        return min;",
    "        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        var sb = new StringBuilder(str);\n        var min = long.MaxValue;\n        for (int i = 0; i < str.Length; i++) {\n            sb.Append(sb[0]);\n            sb.Remove(0, 1);\n            var rotations = sb.ToString();\n            var count = 0;\n            for (int j = 0; j < str.Length; j++) {\n                if (str[j] != rotations[j]) {\n                    count++;\n                }\n            }\n            min = Math.Min(min, count);\n        }\n        return min;",
    "        long rotations = 0;\n        long n = str.Length;\n        for (long i = 0; i < n; i++) {\n            if (str[(int)i] == '1') {\n                rotations += i;\n            }\n        }\n        return rotations;",
    "        // Write your code here\n        var n = str.Length;\n        var count = 0;\n        var i = 0;\n        while (i < n) {\n            if (str[i] == '0') {\n                count++;\n                i++;\n            }\n            else {\n                var j = i;\n                while (j < n && str[j] == '1') {\n                    j++;\n                }\n                i = j;\n            }\n        }\n        return count;",
    "        long rotations = 0;\n        string str1 = str;\n        string str2 = str;\n        for (int i = 0; i < str.Length; i++) {\n            str1 = str1.Substring(1) + str1[0];\n            str2 = str2[str2.Length - 1] + str2.Substring(0, str2.Length - 1);\n            if (str1 == str) {\n                rotations = i + 1;\n                break;\n            }\n            if (str2 == str) {\n                rotations = i + 1;\n                break;\n            }\n        }\n        return rotations;",
    "        var s = str + str;\n        var n = s.Length;\n        var z = new int[n];\n        var l = 0;\n        var r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i > r) {\n                l = r = i;\n                while (r < n && s[r - l] == s[r]) r++;\n                z[i] = r - l;\n                r--;\n            } else {\n                int k = i - l;\n                if (z[k] < r - i + 1) z[i] = z[k];\n                else {\n                    l = i;\n                    while (r < n && s[r - l] == s[r]) r++;\n                    z[i] = r - l;\n                    r--;\n                }\n            }\n        }\n        var res = -1;\n        for (int i = 1; i < n; i++) {\n            if (z[i] == n / 2) {\n                res = i;\n                break;\n            }\n        }\n        return res;",
    "        var len = str.Length;\n        var hash = new long[len];\n        var pow = new long[len];\n        var p = 31;\n        var m = 1000000007;\n        hash[0] = str[0] - 'a' + 1;\n        pow[0] = 1;\n        for (var i = 1; i < len; i++) {\n            hash[i] = (hash[i - 1] + (str[i] - 'a' + 1) * pow[i - 1]) % m;\n            pow[i] = (pow[i - 1] * p) % m;\n        }\n        var res = 0;\n        for (var i = 1; i < len; i++) {\n            var h1 = (hash[len - 1] - hash[i - 1] + m) % m;\n            var h2 = (hash[i - 1] * pow[len - i]) % m;\n            if (h1 == h2) {\n                res = i;\n            }\n        }\n        return res;",
    "        if (str.Length == 0) {\n            return 0;\n        }\n        var sb = new StringBuilder(str);\n        var min = sb.ToString();\n        for (int i = 0; i < str.Length; i++) {\n            sb.Append(sb[0]);\n            sb.Remove(0, 1);\n            if (sb.ToString().CompareTo(min) < 0) {\n                min = sb.ToString();\n            }\n        }\n        return str.Length - min.IndexOf(str);",
    "        long rotations = 0;\n        var str_len = str.Length;\n        var str_hash = str.GetHashCode();\n        var str_hash_rot = str.Substring(1, str_len - 1) + str[0];\n        while (str_hash_rot.GetHashCode() != str_hash) {\n            str_hash_rot = str_hash_rot.Substring(1, str_len - 1) + str_hash_rot[0];\n            rotations++;\n        }\n        return rotations;",
    "        var sb = new StringBuilder(str);\n        var min = long.MaxValue;\n        for (var i = 1; i < str.Length; i++) {\n            sb.Append(sb[0]);\n            sb.Remove(0, 1);\n            var rotations = sb.ToString();\n            var count = 0;\n            for (var j = 0; j < str.Length; j++) {\n                if (str[j] != rotations[j]) {\n                    count++;\n                }\n            }\n            min = Math.Min(min, count);\n        }\n        return min;",
    "        if (str.Length == 0) {\n            return 0;\n        }\n        int n = str.Length;\n        int[] count = new int[256];\n        int i;\n        for (i = 0; i < n; i++) {\n            count[str[i]]++;\n        }\n        int index = -1;\n        for (i = 0; i < n; i++) {\n            if (count[str[i]] == 1) {\n                index = i;\n                break;\n            }\n        }\n        return (index == -1) ? n : index + 1;",
    "        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        long minRotations = 0;\n        long maxRotations = str.Length;\n        long midRotations = 0;\n        while (minRotations < maxRotations) {\n            midRotations = (maxRotations + minRotations) / 2;\n            if (str.Substring(0, (int)midRotations) == str.Substring((int)midRotations, (int)midRotations)) {\n                minRotations = midRotations + 1;\n            } else {\n                maxRotations = midRotations;\n            }\n        }\n        return minRotations;",
    "        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        string str2 = str;\n        for (int i = 0; i < str.Length; i++) {\n            str2 = str2.Substring(1) + str2[0];\n            if (str2 == str) {\n                rotations = i + 1;\n                break;\n            }\n        }\n        return rotations;",
    "        long minRotations = 0;\n        long maxRotations = str.Length;\n        long midRotations = (minRotations + maxRotations) / 2;\n        while (minRotations < maxRotations) {\n            midRotations = (minRotations + maxRotations) / 2;\n            if (str.CompareTo(Rotate(str, midRotations)) < 0) {\n                maxRotations = midRotations;\n            } else {\n                minRotations = midRotations + 1;\n            }\n        }\n        return minRotations;",
    "        long minRotations = 0;\n        for (long i = 1; i < str.Length; i++) {\n            if (str.Substring(0, (int)i) == str.Substring((int)i, (int)(str.Length - i))) {\n                minRotations = i;\n                break;\n            }\n        }\n        return minRotations;",
    "        long rotations = 0;\n        long n = str.Length;\n        long[] count = new long[26];\n        long[] cum_count = new long[26];\n        long[] index = new long[26];\n        for (long i = 0; i < n; i++) {\n            count[str[(int)i] - 'a']++;\n        }\n        for (long i = 0; i < 26; i++) {\n            cum_count[i] = count[i];\n            if (i != 0) {\n                cum_count[i] += cum_count[i - 1];\n            }\n        }\n        for (long i = 0; i < 26; i++) {\n            if (count[i] != 0) {\n                index[i] = n - cum_count[i];\n            }\n        }\n        long min = n;\n        for (long i = 0; i < 26; i++) {\n            if (count[i] != 0 && index[i] < min) {\n                min = index[i];\n            }\n        }\n        rotations = min;\n        return rotations;",
    "        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        var sb = new StringBuilder(str);\n        var min = long.MaxValue;\n        for (int i = 0; i < str.Length; i++) {\n            sb.Append(sb[0]);\n            sb.Remove(0, 1);\n            var rotations = sb.ToString();\n            var count = 0;\n            for (int j = 0; j < str.Length; j++) {\n                if (str[j] != rotations[j]) {\n                    count++;\n                }\n            }\n            min = Math.Min(min, count);\n        }\n        return min;",
    "        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        long minRotations = str.Length;\n        for (long i = 0; i < str.Length; i++) {\n            if (str[0] != str[i]) {\n                rotations++;\n            } else {\n                if (rotations < minRotations) {\n                    minRotations = rotations;\n                }\n                rotations = 0;\n            }\n        }\n        return minRotations;",
    "        long rotations = 0;\n        for (long i = 0; i < str.Length; i++) {\n            if (str[0] == str[i]) {\n                rotations++;\n            }\n        }\n        return rotations;",
    "        long minRotations = 0;\n        long len = str.Length;\n        for (long i = 0; i < len; i++) {\n            if (str[(int)i] == '1') {\n                minRotations = Math.Max(minRotations, Math.Max(i + 1, len - i));\n            }\n        }\n        return minRotations;",
    "        // Write your code here\n        long min = long.MaxValue;\n        for (int i = 0; i < str.Length; i++) {\n            var s = str.Substring(i) + str.Substring(0, i);\n            if (s == str) {\n                return i;\n            }\n        }\n        return -1;",
    "        long rotations = 0;\n        int length = str.Length;\n        for (int i = 0; i < length; i++) {\n            if (str[i] == '1') {\n                rotations += (length - i - 1);\n                rotations += i;\n                break;\n            }\n        }\n        return rotations;",
    "        // Write your code here\n        var s = str + str;\n        var n = str.Length;\n        var z = new int[n];\n        var l = 0;\n        var r = 0;\n        for (var i = 1; i < n; i++) {\n            if (i > r) {\n                l = r = i;\n                while (r < n && s[r - l] == s[r]) r++;\n                z[i] = r - l;\n                r--;\n            } else {\n                var k = i - l;\n                if (z[k] < r - i + 1) {\n                    z[i] = z[k];\n                } else {\n                    l = i;\n                    while (r < n && s[r - l] == s[r]) r++;\n                    z[i] = r - l;\n                    r--;\n                }\n            }\n        }\n        var ans = n;\n        for (var i = 1; i < n; i++) {\n            if (z[i] == n) {\n                ans = i;\n                break;\n            }\n        }\n        return ans;",
    "        var len = str.Length;\n        var hash = new long[len];\n        var pow = new long[len];\n        var p = 31;\n        var m = 1000000007;\n        pow[0] = 1;\n        for (int i = 1; i < len; i++) {\n            pow[i] = (pow[i - 1] * p) % m;\n        }\n        for (int i = 0; i < len; i++) {\n            hash[i] = (str[i] - 'a' + 1) * pow[i];\n            if (i > 0) {\n                hash[i] = (hash[i] + hash[i - 1]) % m;\n            }\n        }\n        var min = long.MaxValue;\n        for (int i = 0; i < len; i++) {\n            var h = hash[len - 1];\n            if (i > 0) {\n                h = (h - hash[i - 1] + m) % m;\n            }\n            h = (h * pow[i]) % m;\n            var h2 = hash[i];\n            if (i > 0) {\n                h2 = (h2 - hash[i - 1] + m) % m;\n            }\n            if (h == h2) {\n                min = Math.Min(min, i + 1);\n            }\n        }\n        return min;",
    "        long min = long.MaxValue;\n        for (long i = 0; i < str.Length; i++) {\n            var s = str.Substring(i) + str.Substring(0, i);\n            if (s == str) {\n                min = Math.Min(min, i);\n            }\n        }\n        return min;",
    "        long rotations = 0;\n        string str2 = str;\n        for (long i = 0; i < str.Length; i++) {\n            str2 = str2.Substring(1) + str2[0];\n            if (str2 == str) {\n                rotations = i + 1;\n                break;\n            }\n        }\n        return rotations;",
    "        // Write your code here\n        long rotations = 0;\n        for (long i = 1; i < str.Length; i++) {\n            if (str[i] != str[0]) {\n                rotations = i;\n                break;\n            }\n        }\n        return rotations;",
    "        int n = str.Length;\n        int[] count = new int[256];\n        int i;\n        for (i = 0; i < n; i++)\n            count[str[i]]++;\n        int index = -1;\n        for (i = 0; i < n; i++) {\n            if (count[str[i]] == 1) {\n                index = i;\n                break;\n            }\n        }\n        return (index == -1) ? -1 : (index + 1) % n;",
    "        long rotations = 0;\n        int n = str.Length;\n        int[] count = new int[256];\n        int[] count1 = new int[256];\n        int[] count2 = new int[256];\n        int i;\n        for (i = 0; i < n; i++) {\n            count[str[i]]++;\n            count1[str[i]]++;\n        }\n        for (i = 0; i < n; i++) {\n            count[str[i]]--;\n            if (i < n / 2) {\n                count1[str[i]]--;\n            } else {\n                count2[str[i]]++;\n            }\n            if (i >= n / 2) {\n                if (AreAllZeroes(count)) {\n                    break;\n                }\n            }\n        }\n        rotations = i + 1;\n        if (AreAllZeroes(count1) && AreAllZeroes(count2)) {\n            return rotations;\n        }\n        return -1;",
    "        long rotations = 0;\n        long len = str.Length;\n        for (long i = 0; i < len; i++) {\n            if (str[i] == '1') {\n                rotations = Math.Max(rotations, Math.Max(i + 1, len - i));\n            }\n        }\n        return rotations;",
    "        // Write your code here\n        var n = str.Length;\n        var s = str + str;\n        var z = new int[2 * n];\n        z[0] = 0;\n        var l = 0;\n        var r = 0;\n        for (var i = 1; i < 2 * n; i++) {\n            if (i > r) {\n                l = r = i;\n                while (r < 2 * n && s[r - l] == s[r]) {\n                    r++;\n                }\n                z[i] = r - l;\n                r--;\n            } else {\n                var k = i - l;\n                if (z[k] < r - i + 1) {\n                    z[i] = z[k];\n                } else {\n                    l = i;\n                    while (r < 2 * n && s[r - l] == s[r]) {\n                        r++;\n                    }\n                    z[i] = r - l;\n                    r--;\n                }\n            }\n        }\n        var result = n;\n        for (var i = 1; i < n; i++) {\n            if (z[i] == n) {\n                result = i;\n                break;\n            }\n        }\n        return result;",
    "        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        var s = str + str;\n        var n = str.Length;\n        var z = new int[2 * n];\n        z[0] = n;\n        var l = 0;\n        var r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i > r) {\n                l = r = i;\n                while (r < n && s[r - l] == s[r]) {\n                    r++;\n                }\n                z[i] = r - l;\n                r--;\n            } else {\n                var k = i - l;\n                if (z[k] < r - i + 1) {\n                    z[i] = z[k];\n                } else {\n                    l = i;\n                    while (r < n && s[r - l] == s[r]) {\n                        r++;\n                    }\n                    z[i] = r - l;\n                    r--;\n                }\n            }\n        }\n        var res = n;\n        for (int i = 1; i < n; i++) {\n            if (z[i] == n) {\n                res = Math.Min(res, i);\n            }\n        }\n        return res;",
    "        var sb = new StringBuilder(str);\n        var min = long.MaxValue;\n        for (var i = 0; i < str.Length; i++) {\n            sb.Append(sb[0]);\n            sb.Remove(0, 1);\n            var count = 0;\n            for (var j = 0; j < str.Length; j++) {\n                if (str[j] != sb[j]) {\n                    count++;\n                }\n            }\n            min = Math.Min(min, count);\n        }\n        return min;",
    "        long minRotations = 0;\n        long maxRotations = str.Length;\n        long midRotations = (minRotations + maxRotations) / 2;\n        while (minRotations < maxRotations) {\n            midRotations = (minRotations + maxRotations) / 2;\n            string rotatedStr = Rotate(str, midRotations);\n            if (rotatedStr == str) {\n                maxRotations = midRotations;\n            } else {\n                minRotations = midRotations + 1;\n            }\n        }\n        return minRotations;",
    "        long rotations = 0;\n        for (int i = 1; i < str.Length; i++) {\n            if (str[i] == str[0]) {\n                string str1 = str.Substring(0, i);\n                string str2 = str.Substring(i);\n                if (str1 == str2) {\n                    rotations = i;\n                    break;\n                }\n            }\n        }\n        return rotations;",
    "        // Write your code here\n        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        long length = str.Length;\n        long[] count = new long[256];\n        long[] count1 = new long[256];\n        long[] count2 = new long[256];\n        long[] count3 = new long[256];\n        long[] count4 = new long[256];\n        long[] count5 = new long[256];\n        long[] count6 = new long[256];\n        long[] count7 = new long[256];\n        long[] count8 = new long[256];\n        long[] count9 = new long[256];\n        long[] count10 = new long[256];\n        long[] count11 = new long[256];\n        long[] count12 = new long[256];\n        long[] count13 = new long[256];\n        long[] count14 = new long[256];\n        long[] count15 = new long[256];\n        long[] count16 = new long[256];\n        long[] count17 = new long[256];\n        long[] count18 = new long[256];\n        long[] count19 = new long[256];\n        long[] count20 = new long[256];\n        long[] count21 = new long[256];\n        long[] count22 = new long[256];\n        long[] count23 = new long[256];\n        long[] count24 = new long[256];\n        long[] count25 = new long[256];\n        long[] count26 = new long[256];\n        long[] count27 = new long[256];\n        long[] count28 = new long[256];\n        long[] count29 = new long[256];\n        long[] count30 = new long[256];\n        long[] count31 = new long[256];\n        long[] count32 = new long[256];\n        long[] count33 = new long[256];\n        long[] count34 = new long[256];\n        long[] count35 = new long[256];\n        long[] count36 = new long[256];\n        long[] count37 = new long[256];\n        long[] count38 = new long[256];\n        long[] count39 = new long[256];\n        long[] count40 = new long[256];\n        long[]",
    "        long min = long.MaxValue;\n        for (long i = 1; i < str.Length; i++) {\n            long count = 0;\n            for (long j = 0; j < str.Length; j++) {\n                if (str[(int)((i + j) % str.Length)] != str[(int)j]) {\n                    count++;\n                }\n            }\n            min = Math.Min(min, count);\n        }\n        return min;",
    "        var len = str.Length;\n        var hash = new long[len];\n        var pow = new long[len];\n        var p = 31;\n        var m = 1000000007;\n        pow[0] = 1;\n        for (int i = 1; i < len; i++) {\n            pow[i] = (pow[i - 1] * p) % m;\n        }\n        for (int i = 0; i < len; i++) {\n            hash[i] = (str[i] - 'a' + 1) * pow[i];\n            if (i > 0) {\n                hash[i] = (hash[i] + hash[i - 1]) % m;\n            }\n        }\n        var min = long.MaxValue;\n        for (int i = 0; i < len; i++) {\n            var h = hash[len - 1];\n            if (i > 0) {\n                h = (h - hash[i - 1] + m) % m;\n            }\n            h = (h * pow[i]) % m;\n            if (h < min) {\n                min = h;\n            }\n        }\n        return min;",
    "        // Find the minimum number of rotations (greater than 0) required to get the same string.\n        // Example:\n        // Input: \"abc\"\n        // Output: 2\n        // Explanation: \"abc\" -> \"bca\" -> \"abc\"\n        // Input: \"aaa\"\n        // Output: 1\n        // Explanation: \"aaa\" -> \"aaa\"\n        // Input: \"abab\"\n        // Output: 2\n        // Explanation: \"abab\" -> \"baba\" -> \"abab\"\n        // Input: \"ababab\"\n        // Output: 2\n        // Explanation: \"ababab\" -> \"bababa\" -> \"ababab\"\n        // Input: \"abababab\"\n        // Output: 1\n        // Explanation: \"abababab\" -> \"abababab\"\n        // Input: \"ababababa\"\n        // Output: 2\n        // Explanation: \"ababababa\" -> \"babababab\" -> \"ababababa\"\n        // Input: \"ababababab\"\n        // Output: 2\n        // Explanation: \"ababababab\" -> \"bababababa\" -> \"ababababab\"\n        // Input: \"abababababa\"\n        // Output: 2\n        // Explanation: \"abababababa\" -> \"bababababab\" -> \"abababababa\"\n        // Input: \"abababababab\"\n        // Output: 2\n        // Explanation: \"abababababab\" -> \"babababababa\" -> \"abababababab\"\n        // Input: \"ababababababa\"\n        // Output: 2\n        // Explanation: \"ababababababa\" -> \"babababababab\" -> \"ababababababa\"\n        // Input: \"ababababababab\"\n        // Output: 2\n        // Explanation: \"ababababababab\" -> \"bababababababa\" -> \"ababababababab\"\n        // Input: \"abababababababa\"\n        // Output",
    "        var n = str.Length;\n        var str2 = str + str;\n        var lps = new int[n];\n        var i = 1;\n        var j = 0;\n        while (i < n) {\n            if (str[i] == str[j]) {\n                lps[i] = j + 1;\n                i++;\n                j++;\n            } else {\n                if (j != 0) {\n                    j = lps[j - 1];\n                } else {\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n        i = 0;\n        j = 0;\n        while (i < 2 * n) {\n            if (str2[i] == str[j]) {\n                i++;\n                j++;\n            } else {\n                if (j != 0) {\n                    j = lps[j - 1];\n                } else {\n                    i++;\n                }\n            }\n            if (j == n) {\n                return i - j;\n            }\n        }\n        return -1;",
    "        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i;\n                break;\n            }\n        }\n        return rotations;",
    "        // Write your code here\n        long rotations = 0;\n        string temp = str;\n        for(int i = 0; i < str.Length; i++) {\n            temp = temp.Substring(1) + temp[0];\n            if(temp == str) {\n                rotations = i + 1;\n                break;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        string str2 = str.Substring(1) + str[0];\n        while (str2 != str) {\n            str2 = str2.Substring(1) + str2[0];\n            rotations++;\n        }\n        return rotations;",
    "        long min = long.MaxValue;\n        for (int i = 0; i < str.Length; i++) {\n            string rotated = str.Substring(i) + str.Substring(0, i);\n            long rotations = 0;\n            for (int j = 0; j < str.Length; j++) {\n                if (str[j] != rotated[j]) {\n                    rotations++;\n                }\n            }\n            min = Math.Min(min, rotations);\n        }\n        return min;",
    "        long min = long.MaxValue;\n        for (int i = 0; i < str.Length; i++) {\n            string s = str.Substring(i) + str.Substring(0, i);\n            if (s == str) {\n                return i;\n            }\n        }\n        return min;",
    "        long min = long.MaxValue;\n        for (int i = 0; i < str.Length; i++) {\n            string rotated = str.Substring(i) + str.Substring(0, i);\n            if (rotated == str)\n                return 0;\n            long rotations = 1;\n            while (rotated != str) {\n                rotated = rotated.Substring(1) + rotated[0];\n                rotations++;\n            }\n            min = Math.Min(min, rotations);\n        }\n        return min;",
    "        long rotations = 0;\n        var str_len = str.Length;\n        for (long i = 1; i < str_len; i++) {\n            if (str[0] == str[i]) {\n                var sub_str = str.Substring(0, i);\n                var sub_str_len = sub_str.Length;\n                var sub_str_rot = str.Substring(i, str_len - i);\n                if (sub_str == sub_str_rot) {\n                    rotations = i;\n                    break;\n                }\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        long min = long.MaxValue;\n        for (int i = 0; i < str.Length; i++) {\n            string rotated = str.Substring(i) + str.Substring(0, i);\n            long rotations = 0;\n            for (int j = 0; j < str.Length; j++) {\n                if (str[j] != rotated[j]) {\n                    rotations++;\n                }\n            }\n            min = Math.Min(min, rotations);\n        }\n        return min;",
    "        long rotations = 0;\n        long minRotations = long.MaxValue;\n        long len = str.Length;\n        for (int i = 0; i < len; i++) {\n            if (str[i] == '1') {\n                rotations += i;\n                if (rotations < minRotations) {\n                    minRotations = rotations;\n                }\n            }\n        }\n        return minRotations;",
    "        // Write your code here\n        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        // Write your code here\n        var sb = new StringBuilder(str);\n        var min = long.MaxValue;\n        for (int i = 0; i < str.Length; i++) {\n            sb.Append(sb[0]);\n            sb.Remove(0, 1);\n            var s = sb.ToString();\n            var rotations = 0;\n            for (int j = 0; j < str.Length; j++) {\n                if (s[j] != str[j]) {\n                    rotations++;\n                }\n            }\n            min = Math.Min(min, rotations);\n        }\n        return min;",
    "        long minRotations = 0;\n        long maxRotations = str.Length;\n        long midRotations = 0;\n        while (minRotations < maxRotations) {\n            midRotations = (minRotations + maxRotations) / 2;\n            if (str.Substring((int)midRotations) + str.Substring(0, (int)midRotations) == str) {\n                maxRotations = midRotations;\n            } else {\n                minRotations = midRotations + 1;\n            }\n        }\n        return minRotations;",
    "        long minRotations = 0;\n        long maxRotations = str.Length;\n        while (minRotations < maxRotations) {\n            long midRotations = (minRotations + maxRotations) / 2;\n            if (str.Substring(0, (int)midRotations) == str.Substring((int)midRotations, (int)midRotations)) {\n                minRotations = midRotations + 1;\n            } else {\n                maxRotations = midRotations;\n            }\n        }\n        return minRotations;",
    "        long rotations = 0;\n        int length = str.Length;\n        if (length == 0) return rotations;\n        char[] chars = str.ToCharArray();\n        char first = chars[0];\n        int index = 0;\n        while (index < length) {\n            if (chars[index] == first) {\n                bool found = true;\n                for (int i = 0; i < length; i++) {\n                    if (chars[(index + i) % length] != chars[i]) {\n                        found = false;\n                        break;\n                    }\n                }\n                if (found) {\n                    rotations = index;\n                    break;\n                }\n            }\n            index++;\n        }\n        return rotations;",
    "        long min = long.MaxValue;\n        for (int i = 0; i < str.Length; i++) {\n            string rotated = str.Substring(i) + str.Substring(0, i);\n            long count = 0;\n            for (int j = 0; j < str.Length; j++) {\n                if (str[j] != rotated[j]) {\n                    count++;\n                }\n            }\n            min = Math.Min(min, count);\n        }\n        return min;",
    "        var sb = new StringBuilder(str);\n        var min = long.MaxValue;\n        for (int i = 0; i < str.Length; i++) {\n            sb.Append(sb[0]);\n            sb.Remove(0, 1);\n            var str2 = sb.ToString();\n            var rotations = 0;\n            for (int j = 0; j < str.Length; j++) {\n                if (str[j] != str2[j]) {\n                    rotations++;\n                }\n            }\n            min = Math.Min(min, rotations);\n        }\n        return min;",
    "        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        long length = str.Length;\n        long[] next = new long[length];\n        long[] prev = new long[length];\n        for (long i = 0; i < length; i++) {\n            next[i] = (i + 1) % length;\n            prev[i] = (i - 1 + length) % length;\n        }\n        long current = 0;\n        while (rotations < length) {\n            if (str[current] == '1') {\n                long nextIndex = next[current];\n                next[prev[current]] = next[current];\n                prev[next[current]] = prev[current];\n                current = nextIndex;\n            }\n            else {\n                current = next[current];\n            }\n            rotations++;\n        }\n        return rotations;",
    "        var sb = new StringBuilder(str);\n        var min = long.MaxValue;\n        for (var i = 0; i < str.Length; i++) {\n            sb.Append(sb[0]);\n            sb.Remove(0, 1);\n            var rot = sb.ToString();\n            var count = 0;\n            for (var j = 0; j < str.Length; j++) {\n                if (str[j] != rot[j]) {\n                    count++;\n                }\n            }\n            min = Math.Min(min, count);\n        }\n        return min;",
    "        // Write your code here\n        if (str.Length == 1) {\n            return 0;\n        }\n        long min = long.MaxValue;\n        for (int i = 0; i < str.Length; i++) {\n            string s = str.Substring(i) + str.Substring(0, i);\n            long count = 0;\n            for (int j = 0; j < s.Length; j++) {\n                if (s[j] != str[j]) {\n                    count++;\n                }\n            }\n            if (count < min) {\n                min = count;\n            }\n        }\n        return min;",
    "        var sb = new StringBuilder(str);\n        var min = long.MaxValue;\n        for (long i = 1; i < str.Length; i++) {\n            sb.Append(sb[0]);\n            sb.Remove(0, 1);\n            if (sb.ToString() == str) {\n                min = Math.Min(min, i);\n            }\n        }\n        return min;",
    "        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            string rotated = str.Substring(i) + str.Substring(0, i);\n            if (rotated == str) {\n                rotations = i;\n                break;\n            }\n        }\n        return rotations;",
    "        var sb = new StringBuilder(str);\n        var min = long.MaxValue;\n        for (int i = 0; i < str.Length; i++) {\n            var c = sb[0];\n            sb.Remove(0, 1);\n            sb.Append(c);\n            var rot = long.Parse(sb.ToString());\n            if (rot < min) {\n                min = rot;\n            }\n        }\n        return min;",
    "        long rotations = 0;\n        long len = str.Length;\n        for (long i = 0; i < len; i++) {\n            if (str[i] == '1') {\n                rotations += i;\n                rotations += len - i - 1;\n            }\n        }\n        return rotations;",
    "        var sb = new StringBuilder(str);\n        var min = long.MaxValue;\n        for (long i = 0; i < str.Length; i++) {\n            sb.Append(sb[0]);\n            sb.Remove(0, 1);\n            var s = sb.ToString();\n            if (s == str) {\n                min = Math.Min(min, i + 1);\n            }\n        }\n        return min;",
    "        long minRotations = 0;\n        // Write your code here\n        return minRotations;",
    "        long rotations = 0;\n        long length = str.Length;\n        for (long i = 0; i < length; i++) {\n            if (str[(int)i] == '1') {\n                rotations += (length - i) % length;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        string str2 = str;\n        for (int i = 0; i < str.Length; i++) {\n            str2 = str2.Substring(1) + str2[0];\n            if (str2 == str) {\n                rotations = i + 1;\n                break;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        long min = long.MaxValue;\n        for (long i = 1; i < str.Length; i++) {\n            string rotated = str.Substring(i) + str.Substring(0, i);\n            if (rotated == str) {\n                return i;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        // Write your code here\n        return rotations;",
    "        var n = str.Length;\n        var suffixes = new List<string>();\n        for (int i = 0; i < n; i++) {\n            suffixes.Add(str.Substring(i, n - i) + str.Substring(0, i));\n        }\n        suffixes.Sort();\n        return suffixes.IndexOf(str) + 1;",
    "        int n = str.Length;\n        long[] count = new long[n];\n        long[] cum_count = new long[n];\n        long[] cum_sum = new long[n];\n        long[] cum_sum_sq = new long[n];\n        long[] cum_sum_sq_sq = new long[n];\n        long[] cum_sum_sq_sq_sq = new long[n];\n        long[] cum_sum_sq_sq_sq_sq = new long[n];\n        long[] cum_sum_sq_sq_sq_sq_sq = new long[n];\n        long[] cum_sum_sq_sq_sq_sq_sq_sq = new long[n];\n        long[] cum_sum_sq_sq_sq_sq_sq_sq_sq = new long[n];\n        long[] cum_sum_sq_sq_sq_sq_sq_sq_sq_sq = new long[n];\n        long[] cum_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq = new long[n];\n        long[] cum_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = new long[n];\n        long[] cum_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = new long[n];\n        long[] cum_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = new long[n];\n        long[] cum_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = new long[n];\n        long[] cum_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = new long[n];\n        long[] cum_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = new long[n];\n        long[] cum_sum_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq",
    "        long rotations = 0;\n        int len = str.Length;\n        for (int i = 0; i < len; i++) {\n            if (str[i] == '1') {\n                rotations += i;\n            }\n        }\n        return rotations;",
    "        var str2 = str + str;\n        var n = str.Length;\n        var kmp = new KMP(str);\n        var matches = kmp.Match(str2);\n        var min = n;\n        foreach (var match in matches) {\n            if (match.Length == n) {\n                min = Math.Min(min, match.Start);\n            }\n        }\n        return min;",
    "        long rotations = 0;\n        long length = str.Length;\n        long[] next = new long[length];\n        long[] prev = new long[length];\n        for (long i = 0; i < length; i++) {\n            next[i] = (i + 1) % length;\n            prev[i] = (i + length - 1) % length;\n        }\n        long i = 0;\n        long j = 1;\n        while (i < length) {\n            long k = next[i];\n            if (str[(int)i] == str[(int)k]) {\n                next[i] = next[k];\n                prev[k] = i;\n                j++;\n            } else {\n                i = k;\n            }\n        }\n        if (j == length) {\n            return 0;\n        }\n        long p = prev[0];\n        long q = next[0];\n        while (p != q) {\n            p = prev[p];\n            q = next[q];\n        }\n        long cycle_length = 0;\n        do {\n            cycle_length++;\n            q = next[q];\n        } while (p != q);\n        rotations = length - cycle_length;\n        return rotations;",
    "        var len = str.Length;\n        var str2 = str + str;\n        var z = new long[len * 2];\n        z[0] = len;\n        var l = 0;\n        var r = 0;\n        for (var i = 1; i < len * 2; i++) {\n            if (i > r) {\n                l = r = i;\n                while (r < len * 2 && str2[r] == str2[r - l]) {\n                    r++;\n                }\n                z[i] = r - l;\n                r--;\n            } else {\n                var k = i - l;\n                if (z[k] < r - i + 1) {\n                    z[i] = z[k];\n                } else {\n                    l = i;\n                    while (r < len * 2 && str2[r] == str2[r - l]) {\n                        r++;\n                    }\n                    z[i] = r - l;\n                    r--;\n                }\n            }\n        }\n        for (var i = 1; i < len; i++) {\n            if (z[i] == len) {\n                return i;\n            }\n        }\n        return len;",
    "        long rotations = 1;\n        long min = str.Length;\n        for (long i = 0; i < str.Length; i++) {\n            string rotated = str.Substring((int)i) + str.Substring(0, (int)i);\n            long diff = 0;\n            for (long j = 0; j < str.Length; j++) {\n                if (str[(int)j] != rotated[(int)j]) {\n                    diff++;\n                }\n            }\n            if (diff < min) {\n                min = diff;\n                rotations = i + 1;\n            }\n        }\n        return rotations;",
    "        long min = long.MaxValue;\n        for (long i = 1; i < str.Length; i++) {\n            long rotations = i;\n            string rotated = str.Substring((int)i) + str.Substring(0, (int)i);\n            if (rotated == str) {\n                min = Math.Min(min, rotations);\n            }\n        }\n        return min;",
    "        var s = str.ToCharArray();\n        var n = s.Length;\n        var lps = new int[n];\n        var i = 1;\n        var len = 0;\n        lps[0] = 0;\n        while (i < n) {\n            if (s[i] == s[len]) {\n                len++;\n                lps[i] = len;\n                i++;\n            } else {\n                if (len != 0) {\n                    len = lps[len - 1];\n                } else {\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n        var res = n - lps[n - 1];\n        return res;",
    "        long rotations = 0;\n        long min = long.MaxValue;\n        for (int i = 0; i < str.Length; i++) {\n            string rotated = str.Substring(i) + str.Substring(0, i);\n            if (rotated == str) {\n                return rotations;\n            }\n            rotations++;\n        }\n        return -1;",
    "        long rotations = 0;\n        int n = str.Length;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '1') {\n                rotations += n - i;\n            }\n        }\n        return rotations;",
    "        // Write your code here\n        long n = str.Length;\n        long[] count = new long[256];\n        long[] cum_count = new long[256];\n        long[] index = new long[256];\n        for (long i = 0; i < n; i++) {\n            count[str[(int)i]]++;\n        }\n        for (long i = 1; i < 256; i++) {\n            cum_count[i] = cum_count[i - 1] + count[i - 1];\n        }\n        for (long i = 0; i < n; i++) {\n            index[str[(int)i]] = cum_count[str[(int)i]]++;\n        }\n        long res = 0;\n        for (long i = 0; i < n; i++) {\n            res += i - index[str[(int)i]];\n        }\n        return res;",
    "        // Write your code here\n        long min = long.MaxValue;\n        for (int i = 0; i < str.Length; i++) {\n            string rotated = str.Substring(i) + str.Substring(0, i);\n            long rotations = 0;\n            for (int j = 0; j < str.Length; j++) {\n                if (str[j] != rotated[j]) {\n                    rotations++;\n                }\n            }\n            if (rotations < min) {\n                min = rotations;\n            }\n        }\n        return min;",
    "        long rotations = 0;\n        long strLen = str.Length;\n        for (long i = 0; i < strLen; i++) {\n            if (str[(int)i] == '1') {\n                rotations += i;\n            }\n        }\n        return rotations;",
    "        var sb = new StringBuilder(str);\n        var min = sb.ToString();\n        var minRotations = 0;\n        for (var i = 0; i < str.Length; i++) {\n            sb.Append(sb[0]);\n            sb.Remove(0, 1);\n            if (sb.ToString().CompareTo(min) < 0) {\n                min = sb.ToString();\n                minRotations = i + 1;\n            }\n        }\n        return minRotations;",
    "        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i;\n                break;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        long maxRotations = str.Length;\n        string rotatedStr = str;\n        while (rotations < maxRotations) {\n            if (str == rotatedStr) {\n                return rotations;\n            }\n            rotatedStr = rotatedStr.Substring(1) + rotatedStr[0];\n            rotations++;\n        }\n        return -1;",
    "        if (str.Length == 0) {\n            return 0;\n        }\n        long min = long.MaxValue;\n        for (long i = 0; i < str.Length; i++) {\n            long count = 0;\n            for (long j = 0; j < str.Length; j++) {\n                if (str[(int)((i + j) % str.Length)] != str[(int)j]) {\n                    count++;\n                }\n            }\n            min = Math.Min(min, count);\n        }\n        return min;",
    "        // Find the minimum number of rotations required to get the same string.\n        // If the string is not a rotation of itself, return 0.\n        // Example:\n        //    FindRotations(\"abc\") == 0\n        //    FindRotations(\"abcabc\") == 3\n        //    FindRotations(\"abcabcabc\") == 9\n        //    FindRotations(\"aaaa\") == 1\n        //    FindRotations(\"abcab\") == 0\n        //    FindRotations(\"abcabcab\") == 0\n        //    FindRotations(\"abcabcabcab\") == 0\n        //    FindRotations(\"abcabcabcabc\") == 12\n        //    FindRotations(\"abcabcabcabcabc\") == 15\n        //    FindRotations(\"abcabcabcabcabcabc\") == 18\n        //    FindRotations(\"abcabcabcabcabcabcabc\") == 21\n        //    FindRotations(\"abcabcabcabcabcabcabcabc\") == 24\n        //    FindRotations(\"abcabcabcabcabcabcabcabcabc\") == 27\n        //    FindRotations(\"abcabcabcabcabcabcabcabcabcabc\") == 30\n        //    FindRotations(\"abcabcabcabcabcabcabcabcabcabcabc\") == 33\n        //    FindRotations(\"abcabcabcabcabcabcabcabcabcabcabcabc\") == 36\n        //    FindRotations(\"abcabcabcabcabcabcabcabcabcabcabcabcabc\") == 39\n        //    FindRotations(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\") == 42\n        //    FindRotations(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\") == 45\n        //    FindRotations(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\") == 48\n        //    FindRotations(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\") == 51\n        //    FindRotations(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\") == 54\n        //    FindRotations(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\") == 57\n        //    FindRotations(\"abcabcabcabcabcabcabcabcabcabcabcabcabc",
    "        var s = str + str;\n        var len = str.Length;\n        var min = len;\n        var min_i = 0;\n        for (int i = 0; i < len; i++) {\n            var count = 0;\n            for (int j = 0; j < len; j++) {\n                if (s[i + j] != str[j]) {\n                    count++;\n                }\n            }\n            if (count < min) {\n                min = count;\n                min_i = i;\n            }\n        }\n        return min_i;",
    "        var sb = new StringBuilder(str);\n        var min = long.MaxValue;\n        for (int i = 0; i < str.Length; i++) {\n            sb.Append(sb[0]);\n            sb.Remove(0, 1);\n            var rot = sb.ToString();\n            if (rot == str) {\n                return i + 1;\n            }\n        }\n        return -1;",
    "        long rotations = 0;\n        string str2 = str + str;\n        for (int i = 1; i < str.Length; i++) {\n            if (str2.Substring(i, str.Length) == str) {\n                rotations = i;\n                break;\n            }\n        }\n        return rotations;",
    "        var sb = new StringBuilder(str);\n        var min = str;\n        for (int i = 0; i < str.Length; i++) {\n            sb.Append(sb[0]);\n            sb.Remove(0, 1);\n            if (sb.ToString() < min) {\n                min = sb.ToString();\n            }\n        }\n        return str.Length - min.IndexOf(str);",
    "        long rotations = 0;\n        int n = str.Length;\n        int[] count = new int[n];\n        int i = 0;\n        int j = 1;\n        count[0] = 1;\n        while (i < n && j < n) {\n            if (str[i] == str[j]) {\n                count[j] = count[i] + 1;\n                i++;\n                j++;\n            } else {\n                count[j] = 1;\n                i = 0;\n                j++;\n            }\n        }\n        int max = count.Max();\n        rotations = n - max;\n        return rotations;",
    "        long rotations = 0;\n        long minRotations = str.Length;\n        for (long i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations = i;\n                break;\n            }\n        }\n        if (rotations == 0) {\n            return 0;\n        }\n        for (long i = rotations; i < str.Length; i++) {\n            if (str[i] == '0') {\n                rotations++;\n            }\n        }\n        minRotations = Math.Min(minRotations, rotations);\n        for (long i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                rotations++;\n            }\n            else {\n                rotations--;\n            }\n            minRotations = Math.Min(minRotations, rotations);\n        }\n        return minRotations;",
    "        long rotations = 0;\n        long length = str.Length;\n        for (long i = 0; i < length; i++) {\n            if (str[(int)i] == '1') {\n                rotations += i;\n                rotations += length - i - 1;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        int length = str.Length;\n        for (int i = 0; i < length; i++) {\n            if (str[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        int len = str.Length;\n        for (int i = 0; i < len; i++) {\n            if (str[i] == '1') {\n                rotations += (len - i - 1);\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        int len = str.Length;\n        for (int i = 0; i < len; i++) {\n            if (str[i] == '1') {\n                rotations += (len - i - 1);\n                rotations += i;\n            }\n        }\n        return rotations;",
    "        long rotations = 1;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '0') {\n                rotations++;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        string str_rotated = str;\n        for (int i = 1; i < str.Length; i++) {\n            str_rotated = str_rotated.Substring(1) + str_rotated[0];\n            if (str_rotated == str) {\n                rotations = i;\n                break;\n            }\n        }\n        return rotations;",
    "        // Find the minimum number of rotations required to get the same string.\n        // If the string is not rotated, return 0.\n        // If the string is rotated, return the number of rotations.\n        // The string is rotated by removing the first character and appending it to the end.\n        // For example, the string \"abcde\" is rotated to \"bcdea\" by removing the first character and appending it to the end.\n        // The string \"abcde\" is rotated to \"cdeab\" by removing the first two characters and appending them to the end.\n        // The string \"abcde\" is rotated to \"deabc\" by removing the first three characters and appending them to the end.\n        // The string \"abcde\" is rotated to \"eabcd\" by removing the first four characters and appending them to the end.\n        // The string \"abcde\" is rotated to \"abcde\" by removing the first five characters and appending them to the end.\n        // The string \"abcde\" is rotated to \"bcdea\" by removing the first six characters and appending them to the end.\n        // The string \"abcde\" is rotated to \"cdeab\" by removing the first seven characters and appending them to the end.\n        // The string \"abcde\" is rotated to \"deabc\" by removing the first eight characters and appending them to the end.\n        // The string \"abcde\" is rotated to \"eabcd\" by removing the first nine characters and appending them to the end.\n        // The string \"abcde\" is rotated to \"abcde\" by removing the first ten characters and appending them to the end.\n        // The string \"abcde\" is rotated to \"bcdea\" by removing the first eleven characters and appending them to the end.\n        // The string \"abcde\" is rotated to \"cdeab\" by removing the first twelve characters and appending them to the end.\n        // The string \"abcde\" is rotated to \"deabc\" by removing the first thirteen characters and appending them to the end.\n        // The string \"abcde\" is rotated to \"eabcd\" by removing the first fourteen characters and appending them to the end.\n        // The string \"abcde\" is rotated to \"abcde",
    "        long rotations = 0;\n        string str2 = str + str;\n        for (int i = 1; i < str.Length; i++) {\n            string str3 = str2.Substring(i, str.Length);\n            if (str3 == str) {\n                rotations = i;\n                break;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        // Write your code here\n        return rotations;",
    "        long rotations = 0;\n        int len = str.Length;\n        for (int i = 0; i < len; i++) {\n            string rotated = str.Substring(i, len - i) + str.Substring(0, i);\n            if (rotated == str) {\n                rotations = len - i;\n                break;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        string str2 = str + str;\n        for (int i = 1; i < str.Length; i++) {\n            if (str2.Substring(i, str.Length) == str) {\n                rotations = i;\n                break;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        string str2 = str;\n        for (long i = 1; i < str.Length; i++) {\n            str2 = str2.Substring(1) + str2[0];\n            if (str2 == str) {\n                rotations = i;\n                break;\n            }\n        }\n        return rotations;",
    "        // Write your code here\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                count++;\n            }\n        }\n        return count;",
    "        long rotations = 0;\n        while (rotations < str.Length) {\n            if (str.Substring(0, str.Length - rotations) == str.Substring(rotations, str.Length - rotations)) {\n                return rotations;\n            }\n            rotations++;\n        }\n        return rotations;",
    "        // TODO: Implement this function\n        // return the number of rotations\n        int n = str.Length;\n        if (n == 0) return 0;\n        str += str;\n        int[] lps = new int[n * 2];\n        lps[0] = 0;\n        int len = 0;\n        int i = 1;\n        while (i < n * 2) {\n            if (str[i] == str[len]) {\n                len++;\n                lps[i] = len;\n                i++;\n            } else {\n                if (len != 0) {\n                    len = lps[len - 1];\n                } else {\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n        return n - lps[n * 2 - 1];",
    "        int n = str.Length;\n        int[] count = new int[256];\n        int[] cumCount = new int[256];\n        int i;\n        for (i = 0; i < n; i++) {\n            count[str[i]]++;\n        }\n        for (i = 1; i < 256; i++) {\n            cumCount[i] = cumCount[i - 1] + count[i - 1];\n        }\n        int[] index = new int[n];\n        for (i = 0; i < n; i++) {\n            index[cumCount[str[i]]++] = i;\n        }\n        int res = n;\n        for (i = 0; i < n; i++) {\n            int next = index[i];\n            int j = 0;\n            while (j < n && str[(next + j) % n] == str[(i + j) % n]) {\n                j++;\n            }\n            res = Math.Min(res, j == n ? 0 : n - j);\n        }\n        return res;",
    "        long rotations = 0;\n        // Write your code here\n        long len = str.Length;\n        long[] next = new long[len];\n        long[] prev = new long[len];\n        for (long i = 0; i < len; i++) {\n            next[i] = (i + 1) % len;\n            prev[i] = (i - 1 + len) % len;\n        }\n        long cur = 0;\n        while (true) {\n            long next_cur = next[cur];\n            if (str[next_cur] == str[cur]) {\n                next[prev[cur]] = next[cur];\n                prev[next[cur]] = prev[cur];\n                cur = next_cur;\n            } else {\n                cur = next[cur];\n            }\n            rotations++;\n            if (cur == 0) {\n                break;\n            }\n        }\n        return rotations;",
    "        // Write your code here\n        long rotations = 0;\n        long minRotations = str.Length;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations++;\n            }\n            if (str[i] == '0') {\n                rotations = 0;\n            }\n            minRotations = Math.Min(minRotations, rotations);\n        }\n        return minRotations;",
    "        int n = str.Length;\n        int[] count = new int[256];\n        int i;\n        for (i = 0; i < n; i++)\n            count[str[i]]++;\n        int index = -1;\n        for (i = 0; i < n; i++) {\n            if (count[str[i]] == 1) {\n                index = i;\n                break;\n            }\n        }\n        return (index == -1) ? -1 : (index + 1) % n;",
    "        // Write your code here\n        return 0;",
    "        // Write your code here\n        long rotations = 0;\n        long max = str.Length;\n        for (long i = 0; i < max; i++) {\n            string s = str.Substring(i, (int)max - (int)i) + str.Substring(0, (int)i);\n            if (str == s) {\n                rotations = i;\n                break;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        long len = str.Length;\n        if (len == 0) {\n            return 0;\n        }\n        if (len == 1) {\n            return 1;\n        }\n        for (long i = 0; i < len; i++) {\n            if (str[0] == str[i]) {\n                rotations++;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        var len = str.Length;\n        var hash = new long[len];\n        var pow = new long[len];\n        var p = 31;\n        var m = 1000000007;\n        pow[0] = 1;\n        for (var i = 1; i < len; i++) {\n            pow[i] = (pow[i - 1] * p) % m;\n        }\n        for (var i = 0; i < len; i++) {\n            hash[i] = (str[i] - 'a' + 1) * pow[i];\n            if (i > 0) {\n                hash[i] = (hash[i] + hash[i - 1]) % m;\n            }\n        }\n        var min = long.MaxValue;\n        for (var i = 0; i < len; i++) {\n            var h = hash[len - 1];\n            if (i > 0) {\n                h = (h - hash[i - 1] + m) % m;\n            }\n            h = (h * pow[i]) % m;\n            if (h < min) {\n                min = h;\n            }\n        }\n        return min;",
    "        long rotations = 0;\n        for (int i = 1; i < str.Length; i++) {\n            if (str[i] != str[0]) {\n                rotations += 1;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        string str2 = str;\n        for (int i = 0; i < str.Length; i++) {\n            str2 = str2.Substring(1) + str2[0];\n            if (str2 == str) {\n                rotations = i + 1;\n                break;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        // Write your code here\n        if (str.Length == 1) {\n            return 0;\n        }\n        long min = long.MaxValue;\n        for (long i = 0; i < str.Length; i++) {\n            long rotations = 0;\n            for (long j = 0; j < str.Length; j++) {\n                if (str[(int)((i + j) % str.Length)] != str[(int)j]) {\n                    rotations++;\n                }\n            }\n            min = Math.Min(min, rotations);\n        }\n        return min;",
    "        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        var sb = new StringBuilder(str);\n        var min = long.MaxValue;\n        for (long i = 1; i < str.Length; i++) {\n            sb.Append(sb[0]);\n            sb.Remove(0, 1);\n            var cur = sb.ToString();\n            var curHash = cur.GetHashCode();\n            if (curHash < min) {\n                min = curHash;\n            }\n        }\n        return min;",
    "        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        long min = long.MaxValue;\n        for (long i = 1; i < str.Length; i++) {\n            long rotations = 0;\n            for (long j = 0; j < str.Length; j++) {\n                if (str[j] != str[(j + i) % str.Length]) {\n                    rotations++;\n                }\n            }\n            min = Math.Min(min, rotations);\n        }\n        return min;",
    "        // Write your code here\n        long rotations = 0;\n        long min = long.MaxValue;\n        for (int i = 0; i < str.Length; i++) {\n            string newStr = str.Substring(i) + str.Substring(0, i);\n            if (newStr == str) {\n                return rotations;\n            }\n            rotations++;\n        }\n        return rotations;",
    "        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += (i + 1);\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        long min = long.MaxValue;\n        for (long i = 1; i < str.Length; i++) {\n            string rotated = str.Substring(i) + str.Substring(0, i);\n            if (rotated == str) {\n                min = Math.Min(min, i);\n            }\n        }\n        return min;",
    "        long rotations = 0;\n        string str2 = str + str;\n        for (int i = 1; i < str.Length; i++) {\n            if (str2.Substring(i, str.Length) == str) {\n                rotations = i;\n                break;\n            }\n        }\n        return rotations;",
    "        if (str.Length == 0) return 0;\n        long minRotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                minRotations = i;\n                break;\n            }\n        }\n        return minRotations;",
    "        var sb = new StringBuilder(str);\n        var min = long.MaxValue;\n        for (var i = 0; i < str.Length; i++) {\n            sb.Append(sb[0]);\n            sb.Remove(0, 1);\n            var newStr = sb.ToString();\n            if (newStr == str) {\n                return i + 1;\n            }\n        }\n        return -1;",
    "        long rotations = 0;\n        for (long i = 0; i < str.Length; i++) {\n            if (str[0] == str[i]) {\n                string rotated = str.Substring(i) + str.Substring(0, i);\n                if (rotated == str) {\n                    rotations = i;\n                    break;\n                }\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        for (long i = 1; i < str.Length; i++) {\n            if (str[i] == str[0]) {\n                string sub = str.Substring((int)i);\n                string sub2 = str.Substring(0, (int)i);\n                if (sub + sub2 == str) {\n                    rotations = i;\n                    break;\n                }\n            }\n        }\n        return rotations;",
    "        var n = str.Length;\n        var s = str + str;\n        var z = new int[n];\n        var l = 0;\n        var r = 0;\n        for (var i = 1; i < n; i++) {\n            if (i > r) {\n                l = r = i;\n                while (r < n && s[r - l] == s[r]) {\n                    r++;\n                }\n                z[i] = r - l;\n                r--;\n            } else {\n                var k = i - l;\n                if (z[k] < r - i + 1) {\n                    z[i] = z[k];\n                } else {\n                    l = i;\n                    while (r < n && s[r - l] == s[r]) {\n                        r++;\n                    }\n                    z[i] = r - l;\n                    r--;\n                }\n            }\n        }\n        for (var i = 1; i < n; i++) {\n            if (z[i] == n) {\n                return i;\n            }\n        }\n        return 0;",
    "        long rotations = 0;\n        string str1 = str;\n        string str2 = str;\n        while (rotations < str.Length) {\n            str1 = str1.Substring(1) + str1[0];\n            str2 = str2[str2.Length - 1] + str2.Substring(0, str2.Length - 1);\n            if (str1 == str) {\n                return rotations;\n            }\n            if (str2 == str) {\n                return rotations;\n            }\n            rotations++;\n        }\n        return rotations;",
    "        int n = str.Length;\n        int[] count = new int[256];\n        for (int i = 0; i < n; i++) {\n            count[str[i]]++;\n        }\n        int index = -1;\n        for (int i = 0; i < n; i++) {\n            if (count[str[i]] == 1) {\n                index = i;\n                break;\n            }\n        }\n        return (index == -1) ? -1 : (index + 1) % n;",
    "        var s = str + str;\n        var n = str.Length;\n        var z = new int[2 * n];\n        z[0] = 0;\n        var l = 0;\n        var r = 0;\n        for (int i = 1; i < 2 * n; i++) {\n            if (i > r) {\n                l = i;\n                r = i;\n                while (r < 2 * n && s[r - l] == s[r]) {\n                    r++;\n                }\n                z[i] = r - l;\n                r--;\n            } else {\n                var k = i - l;\n                if (z[k] < r - i + 1) {\n                    z[i] = z[k];\n                } else {\n                    l = i;\n                    while (r < 2 * n && s[r - l] == s[r]) {\n                        r++;\n                    }\n                    z[i] = r - l;\n                    r--;\n                }\n            }\n        }\n        var ans = n;\n        for (int i = 1; i < n; i++) {\n            if (z[i] == n) {\n                ans = Math.Min(ans, i);\n            }\n        }\n        return ans;",
    "        long minRotations = 0;\n        for (long i = 1; i < str.Length; i++) {\n            if (str.Substring(i) + str.Substring(0, i) == str) {\n                minRotations = i;\n                break;\n            }\n        }\n        return minRotations;",
    "        long min = 0;\n        for (long i = 1; i < str.Length; i++) {\n            if (str.Substring(i) + str.Substring(0, i) < str) {\n                min = i;\n                break;\n            }\n        }\n        return min;",
    "        // Your code here\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                count++;\n            }\n        }\n        return count;",
    "        // Write your code here\n        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += (i + 1);\n            }\n        }\n        return rotations;",
    "        // Find the smallest rotation of the string\n        string min = str;\n        for (int i = 0; i < str.Length; i++) {\n            str = str.Substring(1) + str[0];\n            if (str.CompareTo(min) < 0) {\n                min = str;\n            }\n        }\n        // Find the number of rotations to get back to the original string\n        long rotations = 0;\n        while (str != min) {\n            str = str.Substring(1) + str[0];\n            rotations++;\n        }\n        return rotations;",
    "        long rotations = 0;\n        long minRotations = str.Length;\n        for (long i = 0; i < str.Length; i++) {\n            if (str[0] == str[i]) {\n                rotations = 0;\n                for (long j = 0; j < str.Length; j++) {\n                    if (str[j] != str[(j + i) % str.Length]) {\n                        rotations++;\n                    }\n                }\n                minRotations = Math.Min(minRotations, rotations);\n            }\n        }\n        return minRotations;",
    "        var s = str + str;\n        var n = str.Length;\n        var z = new int[2 * n];\n        z[0] = 0;\n        var l = 0;\n        var r = 0;\n        for (var i = 1; i < 2 * n; i++) {\n            if (i > r) {\n                l = r = i;\n                while (r < 2 * n && s[r - l] == s[r]) {\n                    r++;\n                }\n                z[i] = r - l;\n                r--;\n            } else {\n                var k = i - l;\n                if (z[k] < r - i + 1) {\n                    z[i] = z[k];\n                } else {\n                    l = i;\n                    while (r < 2 * n && s[r - l] == s[r]) {\n                        r++;\n                    }\n                    z[i] = r - l;\n                    r--;\n                }\n            }\n        }\n        var min = n;\n        for (var i = 1; i < n; i++) {\n            if (z[i] == n) {\n                min = Math.Min(min, i);\n            }\n        }\n        return min;",
    "        long rotations = 0;\n        int len = str.Length;\n        for (int i = 0; i < len; i++) {\n            if (str[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        // Write your code here\n        long rotations = 0;\n        for (long i = 1; i < str.Length; i++) {\n            if (str.Substring(i) + str.Substring(0, i) == str) {\n                rotations = i;\n                break;\n            }\n        }\n        return rotations;",
    "        // Write your code here\n        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += 1;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        long rotations = 1;\n        long min = str.Length;\n        for (long i = 0; i < str.Length; i++) {\n            string rotated = str.Substring((int)i) + str.Substring(0, (int)i);\n            if (rotated == str) {\n                return rotations;\n            }\n            rotations++;\n        }\n        return min;",
    "        long rotations = 0;\n        for (long i = 0; i < str.Length; i++) {\n            if (str[0] != str[i]) {\n                rotations++;\n            }\n        }\n        return rotations;",
    "        // Write your code here\n        return 0;",
    "        // Write your code here\n        long rotations = 0;\n        long n = str.Length;\n        for (long i = 0; i < n; i++) {\n            if (str[(int)i] == '1') {\n                rotations += (i + 1) % n;\n                rotations += n - 1;\n            }\n        }\n        return rotations;",
    "        // Write your code here\n        long rotations = 0;\n        var str_len = str.Length;\n        var str_arr = str.ToCharArray();\n        var str_arr_rev = str_arr.Reverse().ToArray();\n        var str_rev = new string(str_arr_rev);\n        var str_rev_len = str_rev.Length;\n        var str_rev_arr = str_rev.ToCharArray();\n        var str_rev_arr_rev = str_rev_arr.Reverse().ToArray();\n        var str_rev_rev = new string(str_rev_arr_rev);\n        var str_rev_rev_len = str_rev_rev.Length;\n        var str_rev_rev_arr = str_rev_rev.ToCharArray();\n        var str_rev_rev_arr_rev = str_rev_rev_arr.Reverse().ToArray();\n        var str_rev_rev_rev = new string(str_rev_rev_arr_rev);\n        var str_rev_rev_rev_len = str_rev_rev_rev.Length;\n        var str_rev_rev_rev_arr = str_rev_rev_rev.ToCharArray();\n        var str_rev_rev_rev_arr_rev = str_rev_rev_rev_arr.Reverse().ToArray();\n        var str_rev_rev_rev_rev = new string(str_rev_rev_rev_arr_rev);\n        var str_rev_rev_rev_rev_len = str_rev_rev_rev_rev.Length;\n        var str_rev_rev_rev_rev_arr = str_rev_rev_rev_rev.ToCharArray();\n        var str_rev_rev_rev_rev_arr_rev = str_rev_rev_rev_rev_arr.Reverse().ToArray();\n        var str_rev_rev_rev_rev_rev = new string(str_rev_rev_rev_rev_arr_rev);\n        var str_rev_rev_rev_rev_rev_len = str_rev_rev_rev_rev_rev.Length;\n        var str_rev",
    "        if (str.Length == 0) {\n            return 0;\n        }\n        var s = str + str;\n        var z = new int[s.Length];\n        z[0] = s.Length;\n        int l = 0, r = 0;\n        for (int i = 1; i < s.Length; i++) {\n            if (i > r) {\n                l = r = i;\n                while (r < s.Length && s[r - l] == s[r]) {\n                    r++;\n                }\n                z[i] = r - l;\n                r--;\n            } else {\n                int k = i - l;\n                if (z[k] < r - i + 1) {\n                    z[i] = z[k];\n                } else {\n                    l = i;\n                    while (r < s.Length && s[r - l] == s[r]) {\n                        r++;\n                    }\n                    z[i] = r - l;\n                    r--;\n                }\n            }\n        }\n        for (int i = 1; i < s.Length; i++) {\n            if (z[i] == str.Length) {\n                return i;\n            }\n        }\n        return -1;",
    "        long rotations = 0;\n        int n = str.Length;\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '1') {\n                rotations += i;\n                rotations %= n;\n            }\n        }\n        return rotations;",
    "        // Write your code here\n        return 0;",
    "        long rotations = 0;\n        for (int i = 1; i < str.Length; i++) {\n            if (str[i] != str[0]) {\n                continue;\n            }\n            string rotated = str.Substring(i) + str.Substring(0, i);\n            if (rotated == str) {\n                rotations = i;\n                break;\n            }\n        }\n        return rotations;",
    "        long min = long.MaxValue;\n        for (long i = 1; i < str.Length; i++) {\n            string s = str.Substring(i) + str.Substring(0, i);\n            if (s == str) {\n                min = Math.Min(min, i);\n            }\n        }\n        return min;",
    "        long rotations = 0;\n        long min = long.MaxValue;\n        for (int i = 0; i < str.Length; i++) {\n            rotations = 0;\n            for (int j = 0; j < str.Length; j++) {\n                if (str[j] != str[(j + i) % str.Length]) {\n                    rotations++;\n                }\n            }\n            if (rotations < min) {\n                min = rotations;\n            }\n        }\n        return min;",
    "        long rotations = 0;\n        for (long i = 0; i < str.Length; i++) {\n            if (str[(int)i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        int len = str.Length;\n        for (int i = 0; i < len; i++) {\n            if (str[i] == '1') {\n                rotations += i;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        for (long i = 0; i < str.Length; i++) {\n            if (str[0] != str[i]) {\n                continue;\n            }\n            string rotated = str.Substring(i) + str.Substring(0, i);\n            if (str == rotated) {\n                rotations = i;\n                break;\n            }\n        }\n        return rotations;",
    "        // Write your code here\n        long count = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                count++;\n            }\n        }\n        return count;",
    "        if (str.Length == 0) return 0;\n        long rotations = 0;\n        int i = 0;\n        while (i < str.Length) {\n            if (str[i] == '0') {\n                i++;\n            } else {\n                break;\n            }\n        }\n        if (i == str.Length) return 0;\n        int j = i;\n        while (j < str.Length) {\n            if (str[j] == '1') {\n                j++;\n            } else {\n                break;\n            }\n        }\n        if (j == str.Length) return 0;\n        rotations = j - i;\n        return rotations;",
    "        long rotations = 0;\n        long length = str.Length;\n        long i = 0;\n        long j = 1;\n        while (i < length && j < length) {\n            long k = 0;\n            while (k < length && str[(int)((i + k) % length)] == str[(int)((j + k) % length)]) {\n                k++;\n            }\n            if (k == length) {\n                return rotations;\n            }\n            if (str[(int)((i + k) % length)] > str[(int)((j + k) % length)]) {\n                i = i + k + 1;\n                if (i == j) {\n                    i++;\n                }\n            } else {\n                j = j + k + 1;\n                if (i == j) {\n                    j++;\n                }\n            }\n            rotations++;\n        }\n        return rotations;",
    "        if (str.Length == 0) return 0;\n        int[] suffixArray = SuffixArray(str);\n        int[] lcpArray = LCPArray(str, suffixArray);\n        int minRotation = str.Length;\n        for (int i = 0; i < lcpArray.Length; i++) {\n            int rotation = suffixArray[i] + str.Length - suffixArray[(i + 1) % suffixArray.Length];\n            if (rotation < minRotation) minRotation = rotation;\n        }\n        return minRotation;",
    "        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        var sb = new StringBuilder(str);\n        var min = long.MaxValue;\n        for (int i = 0; i < str.Length; i++) {\n            sb.Append(sb[0]);\n            sb.Remove(0, 1);\n            if (sb.ToString() == str) {\n                min = Math.Min(min, i + 1);\n            }\n        }\n        return min;",
    "        // Write your code here\n        long rotations = 0;\n        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '1') {\n                rotations += 1;\n            }\n        }\n        return rotations;",
    "        var s = str + str;\n        var n = str.Length;\n        var z = new int[n];\n        z[0] = n;\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i > r) {\n                l = r = i;\n                while (r < n && s[r - l] == s[r]) r++;\n                z[i] = r - l;\n                r--;\n            } else {\n                int k = i - l;\n                if (z[k] < r - i + 1) {\n                    z[i] = z[k];\n                } else {\n                    l = i;\n                    while (r < n && s[r - l] == s[r]) r++;\n                    z[i] = r - l;\n                    r--;\n                }\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            if (z[i] == n) return i;\n        }\n        return -1;",
    "        long rotations = 0;\n        string str2 = str + str;\n        for (int i = 0; i < str.Length; i++) {\n            if (str2.Substring(i, str.Length) == str) {\n                rotations = i;\n                break;\n            }\n        }\n        return rotations;",
    "        long rotations = 0;\n        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] == '1') {\n                rotations += i + 1;\n            }\n        }\n        return rotations;",
    "        long min = long.MaxValue;\n        for (long i = 0; i < str.Length; i++) {\n            long rotations = 0;\n            for (long j = 0; j < str.Length; j++) {\n                if (str[(int)((i + j) % str.Length)] != str[(int)j]) {\n                    rotations++;\n                }\n            }\n            min = Math.Min(min, rotations);\n        }\n        return min;",
    "        long min = long.MaxValue;\n        for (long i = 0; i < str.Length; i++) {\n            string newStr = str.Substring((int)i) + str.Substring(0, (int)i);\n            if (newStr == str) {\n                return i;\n            }\n        }\n        return -1;",
    "        long rotations = 0;\n        long min = long.MaxValue;\n        for (int i = 0; i < str.Length; i++) {\n            rotations = 0;\n            for (int j = 0; j < str.Length; j++) {\n                if (str[j] != str[(i + j) % str.Length]) {\n                    rotations++;\n                }\n            }\n            if (rotations < min) {\n                min = rotations;\n            }\n        }\n        return min;",
    "        long rotations = 0;\n        long len = str.Length;\n        long i = 0;\n        while (i < len) {\n            if (str[(int)i] == '1') {\n                break;\n            }\n            i++;\n        }\n        if (i == len) {\n            return rotations;\n        }\n        long j = i;\n        while (j < len) {\n            if (str[(int)j] == '0') {\n                break;\n            }\n            j++;\n        }\n        if (j == len) {\n            return rotations;\n        }\n        rotations = j - i;\n        return rotations;"
  ]
}