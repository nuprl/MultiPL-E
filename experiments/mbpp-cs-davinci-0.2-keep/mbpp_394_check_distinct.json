{
  "name": "mbpp_394_check_distinct",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check if given tuple contains no duplicates.\n    public static bool CheckDistinct(long test_tup) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckDistinct((long)Tuple.Create(1L, 4L, 5L, 6L, 1L, 4L)) == (false));\n    Debug.Assert(CheckDistinct((long)Tuple.Create(1L, 4L, 5L, 6L)) == (true));\n    Debug.Assert(CheckDistinct((long)Tuple.Create(2L, 3L, 4L, 5L, 6L)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var tup = test_tup;\n        var tup_set = new HashSet<long>();\n        while (tup > 0) {\n            var digit = tup % 10;\n            if (tup_set.Contains(digit)) {\n                return false;\n            }\n            tup_set.Add(digit);\n            tup /= 10;\n        }\n        return true;",
    "        var test_tup_str = test_tup.ToString();\n        var test_tup_str_set = new HashSet<char>();\n        foreach (var c in test_tup_str) {\n            if (test_tup_str_set.Contains(c)) {\n                return false;\n            }\n            test_tup_str_set.Add(c);\n        }\n        return true;",
    "        // Convert to string\n        string test_str = test_tup.ToString();\n        // Check for duplicates\n        for (int i = 0; i < test_str.Length; i++) {\n            for (int j = i + 1; j < test_str.Length; j++) {\n                if (test_str[i] == test_str[j]) {\n                    return false;\n                }\n            }\n        }\n        return true;",
    "        var tup = test_tup.ToString();\n        var set = new HashSet<char>();\n        foreach (var c in tup) {\n            if (set.Contains(c)) {\n                return false;\n            }\n            set.Add(c);\n        }\n        return true;",
    "        long[] tup = new long[4];\n        for (int i = 0; i < 4; i++) {\n            tup[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        return tup[0] != tup[1] && tup[0] != tup[2] && tup[0] != tup[3] && tup[1] != tup[2] && tup[1] != tup[3] && tup[2] != tup[3];",
    "        var tup = new Tuple<int, int, int, int, int, int, int, Tuple<int>>(\n            (int)(test_tup & 0xF),\n            (int)((test_tup >> 4) & 0xF),\n            (int)((test_tup >> 8) & 0xF),\n            (int)((test_tup >> 12) & 0xF),\n            (int)((test_tup >> 16) & 0xF),\n            (int)((test_tup >> 20) & 0xF),\n            (int)((test_tup >> 24) & 0xF),\n            new Tuple<int>((int)((test_tup >> 28) & 0xF)));\n        return tup.Distinct().Count() == 8;",
    "        long mask = 0;\n        for (int i = 0; i < 9; i++) {\n            long digit = test_tup % 10;\n            if ((mask & (1 << digit)) != 0) {\n                return false;\n            }\n            mask |= (1 << digit);\n            test_tup /= 10;\n        }\n        return true;",
    "        var test_list = new List<long>();\n        while (test_tup > 0) {\n            test_list.Add(test_tup % 10);\n            test_tup /= 10;\n        }\n        test_list.Sort();\n        for (int i = 1; i < test_list.Count; i++) {\n            if (test_list[i] == test_list[i - 1]) {\n                return false;\n            }\n        }\n        return true;",
    "        long[] digits = new long[10];\n        while (test_tup > 0) {\n            long digit = test_tup % 10;\n            if (digits[digit] > 0) {\n                return false;\n            }\n            digits[digit]++;\n            test_tup /= 10;\n        }\n        return true;",
    "        var tup = new Tuple<int, int, int>(\n            (int)(test_tup / 1000000),\n            (int)(test_tup / 1000 % 1000),\n            (int)(test_tup % 1000));\n        return tup.Item1 != tup.Item2 && tup.Item1 != tup.Item3 && tup.Item2 != tup.Item3;",
    "        var test_str = test_tup.ToString();\n        var test_set = new HashSet<char>();\n        foreach (var c in test_str) {\n            if (test_set.Contains(c)) {\n                return false;\n            }\n            test_set.Add(c);\n        }\n        return true;",
    "        long[] tup = new long[4];\n        for (int i = 0; i < 4; i++) {\n            tup[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < 4; i++) {\n            for (int j = i + 1; j < 4; j++) {\n                if (tup[i] == tup[j]) {\n                    return false;\n                }\n            }\n        }\n        return true;",
    "        // Convert tuple to array of digits.\n        int[] digits = new int[10];\n        for (int i = 0; i < 10; i++) {\n            digits[i] = (int)(test_tup % 10);\n            test_tup /= 10;\n        }\n        // Check for duplicates.\n        for (int i = 0; i < 10; i++) {\n            for (int j = i + 1; j < 10; j++) {\n                if (digits[i] == digits[j]) {\n                    return false;\n                }\n            }\n        }\n        return true;",
    "        long[] tup = new long[4];\n        for (int i = 0; i < 4; i++) {\n            tup[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < 4; i++) {\n            for (int j = i + 1; j < 4; j++) {\n                if (tup[i] == tup[j]) {\n                    return false;\n                }\n            }\n        }\n        return true;",
    "        var tup = new Tuple<int, int, int, int, int, int, int, Tuple<int>>(\n            (int)(test_tup & 0xF),\n            (int)((test_tup >> 4) & 0xF),\n            (int)((test_tup >> 8) & 0xF),\n            (int)((test_tup >> 12) & 0xF),\n            (int)((test_tup >> 16) & 0xF),\n            (int)((test_tup >> 20) & 0xF),\n            (int)((test_tup >> 24) & 0xF),\n            new Tuple<int>((int)((test_tup >> 28) & 0xF)));\n        return tup.Distinct().Count() == 9;",
    "        var test_tup_str = test_tup.ToString();\n        var test_tup_set = new HashSet<char>(test_tup_str);\n        return test_tup_str.Length == test_tup_set.Count;",
    "        long[] tup = new long[4];\n        for (int i = 0; i < 4; i++) {\n            tup[i] = test_tup % 10;\n            test_tup /= 10;\n        }\n        for (int i = 0; i < 4; i++) {\n            for (int j = i + 1; j < 4; j++) {\n                if (tup[i] == tup[j]) {\n                    return false;\n                }\n            }\n        }\n        return true;",
    "        long[] tup = new long[3];\n        tup[0] = test_tup / 1000000;\n        tup[1] = (test_tup % 1000000) / 1000;\n        tup[2] = test_tup % 1000;\n        if (tup[0] == tup[1] || tup[0] == tup[2] || tup[1] == tup[2]) {\n            return false;\n        }\n        return true;",
    "        var tup = new Tuple<int, int, int, int, int, int, int, Tuple<int>>(\n            (int)(test_tup & 0xF),\n            (int)((test_tup >> 4) & 0xF),\n            (int)((test_tup >> 8) & 0xF),\n            (int)((test_tup >> 12) & 0xF),\n            (int)((test_tup >> 16) & 0xF),\n            (int)((test_tup >> 20) & 0xF),\n            (int)((test_tup >> 24) & 0xF),\n            new Tuple<int>((int)((test_tup >> 28) & 0xF)));\n        var hash = new HashSet<int>();\n        return tup.ToHashSet().Count == 8;",
    "        // Convert tuple to string\n        string test_str = test_tup.ToString();\n        // Check for duplicates\n        for (int i = 0; i < test_str.Length; i++) {\n            for (int j = i + 1; j < test_str.Length; j++) {\n                if (test_str[i] == test_str[j]) {\n                    return false;\n                }\n            }\n        }\n        return true;"
  ]
}