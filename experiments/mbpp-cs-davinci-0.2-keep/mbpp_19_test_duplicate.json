{
  "name": "mbpp_19_test_duplicate",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given array of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (arraynums.Count == 0) {\n            return false;\n        }\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;",
    "        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;",
    "        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;",
    "        var set = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;",
    "        HashSet<long> hash = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hash.Contains(num)) {\n                return true;\n            }\n            hash.Add(num);\n        }\n        return false;",
    "        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            hs.Add(num);\n        }\n        return false;",
    "        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;",
    "        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;",
    "        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;",
    "        HashSet<long> hashset = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;",
    "        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;",
    "        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;",
    "        // Create a hashset to store the values\n        HashSet<long> hashset = new HashSet<long>();\n        // Iterate through the array\n        foreach (long num in arraynums) {\n            // If the hashset already contains the value, return true\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            // Otherwise, add the value to the hashset\n            hashset.Add(num);\n        }\n        // If the array does not contain any duplicate values, return false\n        return false;",
    "        var hashset = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (hashset.Contains(num)) {\n                return true;\n            }\n            hashset.Add(num);\n        }\n        return false;",
    "        var set = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;",
    "        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;",
    "        var set = new HashSet<long>();\n        foreach (var num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;",
    "        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;",
    "        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (hs.Contains(num)) {\n                return true;\n            }\n            hs.Add(num);\n        }\n        return false;",
    "        HashSet<long> set = new HashSet<long>();\n        foreach (long num in arraynums) {\n            if (set.Contains(num)) {\n                return true;\n            }\n            set.Add(num);\n        }\n        return false;"
  ]
}