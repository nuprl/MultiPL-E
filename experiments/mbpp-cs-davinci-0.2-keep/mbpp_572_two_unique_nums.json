{
  "name": "mbpp_572_two_unique_nums",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to remove duplicate numbers from a given number of lists.\n    public static List<long> TwoUniqueNums(List<long> nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TwoUniqueNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)5L}))));\n    Debug.Assert(TwoUniqueNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(TwoUniqueNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here\n        List<long> result = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!seen.Contains(num)) {\n                seen.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        var unique = new List<long>();\n        var duplicates = new List<long>();\n        foreach (var num in nums) {\n            if (unique.Contains(num)) {\n                duplicates.Add(num);\n            } else {\n                unique.Add(num);\n            }\n        }\n        foreach (var num in duplicates) {\n            unique.Remove(num);\n        }\n        return unique;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!seen.Contains(num)) {\n                result.Add(num);\n                seen.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        var dict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (var pair in dict) {\n            if (pair.Value == 1) {\n                result.Add(pair.Key);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (long num in nums) {\n            if (dict[num] == 1) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        var uniqueNums = new List<long>();\n        var numsDict = new Dictionary<long, int>();\n        foreach(var num in nums) {\n            if(!numsDict.ContainsKey(num)) {\n                numsDict.Add(num, 1);\n            } else {\n                numsDict[num]++;\n            }\n        }\n        foreach(var num in numsDict) {\n            if(num.Value == 1) {\n                uniqueNums.Add(num.Key);\n            }\n        }\n        return uniqueNums;",
    "        var result = new List<long>();\n        var set = new HashSet<long>();\n        foreach (var num in nums) {\n            if (!set.Contains(num)) {\n                result.Add(num);\n                set.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!seen.Contains(num)) {\n                seen.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach(long num in nums) {\n            if(!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                result.Add(num);\n                set.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                result.Add(num);\n                set.Add(num);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        var set = new HashSet<long>();\n        foreach (var num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        var uniqueNums = new List<long>();\n        var uniqueNumsHash = new HashSet<long>();\n        foreach (var num in nums) {\n            if (!uniqueNumsHash.Contains(num)) {\n                uniqueNums.Add(num);\n                uniqueNumsHash.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        var uniqueNums = new List<long>();\n        var numsDict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (numsDict.ContainsKey(num)) {\n                numsDict[num]++;\n            } else {\n                numsDict.Add(num, 1);\n            }\n        }\n        foreach (var num in numsDict) {\n            if (num.Value == 1) {\n                uniqueNums.Add(num.Key);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        var uniqueNums = new List<long>();\n        var numsDict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (numsDict.ContainsKey(num)) {\n                numsDict[num] += 1;\n            } else {\n                numsDict[num] = 1;\n            }\n        }\n        foreach (var num in numsDict.Keys) {\n            if (numsDict[num] == 1) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        var unique = new List<long>();\n        var set = new HashSet<long>();\n        foreach (var num in nums) {\n            if (!set.Contains(num)) {\n                unique.Add(num);\n                set.Add(num);\n            }\n        }\n        return unique;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        var result = new List<long>();\n        var dict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (var kvp in dict) {\n            if (kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        List<long> unique = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!seen.Contains(num)) {\n                unique.Add(num);\n                seen.Add(num);\n            }\n        }\n        return unique;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        foreach (long num in nums) {\n            if (!result.Contains(num)) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        var unique = new List<long>();\n        foreach (var num in nums) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n            }\n        }\n        return unique;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        foreach (KeyValuePair<long, int> kvp in dict) {\n            if (kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniques = new List<long>();\n        foreach (long num in nums) {\n            if (!uniques.Contains(num)) {\n                uniques.Add(num);\n            }\n        }\n        return uniques;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        var uniqueNums = new List<long>();\n        var unique = new HashSet<long>();\n        foreach (var num in nums) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> counts = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (counts.ContainsKey(num)) {\n                counts[num] += 1;\n            } else {\n                counts[num] = 1;\n            }\n        }\n        foreach (long num in nums) {\n            if (counts[num] == 1) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                result.Add(num);\n                set.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                result.Add(num);\n                set.Add(num);\n            }\n        }\n        return result;",
    "        var uniqueNums = new List<long>();\n        var numsDict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (numsDict.ContainsKey(num)) {\n                numsDict[num]++;\n            } else {\n                numsDict.Add(num, 1);\n            }\n        }\n        foreach (var num in numsDict) {\n            if (num.Value == 1) {\n                uniqueNums.Add(num.Key);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        HashSet<long> uniqueNums = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums.ToList();",
    "        var uniques = new List<long>();\n        foreach (var num in nums) {\n            if (!uniques.Contains(num)) {\n                uniques.Add(num);\n            }\n        }\n        return uniques;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> unique = new List<long>();\n        foreach (long num in nums) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n            }\n        }\n        return unique;",
    "        var uniqueNums = new List<long>();\n        var numsDict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (numsDict.ContainsKey(num)) {\n                numsDict[num]++;\n            } else {\n                numsDict.Add(num, 1);\n            }\n        }\n        foreach (var num in numsDict) {\n            if (num.Value == 1) {\n                uniqueNums.Add(num.Key);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                result.Add(num);\n                set.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long n in nums) {\n            if (dict.ContainsKey(n)) {\n                dict[n] += 1;\n            } else {\n                dict.Add(n, 1);\n            }\n        }\n        foreach (KeyValuePair<long, int> kvp in dict) {\n            if (kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> unique = new List<long>();\n        foreach (long num in nums) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n            }\n        }\n        return unique;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!hs.Contains(num)) {\n                hs.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        var uniqueNums = new List<long>();\n        var numsDict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (numsDict.ContainsKey(num)) {\n                numsDict[num] += 1;\n            } else {\n                numsDict.Add(num, 1);\n            }\n        }\n        foreach (var num in numsDict) {\n            if (num.Value == 1) {\n                uniqueNums.Add(num.Key);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                result.Add(num);\n                set.Add(num);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach(long num in nums) {\n            if(!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        var uniqueNums = new List<long>();\n        var uniqueSet = new HashSet<long>();\n        foreach (var num in nums) {\n            if (!uniqueSet.Contains(num)) {\n                uniqueSet.Add(num);\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!set.Contains(nums[i])) {\n                set.Add(nums[i]);\n                result.Add(nums[i]);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        var dict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (var key in dict.Keys) {\n            if (dict[key] == 1) {\n                result.Add(key);\n            }\n        }\n        return result;",
    "        var uniqueNums = new List<long>();\n        var numCounts = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (numCounts.ContainsKey(num)) {\n                numCounts[num]++;\n            } else {\n                numCounts[num] = 1;\n            }\n        }\n        foreach (var num in numCounts.Keys) {\n            if (numCounts[num] == 1) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        foreach (long num in nums) {\n            if (!result.Contains(num)) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> unique = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!unique.Contains(nums[i])) {\n                unique.Add(nums[i]);\n            }\n        }\n        return unique;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!set.Contains(nums[i])) {\n                set.Add(nums[i]);\n                result.Add(nums[i]);\n            }\n        }\n        return result;",
    "        var uniqueNums = new List<long>();\n        var numsDict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (numsDict.ContainsKey(num)) {\n                numsDict[num]++;\n            } else {\n                numsDict.Add(num, 1);\n            }\n        }\n        foreach (var num in numsDict) {\n            if (num.Value == 1) {\n                uniqueNums.Add(num.Key);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!set.Contains(nums[i])) {\n                set.Add(nums[i]);\n                result.Add(nums[i]);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (KeyValuePair<long, int> entry in dict) {\n            if (entry.Value == 1) {\n                result.Add(entry.Key);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!uniqueNums.Contains(nums[i])) {\n                uniqueNums.Add(nums[i]);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num] += 1;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (long key in dict.Keys) {\n            if (dict[key] == 1) {\n                result.Add(key);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> unique = new List<long>();\n        foreach (long num in nums) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n            }\n        }\n        return unique;",
    "        List<long> uniques = new List<long>();\n        foreach (long num in nums) {\n            if (!uniques.Contains(num)) {\n                uniques.Add(num);\n            }\n        }\n        return uniques;",
    "        // Write your code here\n        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        var uniqueNums = new List<long>();\n        var dict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (!dict.ContainsKey(num)) {\n                dict[num] = 1;\n            } else {\n                dict[num] += 1;\n            }\n        }\n        foreach (var num in dict.Keys) {\n            if (dict[num] == 1) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!uniqueNums.Contains(nums[i])) {\n                uniqueNums.Add(nums[i]);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        HashSet<long> numsSet = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!numsSet.Contains(num)) {\n                numsSet.Add(num);\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        // Write your code here\n        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        var unique = new List<long>();\n        foreach (var num in nums) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n            }\n        }\n        return unique;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        var dict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (!dict.ContainsKey(num)) {\n                dict.Add(num, 1);\n            } else {\n                dict[num]++;\n            }\n        }\n        foreach (var key in dict.Keys) {\n            if (dict[key] == 1) {\n                result.Add(key);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        foreach (long num in nums) {\n            if (!result.Contains(num)) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                result.Add(num);\n                set.Add(num);\n            }\n        }\n        return result;",
    "        List<long> unique = new List<long>();\n        foreach (long num in nums) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n            }\n        }\n        return unique;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> hash = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!hash.Contains(num)) {\n                hash.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> unique = new List<long>();\n        foreach (long num in nums) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n            }\n        }\n        return unique;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (KeyValuePair<long, int> kvp in dict) {\n            if (kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (dict.ContainsKey(nums[i])) {\n                dict[nums[i]]++;\n            } else {\n                dict.Add(nums[i], 1);\n            }\n        }\n        foreach (KeyValuePair<long, int> kvp in dict) {\n            if (kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!set.Contains(nums[i])) {\n                set.Add(nums[i]);\n                result.Add(nums[i]);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        var uniqueNums = new List<long>();\n        foreach (var num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!uniqueNums.Contains(nums[i])) {\n                uniqueNums.Add(nums[i]);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        var unique = new List<long>();\n        var unique2 = new List<long>();\n        foreach (var num in nums) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n            } else if (!unique2.Contains(num)) {\n                unique2.Add(num);\n            }\n        }\n        return unique;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!hs.Contains(num)) {\n                hs.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (set.Contains(num)) {\n                set.Remove(num);\n            } else {\n                set.Add(num);\n            }\n        }\n        foreach (long num in set) {\n            result.Add(num);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniques = new List<long>();\n        foreach (long num in nums) {\n            if (!uniques.Contains(num)) {\n                uniques.Add(num);\n            }\n        }\n        return uniques;",
    "        List<long> uniques = new List<long>();\n        foreach (long num in nums) {\n            if (!uniques.Contains(num)) {\n                uniques.Add(num);\n            }\n        }\n        return uniques;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        var uniqueNums = new List<long>();\n        foreach (var num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!uniqueNums.Contains(nums[i])) {\n                uniqueNums.Add(nums[i]);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (long num in nums) {\n            if (dict[num] == 1) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniques = new List<long>();\n        foreach (long num in nums) {\n            if (!uniques.Contains(num)) {\n                uniques.Add(num);\n            }\n        }\n        return uniques;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!uniqueNums.Contains(nums[i])) {\n                uniqueNums.Add(nums[i]);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (set.Contains(num)) {\n                set.Remove(num);\n            } else {\n                set.Add(num);\n            }\n        }\n        foreach (long num in set) {\n            result.Add(num);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> counts = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (counts.ContainsKey(num)) {\n                counts[num]++;\n            } else {\n                counts[num] = 1;\n            }\n        }\n        foreach (KeyValuePair<long, int> pair in counts) {\n            if (pair.Value == 1) {\n                result.Add(pair.Key);\n            }\n        }\n        return result;",
    "        var uniqueNums = new List<long>();\n        var numsDict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (numsDict.ContainsKey(num)) {\n                numsDict[num]++;\n            } else {\n                numsDict.Add(num, 1);\n            }\n        }\n        foreach (var num in numsDict) {\n            if (num.Value == 1) {\n                uniqueNums.Add(num.Key);\n            }\n        }\n        return uniqueNums;",
    "        var uniqueNums = new List<long>();\n        var numsDict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (numsDict.ContainsKey(num)) {\n                numsDict[num] += 1;\n            } else {\n                numsDict.Add(num, 1);\n            }\n        }\n        foreach (var num in numsDict) {\n            if (num.Value == 1) {\n                uniqueNums.Add(num.Key);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        var uniqueNums = new List<long>();\n        foreach (var num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num] += 1;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        foreach (KeyValuePair<long, int> entry in dict) {\n            if (entry.Value == 1) {\n                result.Add(entry.Key);\n            }\n        }\n        return result;",
    "        HashSet<long> uniqueNums = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums.ToList();",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (set.Contains(num)) {\n                result.Add(num);\n            }\n            set.Add(num);\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> unique = new List<long>();\n        foreach (long num in nums) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n            }\n        }\n        return unique;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            if (!uniqueNums.Contains(nums[i])) {\n                uniqueNums.Add(nums[i]);\n            }\n        }\n        return uniqueNums;",
    "        List<long> ret = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!seen.Contains(num)) {\n                ret.Add(num);\n                seen.Add(num);\n            }\n        }\n        return ret;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num] += 1;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (KeyValuePair<long, int> kvp in dict) {\n            if (kvp.Value == 1) {\n                result.Add(kvp.Key);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;"
  ]
}