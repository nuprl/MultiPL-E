{
  "name": "mbpp_572_two_unique_nums",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to remove duplicate numbers from a given number of lists.\n    public static List<long> TwoUniqueNums(List<long> nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TwoUniqueNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)5L}))));\n    Debug.Assert(TwoUniqueNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(TwoUniqueNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here\n        List<long> result = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!seen.Contains(num)) {\n                seen.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        var unique = new List<long>();\n        var duplicates = new List<long>();\n        foreach (var num in nums) {\n            if (unique.Contains(num)) {\n                duplicates.Add(num);\n            } else {\n                unique.Add(num);\n            }\n        }\n        foreach (var num in duplicates) {\n            unique.Remove(num);\n        }\n        return unique;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!seen.Contains(num)) {\n                result.Add(num);\n                seen.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        var result = new List<long>();\n        var dict = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (var pair in dict) {\n            if (pair.Value == 1) {\n                result.Add(pair.Key);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        Dictionary<long, int> dict = new Dictionary<long, int>();\n        foreach (long num in nums) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict[num] = 1;\n            }\n        }\n        foreach (long num in nums) {\n            if (dict[num] == 1) {\n                result.Add(num);\n            }\n        }\n        return result;",
    "        var uniqueNums = new List<long>();\n        var numsDict = new Dictionary<long, int>();\n        foreach(var num in nums) {\n            if(!numsDict.ContainsKey(num)) {\n                numsDict.Add(num, 1);\n            } else {\n                numsDict[num]++;\n            }\n        }\n        foreach(var num in numsDict) {\n            if(num.Value == 1) {\n                uniqueNums.Add(num.Key);\n            }\n        }\n        return uniqueNums;",
    "        var result = new List<long>();\n        var set = new HashSet<long>();\n        foreach (var num in nums) {\n            if (!set.Contains(num)) {\n                result.Add(num);\n                set.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!seen.Contains(num)) {\n                seen.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach(long num in nums) {\n            if(!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                result.Add(num);\n                set.Add(num);\n            }\n        }\n        return result;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                result.Add(num);\n                set.Add(num);\n            }\n        }\n        return result;",
    "        // Write your code here\n        List<long> uniqueNums = new List<long>();\n        foreach (long num in nums) {\n            if (!uniqueNums.Contains(num)) {\n                uniqueNums.Add(num);\n            }\n        }\n        return uniqueNums;",
    "        List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in nums) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result.Add(num);\n            }\n        }\n        return result;"
  ]
}