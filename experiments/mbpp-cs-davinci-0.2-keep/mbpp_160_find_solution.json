{
  "name": "mbpp_160_find_solution",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // TODO: Implement this function\n        return null;",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 1;\n        long y1 = 0;\n        long x2 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);",
    "        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (a != 0) {\n            q = b / a;\n            long r = b % a;\n            long x = x2 - q * x1;\n            long y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        if (x < 0) {\n            x = x + b;\n            y = y - a;\n        }\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d) * (n / d);\n            y = (n - a * x) / b;\n        }\n        return x;",
    "        // Find the greatest common divisor of a and b.\n        long gcd = GCD(a, b);\n        // If n is not a multiple of gcd, there is no solution.\n        if (n % gcd != 0) return null;\n        // Find the solution to ax + by = gcd.\n        long x, y;\n        GCD(a, b, out x, out y);\n        // Multiply the solution by n/gcd.\n        x *= n / gcd;\n        y *= n / gcd;\n        // Return the solution.\n        return new Nullable<long>(x);",
    "        long x = 0;\n        long y = 0;\n        long d = gcd(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);",
    "        // Euclid's algorithm\n        long x = 0;\n        long y = 1;\n        long lastx = 1;\n        long lasty = 0;\n        while (b != 0) {\n            long quotient = a / b;\n            long remainder = a % b;\n            a = b;\n            b = remainder;\n            long temp = x;\n            x = lastx - quotient * x;\n            lastx = temp;\n            temp = y;\n            y = lasty - quotient * y;\n            lasty = temp;\n        }\n        if (n % a != 0) {\n            return null;\n        }\n        return lastx * (n / a);",
    "        // a and b must be coprime, otherwise there is no solution\n        if (GCD(a, b) != 1) {\n            return null;\n        }\n        // find the solution to ax + by = 1\n        var solution = ExtendedEuclidean(a, b);\n        // multiply the solution by n to get the solution to ax + by = n\n        return solution.Item1 * n;",
    "        if (a == 0 && b == 0) {\n            return null;\n        }\n        if (a == 0) {\n            return n / b;\n        }\n        if (b == 0) {\n            return n / a;\n        }\n        long x, y;\n        long g = GCD(a, b, out x, out y);\n        if (n % g != 0) {\n            return null;\n        }\n        x *= n / g;\n        y *= n / g;\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        long x1 = 1;\n        long x2 = 0;\n        long y1 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        if (n % GCD(a, b) != 0)\n            return null;\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        long x1 = 1;\n        long x2 = 0;\n        long y1 = 0;\n        long y2 = 1;\n        while (a % d == 0 && b % d == 0) {\n            long q = a / d;\n            long r = b / d;\n            long m = x2 - q * x1;\n            long n = y2 - q * y1;\n            x = m;\n            y = n;\n            a = d;\n            b = r;\n            d = GCD(a, b);\n        }\n        return x * (n / d) + y * (n / d);",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / gcd) + y * (n / gcd);",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0)\n            return null;\n        long[] result = ExtendedEuclid(a, b);\n        x = result[1] * (n / gcd);\n        y = result[2] * (n / gcd);\n        return x;",
    "        // First, find the greatest common divisor of a and b.\n        long gcd = GCD(a, b);\n        // If n is not a multiple of the gcd, then no solution exists.\n        if (n % gcd != 0) {\n            return null;\n        }\n        // Otherwise, we can use the extended Euclidean algorithm to find integers x and y that satisfy ax + by = gcd.\n        long x = 0;\n        long y = 0;\n        ExtendedEuclidean(a, b, ref x, ref y);\n        // Then, we can multiply x and y by n / gcd to find integers x and y that satisfy ax + by = n.\n        x *= n / gcd;\n        y *= n / gcd;\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = n;\n            y = 0;\n            return Tuple.Create(x, y);\n        }\n        x = n / d;\n        y = (n - a * x) / b;\n        return Tuple.Create(x, y);",
    "        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = ExtendedEuclid(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;"
  ]
}