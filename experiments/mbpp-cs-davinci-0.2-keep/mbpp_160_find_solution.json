{
  "name": "mbpp_160_find_solution",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    public static Nullable<long> FindSolution(long a, long b, long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals(Tuple.Create(2L, 1L)));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals(Tuple.Create(4L, 1L)));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // TODO: Implement this function\n        return null;",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 1;\n        long y1 = 0;\n        long x2 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);",
    "        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (a != 0) {\n            q = b / a;\n            long r = b % a;\n            long x = x2 - q * x1;\n            long y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        if (x < 0) {\n            x = x + b;\n            y = y - a;\n        }\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d) * (n / d);\n            y = (n - a * x) / b;\n        }\n        return x;",
    "        // Find the greatest common divisor of a and b.\n        long gcd = GCD(a, b);\n        // If n is not a multiple of gcd, there is no solution.\n        if (n % gcd != 0) return null;\n        // Find the solution to ax + by = gcd.\n        long x, y;\n        GCD(a, b, out x, out y);\n        // Multiply the solution by n/gcd.\n        x *= n / gcd;\n        y *= n / gcd;\n        // Return the solution.\n        return new Nullable<long>(x);",
    "        long x = 0;\n        long y = 0;\n        long d = gcd(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);",
    "        // Euclid's algorithm\n        long x = 0;\n        long y = 1;\n        long lastx = 1;\n        long lasty = 0;\n        while (b != 0) {\n            long quotient = a / b;\n            long remainder = a % b;\n            a = b;\n            b = remainder;\n            long temp = x;\n            x = lastx - quotient * x;\n            lastx = temp;\n            temp = y;\n            y = lasty - quotient * y;\n            lasty = temp;\n        }\n        if (n % a != 0) {\n            return null;\n        }\n        return lastx * (n / a);",
    "        // a and b must be coprime, otherwise there is no solution\n        if (GCD(a, b) != 1) {\n            return null;\n        }\n        // find the solution to ax + by = 1\n        var solution = ExtendedEuclidean(a, b);\n        // multiply the solution by n to get the solution to ax + by = n\n        return solution.Item1 * n;",
    "        if (a == 0 && b == 0) {\n            return null;\n        }\n        if (a == 0) {\n            return n / b;\n        }\n        if (b == 0) {\n            return n / a;\n        }\n        long x, y;\n        long g = GCD(a, b, out x, out y);\n        if (n % g != 0) {\n            return null;\n        }\n        x *= n / g;\n        y *= n / g;\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        long x1 = 1;\n        long x2 = 0;\n        long y1 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        if (n % GCD(a, b) != 0)\n            return null;\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        long x1 = 1;\n        long x2 = 0;\n        long y1 = 0;\n        long y2 = 1;\n        while (a % d == 0 && b % d == 0) {\n            long q = a / d;\n            long r = b / d;\n            long m = x2 - q * x1;\n            long n = y2 - q * y1;\n            x = m;\n            y = n;\n            a = d;\n            b = r;\n            d = GCD(a, b);\n        }\n        return x * (n / d) + y * (n / d);",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / gcd) + y * (n / gcd);",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0)\n            return null;\n        long[] result = ExtendedEuclid(a, b);\n        x = result[1] * (n / gcd);\n        y = result[2] * (n / gcd);\n        return x;",
    "        // First, find the greatest common divisor of a and b.\n        long gcd = GCD(a, b);\n        // If n is not a multiple of the gcd, then no solution exists.\n        if (n % gcd != 0) {\n            return null;\n        }\n        // Otherwise, we can use the extended Euclidean algorithm to find integers x and y that satisfy ax + by = gcd.\n        long x = 0;\n        long y = 0;\n        ExtendedEuclidean(a, b, ref x, ref y);\n        // Then, we can multiply x and y by n / gcd to find integers x and y that satisfy ax + by = n.\n        x *= n / gcd;\n        y *= n / gcd;\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = n;\n            y = 0;\n            return Tuple.Create(x, y);\n        }\n        x = n / d;\n        y = (n - a * x) / b;\n        return Tuple.Create(x, y);",
    "        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = ExtendedEuclid(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        long x = 1;\n        long y = 0;\n        long x1 = 0;\n        long y1 = 1;\n        long q = 0;\n        long r = 0;\n        long m = 0;\n        long n1 = n;\n        long a1 = a;\n        long b1 = b;\n        while (a1 != 0) {\n            q = b1 / a1;\n            r = b1 % a1;\n            m = x - q * x1;\n            n = y - q * y1;\n            b1 = a1;\n            a1 = r;\n            x = x1;\n            y = y1;\n            x1 = m;\n            y1 = n;\n        }\n        if (b1 != n1) {\n            return null;\n        }\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        else {\n            x = n / d * b / a;\n            y = (n - a * x) / b;\n        }\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a * x / d) / (b / d);\n        }\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 1;\n        long y1 = 0;\n        long x2 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a % b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = (n / d) * x2;\n        y = (n / d) * y2;\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        long x1 = 1;\n        long x2 = 0;\n        long y1 = 0;\n        long y2 = 1;\n        while (a % d == 0 && b % d == 0) {\n            long q = a / d;\n            long r = b / d;\n            long m = x2 - q * x1;\n            long n = y2 - q * y1;\n            x = m;\n            y = n;\n            a = d;\n            b = r;\n            d = GCD(a, b);\n        }\n        return x * (n / d) + y * (n / d);",
    "        // TODO: Implement this function.\n        // Hint: Use the Euclidean algorithm to find the greatest common divisor of a and b.\n        long x = 0;\n        long y = 0;\n        long gcd = 0;\n        long a_ = a;\n        long b_ = b;\n        long n_ = n;\n        long q = 0;\n        long r = 0;\n        long x_ = 1;\n        long y_ = 0;\n        long x__ = 0;\n        long y__ = 1;\n        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n       ",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        long x1 = 1;\n        long x2 = 0;\n        long y1 = 0;\n        long y2 = 1;\n        while (a % d != 0 || b % d != 0) {\n            long q = a / d;\n            long r = a % d;\n            long x3 = x1 - q * x2;\n            long y3 = y1 - q * y2;\n            x1 = x2;\n            x2 = x3;\n            y1 = y2;\n            y2 = y3;\n            a = d;\n            b = r;\n            d = GCD(a, b);\n        }\n        x = x2 * (n / d);\n        y = y2 * (n / d);\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long x1 = 1;\n            long y1 = 0;\n            long x2 = 0;\n            long y2 = 1;\n            while (b != 0) {\n                long q = a / b;\n                long r = a % b;\n                long x = x2 - q * x1;\n                long y = y2 - q * y1;\n                a = b;\n                b = r;\n                x2 = x1;\n                x1 = x;\n                y2 = y1;\n                y1 = y;\n            }\n            x = x2;\n            y = y2;\n        }\n        else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        long a1 = a / d;\n        long b1 = b / d;\n        long n1 = n / d;\n        ExtendedEuclid(a1, b1, out x, out y);\n        if (n1 < 0) {\n            x = -x;\n            y = -y;\n            n1 = -n1;\n        }\n        return x * n1;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long u1 = 0;\n            long v1 = 1;\n            long u2 = 1;\n            long v2 = 0;\n            long q = 0;\n            long r = 0;\n            while (b != 0) {\n                q = a / b;\n                r = a % b;\n                u = u2 - q * u1;\n                v = v2 - q * v1;\n                a = b;\n                b = r;\n                u2 = u1;\n                v2 = v1;\n                u1 = u;\n                v1 = v;\n            }\n            x = u2;\n            y = v2;\n        }\n        else {\n            x = (n / d) * (a / d);\n            y = (n / d) * (b / d);\n        }\n        return (x, y);",
    "        if (n % GCD(a, b) != 0) return null;\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return (n == 0) ? 0 : null;\n        }\n        else {\n            x = n / d * b / a;\n            y = (n - a * x) / b;\n        }\n        return x;",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 1;\n        long y1 = 0;\n        long x2 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        if (n % Gcd(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = Gcd(a, b);\n        if (d == 1) {\n            long s = 0;\n            long old_s = 1;\n            long t = 1;\n            long old_t = 0;\n            long r = b;\n            long old_r = a;\n            while (r != 0) {\n                long quotient = old_r / r;\n                long temp = r;\n                r = old_r - quotient * r;\n                old_r = temp;\n                temp = s;\n                s = old_s - quotient * s;\n                old_s = temp;\n                temp = t;\n                t = old_t - quotient * t;\n                old_t = temp;\n            }\n            x = old_s;\n            y = old_t;\n        }\n        else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        long x1 = 1;\n        long x2 = 0;\n        long y1 = 0;\n        long y2 = 1;\n        while (a % d == 0 && b % d == 0) {\n            long q = a / d;\n            long r = b / d;\n            long m = x2 - q * x1;\n            long n = y2 - q * y1;\n            x = m;\n            y = n;\n            a = d;\n            b = r;\n            d = GCD(a, b);\n        }\n        return x * (n / d) + y * (n / d);",
    "        // a and b are coprime\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        // a and b are not coprime\n        else {\n            long[] xy = ExtendedEuclid(a, b);\n            long x = xy[0];\n            long y = xy[1];\n            long gcd = xy[2];\n            long m = n / gcd;\n            return m * x;\n        }",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (a != 0) {\n            q = b / a;\n            long r = b % a;\n            long x = x2 - q * x1;\n            long y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        long a1 = a / d;\n        long b1 = b / d;\n        long n1 = n / d;\n        long[] result = ExtendedEuclid(a1, b1);\n        x = result[1] * n1;\n        y = result[2] * n1;\n        return new long[] { x, y };",
    "        long x = 0;\n        long y = 0;\n        long d = gcd(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = a / b;\n        long r = a % b;\n        while (r > 0) {\n            long temp = x2;\n            x2 = x1 - q * x2;\n            x1 = temp;\n            temp = y2;\n            y2 = y1 - q * y2;\n            y1 = temp;\n            a = b;\n            b = r;\n            q = a / b;\n            r = a % b;\n        }\n        x = x2;\n        y = y2;\n        if (x < 0) {\n            x = x + (n / d);\n            y = y - (n / d);\n        }\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            // ax + by = 1\n            // x = b^-1 mod a\n            // y = a^-1 mod b\n            x = ModInverse(b, a);\n            y = ModInverse(a, b);\n        } else {\n            // ax + by = d\n            // x = b^-1 mod a\n            // y = a^-1 mod b\n            // x = (b/d)^-1 mod (a/d)\n            // y = (a/d)^-1 mod (b/d)\n            x = ModInverse(b / d, a / d);\n            y = ModInverse(a / d, b / d);\n        }\n        return x * (n / d) % (b / d);",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 1;\n        long y1 = 0;\n        long x2 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = ExtendedEuclid(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        // ax + by = n\n        // ax = n - by\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // y = (n - ax) / b\n        // y = (n - ax) / b\n        // y = (n - (n - by)) / b\n        // y = (n - n + by) / b\n        // y = by / b\n        // y = y\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / gcd) + y * (n / gcd);",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        long x1 = 1;\n        long x2 = 0;\n        long y1 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = a / b;\n        long r = a % b;\n        while (r > 0) {\n            long temp = x2;\n            x2 = x1 - q * x2;\n            x1 = temp;\n            temp = y2;\n            y2 = y1 - q * y2;\n            y1 = temp;\n            a = b;\n            b = r;\n            q = a / b;\n            r = a % b;\n        }\n        x = x2;\n        y = y2;\n        if (x < 0) {\n            x = x + b;\n            y = y - a;\n        }\n        return x;",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        x = n / d * ModInverse(a / d, b / d);\n        y = (n - a * x) / b;\n        return x;",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 1;\n        long y1 = 0;\n        long x2 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a * x / d) / (b / d);\n        }\n        return x + b / d * y;",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long x = 0;\n        long y = 0;\n        long d = gcd(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (b != 0) {\n            q = a / b;\n            long r = a % b;\n            long x = x2 - q * x1;\n            long y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        if (x < 0) {\n            x = x + b;\n        }\n        if (y < 0) {\n            y = y + a;\n        }\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a * x / d) / (b / d);\n        }\n        return x;",
    "        // We can use the extended Euclidean algorithm to find a solution to ax + by = n.\n        // The algorithm is as follows:\n        // 1. If b = 0, then return (1, 0)\n        // 2. Let q = a / b, r = a % b\n        // 3. Let (s, t) = FindSolution(b, r)\n        // 4. Return (t, s - q * t)\n        //\n        // The algorithm works because:\n        // ax + by = n\n        // ax + by = bq + r\n        // ax + by = b(s - qt) + rt\n        // ax + by = bs - bqt + rt\n        // ax + by = bs + rt\n        // ax + by = (bs + rt) + (by - bq * t)\n        // ax + by = (bs + rt) + (by - bq * t) + (bq * t)\n        // ax + by = (bs + rt) + by\n        // ax + by = (bs + rt) + (ax + by)\n        // ax + by = (bs + rt) + ax + by\n        // ax + by = (bs + rt + x) + by\n        // ax + by = (s + rt / b) + by\n        // ax + by = (s + t(a / b)) + by\n        // ax + by = (s + tq) + by\n        // ax + by = s + tq + by\n        // ax + by = s + (tq + y)\n        // ax + by = s + t(q + y)\n        // ax + by = s + t\n        //\n        // We can also prove that the algorithm is correct by induction:\n        // Base case:\n        // If b = 0, then a = n, so x = 1 and y = 0 is a solution.\n        // Inductive step:\n        // Suppose that the algorithm is correct for b = k.\n        // Then, we can prove that the algorithm is correct for b = k + 1.\n        // Let a = k + 1 and b = k.\n        // Then, we have k + 1x +",
    "        long x = 0;\n        long y = 0;\n        long d = ExtendedEuclid(a, b, ref x, ref y);\n        if (n % d != 0) {\n            return null;\n        }\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        // Euclid's algorithm\n        long x = 0;\n        long y = 1;\n        long lastx = 1;\n        long lasty = 0;\n        while (b != 0) {\n            long quotient = a / b;\n            long remainder = a % b;\n            a = b;\n            b = remainder;\n            long temp = x;\n            x = lastx - quotient * x;\n            lastx = temp;\n            temp = y;\n            y = lasty - quotient * y;\n            lasty = temp;\n        }\n        if (n % a != 0) {\n            return null;\n        }\n        return lastx * (n / a);",
    "        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = a / b;\n        long r = a % b;\n        while (r > 0) {\n            long temp = x2;\n            x2 = x1 - q * x2;\n            x1 = temp;\n            temp = y2;\n            y2 = y1 - q * y2;\n            y1 = temp;\n            a = b;\n            b = r;\n            q = a / b;\n            r = a % b;\n        }\n        x = x2;\n        y = y2;\n        if (x < 0) {\n            x = x + n / d;\n            y = y - a / d;\n        }\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return x;",
    "        // If a and b are both even, then there is no solution.\n        if (a % 2 == 0 && b % 2 == 0) {\n            return null;\n        }\n\n        // If a is even, then we can divide by 2 and solve the problem for a/2, b, and n.\n        if (a % 2 == 0) {\n            var solution = FindSolution(a / 2, b, n);\n            if (solution == null) {\n                return null;\n            }\n            return 2 * solution.Value;\n        }\n\n        // If b is even, then we can divide by 2 and solve the problem for a, b/2, and n.\n        if (b % 2 == 0) {\n            var solution = FindSolution(a, b / 2, n);\n            if (solution == null) {\n                return null;\n            }\n            return 2 * solution.Value;\n        }\n\n        // If a and b are both odd, then we can subtract b from a and solve the problem for a-b, b, and n+b.\n        var solution2 = FindSolution(a - b, b, n + b);\n        if (solution2 == null) {\n            return null;\n        }\n        return solution2.Value + b;",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 1;\n        long y1 = 0;\n        long x2 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        x *= n / d;\n        y *= n / d;\n        return new Tuple<long, long>(x, y);",
    "        if (n % GCD(a, b) != 0) return null;\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return 0;\n        }\n        else {\n            long x1 = 1;\n            long y1 = 0;\n            long x2 = 0;\n            long y2 = 1;\n            long q = 0;\n            long r = 0;\n            while (a % b != 0) {\n                q = a / b;\n                r = a % b;\n                x = x2 - q * x1;\n                y = y2 - q * y1;\n                a = b;\n                b = r;\n                x2 = x1;\n                x1 = x;\n                y2 = y1;\n                y1 = y;\n            }\n            return x2 * (n / d);\n        }",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        long x1 = 1;\n        long x2 = 0;\n        long y1 = 0;\n        long y2 = 1;\n        while (a % d == 0 && b % d == 0) {\n            long q = a / d;\n            long r = b / d;\n            long m = x2 - q * x1;\n            long n = y2 - q * y1;\n            x = m;\n            y = n;\n            a = d;\n            b = r;\n            d = GCD(a, b);\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        return x * (n / d) + y * (n / d);",
    "        // ax + by = n\n        // ax = n - by\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b, out x, out y);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x0 = x * (n / gcd);\n        long y0 = y * (n / gcd);\n        long k = b / gcd;\n        long x1 = x0 - k * (a / gcd);\n        long y1 = y0 + k * (b / gcd);\n        return x1;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long x1 = 1, y1 = 0, x2 = 0, y2 = 1;\n            while (b != 0) {\n                long q = a / b;\n                long r = a % b;\n                long x = x2 - q * x1;\n                long y = y2 - q * y1;\n                a = b;\n                b = r;\n                x2 = x1;\n                x1 = x;\n                y2 = y1;\n                y1 = y;\n            }\n            return x2;\n        }\n        else {\n            return FindSolution(a / d, b / d, n / d);\n        }",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = n / b;\n        while (a * x + b * y != n) {\n            if (a * x + b * y < n) {\n                x++;\n            } else {\n                y--;\n            }\n        }\n        return new Tuple<long, long>(x, y);",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        // ax + by = n\n        // ax = n - by\n        // x = (n - by) / a\n        // x = (n / a) - (by / a)\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y",
    "        if (n % GCD(a, b) != 0)\n            return null;\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        }\n        else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return x;",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long[] result = ExtendedEuclid(a, b);\n        x = result[1];\n        y = result[2];\n        if (a < 0) {\n            x = -x;\n        }\n        if (b < 0) {\n            y = -y;\n        }\n        x *= n / gcd;\n        y *= n / gcd;\n        return x;",
    "        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = ExtendedEuclid(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        // If n is not a multiple of gcd(a, b), then there is no solution.\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n\n        // If n is a multiple of gcd(a, b), then there is a solution.\n        // We can find a solution by finding the inverse of a mod b, and then multiplying by n/gcd(a, b).\n        long inverse = ModInverse(a, b);\n        long x = inverse * (n / gcd) % b;\n        long y = (n - a * x) / b;\n        return new Nullable<long>(x);",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 1;\n        long y1 = 0;\n        long x2 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) return null;\n        long x1, y1;\n        long d1 = ExtendedGCD(a, b, out x1, out y1);\n        x = x1 * (n / d);\n        y = y1 * (n / d);\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        }\n        else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return x;",
    "        // Your code here\n        return null;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        long a1 = a / d;\n        long b1 = b / d;\n        long n1 = n / d;\n        long[] result = ExtendedEuclid(a1, b1);\n        x = result[1] * n1;\n        y = result[2] * n1;\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = n;\n            y = 0;\n            return new Tuple<long, long>(x, y);\n        }\n        x = n / d;\n        y = (n - a * x) / b;\n        return new Tuple<long, long>(x, y);",
    "        // The solution is x = n * b^-1 (mod a), y = n * a^-1 (mod b)\n        // where b^-1 and a^-1 are the modular inverses of b and a respectively.\n        // We can find the modular inverse using the extended Euclidean algorithm.\n        // https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n        long x, y;\n        long g = ExtendedEuclidean(a, b, out x, out y);\n        if (n % g != 0) {\n            return null;\n        }\n        x *= n / g;\n        y *= n / g;\n        return x;",
    "        // If a or b is negative, we can make it positive by adding or subtracting n.\n        if (a < 0) {\n            a += n;\n        }\n        if (b < 0) {\n            b += n;\n        }\n        // If a and b are both positive, we can make them smaller by subtracting the smaller one from the larger one.\n        if (a > 0 && b > 0) {\n            if (a > b) {\n                a -= b;\n            } else {\n                b -= a;\n            }\n        }\n        // If a is positive and b is negative, we can make them both positive by adding n to b.\n        if (a > 0 && b < 0) {\n            b += n;\n        }\n        // If a is negative and b is positive, we can make them both negative by subtracting n from a.\n        if (a < 0 && b > 0) {\n            a -= n;\n        }\n        // If a and b are both negative, we can make them both positive by adding n to both.\n        if (a < 0 && b < 0) {\n            a += n;\n            b += n;\n        }\n        // If a is zero, then x = 0 and y = n / b.\n        if (a == 0) {\n            return new Nullable<long>(n / b);\n        }\n        // If b is zero, then x = n / a and y = 0.\n        if (b == 0) {\n            return new Nullable<long>(n / a);\n        }\n        // If a and b are both positive, then we can use the Euclidean algorithm to find the greatest common divisor of a and b.\n        if (a > 0 && b > 0) {\n            long gcd = GCD(a, b);\n            // If n is not divisible by the greatest common divisor, then no solution exists.\n            if (n % gcd != 0) {\n                return null;\n            }\n            // If n is divisible by the greatest common divisor, then we can divide a and b by the greatest common divisor.\n            a /= gcd;\n            b /= gcd;\n           ",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        //long result = 0;\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0)\n            return null;\n        long[] result = ExtendedEuclid(a, b);\n        x = result[1];\n        y = result[2];\n        x *= n / gcd;\n        y *= n / gcd;\n        return x;",
    "        // Euclid's extended algorithm\n        long x = 0;\n        long y = 1;\n        long lastx = 1;\n        long lasty = 0;\n        while (b != 0) {\n            long quotient = a / b;\n            long remainder = a % b;\n            a = b;\n            b = remainder;\n            long temp = x;\n            x = lastx - quotient * x;\n            lastx = temp;\n            temp = y;\n            y = lasty - quotient * y;\n            lasty = temp;\n        }\n        if (n % a != 0) {\n            return null;\n        }\n        return lastx * (n / a);",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long x, y;\n        long g = gcd(a, b, out x, out y);\n        if (n % g != 0)\n            return null;\n        x *= n / g;\n        y *= n / g;\n        return x;",
    "        // n = a * x + b * y\n        // n = b * y + a * x\n        // n = b * y + a * (x - b)\n        // n = b * (y + a) + a * (x - b)\n        // n = b * (y + a) + a * (x - b - a)\n        // n = b * (y + a) + a * (x - 2 * a)\n        // n = b * (y + a) + a * (x - 2 * a - b)\n        // n = b * (y + a) + a * (x - 2 * a - b - a)\n        // n = b * (y + a) + a * (x - 3 * a - b)\n        // n = b * (y + a) + a * (x - 3 * a - b - a)\n        // n = b * (y + a) + a * (x - 4 * a - b)\n        // n = b * (y + a) + a * (x - 4 * a - b - a)\n        // n = b * (y + a) + a * (x - 5 * a - b)\n        // n = b * (y + a) + a * (x - 5 * a - b - a)\n        // n = b * (y + a) + a * (x - 6 * a - b)\n        // n = b * (y + a) + a * (x - 6 * a - b - a)\n        // n = b * (y + a) + a * (x - 7 * a - b)\n        // n = b * (y + a) + a * (x - 7 * a - b - a)\n        // n = b * (y + a) + a * (x - 8 * a - b)\n        // n = b * (y + a) + a * (x - 8 * a - b - a)\n        // n = b * (y + a) + a * (x - 9 * a - b)\n        // n = b * (y + a) + a * (x - 9 * a - b - a)\n        // n = b * (",
    "        // The solution is x = nb/gcd(a,b), y = na/gcd(a,b)\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x = n * b / gcd;\n        long y = n * a / gcd;\n        return x;",
    "        // We can solve this problem using the extended Euclidean algorithm.\n        // The algorithm is as follows:\n        // 1. Let a = bq + r, where 0 <= r < b.\n        // 2. If r = 0, then b is the GCD of a and b.\n        // 3. Otherwise, set a = b and b = r, and repeat from step 1.\n        //\n        // The extended Euclidean algorithm is a variation of the Euclidean algorithm that also finds integers x and y such that ax + by = gcd(a, b).\n        // The algorithm is as follows:\n        // 1. Let a = bq + r, where 0 <= r < b.\n        // 2. If r = 0, then b is the GCD of a and b.\n        // 3. Otherwise, set a = b and b = r, and repeat from step 1.\n        // 4. Let x' and y' be the solution to ax + by = gcd(a, b).\n        // 5. Then x = y' and y = x' - qy'.\n        //\n        // We can use the extended Euclidean algorithm to solve ax + by = n by setting a = a, b = b, and n = n.\n        // If gcd(a, b) does not divide n, then there is no solution.\n        // Otherwise, we can find x and y such that ax + by = gcd(a, b).\n        // Then x' = x * (n / gcd(a, b)) and y' = y * (n / gcd(a, b)) is a solution to ax + by = n.\n        //\n        // We can implement the extended Euclidean algorithm using a loop.\n        // We initialize x = 0, y = 1, and x' = 1, y' = 0.\n        // Then we loop until r = 0.\n        // In each iteration, we set x = x', y = y', and x' = x - qy' and y' = y.\n        //\n        // We can implement the loop using a while loop.\n        // We initialize x = 0, y = 1, and x' = 1, y' = 0.\n        // Then we loop until r = 0.\n",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / gcd) + y * (n / gcd);",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / gcd) + y * (n / gcd);",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / gcd) + y * (n / gcd);",
    "        if (n % Gcd(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = n / b;\n        long d = Gcd(a, b);\n        long a1 = a / d;\n        long b1 = b / d;\n        long n1 = n / d;\n        long x1 = 0;\n        long y1 = n1 / b1;\n        long r = 1;\n        while (a1 * x1 + b1 * y1 != n1) {\n            if (r > 0) {\n                x = x1;\n                y = y1;\n            }\n            r = -r;\n            x1 = x + r * b1;\n            y1 = y - r * a1;\n        }\n        return x1;",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long a1 = a;\n        long b1 = b;\n        while (a1 != 0 && b1 != 0) {\n            long q = a1 / b1;\n            long r = a1 % b1;\n            long x = x2 - q * x1;\n            long y = y2 - q * y1;\n            a1 = b1;\n            b1 = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        if (a1 == 0) {\n            x = x2;\n            y = y2;\n        } else {\n            x = x1;\n            y = y1;\n        }\n        return x * (n / gcd);",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long m = a / b;\n            x = n / b;\n            y = n % b;\n            while (y < 0) {\n                y += b;\n                x -= m;\n            }\n        } else {\n            x = n / d;\n            y = n % d;\n        }\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long[] result = ExtendedEuclid(a, b);\n            x = result[1];\n            y = result[2];\n        } else {\n            x = (n / d) * ExtendedEuclid(a / d, b / d)[1];\n            y = (n / d) * ExtendedEuclid(a / d, b / d)[2];\n        }\n        return x;",
    "        // Use the Euclidean algorithm to find the greatest common divisor of a and b.\n        long gcd = GCD(a, b);\n        // If n is not a multiple of the greatest common divisor, there is no solution.\n        if (n % gcd != 0) {\n            return null;\n        }\n        // If n is a multiple of the greatest common divisor, then there is a solution.\n        // Use the extended Euclidean algorithm to find integers x and y that satisfy ax + by = gcd.\n        long[] xy = ExtendedEuclidean(a, b);\n        // Multiply x and y by n / gcd to find integers x and y that satisfy ax + by = n.\n        long x = xy[0] * (n / gcd);\n        long y = xy[1] * (n / gcd);\n        return new long[] { x, y };",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = a / b;\n        long r = a % b;\n        while (r > 0) {\n            long temp = x2;\n            x2 = x1 - q * x2;\n            x1 = temp;\n            temp = y2;\n            y2 = y1 - q * y2;\n            y1 = temp;\n            a = b;\n            b = r;\n            q = a / b;\n            r = a % b;\n        }\n        x = x2;\n        y = y2;\n        if (x < 0) {\n            x = x + b;\n            y = y - a;\n        }\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long x1 = 1;\n            long y1 = 0;\n            long x2 = 0;\n            long y2 = 1;\n            while (b != 0) {\n                long q = a / b;\n                long r = a % b;\n                long x = x2 - q * x1;\n                long y = y2 - q * y1;\n                a = b;\n                b = r;\n                x2 = x1;\n                x1 = x;\n                y2 = y1;\n                y1 = y;\n            }\n            x = x2;\n            y = y2;\n        }\n        else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return x;",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / gcd) + y * (n / gcd);",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        else {\n            x = n / d * b / a;\n            y = (n - a * x) / b;\n        }\n        return x;",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / gcd);",
    "        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = ExtendedEuclid(a, b, out x, out y);\n        if (d < 0) {\n            x = -x;\n            y = -y;\n            d = -d;\n        }\n        return x * (n / d);",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = a / b;\n        long r = a % b;\n        while (r > 0) {\n            long temp = x2;\n            x2 = x1 - q * x2;\n            x1 = temp;\n            temp = y2;\n            y2 = y1 - q * y2;\n            y1 = temp;\n            a = b;\n            b = r;\n            q = a / b;\n            r = a % b;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (a != 0) {\n            q = b / a;\n            long r = b % a;\n            long x = x2 - q * x1;\n            long y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return (x * (n / gcd)) + (y * (n / gcd));",
    "        // ax + by = n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = gcd(a, b) * n\n        // ax + by = g",
    "        // If a and b are both even, then n must be even.\n        if (a % 2 == 0 && b % 2 == 0 && n % 2 == 1) {\n            return null;\n        }\n        // If a is even and b is odd, then n must be odd.\n        if (a % 2 == 0 && b % 2 == 1 && n % 2 == 0) {\n            return null;\n        }\n        // If a is odd and b is even, then n must be odd.\n        if (a % 2 == 1 && b % 2 == 0 && n % 2 == 0) {\n            return null;\n        }\n        // If a and b are both odd, then n must be even.\n        if (a % 2 == 1 && b % 2 == 1 && n % 2 == 1) {\n            return null;\n        }\n        // If a and b are both odd, then n must be even.\n        if (a % 2 == 1 && b % 2 == 1 && n % 2 == 1) {\n            return null;\n        }\n        // If a is negative and b is positive, then n must be negative.\n        if (a < 0 && b > 0 && n > 0) {\n            return null;\n        }\n        // If a is positive and b is negative, then n must be negative.\n        if (a > 0 && b < 0 && n > 0) {\n            return null;\n        }\n        // If a is negative and b is negative, then n must be positive.\n        if (a < 0 && b < 0 && n < 0) {\n            return null;\n        }\n        // If a is positive and b is positive, then n must be positive.\n        if (a > 0 && b > 0 && n < 0) {\n            return null;\n        }\n        // If a is negative and b is positive, then n must be negative.\n        if (a < 0 && b > 0 && n > 0) {\n            return null;\n        }\n        // If a is positive and b is negative, then n must be negative.\n        if (a > 0 && b < 0 && n > 0) {\n            return null;\n        }\n        // If a is negative and b is negative,",
    "        // ax + by = n\n        // ax = n - by\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x = (n - by) / a\n        // x",
    "        // ax + by = n\n        // ax = n - by\n        // x = (n - by) / a\n        // x = (n - by) mod a\n        // x = (n mod a - by mod a) mod a\n        // x = (n mod a - by mod a mod a) mod a\n        // x = (n mod a - by mod a mod a mod a) mod a\n        // x = (n mod a - by mod a mod a mod a mod a) mod a\n        // x = (n mod a - by mod a mod a mod a mod a mod a) mod a\n        // x = (n mod a - by mod a mod a mod a mod a mod a mod a) mod a\n        // x = (n mod a - by mod a mod a mod a mod a mod a mod a mod a) mod a\n        // x = (n mod a - by mod a mod a mod a mod a mod a mod a mod a mod a) mod a\n        // x = (n mod a - by mod a mod a mod a mod a mod a mod a mod a mod a mod a) mod a\n        // x = (n mod a - by mod a mod a mod a mod a mod a mod a mod a mod a mod a mod a) mod a\n        // x = (n mod a - by mod a mod a mod a mod a mod a mod a mod a mod a mod a mod a mod a) mod a\n        // x = (n mod a - by mod a mod a mod a mod a mod a mod a mod a mod a mod a mod a mod a mod a) mod a\n        // x = (n mod a - by mod a mod a mod a mod a mod a mod a mod a mod a mod a mod a mod a mod a mod a) mod a\n        // x = (n mod a - by mod a mod a mod a mod a mod a mod a mod a mod a mod a mod a mod a mod a mod a mod a) mod a\n        // x = (n mod a - by mod a mod a mod a mod a mod a mod a mod a mod a mod a mod a mod a mod a mod a mod a mod a) mod a\n        // x = (n mod a - by mod a mod a mod a mod a mod a mod",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = n / b;\n        while (a * x + b * y != n) {\n            if (a * x + b * y > n) {\n                y--;\n            } else {\n                x++;\n            }\n        }\n        return x;",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long[] result = ExtendedEuclid(a, b);\n        x = result[1] * (n / gcd);\n        y = result[2] * (n / gcd);\n        return x;",
    "        // First, find the greatest common divisor of a and b.\n        long gcd = GCD(a, b);\n        // If n is not a multiple of the gcd, then no solution exists.\n        if (n % gcd != 0) {\n            return null;\n        }\n        // If a and b are both positive, then the solution is unique.\n        if (a > 0 && b > 0) {\n            return new Tuple<long, long>(n / a, 0);\n        }\n        // If a and b are both negative, then the solution is unique.\n        if (a < 0 && b < 0) {\n            return new Tuple<long, long>(0, n / b);\n        }\n        // If a is positive and b is negative, then the solution is unique.\n        if (a > 0 && b < 0) {\n            return new Tuple<long, long>(n / a, 0);\n        }\n        // If a is negative and b is positive, then the solution is unique.\n        if (a < 0 && b > 0) {\n            return new Tuple<long, long>(0, n / b);\n        }\n        // If a is zero and b is nonzero, then the solution is unique.\n        if (a == 0 && b != 0) {\n            return new Tuple<long, long>(0, n / b);\n        }\n        // If a is nonzero and b is zero, then the solution is unique.\n        if (a != 0 && b == 0) {\n            return new Tuple<long, long>(n / a, 0);\n        }\n        // If a and b are both zero, then the solution is unique.\n        if (a == 0 && b == 0) {\n            return new Tuple<long, long>(0, 0);\n        }\n        // If we get here, then a and b are both zero, and n is zero.\n        return new Tuple<long, long>(0, 0);",
    "        long x = 0;\n        long y = 0;\n        long d = 0;\n        long x1 = 1;\n        long x2 = 0;\n        long y1 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        d = b;\n        if (n % d != 0) {\n            return null;\n        }\n        x = x2 * (n / d);\n        y = y2 * (n / d);\n        return x;",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (a != 0) {\n            q = b / a;\n            long r = b % a;\n            long x = x2 - q * x1;\n            long y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        if (x < 0) {\n            x = x + b;\n            y = y - a;\n        }\n        return x;",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0)\n            return null;\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a % b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = (n / b) * x2;\n        y = (n / b) * y2;\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = n;\n            y = 0;\n            return new Tuple<long, long>(x, y);\n        }\n        x = n / d;\n        y = (n - a * x) / b;\n        return new Tuple<long, long>(x, y);",
    "        // We can use the Euclidean algorithm to find the greatest common divisor of a and b.\n        // If n is not divisible by the greatest common divisor, then no solution exists.\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n\n        // If a solution exists, then we can use the extended Euclidean algorithm to find integers x and y.\n        // We can then multiply x and y by n / gcd to get the solution.\n        long[] xy = ExtendedGCD(a, b);\n        return xy[0] * (n / gcd);",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 1;\n        long y1 = 0;\n        long x2 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        x *= n / gcd;\n        y *= n / gcd;\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d) * (n / d);\n            y = (n - a * x) / b;\n        }\n        return x;",
    "        // Solve ax + by = n for x and y.\n        // Returns a tuple (x, y) or None if no solution exists.\n        //\n        // The extended Euclidean algorithm is used to solve for x and y.\n        //\n        // The algorithm is as follows:\n        //\n        // 1.  Find the GCD of a and b.\n        // 2.  If n is not a multiple of the GCD, then there is no solution.\n        // 3.  Otherwise, find integers x and y such that ax + by = GCD(a, b).\n        // 4.  The solution to the original problem is (x * (n / GCD(a, b)), y * (n / GCD(a, b))).\n        //\n        // The GCD is found using the Euclidean algorithm.\n        //\n        // The integers x and y are found using the extended Euclidean algorithm.\n        //\n        // The extended Euclidean algorithm is as follows:\n        //\n        // 1.  Let a = a1 * b + a2, where a1 = a / b and a2 = a % b.\n        // 2.  Let b = b1 * a2 + b2, where b1 = b / a2 and b2 = b % a2.\n        // 3.  If b2 = 0, then stop.  a2 is the GCD.\n        // 4.  Let a = a2, b = b2, and repeat step 1.\n        //\n        // The extended Euclidean algorithm is used to find integers x and y such that ax + by = GCD(a, b).\n        //\n        // The algorithm is as follows:\n        //\n        // 1.  Let a = a1 * b + a2, where a1 = a / b and a2 = a % b.\n        // 2.  Let b = b1 * a2 + b2, where b1 = b / a2 and b2 = b % a2.\n        // 3.  If b2 = 0, then stop.\n        // 4.  Let x = x2 - (a / b) * x1, where x1 = x and x2 = y.\n        // 5.  Let y",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        long a1 = a / d;\n        long b1 = b / d;\n        long n1 = n / d;\n        long[] result = ExtendedEuclidean(a1, b1);\n        x = result[1];\n        y = result[2];\n        x *= n1;\n        y *= n1;\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = n / a;\n            y = (n - a * x) / b;\n        } else {\n            x = n / (a / d);\n            y = (n - a * x) / (b / d);\n        }\n        return new Tuple<long, long>(x, y);",
    "        if (n % GCD(a, b) != 0) return null;\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        long a1 = a / d;\n        long b1 = b / d;\n        long n1 = n / d;\n        ExtendedEuclid(a1, b1, ref x, ref y);\n        x *= n1;\n        y *= n1;\n        return x;",
    "        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        long a1 = a / d;\n        long b1 = b / d;\n        long n1 = n / d;\n        long x1 = 0;\n        long y1 = 0;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (b1 != 0) {\n            q = a1 / b1;\n            long r = a1 % b1;\n            long x = x2 - q * x1;\n            long y = y2 - q * y1;\n            a1 = b1;\n            b1 = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = n1 * x2;\n        y = n1 * y2;\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d) * (n / d);\n            y = (n - a * x) / b;\n        }\n        return x;",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (a != 0) {\n            q = b / a;\n            long r = b % a;\n            long x = x2 - q * x1;\n            long y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2 * (n / gcd);\n        y = y2 * (n / gcd);\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a * x / d) / (b / d);\n        }\n        return (x, y);",
    "        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        // TODO: Implement this function.\n        return null;",
    "        // a = bq + r\n        long q = a / b;\n        long r = a % b;\n        if (r == 0) {\n            return 0;\n        }\n        long x = 0;\n        long y = 1;\n        long x1 = 1;\n        long y1 = -q;\n        long x2 = 0;\n        long y2 = 1;\n        long r2 = b;\n        long q2 = a % b;\n        while (r2 > 0) {\n            long m = a / b;\n            long r1 = r2;\n            long q1 = q2;\n            r2 = a % b;\n            q2 = a / b;\n            x = x2;\n            x2 = x1 - q2 * x2;\n            x1 = x;\n            y = y2;\n            y2 = y1 - q2 * y2;\n            y1 = y;\n        }\n        if (n % r1 != 0) {\n            return null;\n        }\n        return x1 * (n / r1);",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (a != 0) {\n            q = b / a;\n            long r = b % a;\n            long x = x2 - q * x1;\n            long y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2 * (n / gcd);\n        y = y2 * (n / gcd);\n        return new Tuple<long, long>(x, y);",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        x *= n / gcd;\n        y *= n / gcd;\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        long x1 = 1;\n        long x2 = 0;\n        long y1 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);",
    "        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = n;\n            y = 0;\n        } else {\n            x = n / d;\n            y = (b / d) - (a / d) * x;\n        }\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a * x / d) / (b / d);\n        }\n        return x;",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        x *= n / gcd;\n        y *= n / gcd;\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        if (a == 0 && b == 0) {\n            return null;\n        }\n        if (a == 0) {\n            return n / b;\n        }\n        if (b == 0) {\n            return n / a;\n        }\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = gcd;\n        long x1 = 1;\n        long x2 = 0;\n        long y1 = 0;\n        long y2 = 1;\n        while (a != 0) {\n            long q = b / a;\n            long r = b % a;\n            long m = x2 - q * x1;\n            long n = y2 - q * y1;\n            x = m;\n            y = n;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        else {\n            x = n / d * b / a;\n            y = (n - a * x) / b;\n        }\n        return x;",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / gcd) + y * (n / gcd);",
    "        // a and b are relatively prime\n        if (a == 0 || b == 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        // find some solution (x0, y0)\n        long x0 = 0;\n        long y0 = 0;\n        long d0 = ExtendedGCD(a, b, ref x0, ref y0);\n        Debug.Assert(a * x0 + b * y0 == d0);\n        // the required solution is (x0 * (n / d), y0 * (n / d))\n        x = x0 * (n / d);\n        y = y0 * (n / d);\n        return (x, y);",
    "        long x = 0;\n        long y = 0;\n        long d = ExtendedEuclid(a, b, ref x, ref y);\n        if (n % d != 0) {\n            return null;\n        }\n        long x0 = x * (n / d);\n        long y0 = y * (n / d);\n        long k = b / d;\n        x0 = x0 % k;\n        if (x0 < 0) {\n            x0 += k;\n        }\n        return x0;",
    "        // a = bq + r\n        // n = ax + by\n        // n = bqx + rx + by\n        // n = b(qx + y) + r(x)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        // r = n - b(qx + y)\n        //",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (a != 0) {\n            q = b / a;\n            long r = b % a;\n            long rx = x2 - q * x1;\n            long ry = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = rx;\n            y2 = y1;\n            y1 = ry;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);",
    "        if (a == 0 && b == 0) {\n            return n == 0 ? 0 : (Nullable<long>)null;\n        }\n        if (a == 0) {\n            return n % b == 0 ? 0 : (Nullable<long>)null;\n        }\n        if (b == 0) {\n            return n % a == 0 ? 0 : (Nullable<long>)null;\n        }\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x0, y0;\n        ExtendedGCD(a, b, out x0, out y0);\n        long x = x0 * (n / d);\n        long y = y0 * (n / d);\n        return x + y * b / d;",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long[] result = ExtendedEuclid(a, b);\n        x = result[1] * (n / gcd);\n        y = result[2] * (n / gcd);\n        return x;",
    "        if (n % GCD(a, b) != 0) return null;\n        long x = 0, y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a / d * x) / (b / d);\n        }\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        long a1 = a / d;\n        long b1 = b / d;\n        long n1 = n / d;\n        ExtendedEuclid(a1, b1, out x, out y);\n        if (n1 < 0) {\n            x = -x;\n            y = -y;\n            n1 = -n1;\n        }\n        return x * n1;",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        if (x < 0) {\n            x = x + b;\n            y = y - a;\n        }\n        return x;",
    "        // ax + by = n\n        // ax = n - by\n        // x = (n - by)/a\n        // y = (n - ax)/b\n        // y = (n - (n - by)/a)/b\n        // y = (n - n/a + by/a)/b\n        // y = (n/a - by/a)/b\n        // y = (n/a - (n - ax)/b)/b\n        // y = (n/a - n/b + ax/b)/b\n        // y = (n/a - n/b + (n - by)/b)/b\n        // y = (n/a - n/b + n/b - by/b)/b\n        // y = (n/a - n/b + n/b - n/a + ay/a)/b\n        // y = (2n/a - n/b + ay/a)/b\n        // y = (2n/a - n/b + (n - by)/a)/b\n        // y = (2n/a - n/b + n/a - by/a)/b\n        // y = (3n/a - n/b - by/a)/b\n        // y = (3n/a - n/b - (n - ax)/b)/b\n        // y = (3n/a - n/b - n/b + ax/b)/b\n        // y = (3n/a - 2n/b + ax/b)/b\n        // y = (3n/a - 2n/b + (n - by)/a)/b\n        // y = (3n/a - 2n/b + n/a - by/a)/b\n        // y = (4n/a - 2n/b - by/a)/b\n        // y = (4n/a - 2n/b - (n - ax)/b)/b\n        // y = (4n/a - 2n/b - n/b + ax/b)/b\n        // y = (4n/a - 3n/b + ax/b)/b\n        // y = (4n/a - 3n/b + (n - by)/a",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = n / b;\n        while (x * a + y * b != n) {\n            if (x * a + y * b < n) {\n                x++;\n            } else {\n                y--;\n            }\n        }\n        return x;",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 1;\n        long y1 = 0;\n        long x2 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        if (x < 0) {\n            x = x + b;\n        }\n        if (y < 0) {\n            y = y + a;\n        }\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b) * n;\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d) * (n / d);\n            y = (n - a * x) / b;\n        }\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = ModInverse(a, b);\n            y = (n - a * x) / b;\n        } else {\n            x = ModInverse(a / d, b / d);\n            y = (n / d - a * x / d) / (b / d);\n        }\n        return x;",
    "        // TODO: Implement this function\n        return null;",
    "        if (n % GCD(a, b) != 0) return null;\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long m = a * b;\n            long s = m / a;\n            long t = m / b;\n            x = (n * s) % m;\n            y = (n * t) % m;\n        } else {\n            a /= d;\n            b /= d;\n            n /= d;\n            long m = a * b;\n            long s = m / a;\n            long t = m / b;\n            x = (n * s) % m;\n            y = (n * t) % m;\n            x *= d;\n            y *= d;\n        }\n        return x;",
    "        if (a == 0 && b == 0) {\n            return null;\n        }\n        if (a == 0) {\n            return n / b;\n        }\n        if (b == 0) {\n            return n / a;\n        }\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = gcd;\n        long x1 = 1;\n        long y1 = 0;\n        long x2 = 0;\n        long y2 = 1;\n        while (a != 0) {\n            long q = b / a;\n            long r = b % a;\n            long m = x2 - q * x1;\n            long n2 = y2 - q * y1;\n            x = m;\n            y = n2;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        long x = 0;\n        long y = 0;\n        long d = ExtendedGCD(a, b, ref x, ref y);\n        if (n % d != 0) {\n            return null;\n        }\n        long x0 = x * (n / d);\n        long y0 = y * (n / d);\n        return x0;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = n;\n            y = 0;\n        } else {\n            x = n / d;\n            y = (b / d) - (a / d) * x;\n        }\n        return new Tuple<long, long>(x, y);",
    "        // TODO: Implement this function.\n        return null;",
    "        // ax + by = n\n        // ax = n - by\n        // x = (n - by) / a\n        // y = (n - ax) / b\n        // y = (n - (n - by) / a) / b\n        // y = (n - n / a + by / a) / b\n        // y = (n / a - by / a) / b\n        // y = (n / a - b(n - by) / a^2) / b\n        // y = (n / a - bn / a^2 + b^2y / a^2) / b\n        // y = (n / a - bn / a^2) / b + b^2y / a^2b\n        // y = (n / a - bn / a^2) / b + y\n        // y(1 - b / a^2) = (n / a - bn / a^2) / b\n        // y = (n / a - bn / a^2) / b / (1 - b / a^2)\n        // y = (n / a - bn / a^2) / (b - b^2 / a^2)\n        // y = (n / a - bn / a^2) / (b - b^2 / a^2)\n        // y = (n / a - bn / a^2) / (b - b^2 / a^2)\n        // y = (n / a - bn / a^2) / (b - b^2 / a^2)\n        // y = (n / a - bn / a^2) / (b - b^2 / a^2)\n        // y = (n / a - bn / a^2) / (b - b^2 / a^2)\n        // y = (n / a - bn / a^2) / (b - b^2 / a^2)\n        // y = (n / a - bn / a^2) / (b - b^2 / a^2)\n        // y = (n / a - bn / a^2) / (b - b^2 / a^2)\n",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        long a1 = a / d;\n        long b1 = b / d;\n        long n1 = n / d;\n        ExtendedEuclid(a1, b1, out x, out y);\n        if (n1 < 0) {\n            x = -x;\n            y = -y;\n            n1 = -n1;\n        }\n        return x * n1;",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 1;\n        long y1 = 0;\n        long x2 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        if (n % GCD(a, b) != 0) return null;\n        long x, y;\n        long d = ExtendedEuclid(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        else {\n            x = n / d * b / a;\n            y = (n - a * x) / b;\n        }\n        return x;",
    "        // If a and b are both even, then there is no solution.\n        if (a % 2 == 0 && b % 2 == 0) {\n            return null;\n        }\n        // If a is even and b is odd, then x = n/a and y = 0.\n        if (a % 2 == 0 && b % 2 == 1) {\n            return new Nullable<long>(n / a);\n        }\n        // If a is odd and b is even, then x = 0 and y = n/b.\n        if (a % 2 == 1 && b % 2 == 0) {\n            return new Nullable<long>(n / b);\n        }\n        // If a and b are both odd, then x = n/a and y = n/b.\n        if (a % 2 == 1 && b % 2 == 1) {\n            return new Nullable<long>(n / a);\n        }\n        return null;",
    "        long x = 0;\n        long y = 0;\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long d = GCD(a, b);\n        x = (n / d) * (b / d);\n        y = (n / d) * (a / d);\n        return x;",
    "        if (n % Gcd(a, b) != 0) {\n            return null;\n        }\n        long x, y;\n        long d = GcdExtended(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / gcd);",
    "        // The solution is x = n * b^-1 (mod a), y = n * a^-1 (mod b)\n        // where b^-1 is the modular inverse of b modulo a, and a^-1 is the modular inverse of a modulo b.\n        // The modular inverse of b modulo a is the number x such that bx = 1 (mod a).\n        // The modular inverse of a modulo b is the number y such that ay = 1 (mod b).\n        // The modular inverse of b modulo a is the number x such that bx = 1 (mod a).\n        // The modular inverse of a modulo b is the number y such that ay = 1 (mod b).\n        // The modular inverse of b modulo a is the number x such that bx = 1 (mod a).\n        // The modular inverse of a modulo b is the number y such that ay = 1 (mod b).\n        // The modular inverse of b modulo a is the number x such that bx = 1 (mod a).\n        // The modular inverse of a modulo b is the number y such that ay = 1 (mod b).\n        // The modular inverse of b modulo a is the number x such that bx = 1 (mod a).\n        // The modular inverse of a modulo b is the number y such that ay = 1 (mod b).\n        // The modular inverse of b modulo a is the number x such that bx = 1 (mod a).\n        // The modular inverse of a modulo b is the number y such that ay = 1 (mod b).\n        // The modular inverse of b modulo a is the number x such that bx = 1 (mod a).\n        // The modular inverse of a modulo b is the number y such that ay = 1 (mod b).\n        // The modular inverse of b modulo a is the number x such that bx = 1 (mod a).\n        // The modular inverse of a modulo b is the number y such that ay = 1 (mod b).\n        // The modular inverse of b modulo a is the number x such that bx = 1 (mod a).\n        // The modular inverse of a modulo b is the number y such that ay = 1 (mod b).\n        // The modular inverse of b",
    "        // TODO: Implement this function\n        return null;",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / gcd);",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            x = n;\n            y = 0;\n            return new long[] { x, y };\n        }\n        x = n / d;\n        y = (n - a * x) / b;\n        return new long[] { x, y };",
    "        // TODO: Implement this function\n        return null;",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a % b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = (n / d) * x2;\n        y = (n / d) * y2;\n        return new Nullable<long>(x);",
    "        // a and b are relatively prime\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        // a and b are not relatively prime\n        else {\n            long x = 0;\n            long y = 0;\n            long d = GCD(a, b);\n            long a1 = a / d;\n            long b1 = b / d;\n            long n1 = n / d;\n            long[] result = ExtendedEuclid(a1, b1);\n            x = result[1];\n            y = result[2];\n            x *= n1;\n            y *= n1;\n            return new long[] { x, y };\n        }",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = a / b;\n        long r = a % b;\n        while (r > 0) {\n            long temp = x2;\n            x2 = x1 - q * x2;\n            x1 = temp;\n            temp = y2;\n            y2 = y1 - q * y2;\n            y1 = temp;\n            a = b;\n            b = r;\n            q = a / b;\n            r = a % b;\n        }\n        x = x2;\n        y = y2;\n        if (x < 0) {\n            x = x + b;\n            y = y - a;\n        }\n        return x;",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 1;\n        long y1 = 0;\n        long x2 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        long r = 0;\n        while (a != 0) {\n            q = b / a;\n            r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / gcd) + y * (n / gcd);",
    "        if (n % GCD(a, b) != 0)\n            return null;\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0)\n            return null;\n        else {\n            long x1 = 1;\n            long x2 = 0;\n            long y1 = 0;\n            long y2 = 1;\n            long q = 0;\n            long r = 0;\n            while (a % b != 0) {\n                q = a / b;\n                r = a % b;\n                x = x2 - q * x1;\n                y = y2 - q * y1;\n                a = b;\n                b = r;\n                x2 = x1;\n                x1 = x;\n                y2 = y1;\n                y1 = y;\n            }\n            x = x2;\n            y = y2;\n        }\n        return x * (n / d) + y * (n / d);",
    "        // ax + by = n\n        // ax = n - by\n        // x = (n - by) / a\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a)",
    "        // Your code here\n        return null;",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long a1 = a;\n        long b1 = b;\n        while (a1 != 0) {\n            long q = b1 / a1;\n            long r = b1 % a1;\n            long x = x2 - q * x1;\n            long y = y2 - q * y1;\n            b1 = a1;\n            a1 = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2 * (n / gcd);\n        y = y2 * (n / gcd);\n        return x;",
    "        // ax + by = n\n        // ax = n - by\n        // x = (n - by) / a\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a) * y\n        // x = (n / a) - (b / a)",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x, y;\n        long d = GCD(a, b, out x, out y);\n        x *= n / d;\n        y *= n / d;\n        return x;",
    "        // TODO: Implement\n        return null;",
    "        // x = n/a - b/a * y\n        // y = (n - ax) / b\n        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = n / a - b / a * y;\n        long y = (n - a * x) / b;\n        return (x, y);",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        long x1 = 1;\n        long x2 = 0;\n        long y1 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);",
    "        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (n % d != 0) {\n            return null;\n        }\n        long x1 = 1;\n        long y1 = 0;\n        long x2 = 0;\n        long y2 = 1;\n        long q = 0;\n        while (b != 0) {\n            q = a / b;\n            long r = a % b;\n            long x = x1 - q * x2;\n            long y = y1 - q * y2;\n            a = b;\n            b = r;\n            x1 = x2;\n            x2 = x;\n            y1 = y2;\n            y2 = y;\n        }\n        x = x1 * (n / d);\n        y = y1 * (n / d);\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 1) {\n            long m = a;\n            long s = 1;\n            long t = 0;\n            long r = b;\n            long old_m = 1;\n            long old_s = 0;\n            long old_t = 1;\n            long old_r = a;\n            while (r != 0) {\n                long q = m / r;\n                long temp = m;\n                m = r;\n                r = temp % r;\n                temp = s;\n                s = old_s - q * s;\n                old_s = temp;\n                temp = t;\n                t = old_t - q * t;\n                old_t = temp;\n            }\n            x = old_s;\n            y = old_t;\n        } else {\n            x = (n / d) * (b / d);\n            y = (n / d) * (a / d);\n        }\n        return x;",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        long x1 = 1;\n        long y1 = 0;\n        long x2 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        long x1 = 1;\n        long x2 = 0;\n        long y1 = 0;\n        long y2 = 1;\n        long q = 0;\n        long r = 0;\n        while (b != 0) {\n            q = a / b;\n            r = a % b;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            a = b;\n            b = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / d) + y * (n / d);",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        long a1 = a / d;\n        long b1 = b / d;\n        long n1 = n / d;\n        long[] result = ExtendedEuclid(a1, b1);\n        x = n1 * result[0];\n        y = n1 * result[1];\n        return x;",
    "        // ax + by = n\n        // ax = n - by\n        // x = (n - by) / a\n        // y = (n - ax) / b\n        // y = (n - (n - by)) / b\n        // y = (n - n + by) / b\n        // y = by / b\n        // y = y\n        // x = (n - by) / a\n        // x = (n - yb) / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n        // x = n / a - yb / a\n",
    "        // a and b are coprime, so there exists integers x and y such that ax + by = n\n        // ax + by = n\n        // ax = n - by\n        // x = (n - by) / a\n        // x = (n / a) - (by / a)\n        // x = (n / a) - (b / a)y\n        // y = (n - ax) / b\n        // y = (n / b) - (ax / b)\n        // y = (n / b) - (a / b)x\n        // x = (n / a) - (b / a)y\n        // (n / a) - (b / a)y = (n / b) - (a / b)x\n        // (n / a) - (n / b) = (b / a)y - (a / b)x\n        // (n / a) - (n / b) = (b / a)y - (a / b)x\n        // (n / a) - (n / b) = (b / a)y - (a / b)x\n        // (n / a) - (n / b) = (b / a)y - (a / b)x\n        // (n / a) - (n / b) = (b / a)y - (a / b)x\n        // (n / a) - (n / b) = (b / a)y - (a / b)x\n        // (n / a) - (n / b) = (b / a)y - (a / b)x\n        // (n / a) - (n / b) = (b / a)y - (a / b)x\n        // (n / a) - (n / b) = (b / a)y - (a / b)x\n        // (n / a) - (n / b) = (b / a)y - (a / b)x\n        // (n / a) - (n / b) = (b / a)y - (a / b)x\n        // (n / a) - (n / b) = (b / a)y - (a / b)x",
    "        if (n % GCD(a, b) != 0) {\n            return null;\n        }\n        long x = 0;\n        long y = 0;\n        long d = GCD(a, b);\n        if (d == 0) {\n            return null;\n        }\n        long x1 = 1;\n        long x2 = 0;\n        long y1 = 0;\n        long y2 = 1;\n        while (a % d == 0 && b % d == 0) {\n            long q = a / d;\n            long r = b / d;\n            long m = x2 - q * x1;\n            long n = y2 - q * y1;\n            x = m;\n            y = n;\n            a = d;\n            b = r;\n            d = GCD(a, b);\n        }\n        return x * (n / d) + y * (n / d);",
    "        long x = 0;\n        long y = 0;\n        long gcd = GCD(a, b);\n        if (n % gcd != 0) {\n            return null;\n        }\n        long x1 = 0;\n        long y1 = 1;\n        long x2 = 1;\n        long y2 = 0;\n        long q = 0;\n        while (a != 0) {\n            q = b / a;\n            long r = b % a;\n            x = x2 - q * x1;\n            y = y2 - q * y1;\n            b = a;\n            a = r;\n            x2 = x1;\n            x1 = x;\n            y2 = y1;\n            y1 = y;\n        }\n        x = x2;\n        y = y2;\n        return x * (n / gcd) + y * (n / gcd);"
  ]
}