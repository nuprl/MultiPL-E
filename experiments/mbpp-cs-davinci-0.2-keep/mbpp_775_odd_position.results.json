{
  "name": "mbpp_775_odd_position",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n            if (i % 2 == 0 && nums[i] % 2 == 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        // Write your code here\n        return nums.Select((x, i) => (x, i)).Where(x => x.i % 2 == 1).All(x => x.x % 2 == 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0) {\n                if (nums[i] % 2 == 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3dbf09b77724524985f1475f3f7d6e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3dbf09b77724524985f1475f3f7d6e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 1; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2)\n            if (nums[i] % 2 == 0)\n                return false;\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5e43fea4e302452bb47ab391d210eba1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5e43fea4e302452bb47ab391d210eba1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0) {\n                if (nums[i] % 2 == 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3dbf09b77724524985f1475f3f7d6e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3dbf09b77724524985f1475f3f7d6e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        return nums.Where((num, index) => index % 2 == 1).All(num => num % 2 == 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        return nums.Where((x, i) => i % 2 == 1).All(x => x % 2 == 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0) {\n                if (nums[i] % 2 == 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3dbf09b77724524985f1475f3f7d6e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3dbf09b77724524985f1475f3f7d6e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        return nums.Where((x, i) => i % 2 == 1).All(x => x % 2 == 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        return nums.Where((x, i) => i % 2 == 1).All(x => x % 2 == 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 1; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        // Write your code here\n        return nums.Select((x, i) => new { x, i }).Where(x => x.i % 2 == 1).All(x => x.x % 2 == 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0) {\n                if (nums[i] % 2 == 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3dbf09b77724524985f1475f3f7d6e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3dbf09b77724524985f1475f3f7d6e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n            if (i % 2 == 0 && nums[i] % 2 == 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 1; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n            if (i % 2 == 0 && nums[i] % 2 == 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 1; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0) {\n                if (nums[i] % 2 == 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3dbf09b77724524985f1475f3f7d6e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3dbf09b77724524985f1475f3f7d6e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0) {\n                if (nums[i] % 2 == 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3dbf09b77724524985f1475f3f7d6e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3dbf09b77724524985f1475f3f7d6e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0) {\n                if (nums[i] % 2 == 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3dbf09b77724524985f1475f3f7d6e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3dbf09b77724524985f1475f3f7d6e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0) {\n                if (nums[i] % 2 == 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3dbf09b77724524985f1475f3f7d6e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3dbf09b77724524985f1475f3f7d6e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 1; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        bool result = true;\n        for (int i = 1; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                result = false;\n                break;\n            }\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 1; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0) {\n                if (nums[i] % 2 == 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3dbf09b77724524985f1475f3f7d6e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <e3dbf09b77724524985f1475f3f7d6e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        return nums.Where((x, i) => i % 2 == 1).All(x => x % 2 == 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        return nums.Where((x, i) => i % 2 == 1).All(x => x % 2 == 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 0 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510191,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f536090b842643fbba97ee47d58a2c86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i++) {\n            if (i % 2 == 1 && nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510190,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <fba7ed339d8f42aa85d45c7e48f34ec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        return nums.Where((x, i) => i % 2 == 1).All(x => x % 2 == 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123386,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}