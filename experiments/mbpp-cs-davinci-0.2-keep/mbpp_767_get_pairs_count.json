{
  "name": "mbpp_767_get_pairs_count",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Create a dictionary to store the number of occurences of each number in the list\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        foreach (var num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        // Iterate through the dictionary and count the number of pairs\n        long counter = 0;\n        foreach (var key in dict.Keys) {\n            if (dict.ContainsKey(sum - key)) {\n                if (key == sum - key) {\n                    counter += dict[key] * (dict[key] - 1) / 2;\n                } else {\n                    counter += dict[key] * dict[sum - key];\n                }\n            }\n        }\n        return counter;",
    "        // Create a hash table to store the counts of the elements in the array\n        Dictionary<long, long> counts = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (counts.ContainsKey(num)) {\n                counts[num]++;\n            } else {\n                counts.Add(num, 1);\n            }\n        }\n        // Iterate through the array and count the pairs\n        long pairsCount = 0;\n        foreach (long num in arr) {\n            long pair = sum - num;\n            if (counts.ContainsKey(pair)) {\n                pairsCount += counts[pair];\n            }\n        }\n        return pairsCount;",
    "        // create a hashmap to store the number of occurences of each number in the list\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n        // iterate through the list and add the number to the hashmap\n        // if the number is already in the hashmap, increment the count\n        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n                dict[num]++;\n            } else {\n                dict.Add(num, 1);\n            }\n        }\n        // initialize the count to 0\n        long count = 0;\n        // iterate through the list\n        foreach (long num in arr) {\n            // if the number is less than half of the sum, then we can find a pair\n            if (num < sum / 2) {\n                // get the number that would make the sum equal to the sum\n                long num2 = sum - num;\n                // if the number is in the hashmap, then we can make a pair\n                if (dict.ContainsKey(num2)) {\n                    // add the number of occurences of the number to the count\n                    count += dict[num2];\n                    // if the number is equal to the number that would make the sum equal to the sum, then we need to subtract 1 from the count\n                    // because we don't want to count the number twice\n                    if (num == num2) {\n                        count--;\n                    }\n                }\n            }\n        }\n        // divide the count by 2 because we are counting each pair twice\n        return count / 2;",
    "        Dictionary<long, long> dict = new Dictionary<long, long>();\n        long count = 0;\n        foreach (long item in arr) {\n            if (dict.ContainsKey(item)) {\n                dict[item]++;\n            } else {\n                dict.Add(item, 1);\n            }\n        }\n        foreach (long item in arr) {\n            if (dict.ContainsKey(sum - item)) {\n                count += dict[sum - item];\n                if (sum - item == item) {\n                    count--;\n                }\n            }\n        }\n        return count / 2;",
    "        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++)\n        {\n            for (int j = i + 1; j < arr.Count; j++)\n            {\n                if (arr[i] + arr[j] == sum)\n                {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Your code goes here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        var dict = new Dictionary<long, long>();\n        foreach (var item in arr) {\n            if (dict.ContainsKey(item)) {\n                dict[item]++;\n            } else {\n                dict.Add(item, 1);\n            }\n        }\n        long result = 0;\n        foreach (var item in arr) {\n            if (dict.ContainsKey(sum - item)) {\n                result += dict[sum - item];\n                if (item == sum - item) {\n                    result--;\n                }\n            }\n        }\n        return result / 2;",
    "        // Create a dictionary to store the frequency of each number in the list\n        Dictionary<long, long> freq = new Dictionary<long, long>();\n        foreach (long num in arr) {\n            if (freq.ContainsKey(num)) {\n                freq[num]++;\n            } else {\n                freq.Add(num, 1);\n            }\n        }\n        // Count the number of pairs\n        long pairsCount = 0;\n        foreach (long num in arr) {\n            long complement = sum - num;\n            if (freq.ContainsKey(complement)) {\n                pairsCount += freq[complement];\n            }\n            if (complement == num) {\n                pairsCount--;\n            }\n        }\n        return pairsCount / 2;",
    "        // Your code goes here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Write your code here\n        return 0;",
    "        // return arr.SelectMany((x, i) => arr.Skip(i + 1), (x, y) => new { x, y }).Where(x => x.x + x.y == sum).Count();\n        return arr.SelectMany((x, i) => arr.Skip(i + 1), (x, y) => new { x, y }).Count(x => x.x + x.y == sum);",
    "        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                if (arr[i] + arr[j] == sum) {\n                    count++;\n                }\n            }\n        }\n        return count;",
    "        // Create a hash table to store the counts of the elements\n        Dictionary<long, long> hash = new Dictionary<long, long>();\n        // Iterate over the list and add the elements to the hash table\n        for (int i = 0; i < arr.Count; i++) {\n            if (hash.ContainsKey(arr[i])) {\n                hash[arr[i]]++;\n            } else {\n                hash.Add(arr[i], 1);\n            }\n        }\n        // Iterate over the list and check if the sum - arr[i] is in the hash table\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (hash.ContainsKey(sum - arr[i])) {\n                count += hash[sum - arr[i]];\n            }\n        }\n        // Return the count\n        return count;"
  ]
}