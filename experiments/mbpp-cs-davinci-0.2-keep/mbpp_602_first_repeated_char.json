{
  "name": "mbpp_602_first_repeated_char",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the first repeated character in a given string.\n    public static string FirstRepeatedChar(string str1) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FirstRepeatedChar((\"abcabc\")).Equals((\"a\")));\n    Debug.Assert(FirstRepeatedChar((\"abc\")).Equals(null));\n    Debug.Assert(FirstRepeatedChar((\"123123\")).Equals((\"1\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Create a dictionary to store the count of each character.\n        Dictionary<char, int> charCount = new Dictionary<char, int>();\n        // Iterate through each character in the string.\n        foreach (char c in str1) {\n            // If the character is already in the dictionary, return the character.\n            if (charCount.ContainsKey(c)) {\n                return c.ToString();\n            }\n            // If the character is not in the dictionary, add it to the dictionary.\n            else {\n                charCount.Add(c, 1);\n            }\n        }\n        // If no repeated characters are found, return null.\n        return null;",
    "        string result = \"\";\n        int[] count = new int[256];\n        for (int i = 0; i < str1.Length; i++) {\n            if (count[str1[i]] == 1) {\n                result = str1[i].ToString();\n                break;\n            }\n            count[str1[i]]++;\n        }\n        return result;",
    "        Dictionary<char, int> dict = new Dictionary<char, int>();\n        foreach (char c in str1) {\n            if (dict.ContainsKey(c)) {\n                return c.ToString();\n            }\n            else {\n                dict.Add(c, 1);\n            }\n        }\n        return \"\";",
    "        // Create a dictionary to store the count of each character\n        Dictionary<char, int> charCount = new Dictionary<char, int>();\n\n        // Loop through the string and add each character to the dictionary\n        foreach (char c in str1) {\n            if (charCount.ContainsKey(c)) {\n                charCount[c]++;\n            } else {\n                charCount.Add(c, 1);\n            }\n        }\n\n        // Loop through the string again and return the first character that has a count of more than 1\n        foreach (char c in str1) {\n            if (charCount[c] > 1) {\n                return c.ToString();\n            }\n        }\n\n        // If no character is repeated, return null\n        return null;",
    "        char[] chars = str1.ToCharArray();\n        Dictionary<char, int> charCount = new Dictionary<char, int>();\n        foreach (char c in chars) {\n            if (charCount.ContainsKey(c)) {\n                charCount[c]++;\n            } else {\n                charCount.Add(c, 1);\n            }\n        }\n        foreach (char c in chars) {\n            if (charCount[c] > 1) {\n                return c.ToString();\n            }\n        }\n        return \"\";",
    "        // Create a dictionary to store the characters and their counts\n        Dictionary<char, int> charDict = new Dictionary<char, int>();\n        // Iterate through the string\n        for (int i = 0; i < str1.Length; i++) {\n            // If the character is in the dictionary, return it\n            if (charDict.ContainsKey(str1[i])) {\n                return str1[i].ToString();\n            }\n            // Otherwise, add it to the dictionary\n            else {\n                charDict.Add(str1[i], 1);\n            }\n        }\n        // If no repeated characters are found, return null\n        return null;",
    "        var charCount = new Dictionary<char, int>();\n        foreach (var c in str1) {\n            if (charCount.ContainsKey(c)) {\n                charCount[c]++;\n            } else {\n                charCount[c] = 1;\n            }\n        }\n        foreach (var c in str1) {\n            if (charCount[c] > 1) {\n                return c.ToString();\n            }\n        }\n        return \"\";",
    "        // Create a dictionary to store the count of each character\n        Dictionary<char, int> charCount = new Dictionary<char, int>();\n        // Iterate through each character in the string\n        foreach (char c in str1) {\n            // If the character is not in the dictionary, add it\n            if (!charCount.ContainsKey(c)) {\n                charCount.Add(c, 1);\n            }\n            // Otherwise, increment the count\n            else {\n                charCount[c]++;\n            }\n        }\n        // Iterate through each character in the string\n        foreach (char c in str1) {\n            // If the character count is greater than 1, return it\n            if (charCount[c] > 1) {\n                return c.ToString();\n            }\n        }\n        // If no repeated characters are found, return null\n        return null;",
    "        char[] chars = str1.ToCharArray();\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        for (int i = 0; i < chars.Length; i++) {\n            if (dict.ContainsKey(chars[i])) {\n                return chars[i].ToString();\n            }\n            else {\n                dict.Add(chars[i], 1);\n            }\n        }\n        return \"\";",
    "        string result = \"\";\n        Dictionary<char, int> charCount = new Dictionary<char, int>();\n        foreach (char c in str1) {\n            if (charCount.ContainsKey(c)) {\n                charCount[c]++;\n            } else {\n                charCount.Add(c, 1);\n            }\n        }\n        foreach (KeyValuePair<char, int> kvp in charCount) {\n            if (kvp.Value > 1) {\n                result = kvp.Key.ToString();\n                break;\n            }\n        }\n        return result;",
    "        char[] str = str1.ToCharArray();\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        for (int i = 0; i < str.Length; i++) {\n            if (dict.ContainsKey(str[i])) {\n                return str[i].ToString();\n            }\n            else {\n                dict.Add(str[i], 1);\n            }\n        }\n        return \"\";",
    "        // Create a dictionary to store the count of each character\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        // Loop through the string\n        foreach (char c in str1) {\n            // If the character is already in the dictionary, return it\n            if (dict.ContainsKey(c)) {\n                return c.ToString();\n            }\n            // Otherwise, add it to the dictionary\n            else {\n                dict.Add(c, 1);\n            }\n        }\n        // If no repeated characters are found, return None\n        return \"None\";",
    "        var charCount = new Dictionary<char, int>();\n        foreach(char c in str1) {\n            if(charCount.ContainsKey(c)) {\n                return c.ToString();\n            }\n            charCount.Add(c, 1);\n        }\n        return \"\";",
    "        var dict = new Dictionary<char, int>();\n        foreach (var c in str1) {\n            if (dict.ContainsKey(c)) {\n                return c.ToString();\n            }\n            dict[c] = 1;\n        }\n        return \"\";",
    "        var charDict = new Dictionary<char, int>();\n        foreach (char c in str1) {\n            if (charDict.ContainsKey(c)) {\n                return c.ToString();\n            } else {\n                charDict.Add(c, 1);\n            }\n        }\n        return \"\";",
    "        // Write your code here\n        string result = \"\";\n        for (int i = 0; i < str1.Length; i++) {\n            for (int j = i + 1; j < str1.Length; j++) {\n                if (str1[i] == str1[j]) {\n                    result = str1[i].ToString();\n                    return result;\n                }\n            }\n        }\n        return result;",
    "        var charDict = new Dictionary<char, int>();\n        foreach (var c in str1) {\n            if (charDict.ContainsKey(c)) {\n                return c.ToString();\n            }\n            charDict[c] = 1;\n        }\n        return \"\";",
    "        var dict = new Dictionary<char, int>();\n        foreach (var c in str1) {\n            if (dict.ContainsKey(c)) {\n                return c.ToString();\n            }\n            dict[c] = 1;\n        }\n        return \"\";",
    "        // Create a dictionary to store the characters and their counts\n        Dictionary<char, int> charCounts = new Dictionary<char, int>();\n        // Loop through the string\n        foreach (char c in str1) {\n            // If the character is already in the dictionary, return the character\n            if (charCounts.ContainsKey(c)) {\n                return c.ToString();\n            }\n            // Otherwise, add the character to the dictionary\n            else {\n                charCounts.Add(c, 1);\n            }\n        }\n        // If no repeated characters are found, return null\n        return null;",
    "        string result = \"\";\n        Dictionary<char, int> d = new Dictionary<char, int>();\n        foreach (char c in str1) {\n            if (d.ContainsKey(c)) {\n                d[c]++;\n            } else {\n                d.Add(c, 1);\n            }\n        }\n        foreach (char c in str1) {\n            if (d[c] > 1) {\n                result = c.ToString();\n                break;\n            }\n        }\n        return result;"
  ]
}