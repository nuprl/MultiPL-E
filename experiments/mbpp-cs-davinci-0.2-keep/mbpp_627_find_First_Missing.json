{
  "name": "mbpp_627_find_First_Missing",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;",
    "        // We can use binary search to find the first missing number\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n        // We can use the fact that the array is sorted to our advantage\n       ",
    "        // Write your code here\n        long n = array.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (array[(int)mid] != mid + 1 && array[(int)mid - 1] == mid) {\n                return mid + 1;\n            }\n            if (array[(int)mid] != mid + 1) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return n + 1;",
    "        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;",
    "        if (array.Count == 0) {\n            return 1;\n        }\n        if (array[0] != 1) {\n            return 1;\n        }\n        for (int i = 0; i < array.Count - 1; i++) {\n            if (array[i + 1] != array[i] + 1) {\n                return array[i] + 1;\n            }\n        }\n        return array[array.Count - 1] + 1;",
    "        // Write your code here\n        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;",
    "        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;",
    "        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;",
    "        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long mid = (min + max) / 2;\n        long last = min;\n        while (min < max) {\n            if (array.Contains(mid)) {\n                min = mid + 1;\n                last = mid;\n            }\n            else {\n                max = mid;\n            }\n            mid = (min + max) / 2;\n        }\n        return last + 1;",
    "        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;",
    "        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        long first = array[0];\n        long last = array[array.Count - 1];\n        long missing = first;\n        for (long i = first; i <= last; i++) {\n            if (!array.Contains(i)) {\n                missing = i;\n                break;\n            }\n        }\n        return missing;",
    "        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        if (low == array.Count) {\n            return array.Count;\n        }\n        return -1;",
    "        long left = 0;\n        long right = array.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (array[(int)mid] != mid) {\n                if (mid == 0 || array[(int)mid - 1] == mid - 1) {\n                    return mid;\n                }\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        if (left == array.Count) {\n            return array.Count;\n        }\n        return -1;",
    "        // Write your code here\n        long min = array[0];\n        long max = array[array.Count - 1];\n        long missing = -1;\n        for (long i = min; i < max; i++) {\n            if (!array.Contains(i)) {\n                missing = i;\n                break;\n            }\n        }\n        return missing;",
    "        long left = 0;\n        long right = array.Count - 1;\n        while (left <= right) {\n            long mid = (left + right) / 2;\n            if (array[(int)mid] == mid) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;",
    "        long n = array.Count;\n        long l = 0;\n        long r = n - 1;\n        while (l <= r) {\n            long m = (l + r) / 2;\n            if (array[(int)m] == m) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;",
    "        long max = array[array.Count - 1];\n        long min = array[0];\n        long sum = 0;\n        for (int i = 0; i < array.Count; i++) {\n            sum += array[i];\n        }\n        long expectedSum = (max * (max + 1)) / 2;\n        return expectedSum - sum;",
    "        long low = 0;\n        long high = array.Count - 1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            if (array[(int)mid] == mid) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;"
  ]
}