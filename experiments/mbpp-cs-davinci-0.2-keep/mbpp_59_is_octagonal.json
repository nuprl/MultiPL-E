{
  "name": "mbpp_59_is_octagonal",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth octagonal number.\n    public static long IsOctagonal(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsOctagonal((5L)) == (65L));\n    Debug.Assert(IsOctagonal((10L)) == (280L));\n    Debug.Assert(IsOctagonal((15L)) == (645L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // n = (3*x^2 - x)/2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n))/6\n        var x = (1 + Math.Sqrt(1 + 24*n))/6;\n        if (x == Math.Floor(x))\n            return (long)x;\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // n = 3*x^2 - 2*x\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        double x = (2 + Math.Sqrt(4 + 12 * n)) / 6;\n        if (x == (long)x) {\n            return (long)x;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) return 0;\n        if (x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n && (a & 1) == 1)\n            return a;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        double x = (Math.Sqrt(1 + 24 * n) + 1) / 6;\n        return x == (long)x ? (long)x : 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 1 == 0) return x1;\n        if (x2 > 0 && x2 % 1 == 0) return x2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 2 == 1) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 2 == 1) {\n            return x2;\n        }\n        return -1;",
    "        long a = 1, b = 1, c = -n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        // n = (3*x^2 - x) / 2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x =",
    "        // n = (3*x^2 - 2*x) / 2\n        // n = 3*x^2 - 2*x\n        // n = 3*x^2 - 2*x - 2*n = 0\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n +",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && (b & 1) == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        long n2 = n * n;\n        long n3 = n2 * n;\n        long n4 = n3 * n;\n        long n5 = n4 * n;\n        long n6 = n5 * n;\n        long n7 = n6 * n;\n        long n8 = n7 * n;\n        long n9 = n8 * n;\n        long n10 = n9 * n;\n        long n11 = n10 * n;\n        long n12 = n11 * n;\n        long n13 = n12 * n;\n        long n14 = n13 * n;\n        long n15 = n14 * n;\n        long n16 = n15 * n;\n        long n17 = n16 * n;\n        long n18 = n17 * n;\n        long n19 = n18 * n;\n        long n20 = n19 * n;\n        long n21 = n20 * n;\n        long n22 = n21 * n;\n        long n23 = n22 * n;\n        long n24 = n23 * n;\n        long n25 = n24 * n;\n        long n26 = n25 * n;\n        long n27 = n26 * n;\n        long n28 = n27 * n;\n        long n29 = n28 * n;\n        long n30 = n29 * n;\n        long n31 = n30 * n;\n        long n32 = n31 * n;\n        long n33 = n32 * n;\n        long n34 = n33 * n;\n        long n35 = n34 * n;\n        long n36 = n35 * n;\n        long n37 = n36 * n;\n        long n38 = n37 * n;\n        long n39 = n38 * n;\n        long n40 = n39 * n;\n        long n41 = n40 * n;\n        long n42 = n41 * n;\n        long n43 = n42 * n;\n        long n44 = n43 * n;\n        long n45 = n44 * n;\n        long n46 = n45 * n;\n        long n47 = n46 * n;\n        long n48 = n",
    "        // n = (3*x^2 - 2*x)/2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 +- sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n",
    "        long a = 1;\n        long b = 1;\n        long c = -1 * (n * 2);\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-1 * b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-1 * b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (long)Math.Sqrt(x1) * (long)Math.Sqrt(x1)) {\n            return x1;\n        }\n        if (x2 > 0 && x2 == (long)Math.Sqrt(x2) * (long)Math.Sqrt(x2)) {\n            return x2;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            if ((a + 1) % 3 == 0) {\n                return a;\n            }\n        }\n        return -1;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 +- sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6",
    "        return (long)Math.Sqrt(2*n+0.125) - 0.5;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c)\n            return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 % 1 == 0)\n            return x1;\n        if (x2 > 0 && x2 % 1 == 0)\n            return x2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) {\n            return 0;\n        }\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 2) == n) {\n            return x1;\n        }\n        if (x2 > 0 && x2 * (3 * x2 - 2) == n) {\n            return x2;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (long)((-b + Math.Sqrt(d)) / (2 * a));\n        long x2 = (long)((-b - Math.Sqrt(d)) / (2 * a));\n        if (x1 > 0 && x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        var x = (2 + Math.Sqrt(4 + 12 * n)) / 6;\n        return x == (long)x ? n : 0;",
    "        long x = (long)Math.Sqrt(1 + 24 * n);\n        if (x * x == 1 + 24 * n && (x + 1) % 6 == 0)\n            return (x + 1) / 6;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n)\n            return a;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && b % 2 == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && (b & 1) == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && b % 2 == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        double x = (Math.Sqrt(24 * n + 1) + 1) / 6;\n        return (long)x == x ? n : 0;",
    "        long x = (long)Math.Sqrt(1 + 24 * n);\n        if (x * x != 1 + 24 * n) return 0;\n        x += 1;\n        if (x % 6 != 0) return 0;\n        x /= 6;\n        return x;",
    "        long x = (long)Math.Sqrt(2 * n + 0.125);\n        if (x * (3 * x - 2) == 2 * n)\n            return x;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0) return 0;\n        if (x2 < 0) return 0;\n        if (x1 % 1 != 0) return 0;\n        if (x2 % 1 != 0) return 0;\n        return x1;",
    "        // n = (3*x^2 - 2*x) / 2\n        // n = 3*x^2 - 2*x\n        // n = 3*x^2 - 2*x + 0\n        // n = (3*x - 1)*(x - 1)\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x + 1\n        // n = 3*x^2 - 4*x +",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) {\n            return 0;\n        }\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 == (long)Math.Sqrt(x1) * (long)Math.Sqrt(x1)) {\n            return x1;\n        }\n        if (x2 > 0 && x2 == (long)Math.Sqrt(x2) * (long)Math.Sqrt(x2)) {\n            return x2;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 1 == 0) return x1;\n        if (x2 > 0 && x2 % 1 == 0) return x2;\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 +- sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 +- sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        var x = (2 + Math.Sqrt(4 + 12*n)) / 6;\n        if (x == (int)x)\n            return n;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        double x1 = (-b + Math.Sqrt(d)) / (2 * a);\n        double x2 = (-b - Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (int)x1) return (long)x1;\n        if (x2 > 0 && x2 == (int)x2) return (long)x2;\n        return 0;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && b % 2 == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        // n = (3n^2 - 2n) / 2\n        // n^2 + n - 2n^2 / 2 = 0\n        // n^2 - n / 2 = 0\n        // n(n - 1/2) = 0\n        // n = 0 or n = 1/2\n        // n = 0 is not a solution\n        // n = 1/2 is not a solution\n        // n is not an octagonal number\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 1 == 0) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 1 == 0) {\n            return x2;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 2 == 0) return x1;\n        if (x2 > 0 && x2 % 2 == 0) return x2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) return 0;\n        if (x1 % 1 == 0) return x1;\n        if (x2 % 1 == 0) return x2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -n;\n        long d = b*b - 4*a*c;\n        if (d < 0) return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2*a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2*a);\n        if (x1 <= 0) return -1;\n        if (x2 <= 0) return -1;\n        if (x1 == x2) return -1;\n        if (x1 % 1 != 0) return -1;\n        if (x2 % 1 != 0) return -1;\n        return x1;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(2*n + 0.25) - 0.5;\n        if (x*(3*x - 2) == n) return x;\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        double x = (2 + Math.Sqrt(4 + 12*n)) / 6;\n        return x == (long)x ? n : 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 1 == 0) return x1;\n        if (x2 > 0 && x2 % 1 == 0) return x2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (long)Math.Sqrt(x1) * (long)Math.Sqrt(x1)) {\n            return x1;\n        }\n        if (x2 > 0 && x2 == (long)Math.Sqrt(x2) * (long)Math.Sqrt(x2)) {\n            return x2;\n        }\n        return 0;",
    "        long n2 = n * n;\n        long a = 1;\n        long b = 1;\n        long c = -n2 * 2;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 3 == 1) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 3 == 1) {\n            return x2;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 2) == n) return x2;\n        return -1;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 +- sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6",
    "        // n = (3*x^2 - x) / 2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        double x = (1 + Math.Sqrt(1 + 24*n)) / 6;\n        if (x == (int)x) {\n            return (long)x;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        double x1 = (-b + Math.Sqrt(d)) / (2 * a);\n        double x2 = (-b - Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (long)x1) return (long)x1;\n        if (x2 > 0 && x2 == (long)x2) return (long)x2;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (x1 * (3 * x1 - 2)) / 2) {\n            return x1;\n        }\n        if (x2 > 0 && x2 == (x2 * (3 * x2 - 2)) / 2) {\n            return x2;\n        }\n        return -1;",
    "        long a = 1, b = 1, c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 2) == n) return x2;\n        return -1;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        } else {\n            return 0;\n        }",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long r1 = (-b + d) / (2 * a);\n        long r2 = (-b - d) / (2 * a);\n        if (r1 > 0 && r1 == (long)(r1 * Math.Sqrt(2))) return r1;\n        if (r2 > 0 && r2 == (long)(r2 * Math.Sqrt(2))) return r2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) {\n            return 0;\n        }\n        if (x1 > x2) {\n            long t = x1;\n            x1 = x2;\n            x2 = t;\n        }\n        if (x1 % 2 == 0) {\n            return x1;\n        }\n        if (x2 % 2 == 0) {\n            return x2;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(1 + 24 * n);\n        if (x * x != 1 + 24 * n) return 0;\n        x += 1;\n        if (x % 6 != 0) return 0;\n        x /= 6;\n        return x;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            if ((a + 1) % 3 == 0) {\n                return a;\n            }\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (long)Math.Sqrt(x1) * (long)Math.Sqrt(x1)) {\n            return x1;\n        }\n        if (x2 > 0 && x2 == (long)Math.Sqrt(x2) * (long)Math.Sqrt(x2)) {\n            return x2;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && b % 2 == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && b % 2 == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        long n2 = n * n;\n        long n3 = n * n * n;\n        long n4 = n * n * n * n;\n        long n5 = n * n * n * n * n;\n        long n6 = n * n * n * n * n * n;\n        long n7 = n * n * n * n * n * n * n;\n        long n8 = n * n * n * n * n * n * n * n;\n        long n9 = n * n * n * n * n * n * n * n * n;\n        long n10 = n * n * n * n * n * n * n * n * n * n;\n        long n11 = n * n * n * n * n * n * n * n * n * n * n;\n        long n12 = n * n * n * n * n * n * n * n * n * n * n * n;\n        long n13 = n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long n14 = n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long n15 = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long n16 = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long n17 = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long n18 = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long n19 = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n        long n20 = n * n * n * n * n * n * n * n * n * n *",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0) return 0;\n        if (x2 < 0) return 0;\n        if (x1 == x2) return 0;\n        if (x1 == (x1 * (3 * x1 - 2)) / 2) return x1;\n        if (x2 == (x2 * (3 * x2 - 2)) / 2) return x2;\n        return 0;",
    "        double a = (Math.Sqrt(24 * n + 1) + 1) / 6;\n        if (a == (long)a) {\n            return (long)a;\n        }\n        return 0;",
    "        long nth = 0;\n        for (long i = 1; nth < n; i++) {\n            nth = i * (3 * i - 2);\n            if (nth == n) {\n                return nth;\n            }\n        }\n        return 0;",
    "        long n2 = n * n;\n        long a = (long)Math.Sqrt(n2 / 3);\n        if (a * a * 3 == n2 && (a + 1) * 3 == n) {\n            return a;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(1 + 8 * n);\n        if (x * x == 1 + 8 * n && (x - 1) % 2 == 0)\n            return (x - 1) / 2;\n        return -1;",
    "        long a = 1;\n        long b = 1;\n        long c = -(2 * n);\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) return 0;\n        if (x1 == x2) return 0;\n        if (x1 > x2) {\n            long temp = x1;\n            x1 = x2;\n            x2 = temp;\n        }\n        if (x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long r1 = (-b + d) / (2 * a);\n        long r2 = (-b - d) / (2 * a);\n        if (r1 > 0 && r1 * (3 * r1 - 2) == n) return r1;\n        if (r2 > 0 && r2 * (3 * r2 - 2) == n) return r2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 1 == 0) return x1;\n        if (x2 > 0 && x2 % 1 == 0) return x2;\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n",
    "        long n2 = n * 2;\n        long x = (long)Math.Sqrt(n2);\n        if (x * x == n2) {\n            return x;\n        }\n        return 0;",
    "        // n = (3*x^2 - x)/2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 2 == 0) return x1;\n        if (x2 > 0 && x2 % 2 == 0) return x2;\n        return 0;",
    "        double x = (Math.Sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (long)x)\n            return (long)x;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (long)Math.Sqrt(x1) * (long)Math.Sqrt(x1)) {\n            return x1;\n        }\n        if (x2 > 0 && x2 == (long)Math.Sqrt(x2) * (long)Math.Sqrt(x2)) {\n            return x2;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (x1 * x1 * x1 + x1) / 2) return x1;\n        if (x2 > 0 && x2 == (x2 * x2 * x2 + x2) / 2) return x2;\n        return -1;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && b % 2 == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        double x = (Math.Sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (long)x)\n            return (long)x;\n        return 0;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            if ((x & 1) == 1) {\n                return x;\n            }\n        }\n        return 0;",
    "        // n = (3*x^2 - x)/2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) {\n            return -1;\n        }\n        if (x1 % 1 == 0) {\n            return x1;\n        }\n        if (x2 % 1 == 0) {\n            return x2;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && (x1 * (3 * x1 - 2)) == n) return x1;\n        if (x2 > 0 && (x2 * (3 * x2 - 2)) == n) return x2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (long)Math.Sqrt(x1) * Math.Sqrt(x1)) {\n            return x1;\n        }\n        if (x2 > 0 && x2 == (long)Math.Sqrt(x2) * Math.Sqrt(x2)) {\n            return x2;\n        }\n        return -1;",
    "        long x = (long)Math.Sqrt(1 + 24 * n);\n        if (x * x == 1 + 24 * n) {\n            if ((x + 1) % 6 == 0) {\n                return (x + 1) / 6;\n            }\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (x1 * (3 * x1 - 2)) / 2) {\n            return x1;\n        }\n        if (x2 > 0 && x2 == (x2 * (3 * x2 - 2)) / 2) {\n            return x2;\n        }\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 24*n)) / 6\n        var x = (2 + (long)Math.Sqrt(4 + 24 * n)) / 6;\n        if (x * (3 * x - 2) == 2 * n)\n            return x;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 +- sqrt(4 + 12*n)) / 6\n        double x = (2 + Math.Sqrt(4 + 12*n)) / 6;\n        if (x == Math.Floor(x))\n            return (long)x;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        double x1 = (-b + Math.Sqrt(d)) / (2 * a);\n        double x2 = (-b - Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) return 0;\n        if (Math.Floor(x1) == x1) return (long)x1;\n        if (Math.Floor(x2) == x2) return (long)x2;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && b % 2 == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        var x = (2 + Math.Sqrt(4 + 12*n)) / 6;\n        return x == (long)x ? n : 0;",
    "        // n = (3*x^2 - x)/2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 12*n))/6\n        // x = (1 - sqrt(1 + 12*n))/6\n        // x = (1 + sqrt(1 + 12*n))/6 is not an integer\n        // x = (1 - sqrt(1 + 12*n))/6 is an integer\n        // x = (1 - sqrt(1 + 12*n))/6 is an integer\n        // x = (1 - sqrt(1 + 12*n))/6 is an integer\n        // x = (1 - sqrt(1 + 12*n))/6 is an integer\n        // x = (1 - sqrt(1 + 12*n))/6 is an integer\n        // x = (1 - sqrt(1 + 12*n))/6 is an integer\n        // x = (1 - sqrt(1 + 12*n))/6 is an integer\n        // x = (1 - sqrt(1 + 12*n))/6 is an integer\n        // x = (1 - sqrt(1 + 12*n))/6 is an integer\n        // x = (1 - sqrt(1 + 12*n))/6 is an integer\n        // x = (1 - sqrt(1 + 12*n))/6 is an integer\n        // x = (1 - sqrt(1 + 12*n))/6 is an integer\n        // x = (1 - sqrt(1 + 12*n))/6 is an integer\n        // x = (1 - sqrt(1 + 12*n))/6 is an integer\n        // x = (1 - sqrt(1 + 12*n))/6 is an integer\n        // x = (1 - sqrt(1 + 12*n))/6 is an integer\n        // x = (1 - sqrt(1 + 12*n))/6 is an integer\n        // x = (1 - sqrt(1 + 12*n))/6 is an integer\n        // x = (1 - sqrt(1 + 12*n))/6 is an integer\n       ",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n && (a & 1) == 1) return a;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -1 * (n * 2);\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (long)Math.Sqrt(x1) * (long)Math.Sqrt(x1)) {\n            return x1;\n        }\n        if (x2 > 0 && x2 == (long)Math.Sqrt(x2) * (long)Math.Sqrt(x2)) {\n            return x2;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            if (a % 2 == 0) return -1;\n            return (a + 1) / 2;\n        }\n        return -1;",
    "        long x = (long)Math.Sqrt(n);\n        if (x*x == n && (x % 2) == 1) {\n            return x;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) return x;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        long a = 1, b = 1, c = -1 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 3 == 1) return x1;\n        if (x2 > 0 && x2 % 3 == 1) return x2;\n        return -1;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            if ((a + 1) % 3 == 0) {\n                return a;\n            }\n        }\n        return 0;",
    "        // n = (3x^2 - 2x) / 2\n        // 3x^2 - 2x - 2n = 0\n        // x = (2 +- sqrt(4 + 24n)) / 6\n        long d = 4 + 24 * n;\n        if (d < 0) return 0;\n        long s = (long)Math.Sqrt(d);\n        if (s * s != d) return 0;\n        long x = (2 + s) / 6;\n        if (x * (3 * x - 2) != 2 * n) return 0;\n        return x;",
    "        // n = (3*x^2 - 2*x)/2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 - sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 - sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 - sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 - sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 - sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 - sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 - sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 - sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 - sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 - sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 - sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 - sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n       ",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            if ((x & 1) == 1) {\n                return x;\n            }\n        }\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // n = (3*x^2 - 2*x)\n        // n = 3*x^2 - 2*x\n        // n = 3*x^2 - 2*x - n\n        // x^2 - 2*x - n/3 = 0\n        // x = (2 +- sqrt(4 + 12*n)) / 6\n        // x = (2 +- sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4",
    "        long a = 1, b = 1, c = -1 * (n << 3);\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (x1 >> 1 << 1)) return x1;\n        if (x2 > 0 && x2 == (x2 >> 1 << 1)) return x2;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a != n) return 0;\n        if ((a & 3) == 3) return 0;\n        long b = (a + 1) / 2;\n        if (b * b != n) return 0;\n        return b;",
    "        double x = (Math.Sqrt(24 * n + 1) + 1) / 6;\n        if (x == (long)x)\n            return (long)x;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && (x1 * (3 * x1 - 2)) == n) return x1;\n        if (x2 > 0 && (x2 * (3 * x2 - 2)) == n) return x2;\n        return 0;",
    "        long x = (long)Math.Sqrt(1 + 24 * n);\n        if (x * x != 1 + 24 * n) return 0;\n        x += 1;\n        if (x % 6 != 0) return 0;\n        x /= 6;\n        return x;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) return x;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long r1 = (-b + d) / (2 * a);\n        long r2 = (-b - d) / (2 * a);\n        if (r1 > 0 && r1 == (long)Math.Sqrt(r1) * (long)Math.Sqrt(r1)) return r1;\n        if (r2 > 0 && r2 == (long)Math.Sqrt(r2) * (long)Math.Sqrt(r2)) return r2;\n        return 0;",
    "        long nn = (long)Math.Sqrt(n);\n        if (nn * nn == n) {\n            long nnn = (long)Math.Sqrt(nn);\n            if (nnn * nnn == nn && (nnn + 1) % 3 == 0)\n                return nnn;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x != n) return 0;\n        if ((x + 1) % 3 != 0) return 0;\n        return (x + 1) / 3;",
    "        double x = (Math.Sqrt(24 * n + 1) + 1) / 6;\n        if (x == (long)x)\n            return (long)x;\n        return 0;",
    "        // n = (3*x^2 - x)/2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n))/6\n        BigInteger n1 = new BigInteger(n);\n        BigInteger n2 = new BigInteger(24);\n        BigInteger n3 = new BigInteger(1);\n        BigInteger n4 = new BigInteger(6);\n        BigInteger n5 = new BigInteger(1);\n        n2 = n2 * n1;\n        n3 = n3 + n2;\n        n3 = BigInteger.Sqrt(n3);\n        n3 = n3 + n5;\n        n3 = n3 / n4;\n        if (n3 * n4 == n5 + n3 * n3) {\n            return 1;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            long y = (long)Math.Sqrt(x);\n            if (y * y == x && (y & 1) == 1) {\n                return y;\n            }\n        }\n        return 0;",
    "        // n = (3*x^2 - x)/2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        var sqrt = BigInteger.Sqrt(1 + 24 * n);\n        if (sqrt * sqrt != 1 + 24 * n) return 0;\n        var x = (1 + sqrt) / 6;\n        if (x * 6 == 1 + sqrt) return (3 * x * x - x) / 2;\n        return 0;",
    "        long a = (long)Math.Sqrt(2 * n + 0.125);\n        return a * a == 2 * n ? a : -1;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(2*n+0.25)-0.5;\n        if (x*(3*x-2) == n) return x;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -(2 * n);\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 <= 0 || x2 <= 0) {\n            return 0;\n        }\n        if (x1 % 1 != 0 && x2 % 1 != 0) {\n            return 0;\n        }\n        if (x1 % 1 == 0) {\n            return x1;\n        }\n        return x2;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && b % 2 == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        long n2 = n * n;\n        long a = 1;\n        long b = 1;\n        long c = -n2 * 2;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) return 0;\n        if (x1 % 1 != 0 || x2 % 1 != 0) return 0;\n        if (x1 % 3 == 2 && x2 % 3 == 2) return 0;\n        if (x1 % 3 == 1 && x2 % 3 == 1) return 0;\n        if (x1 % 3 == 0 && x2 % 3 == 0) return 0;\n        if (x1 % 3 == 2) return x1;\n        if (x2 % 3 == 2) return x2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) return 0;\n        if (x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        // n = (3*x^2 - x)/2\n        // n = (3*x^2 - x - 2*n)/2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (1 + sqrt(1 + 24*n))/6\n        // x = (1 - sqrt(1 + 24*n))/6\n        // x = (",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 1 == 0) return x1;\n        if (x2 > 0 && x2 % 1 == 0) return x2;\n        return 0;",
    "        double a = (Math.Sqrt(1 + 24 * n) + 1) / 6;\n        if (a == (long)a)\n            return (long)a;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a*a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(1 + 24 * n);\n        if (a * a != 1 + 24 * n) return -1;\n        long b = 1 + a;\n        if (b % 6 != 0) return -1;\n        return b / 6;",
    "        long a = 1;\n        long b = 1;\n        long c = -n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) {\n            return 0;\n        }\n        if (x1 == (long)Math.Sqrt(x1) * (long)Math.Sqrt(x1)) {\n            return x1;\n        }\n        if (x2 == (long)Math.Sqrt(x2) * (long)Math.Sqrt(x2)) {\n            return x2;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (long)((-b + Math.Sqrt(d)) / (2 * a));\n        long x2 = (long)((-b - Math.Sqrt(d)) / (2 * a));\n        if (x1 <= 0 || x2 <= 0) return 0;\n        if (x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) return a;\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n",
    "        long x = (long)Math.Sqrt(1 + 24 * n);\n        if (x * x != 1 + 24 * n) return 0;\n        x += 1;\n        if (x % 6 != 0) return 0;\n        x /= 6;\n        return x;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            if ((x % 6 == 5) || (x % 6 == 1))\n                return x;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n && a % 2 != 0) {\n            return a;\n        }\n        return 0;",
    "        double x = (Math.Sqrt(1 + 24 * n) + 1) / 6;\n        return x == (long)x ? (long)x : 0;",
    "        long i = 1;\n        while (true) {\n            long oct = i * (3 * i - 2);\n            if (oct == n) {\n                return i;\n            }\n            if (oct > n) {\n                return 0;\n            }\n            i++;\n        }",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        return nth;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) return 0;\n        if (x1 == x2) return x1;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && b % 2 == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 1 == 0) return x1;\n        if (x2 > 0 && x2 % 1 == 0) return x2;\n        return 0;",
    "        // n = (3*x^2 - x) / 2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        var x = (1 + Math.Sqrt(1 + 24*n)) / 6;\n        if (x == (long)x)\n            return (long)x;\n        return 0;",
    "        // n = (3 * x^2 - x) / 2\n        // 3 * x^2 - x - 2 * n = 0\n        // x = (1 + sqrt(1 + 24 * n)) / 6\n        var x = (1 + Math.Sqrt(1 + 24 * n)) / 6;\n        if (x == (long)x) {\n            return (long)x;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            long y = (long)Math.Sqrt(x);\n            if (y * y == x && y % 2 == 1)\n                return y;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c) return 0;\n        long r1 = (-b + d) / (2 * a);\n        long r2 = (-b - d) / (2 * a);\n        if (r1 > 0 && r1 * (3 * r1 - 2) == n) return r1;\n        if (r2 > 0 && r2 * (3 * r2 - 2) == n) return r2;\n        return 0;",
    "        double x = (Math.Sqrt(8 * n + 1) + 1) / 4;\n        if (x == (long)x)\n            return (long)x;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (long)((-b + Math.Sqrt(d)) / (2 * a));\n        long x2 = (long)((-b - Math.Sqrt(d)) / (2 * a));\n        if (x1 > 0 && x1 % 2 == 0) return x1;\n        if (x2 > 0 && x2 % 2 == 0) return x2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 <= 0 || x2 <= 0) {\n            return 0;\n        }\n        if (x1 % 1 == 0) {\n            return x1;\n        }\n        if (x2 % 1 == 0) {\n            return x2;\n        }\n        return 0;",
    "        long nth = 0;\n        long i = 1;\n        while (nth < n) {\n            nth = i * (3 * i - 2);\n            i++;\n        }\n        if (nth == n) {\n            return nth;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) return a;\n        return 0;",
    "        long x = (long)Math.Sqrt(1 + 24 * n);\n        if (x * x != 1 + 24 * n) return 0;\n        x += 1;\n        if (x % 6 != 0) return 0;\n        x /= 6;\n        return x;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c)\n            return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 % 1 == 0)\n            return x1;\n        if (x2 > 0 && x2 % 1 == 0)\n            return x2;\n        return 0;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            if ((x & 1) == 1) {\n                return x;\n            }\n        }\n        return 0;",
    "        double x = (Math.Sqrt(1 + 24 * n) + 1) / 6;\n        if (x == (long)x)\n            return (long)x;\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 +/- sqrt(4 + 12*n)) / 6\n        // x = 1 +/- sqrt(1 + 3*n) / 3\n        var x = (long)Math.Sqrt(1 + 3*n);\n        if (x*x != 1 + 3*n) return 0;\n        if ((1 + x) % 3 != 0) return 0;\n        return (1 + x) / 3;",
    "        long x = (long)Math.Sqrt(1 + 24 * n);\n        if (x * x != 1 + 24 * n) return 0;\n        x += 1;\n        if (x % 6 != 0) return 0;\n        x /= 6;\n        return x;",
    "        long a = 1, b = 1, c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 1 == 0) return x1;\n        if (x2 > 0 && x2 % 1 == 0) return x2;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c)\n            return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 == (long)Math.Sqrt(x1) * (long)Math.Sqrt(x1))\n            return x1;\n        if (x2 > 0 && x2 == (long)Math.Sqrt(x2) * (long)Math.Sqrt(x2))\n            return x2;\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        var x = (2 + BigInteger.Sqrt(4 + 12 * n)) / 6;\n        return x * x * x == 2 * n ? (long)x : -1;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 +/- sqrt(4 + 24*n)) / 6\n        // x = (1 +/- sqrt(1 + 6*n)) / 3\n        long x = (long)Math.Sqrt(1 + 6*n);\n        if (x*x == 1 + 6*n) {\n            if ((x + 1) % 3 == 0) {\n                return n;\n            }\n        }\n        return 0;",
    "        // n = (3 * x^2 - 2 * x) / 2\n        // n = (3 * x^2 - 2 * x - 2 * n) / 2\n        // 3 * x^2 - 2 * x - 2 * n = 0\n        // x = (2 * x +- sqrt(4 * x^2 - 12 * n)) / 6\n        // x = (2 * x +- 2 * sqrt(x^2 - 3 * n)) / 6\n        // x = (2 * x +- 2 * sqrt((x - sqrt(3 * n)) * (x + sqrt(3 * n)))) / 6\n        // x = (2 * x +- 2 * (x - sqrt(3 * n))) / 6\n        // x = (2 * x +- 2 * x + 2 * sqrt(3 * n)) / 6\n        // x = (4 * x + 2 * sqrt(3 * n)) / 6\n        // x = (2 * x + sqrt(3 * n)) / 3\n        // x = (2 * x + sqrt(3 * n)) / 3\n        // x = (2 * x + sqrt(3 * n)) / 3\n        // x = (2 * x + sqrt(3 * n)) / 3\n        // x = (2 * x + sqrt(3 * n)) / 3\n        // x = (2 * x + sqrt(3 * n)) / 3\n        // x = (2 * x + sqrt(3 * n)) / 3\n        // x = (2 * x + sqrt(3 * n)) / 3\n        // x = (2 * x + sqrt(3 * n)) / 3\n        // x = (2 * x + sqrt(3 * n)) / 3\n        // x = (2 * x + sqrt(3 * n)) / 3\n        // x = (2 * x + sqrt(3 * n)) / 3\n        // x = (2 * x + sqrt(3 * n)) / 3\n        // x = (2 * x + sqrt(3 * n)) / 3\n        // x = (2 * x + sqrt(3 * n)) / 3\n        // x = (2",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            return x;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c)\n            return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 == (long)(Math.Sqrt(x1) + 0.5) * (long)(Math.Sqrt(x1) + 0.5))\n            return x1;\n        if (x2 > 0 && x2 == (long)(Math.Sqrt(x2) + 0.5) * (long)(Math.Sqrt(x2) + 0.5))\n            return x2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 * (3 * x1 - 2) == n) return x1;\n        return 0;",
    "        long x = (long)Math.Sqrt(1 + 24 * n);\n        if (x * x != 1 + 24 * n) return 0;\n        if ((x + 1) % 6 != 0) return 0;\n        return (x + 1) / 6;",
    "        long x = (long)Math.Sqrt(1 + 24 * n);\n        if (x * x != 1 + 24 * n) return -1;\n        x += 1;\n        if (x % 6 != 0) return -1;\n        return x / 6;",
    "        // n = (3*x^2 - x) / 2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x =",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return -1;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0) return -1;\n        if (x2 < 0) return -1;\n        if (x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 * (3 * x2 - 2) == n) return x2;\n        return -1;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            if ((a + 1) % 3 == 0) {\n                return a;\n            }\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 1 == 0) return x1;\n        if (x2 > 0 && x2 % 1 == 0) return x2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -1 * (n * 2);\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (long)(Math.Sqrt(x1) * Math.Sqrt(x1))) {\n            return x1;\n        }\n        if (x2 > 0 && x2 == (long)(Math.Sqrt(x2) * Math.Sqrt(x2))) {\n            return x2;\n        }\n        return 0;",
    "        long x = (long)Math.Sqrt(1 + 24 * n);\n        if (x * x != 1 + 24 * n) return 0;\n        x += 1;\n        if (x % 6 != 0) return 0;\n        x /= 6;\n        return x;",
    "        long x = (long)Math.Sqrt(n);\n        if (x * x == n) {\n            if ((x & 1) == 0) {\n                return x >> 1;\n            }\n            return -1;\n        }\n        return -1;",
    "        long a = 1;\n        long b = 1;\n        long c = -n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) return 0;\n        if (x1 == x2) return x1;\n        return 0;",
    "        return (long)((Math.Sqrt(24 * n + 1) + 1) / 6);",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) return 0;\n        if (x1 % 1 == 0) return x1;\n        if (x2 % 1 == 0) return x2;\n        return 0;"
  ]
}