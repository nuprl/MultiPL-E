{
  "name": "mbpp_59_is_octagonal",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth octagonal number.\n    public static long IsOctagonal(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsOctagonal((5L)) == (65L));\n    Debug.Assert(IsOctagonal((10L)) == (280L));\n    Debug.Assert(IsOctagonal((15L)) == (645L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // n = (3*x^2 - x)/2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n))/6\n        var x = (1 + Math.Sqrt(1 + 24*n))/6;\n        if (x == Math.Floor(x))\n            return (long)x;\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // n = 3*x^2 - 2*x\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        double x = (2 + Math.Sqrt(4 + 12 * n)) / 6;\n        if (x == (long)x) {\n            return (long)x;\n        }\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 < 0 || x2 < 0) return 0;\n        if (x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n && (a & 1) == 1)\n            return a;\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return -1;",
    "        double x = (Math.Sqrt(1 + 24 * n) + 1) / 6;\n        return x == (long)x ? (long)x : 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 1 == 0) return x1;\n        if (x2 > 0 && x2 % 1 == 0) return x2;\n        return 0;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return -1;\n        }\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 % 2 == 1) {\n            return x1;\n        }\n        if (x2 > 0 && x2 % 2 == 1) {\n            return x2;\n        }\n        return -1;",
    "        long a = 1, b = 1, c = -n;\n        long d = b * b - 4 * a * c;\n        if (d < 0) return 0;\n        long x1 = (-b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 * (3 * x1 - 2) == n) return x1;\n        if (x2 > 0 && x2 * (3 * x2 - 2) == n) return x2;\n        return 0;",
    "        // n = (3*x^2 - x) / 2\n        // 3*x^2 - x - 2*n = 0\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x = (1 - sqrt(1 + 24*n)) / 6\n        // x = (1 + sqrt(1 + 24*n)) / 6\n        // x =",
    "        // n = (3*x^2 - 2*x) / 2\n        // n = 3*x^2 - 2*x\n        // n = 3*x^2 - 2*x - 2*n = 0\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n + sqrt(4*n^2 + 24*n)) / 6\n        // x = (2*n +",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            long b = (long)Math.Sqrt(a);\n            if (b * b == a && (b & 1) == 1) {\n                return b;\n            }\n        }\n        return 0;",
    "        long n2 = n * n;\n        long n3 = n2 * n;\n        long n4 = n3 * n;\n        long n5 = n4 * n;\n        long n6 = n5 * n;\n        long n7 = n6 * n;\n        long n8 = n7 * n;\n        long n9 = n8 * n;\n        long n10 = n9 * n;\n        long n11 = n10 * n;\n        long n12 = n11 * n;\n        long n13 = n12 * n;\n        long n14 = n13 * n;\n        long n15 = n14 * n;\n        long n16 = n15 * n;\n        long n17 = n16 * n;\n        long n18 = n17 * n;\n        long n19 = n18 * n;\n        long n20 = n19 * n;\n        long n21 = n20 * n;\n        long n22 = n21 * n;\n        long n23 = n22 * n;\n        long n24 = n23 * n;\n        long n25 = n24 * n;\n        long n26 = n25 * n;\n        long n27 = n26 * n;\n        long n28 = n27 * n;\n        long n29 = n28 * n;\n        long n30 = n29 * n;\n        long n31 = n30 * n;\n        long n32 = n31 * n;\n        long n33 = n32 * n;\n        long n34 = n33 * n;\n        long n35 = n34 * n;\n        long n36 = n35 * n;\n        long n37 = n36 * n;\n        long n38 = n37 * n;\n        long n39 = n38 * n;\n        long n40 = n39 * n;\n        long n41 = n40 * n;\n        long n42 = n41 * n;\n        long n43 = n42 * n;\n        long n44 = n43 * n;\n        long n45 = n44 * n;\n        long n46 = n45 * n;\n        long n47 = n46 * n;\n        long n48 = n",
    "        // n = (3*x^2 - 2*x)/2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 +- sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n        // x = (2 + sqrt(4 + 12*n))/6\n",
    "        long a = 1;\n        long b = 1;\n        long c = -1 * (n * 2);\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return 0;\n        }\n        long x1 = (-1 * b + (long)Math.Sqrt(d)) / (2 * a);\n        long x2 = (-1 * b - (long)Math.Sqrt(d)) / (2 * a);\n        if (x1 > 0 && x1 == (long)Math.Sqrt(x1) * (long)Math.Sqrt(x1)) {\n            return x1;\n        }\n        if (x2 > 0 && x2 == (long)Math.Sqrt(x2) * (long)Math.Sqrt(x2)) {\n            return x2;\n        }\n        return 0;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            if ((a + 1) % 3 == 0) {\n                return a;\n            }\n        }\n        return -1;",
    "        long a = (long)Math.Sqrt(n);\n        if (a * a == n) {\n            return a;\n        }\n        return 0;",
    "        // n = (3*x^2 - 2*x) / 2\n        // 3*x^2 - 2*x - 2*n = 0\n        // x = (2 +- sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6\n        // x = (2 + sqrt(4 + 12*n)) / 6\n        // x = (2 - sqrt(4 + 12*n)) / 6",
    "        return (long)Math.Sqrt(2*n+0.125) - 0.5;",
    "        long a = 1;\n        long b = 1;\n        long c = -2 * n;\n        long d = (long)Math.Sqrt(b * b - 4 * a * c);\n        if (d * d != b * b - 4 * a * c)\n            return 0;\n        long x1 = (-b + d) / (2 * a);\n        long x2 = (-b - d) / (2 * a);\n        if (x1 > 0 && x1 % 1 == 0)\n            return x1;\n        if (x2 > 0 && x2 % 1 == 0)\n            return x2;\n        return 0;"
  ]
}