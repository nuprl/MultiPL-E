{
  "name": "mbpp_573_unique_product",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long result = 1;\n        foreach (long num in list_data) {\n            if (list_data.IndexOf(num) == list_data.LastIndexOf(num)) {\n                result *= num;\n            }\n        }\n        return result;",
    "        // Your code here\n        long product = 1;\n        HashSet<long> hs = new HashSet<long>();\n        foreach (long i in list_data) {\n            if (!hs.Contains(i)) {\n                hs.Add(i);\n                product *= i;\n            }\n        }\n        return product;",
    "        long product = 1;\n        HashSet<long> seen = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!seen.Contains(num)) {\n                product *= num;\n                seen.Add(num);\n            }\n        }\n        return product;",
    "        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;",
    "        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                product *= num;\n            }\n        }\n        return product;",
    "        // Write your code here\n        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                product *= num;\n                unique.Add(num);\n            }\n        }\n        return product;",
    "        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                product *= num;\n            }\n        }\n        return product;",
    "        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                product *= num;\n            }\n        }\n        return product;",
    "        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;",
    "        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long i in list_data) {\n            if (!unique.Contains(i)) {\n                unique.Add(i);\n                product *= i;\n            }\n        }\n        return product;",
    "        // Write your code here\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                product *= num;\n            }\n        }\n        return product;",
    "        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                product *= num;\n                unique.Add(num);\n            }\n        }\n        return product;",
    "        // Write your code here\n        long product = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                product *= num;\n            }\n        }\n        return product;",
    "        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                product *= num;\n            }\n        }\n        return product;",
    "        long result = 1;\n        HashSet<long> set = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!set.Contains(num)) {\n                set.Add(num);\n                result *= num;\n            }\n        }\n        return result;",
    "        long product = 1;\n        HashSet<long> unique_numbers = new HashSet<long>();\n        foreach (long number in list_data) {\n            if (!unique_numbers.Contains(number)) {\n                unique_numbers.Add(number);\n                product *= number;\n            }\n        }\n        return product;",
    "        long product = 1;\n        HashSet<long> set_data = new HashSet<long>(list_data);\n        foreach (long num in set_data) {\n            product *= num;\n        }\n        return product;",
    "        long product = 1;\n        HashSet<long> unique = new HashSet<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n                product *= num;\n            }\n        }\n        return product;",
    "        long product = 1;\n        List<long> unique_list = list_data.Distinct().ToList();\n        foreach (long num in unique_list) {\n            product *= num;\n        }\n        return product;",
    "        // Write your code here\n        long product = 1;\n        List<long> unique = new List<long>();\n        foreach (long num in list_data) {\n            if (!unique.Contains(num)) {\n                unique.Add(num);\n            }\n        }\n        foreach (long num in unique) {\n            product *= num;\n        }\n        return product;"
  ]
}