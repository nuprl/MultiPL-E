{
  "name": "mbpp_450_extract_string",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    public static List<string> ExtractString(List<string> str, long l) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ExtractString((new List<string>(new string[]{(string)\"Python\", (string)\"list\", (string)\"exercises\", (string)\"practice\", (string)\"solution\"})), (8L)).Equals((new List<string>(new string[]{(string)\"practice\", (string)\"solution\"}))));\n    Debug.Assert(ExtractString((new List<string>(new string[]{(string)\"Python\", (string)\"list\", (string)\"exercises\", (string)\"practice\", (string)\"solution\"})), (6L)).Equals((new List<string>(new string[]{(string)\"Python\"}))));\n    Debug.Assert(ExtractString((new List<string>(new string[]{(string)\"Python\", (string)\"list\", (string)\"exercises\", (string)\"practice\", (string)\"solution\"})), (9L)).Equals((new List<string>(new string[]{(string)\"exercises\"}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return str.Where(s => s.Length == l).ToList();",
    "        return str.Where(x => x.Length == l).ToList();",
    "        return str.Where(x => x.Length == l).ToList();",
    "        List<string> result = new List<string>();\n        foreach (string s in str) {\n            if (s.Length == l) {\n                result.Add(s);\n            }\n        }\n        return result;",
    "        return str.Where(x => x.Length == l).ToList();",
    "        return str.Where(s => s.Length == l).ToList();",
    "        List<string> result = new List<string>();\n        foreach (string s in str) {\n            if (s.Length == l) {\n                result.Add(s);\n            }\n        }\n        return result;",
    "        return str.Where(s => s.Length == l).ToList();",
    "        List<string> result = new List<string>();\n        foreach (string s in str) {\n            if (s.Length == l) {\n                result.Add(s);\n            }\n        }\n        return result;",
    "        return str.Where(s => s.Length == l).ToList();",
    "        List<string> result = new List<string>();\n        foreach (string s in str) {\n            if (s.Length == l) {\n                result.Add(s);\n            }\n        }\n        return result;",
    "        return str.Where(x => x.Length == l).ToList();",
    "        return str.Where(s => s.Length == l).ToList();",
    "        return str.Where(x => x.Length == l).ToList();",
    "        List<string> result = new List<string>();\n        foreach (string s in str) {\n            if (s.Length == l) {\n                result.Add(s);\n            }\n        }\n        return result;",
    "        return str.Where(x => x.Length == l).ToList();",
    "        return str.Where(s => s.Length == l).ToList();",
    "        return str.Where(s => s.Length == l).ToList();",
    "        List<string> result = new List<string>();\n        foreach (string s in str) {\n            if (s.Length == l) {\n                result.Add(s);\n            }\n        }\n        return result;",
    "        List<string> result = new List<string>();\n        foreach (string s in str) {\n            if (s.Length == l) {\n                result.Add(s);\n            }\n        }\n        return result;"
  ]
}