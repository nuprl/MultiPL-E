{
  "name": "mbpp_431_common_element",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes two lists and returns true if they have at least one common element.\n    public static Nullable<bool> CommonElement(object list1, object list2) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CommonElement((new object(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new object(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals(true));\n    Debug.Assert(CommonElement((new object(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new object(new long[]{(long)6L, (long)7L, (long)8L, (long)9L}))).Equals(null));\n    Debug.Assert(CommonElement((new object(new string[]{(string)\"a\", (string)\"b\", (string)\"c\"})), (new object(new string[]{(string)\"d\", (string)\"b\", (string)\"e\"}))).Equals(true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1.GetType() != typeof(List<int>) || list2.GetType() != typeof(List<int>)) {\n            return null;\n        }\n        var l1 = (List<int>)list1;\n        var l2 = (List<int>)list2;\n        var set = new HashSet<int>();\n        foreach (var i in l1) {\n            set.Add(i);\n        }\n        foreach (var i in l2) {\n            if (set.Contains(i)) {\n                return true;\n            }\n        }\n        return false;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1.GetType() != typeof(List<int>) || list2.GetType() != typeof(List<int>)) {\n            return null;\n        }\n        var l1 = (List<int>)list1;\n        var l2 = (List<int>)list2;\n        var l1Hash = new HashSet<int>(l1);\n        var l2Hash = new HashSet<int>(l2);\n        return l1Hash.Intersect(l2Hash).Any();",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1.GetType() != list2.GetType()) {\n            return null;\n        }\n        if (list1.GetType() == typeof(List<int>)) {\n            List<int> l1 = (List<int>)list1;\n            List<int> l2 = (List<int>)list2;\n            foreach (int i in l1) {\n                if (l2.Contains(i)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        if (list1.GetType() == typeof(List<string>)) {\n            List<string> l1 = (List<string>)list1;\n            List<string> l2 = (List<string>)list2;\n            foreach (string s in l1) {\n                if (l2.Contains(s)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        return null;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1.GetType() != list2.GetType()) {\n            return null;\n        }\n        if (list1.GetType() == typeof(List<int>)) {\n            List<int> l1 = (List<int>)list1;\n            List<int> l2 = (List<int>)list2;\n            return l1.Intersect(l2).Any();\n        }\n        if (list1.GetType() == typeof(List<string>)) {\n            List<string> l1 = (List<string>)list1;\n            List<string> l2 = (List<string>)list2;\n            return l1.Intersect(l2).Any();\n        }\n        return null;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1 is IEnumerable<object> && list2 is IEnumerable<object>) {\n            var list1Enum = (IEnumerable<object>)list1;\n            var list2Enum = (IEnumerable<object>)list2;\n            foreach (var item1 in list1Enum) {\n                foreach (var item2 in list2Enum) {\n                    if (item1 == item2) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        return null;",
    "        // If either list is null, return null.\n        if (list1 == null || list2 == null) {\n            return null;\n        }\n        // If either list is empty, return false.\n        if (list1.Count() == 0 || list2.Count() == 0) {\n            return false;\n        }\n        // If the lists are the same, return true.\n        if (list1 == list2) {\n            return true;\n        }\n        // If the lists are not the same, return true if they have a common element.\n        foreach (object element1 in list1) {\n            foreach (object element2 in list2) {\n                if (element1 == element2) {\n                    return true;\n                }\n            }\n        }\n        // If the lists have no common elements, return false.\n        return false;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1.GetType() != list2.GetType()) {\n            return null;\n        }\n        if (list1.GetType() == typeof(List<int>)) {\n            List<int> l1 = (List<int>)list1;\n            List<int> l2 = (List<int>)list2;\n            return l1.Intersect(l2).Any();\n        }\n        if (list1.GetType() == typeof(List<string>)) {\n            List<string> l1 = (List<string>)list1;\n            List<string> l2 = (List<string>)list2;\n            return l1.Intersect(l2).Any();\n        }\n        return null;",
    "        // Your code here\n        return null;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1.GetType() != list2.GetType()) {\n            return null;\n        }\n        if (list1.GetType() == typeof(int[])) {\n            int[] l1 = (int[])list1;\n            int[] l2 = (int[])list2;\n            foreach (int i in l1) {\n                foreach (int j in l2) {\n                    if (i == j) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        if (list1.GetType() == typeof(string[])) {\n            string[] l1 = (string[])list1;\n            string[] l2 = (string[])list2;\n            foreach (string i in l1) {\n                foreach (string j in l2) {\n                    if (i == j) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        if (list1.GetType() == typeof(char[])) {\n            char[] l1 = (char[])list1;\n            char[] l2 = (char[])list2;\n            foreach (char i in l1) {\n                foreach (char j in l2) {\n                    if (i == j) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        return null;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1.GetType() != typeof(List<int>) || list2.GetType() != typeof(List<int>)) {\n            return null;\n        }\n        List<int> list1_int = (List<int>)list1;\n        List<int> list2_int = (List<int>)list2;\n        if (list1_int.Count == 0 || list2_int.Count == 0) {\n            return false;\n        }\n        HashSet<int> set = new HashSet<int>();\n        foreach (int i in list1_int) {\n            set.Add(i);\n        }\n        foreach (int i in list2_int) {\n            if (set.Contains(i)) {\n                return true;\n            }\n        }\n        return false;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        var list1Enum = list1 as System.Collections.IEnumerable;\n        var list2Enum = list2 as System.Collections.IEnumerable;\n        if (list1Enum == null || list2Enum == null) {\n            return null;\n        }\n        var list1Hash = new HashSet<object>();\n        foreach (var item in list1Enum) {\n            list1Hash.Add(item);\n        }\n        foreach (var item in list2Enum) {\n            if (list1Hash.Contains(item)) {\n                return true;\n            }\n        }\n        return false;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1.GetType() != list2.GetType()) {\n            return null;\n        }\n        if (list1.GetType() == typeof(List<int>)) {\n            List<int> l1 = (List<int>)list1;\n            List<int> l2 = (List<int>)list2;\n            foreach (int i in l1) {\n                if (l2.Contains(i)) {\n                    return true;\n                }\n            }\n        }\n        if (list1.GetType() == typeof(List<string>)) {\n            List<string> l1 = (List<string>)list1;\n            List<string> l2 = (List<string>)list2;\n            foreach (string i in l1) {\n                if (l2.Contains(i)) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1.GetType() != typeof(List<int>) || list2.GetType() != typeof(List<int>)) {\n            return null;\n        }\n        List<int> l1 = (List<int>)list1;\n        List<int> l2 = (List<int>)list2;\n        HashSet<int> set = new HashSet<int>();\n        foreach (int i in l1) {\n            set.Add(i);\n        }\n        foreach (int i in l2) {\n            if (set.Contains(i)) {\n                return true;\n            }\n        }\n        return false;",
    "        // Your code here\n        return null;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n\n        if (list1.GetType() != typeof(List<int>) || list2.GetType() != typeof(List<int>)) {\n            return null;\n        }\n\n        var l1 = (List<int>)list1;\n        var l2 = (List<int>)list2;\n\n        return l1.Intersect(l2).Any();",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        var list1_enumerator = list1.GetEnumerator();\n        var list2_enumerator = list2.GetEnumerator();\n        while (list1_enumerator.MoveNext()) {\n            while (list2_enumerator.MoveNext()) {\n                if (list1_enumerator.Current == list2_enumerator.Current) {\n                    return true;\n                }\n            }\n        }\n        return false;",
    "        // Your code here\n        return null;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n\n        if (list1.GetType() != list2.GetType()) {\n            return null;\n        }\n\n        if (list1.GetType() == typeof(List<int>)) {\n            return CommonElement((List<int>)list1, (List<int>)list2);\n        } else if (list1.GetType() == typeof(List<string>)) {\n            return CommonElement((List<string>)list1, (List<string>)list2);\n        } else if (list1.GetType() == typeof(List<double>)) {\n            return CommonElement((List<double>)list1, (List<double>)list2);\n        } else if (list1.GetType() == typeof(List<char>)) {\n            return CommonElement((List<char>)list1, (List<char>)list2);\n        } else if (list1.GetType() == typeof(List<bool>)) {\n            return CommonElement((List<bool>)list1, (List<bool>)list2);\n        } else if (list1.GetType() == typeof(List<object>)) {\n            return CommonElement((List<object>)list1, (List<object>)list2);\n        } else {\n            return null;\n        }",
    "        if (list1 is List<int> && list2 is List<int>) {\n            var l1 = list1 as List<int>;\n            var l2 = list2 as List<int>;\n            return l1.Intersect(l2).Any();\n        }\n        return null;",
    "        if (list1 == null || list2 == null) {\n            return null;\n        }\n        if (list1 is IEnumerable<object> && list2 is IEnumerable<object>) {\n            var list1Enum = (IEnumerable<object>)list1;\n            var list2Enum = (IEnumerable<object>)list2;\n            foreach (var item1 in list1Enum) {\n                foreach (var item2 in list2Enum) {\n                    if (item1 == item2) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        return null;"
  ]
}