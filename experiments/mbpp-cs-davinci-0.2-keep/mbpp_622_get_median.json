{
  "name": "mbpp_622_get_median",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        // if n is odd, then median is middle element of sorted array\n        // if n is even, then median is average of middle two elements of sorted array\n        if (n == 0) return 0;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        // if m1 and m2 are equal then return either m1 or m2\n        if (m1 == m2) return m1;\n\n        // if m1 < m2 then median must exist in arr1[m1....] and arr2[....m2]\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            else {\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        }\n        // if m1 > m2 then median must exist in arr1[....m1] and arr2[m2...]\n        else {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2);\n            }\n            else {\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n /",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0)\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        else\n            return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - (int)n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - (int)n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - (int)n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - (int)n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(n / 2 - 1, n - n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange(n / 2, n - n / 2), arr2.GetRange(0, n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2 - 1, n - n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2, n - n / 2), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2 + 1);",
    "        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedianSingle(arr1, n);\n        float m2 = GetMedianSingle(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedianSingle(arr1, n);\n        float m2 = GetMedianSingle(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);",
    "        long i = 0;\n        long j = 0;\n        long count;\n        long m1 = -1, m2 = -1;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0;",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2));",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        float median = 0;\n        int i = 0, j = 0;\n        long count = 0;\n        long m1 = -1, m2 = -1;\n        while (count <= n) {\n            count++;\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            }\n            else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            }\n            else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n        median = (m1 + m2) / 2;\n        return median;",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        if (n % 2 == 0) return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n - (n / 2));\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n - (n / 2));",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n == 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        } else if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        } else if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n - (n / 2));\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n - (n / 2));",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n            }\n        }",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = GetMedian(arr1, n);\n        long m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(n / 2 - 1, n - n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange(n / 2, n - n / 2), arr2.GetRange(0, n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2 - 1, n - n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2, n - n / 2), n - n / 2);",
    "        // if n is odd, then median is middle element of sorted array\n        // if n is even, then median is average of middle two elements of sorted array\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(n / 2 - 1, n - n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange(n / 2, n - n / 2), arr2.GetRange(0, n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2 - 1, n - n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2, n - n / 2), n - n / 2);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        float median = 0;\n        int i = 0, j = 0;\n        int m1 = -1, m2 = -1;\n        for (int count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            }\n            else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            }\n            else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n        median = (m1 + m2) / 2;\n        return median;",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n == 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        if (n % 2 == 0) return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2));",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        long i = 0;\n        long j = 0;\n        long count;\n        long m1 = -1, m2 = -1;\n\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n\n        return (m1 + m2) / 2.0f;",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((n / 2) - 1, 2), arr2.GetRange(0, n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange(n / 2, 1), arr2.GetRange(0, n / 2 + 1), n - n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange((n / 2) - 1, 2), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2, 1), n - n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2));",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = GetMedian(arr1, n);\n        long m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = GetMedian(arr1, n);\n        long m2 = GetMedian(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n        }",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);",
    "        // if n is odd then median is middle element of sorted array\n        // if n is even then median is average of middle two elements of sorted array\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);",
    "        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n - n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        else {\n            if (n % 2 == 0)\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(n / 2 - 1, n - n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange(n / 2, n - n / 2), arr2.GetRange(0, n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2 - 1, n - n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2, n - n / 2), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        if (n == 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2));",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        long i = 0, j = 0;\n        long m1 = -1, m2 = -1;\n        for (long count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;",
    "        float median = 0;\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                median = GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            } else {\n                median = GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n        } else {\n            if (n % 2 == 0) {\n                median = GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n            } else {\n                median = GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n            }\n        }\n        return median;",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2)\n            return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0)\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(n / 2 - 1, n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange(n / 2, n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2 - 1, n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2, n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n            }\n        }",
    "        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);\n        }",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n / 2 + 1);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);",
    "        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            else\n                return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            else\n                return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }",
    "        long i = 0;\n        long j = 0;\n        long count;\n        long m1 = -1;\n        long m2 = -1;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n        return (m1 + m2) / 2.0f;",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(n / 2 - 1, n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange(n / 2, n / 2 + 1), arr2.GetRange(0, n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2 - 1, n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2, n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0)\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);",
    "        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = GetMedian(arr1, n);\n        long m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n - (n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n - (n / 2));",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n == 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = median(arr1, n);\n        long m2 = median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        long i = 0;\n        long j = 0;\n        long count;\n        long m1 = -1, m2 = -1;\n        for (count = 0; count <= n; count++) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n        }\n        return (m1 + m2) / 2;",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = GetMedian(arr1, n);\n        long m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        return GetMedianRec(arr1, arr2, 0, n - 1, 0, n - 1);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)n - (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)n - (int)(n / 2)), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)n - (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)n - (int)(n / 2)), arr1.GetRange(0, (int)(n / 2) + 1), n - (n / 2));",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        }",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);",
    "        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0)\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        else\n            return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = GetMedian(arr1, n);\n        long m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        }",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedianSingle(arr1, n);\n        float m2 = GetMedianSingle(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n - (n / 2));\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n - (n / 2));",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0)\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        else\n            return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);",
    "        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((n / 2) - 1, 2), arr2.GetRange(0, n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange(n / 2, 1), arr2.GetRange(0, n / 2 + 1), n - n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange((n / 2) - 1, 2), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, n / 2 + 1), arr2.GetRange(n / 2, 1), n - n / 2 + 1);",
    "        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);",
    "        // If the number of elements is odd, then the median is the middle element\n        if (n % 2 == 1) {\n            return GetMedianUtil(arr1, arr2, n / 2 + 1);\n        }\n        // If the number of elements is even, then the median is the average of the middle two elements\n        return (GetMedianUtil(arr1, arr2, n / 2) + GetMedianUtil(arr1, arr2, n / 2 + 1)) / 2;",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2.0f;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2.0f;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n - (n / 2));\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), n - (n / 2));\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), n - (n / 2));",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n            else\n                return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), n / 2 + 1);\n        }",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);",
    "        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0)\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        else\n            return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), arr1.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedianSingle(arr1, n);\n        float m2 = GetMedianSingle(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n            }\n        }",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);",
    "        float median = 0;\n        int i = 0, j = 0;\n        for (int count = 0; count <= n; count++) {\n            if (i == n) {\n                median = arr2[0];\n                break;\n            }\n            if (j == n) {\n                median = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                median = arr1[i];\n                i++;\n            } else {\n                median = arr2[j];\n                j++;\n            }\n        }\n        return median;",
    "        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n        }",
    "        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2)\n            return m1;\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0)\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2 + 1);",
    "        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) / 2;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n        } else {\n            if (n % 2 == 0) {\n                return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            } else {\n                return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n        }",
    "        float median = 0;\n        int i = 0, j = 0;\n        int count = 0;\n        int m1 = -1, m2 = -1;\n        while (count <= n) {\n            if (i == n) {\n                m1 = m2;\n                m2 = arr2[0];\n                break;\n            } else if (j == n) {\n                m1 = m2;\n                m2 = arr1[0];\n                break;\n            }\n            if (arr1[i] < arr2[j]) {\n                m1 = m2;\n                m2 = arr1[i];\n                i++;\n            } else {\n                m1 = m2;\n                m2 = arr2[j];\n                j++;\n            }\n            count++;\n        }\n        median = (m1 + m2) / 2;\n        return median;",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);",
    "        if (n <= 0)\n            return -1;\n        if (n == 1)\n            return (arr1[0] + arr2[0]) / 2;\n        if (n == 2)\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2)\n            return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        } else {\n            if (n % 2 == 0)\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), n - n / 2 + 1);\n            else\n                return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n - (int)n / 2), n - n / 2);\n        }",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n            }\n            return GetMedian(arr1.GetRange((int)(n / 2), (int)(n / 2) + 1), arr2.GetRange(0, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2) - 1, (int)(n / 2) + 1), (int)(n / 2) + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)(n / 2) + 1), arr2.GetRange((int)(n / 2), (int)(n / 2) + 1), (int)(n / 2) + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n\n        long m1 = GetMedian(arr1, n);\n        long m2 = GetMedian(arr2, n);\n\n        if (m1 == m2) {\n            return m1;\n        }\n\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = Median(arr1, n);\n        float m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n - (int)n / 2), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n - (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n - (int)n / 2), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n - n / 2);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n - n / 2);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2 + 1);\n        }\n        return GetMedian(arr2.GetRange((int)n / 2, (int)n / 2 + 1), arr1.GetRange(0, (int)n / 2 + 1), n - n / 2);",
    "        if (n <= 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return (arr1[0] + arr2[0]) / 2;\n        }\n        if (n == 2) {\n            return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) / 2;\n        }\n        float m1 = GetMedian(arr1, n);\n        float m2 = GetMedian(arr2, n);\n        if (m1 == m2) {\n            return m1;\n        }\n        if (m1 < m2) {\n            if (n % 2 == 0) {\n                return GetMedian(arr1.GetRange((int)n / 2 - 1, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n            }\n            return GetMedian(arr1.GetRange((int)n / 2, (int)n / 2 + 1), arr2.GetRange(0, (int)n / 2 + 1), n / 2 + 1);\n        }\n        if (n % 2 == 0) {\n            return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2 - 1, (int)n / 2 + 1), n / 2 + 1);\n        }\n        return GetMedian(arr1.GetRange(0, (int)n / 2 + 1), arr2.GetRange((int)n / 2, (int)n / 2 + 1), n / 2 + 1);"
  ]
}