{
  "name": "mbpp_760_unique_Element",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether a list of numbers contains only one distinct element or not.\n    public static bool UniqueElement(List<long> arr) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueElement((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))) == (true));\n    Debug.Assert(UniqueElement((new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(UniqueElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return arr.Distinct().Count() == 1;",
    "        return arr.Distinct().Count() == 1;",
    "        return arr.Distinct().Count() == 1;",
    "        if (arr.Count == 0) {\n            return false;\n        }\n        long last = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] != last) {\n                return false;\n            }\n        }\n        return true;",
    "        return arr.Distinct().Count() == 1;",
    "        return arr.Distinct().Count() == 1;",
    "        // if the list is empty, return false\n        if (arr.Count == 0) {\n            return false;\n        }\n        // if the list has only one element, return true\n        if (arr.Count == 1) {\n            return true;\n        }\n        // if the list has more than one element, sort it and check if the first and last elements are the same\n        arr.Sort();\n        if (arr[0] == arr[arr.Count - 1]) {\n            return true;\n        }\n        return false;",
    "        HashSet<long> set = new HashSet<long>();\n        foreach (long i in arr) {\n            if (set.Contains(i)) {\n                return false;\n            }\n            set.Add(i);\n        }\n        return true;",
    "        return arr.Distinct().Count() == 1;",
    "        return arr.Distinct().Count() == 1;",
    "        // return arr.Distinct().Count() == 1;\n        return arr.All(x => x == arr[0]);",
    "        return arr.Distinct().Count() == 1;",
    "        return arr.Distinct().Count() == 1;",
    "        // return arr.Distinct().Count() == 1;\n        return arr.All(x => x == arr[0]);",
    "        return arr.Distinct().Count() == 1;",
    "        if (arr.Count == 0) return false;\n        long first = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] != first) return false;\n        }\n        return true;",
    "        if (arr.Count == 0) {\n            return false;\n        }\n        long first = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] != first) {\n                return false;\n            }\n        }\n        return true;",
    "        return arr.Distinct().Count() == 1;",
    "        if (arr.Count == 0) {\n            return false;\n        }\n        long first = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] != first) {\n                return false;\n            }\n        }\n        return true;",
    "        return arr.Distinct().Count() == 1;"
  ]
}