{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    public static long MaxSubArraySumRepeated(List<long> a, long n, long k) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubArraySumRepeated((new List<long>(new long[]{(long)10L, (long)20L, (long)-30L, (long)-1L})), (4L), (3L)) == (30L));\n    Debug.Assert(MaxSubArraySumRepeated((new List<long>(new long[]{(long)-1L, (long)10L, (long)20L})), (3L), (2L)) == (59L));\n    Debug.Assert(MaxSubArraySumRepeated((new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L})), (3L), (3L)) == (-1L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n; i++) {\n            curr_sum = Math.Max(a[(int)i], curr_sum + a[(int)i]);\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        long max_prefix_sum = 0;\n        long max_suffix_sum = 0;\n        long total_sum = 0;\n        for (long i = 0; i < n; i++) {\n            max_prefix_sum = Math.Max(max_prefix_sum, total_sum);\n            total_sum += a[(int)i];\n        }\n        total_sum = 0;\n        for (long i = n - 1; i >= 0; i--) {\n            max_suffix_sum = Math.Max(max_suffix_sum, total_sum);\n            total_sum += a[(int)i];\n        }\n        long ans = Math.Max(max_sum, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum);\n        return ans;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = 0;\n        long min_element = 0;\n        long min_ending_here = 0;\n        long min_so_far = 0;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n            max_ending_here = Math.Max(a[i], max_ending_here + a[i]);\n            max_so_far = Math.Max(max_so_far, max_ending_here);\n            min_ending_here = Math.Min(a[i], min_ending_here + a[i]);\n            min_so_far = Math.Min(min_so_far, min_ending_here);\n            max_element = Math.Max(max_element, a[i]);\n            min_element = Math.Min(min_element, a[i]);\n        }\n        if (k == 1) {\n            return max_so_far;\n        }\n        if (sum > 0) {\n            max_sum = max_so_far + (k - 2) * sum;\n        } else {\n            max_sum = max_so_far;\n        }\n        max_sum = Math.Max(max_sum, max_element + min_so_far + (k - 2) * sum);\n        max_sum = Math.Max(max_sum, max_so_far + min_element + (k - 2) * sum);\n        return max_sum;",
    "        long max_sum = long.MinValue;\n        long curr_sum = 0;\n        for (long i = 0; i < n * k; i++) {\n            curr_sum += a[i % n];\n            max_sum = Math.Max(max_sum, curr_sum);\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (long i = 0; i < n; i++) {\n            curr_sum += a[(int)i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            max_wrap += a[(int)i];\n            a[(int)i] = -a[(int)i];\n        }\n        long curr_wrap = 0;\n        for (long i = 0; i < n; i++) {\n            curr_wrap += a[(int)i];\n            if (curr_wrap < 0) {\n                curr_wrap = 0;\n            }\n            max_wrap = Math.Max(max_wrap, curr_wrap);\n        }\n        max_wrap = Math.Max(max_wrap, 0);\n        return Math.Max(max_sum, max_wrap * (k - 2) + max_sum);",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = long.MinValue;\n        for (long i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[(int)i]);\n            max_ending_here = max_ending_here + a[(int)i];\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        if (max_so_far == 0)\n            return max_element;\n        long sum = 0;\n        for (long i = 0; i < n; i++)\n            sum += a[(int)i];\n        max_sum = max_so_far;\n        max_sum = Math.Max(max_sum, sum * (k - 2) + max_so_far);\n        return max_sum;",
    "        // Complete this function\n        long max_sum = 0;\n        long curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum > max_sum) {\n                max_sum = curr_sum;\n            }\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            a[i] = -a[i];\n        }\n        long curr_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            curr_wrap += a[i];\n            if (curr_wrap > max_wrap) {\n                max_wrap = curr_wrap;\n            }\n            if (curr_wrap < 0) {\n                curr_wrap = 0;\n            }\n        }\n        max_wrap = max_wrap + max_wrap;\n        if (k == 1) {\n            return max_sum;\n        }\n        if (max_wrap > max_sum) {\n            return max_wrap;\n        }\n        return max_sum;",
    "        // Complete this function\n        long max_so_far = long.MinValue, max_ending_here = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            a[i] = -a[i];\n        }\n        max_wrap = max_wrap + MaxSubArraySumRepeated(a, n, 1);\n        return Math.Max(max_so_far, max_wrap);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        long max_elem = a.Max();\n        if (max_elem < 0) {\n            return max_elem;\n        }\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            a[i] = -a[i];\n        }\n        long curr_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            curr_wrap += a[i];\n            if (curr_wrap < 0) {\n                curr_wrap = 0;\n            }\n            max_wrap = Math.Max(max_wrap, curr_wrap);\n        }\n        max_wrap = Math.Max(max_wrap, 0);\n        return Math.Max(max_sum, (max_wrap * (k - 2)) + max_sum);",
    "        long max_sum = long.MinValue;\n        long curr_sum = 0;\n        long i;\n        for (i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum > max_sum) {\n                max_sum = curr_sum;\n            }\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n        }\n        long max_wrap = 0;\n        for (i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum > max_wrap) {\n                max_wrap = curr_sum;\n            }\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        return Math.Max(max_sum, max_wrap + (k - 2) * max_wrap);",
    "        // Complete this function\n        long max_so_far = long.MinValue, max_ending_here = 0;\n        for (long i = 0; i < n * k; i++) {\n            max_ending_here = max_ending_here + a[i % n];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        return max_so_far;",
    "        // Complete this function\n        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long min_sum = 0;\n        long min_ending_here = 0;\n        long min_so_far = 0;\n        for (long i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[(int)i];\n            min_ending_here = min_ending_here + a[(int)i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (min_ending_here > 0) {\n                min_ending_here = 0;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n            if (min_so_far > min_ending_here) {\n                min_so_far = min_ending_here;\n            }\n        }\n        max_sum = max_so_far;\n        min_sum = min_so_far;\n        if (k == 1) {\n            return max_sum;\n        }\n        long total_sum = 0;\n        for (long i = 0; i < n; i++) {\n            total_sum += a[(int)i];\n        }\n        if (total_sum > 0) {\n            max_sum = max_sum + (k - 2) * total_sum;\n        }\n        else {\n            max_sum = max_sum + (k - 1) * total_sum;\n        }\n        if (total_sum < 0) {\n            min_sum = min_sum + (k - 2) * total_sum;\n        }\n        else {\n            min_sum = min_sum + (k - 1) * total_sum;\n        }\n        return Math.Max(max_sum, min_sum);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            a[i] = -a[i];\n        }\n        long curr_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            curr_wrap += a[i];\n            if (curr_wrap < 0) {\n                curr_wrap = 0;\n            }\n            max_wrap = Math.Max(max_wrap, curr_wrap);\n        }\n        max_wrap = Math.Max(max_wrap, 0);\n        return Math.Max(max_sum, max_wrap * (k - 2) + max_sum);",
    "        long max_sum = 0;\n        long current_sum = 0;\n        for (long i = 0; i < n * k; i++) {\n            current_sum += a[i % n];\n            max_sum = Math.Max(max_sum, current_sum);\n            if (current_sum < 0) {\n                current_sum = 0;\n            }\n        }\n        return max_sum;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = 0;\n        long min_element = 0;\n        long min_ending_here = 0;\n        long min_so_far = 0;\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum += a[(int)i];\n            max_element = Math.Max(max_element, a[(int)i]);\n            min_element = Math.Min(min_element, a[(int)i]);\n            max_ending_here = Math.Max(a[(int)i], max_ending_here + a[(int)i]);\n            max_so_far = Math.Max(max_so_far, max_ending_here);\n            min_ending_here = Math.Min(a[(int)i], min_ending_here + a[(int)i]);\n            min_so_far = Math.Min(min_so_far, min_ending_here);\n        }\n        if (k == 1) {\n            return max_so_far;\n        }\n        if (max_element <= 0) {\n            return max_element * k;\n        }\n        if (min_element >= 0) {\n            return sum * k;\n        }\n        long max_prefix_sum = 0;\n        long max_suffix_sum = 0;\n        long min_prefix_sum = 0;\n        long min_suffix_sum = 0;\n        long temp_max = 0;\n        long temp_min = 0;\n        for (long i = 0; i < n; i++) {\n            temp_max += a[(int)i];\n            max_prefix_sum = Math.Max(max_prefix_sum, temp_max);\n            temp_min += a[(int)i];\n            min_prefix_sum = Math.Min(min_prefix_sum, temp_min);\n        }\n        temp_max = 0;\n        temp_min = 0;\n        for (long i = n - 1; i >= 0; i",
    "        long sum = 0;\n        long maxSum = 0;\n        long maxSumSoFar = 0;\n        long maxElement = a.Max();\n        if (maxElement < 0) {\n            return maxElement;\n        }\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n            if (sum < 0) {\n                sum = 0;\n            }\n            maxSumSoFar = Math.Max(maxSumSoFar, sum);\n        }\n        if (k == 1) {\n            return maxSumSoFar;\n        }\n        long sumOfArray = 0;\n        for (int i = 0; i < n; i++) {\n            sumOfArray += a[i];\n        }\n        maxSum = Math.Max(maxSumSoFar, sumOfArray * (k - 2) + maxSumSoFar);\n        return maxSum;",
    "        long max_sum = 0;\n        long max_ending_here = 0;\n        long max_so_far = 0;\n        long max_element = a.Max();\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += a[i];\n        }\n        if (k == 1) {\n            for (int i = 0; i < n; i++) {\n                max_ending_here = max_ending_here + a[i];\n                if (max_ending_here < 0) {\n                    max_ending_here = 0;\n                }\n                if (max_so_far < max_ending_here) {\n                    max_so_far = max_ending_here;\n                }\n            }\n            return max_so_far;\n        }\n        if (sum > 0) {\n            max_sum = sum * k;\n        }\n        else {\n            max_sum = max_element;\n        }\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n            }\n        }\n        long min_sum = 0;\n        long min_ending_here = 0;\n        long min_so_far = 0;\n        for (int i = 0; i < n; i++) {\n            min_ending_here = min_ending_here + a[i];\n            if (min_ending_here > 0) {\n                min_ending_here = 0;\n            }\n            if (min_so_far > min_ending_here) {\n                min_so_far = min_ending_here;\n            }\n        }\n        min_sum = min_so_far * k;\n        long result = max_so_far + (k - 2) * sum + min_sum;\n        return Math.Max(max_sum, result);",
    "        // Find the maximum sum subarray in first window of size n\n        long maxSum = 0;\n        long windowSum = 0;\n        for (long i = 0; i < n; i++) {\n            windowSum += a[(int)i];\n        }\n        maxSum = windowSum;\n\n        // Move the window by one element.\n        for (long i = n; i < n * 2; i++) {\n            windowSum = windowSum + a[(int)i] - a[(int)(i - n)];\n            maxSum = Math.Max(maxSum, windowSum);\n        }\n\n        // maxSum is the maximum sum of subarray in arr[0..n-1],\n        //  set initial value of result as 'maxSum' for cases when k is 1.\n        long result = maxSum;\n\n        // Use the concept of sliding window\n        for (long i = 1; i < k; i++) {\n            // Compute sum of next n elements\n            long currentSum = 0;\n            for (long j = 0; j < n; j++) {\n                currentSum += a[(int)(i * n + j)];\n            }\n\n            // Update result if required\n            if (currentSum > maxSum) {\n                result = result + currentSum - maxSum;\n                maxSum = currentSum;\n            }\n            else {\n                result = result + maxSum - currentSum;\n            }\n        }\n\n        return result;",
    "        long max_so_far = long.MinValue;\n        long max_ending_here = 0;\n        long max_element = long.MinValue;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            max_element = Math.Max(max_element, a[i]);\n            sum += a[i];\n            max_ending_here = max_ending_here + a[i];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        if (max_so_far < 0)\n            return max_so_far;\n        long max_wrap = sum * k - (sum - max_so_far);\n        return Math.Max(max_wrap, max_so_far);",
    "        // Complete this function\n        long max_so_far = long.MinValue, max_ending_here = 0;\n        for (int i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        long max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            max_wrap += a[i];\n            a[i] = -a[i];\n        }\n        max_wrap = max_wrap + MaxSubArraySumRepeated(a, n, 1);\n        return Math.Max(max_so_far, max_wrap);",
    "        long max_sum = 0;\n        long curr_sum = 0;\n        for (int i = 0; i < n; i++) {\n            curr_sum += a[i];\n            if (curr_sum < 0) {\n                curr_sum = 0;\n            }\n            max_sum = Math.Max(max_sum, curr_sum);\n        }\n        if (k == 1) {\n            return max_sum;\n        }\n        long max_prefix_sum = 0;\n        long max_suffix_sum = 0;\n        long total_sum = 0;\n        for (int i = 0; i < n; i++) {\n            max_prefix_sum += a[i];\n            max_prefix_sum = Math.Max(max_prefix_sum, 0);\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            max_suffix_sum += a[i];\n            max_suffix_sum = Math.Max(max_suffix_sum, 0);\n        }\n        for (int i = 0; i < n; i++) {\n            total_sum += a[i];\n        }\n        long ans = Math.Max(max_sum, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum);\n        return ans;"
  ]
}