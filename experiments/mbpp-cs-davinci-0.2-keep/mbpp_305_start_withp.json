{
  "name": "mbpp_305_start_withp",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    public static string StartWithp(List<string> words) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartWithp((new List<string>(new string[]{(string)\"Python PHP\", (string)\"Java JavaScript\", (string)\"c c++\"}))).Equals(Tuple.Create(\"Python\", \"PHP\")));\n    Debug.Assert(StartWithp((new List<string>(new string[]{(string)\"Python Programming\", (string)\"Java Programming\"}))).Equals(Tuple.Create(\"Python\", \"Programming\")));\n    Debug.Assert(StartWithp((new List<string>(new string[]{(string)\"Pqrst Pqr\", (string)\"qrstuv\"}))).Equals(Tuple.Create(\"Pqrst\", \"Pqr\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = words.Where(x => x.StartsWith(\"p\")).Take(2);\n        return string.Join(\",\", result);",
    "        return words.Where(x => x.StartsWith(\"p\")).Take(2).Aggregate((x, y) => x + \", \" + y);",
    "        var result = words.Where(x => x.StartsWith(\"p\")).Take(2);\n        return string.Join(\", \", result);",
    "        var result = words.Where(w => w.StartsWith(\"p\")).Take(2);\n        return string.Join(\" \", result);",
    "        return words.Where(x => x.StartsWith(\"p\")).Take(2).Aggregate((x, y) => x + \" \" + y);",
    "        return words.Where(w => w.StartsWith(\"p\")).Take(2).Aggregate((a, b) => a + \" \" + b);",
    "        var result = words.Where(word => word.StartsWith(\"p\")).Take(2);\n        return string.Join(\", \", result);",
    "        var result = words.Where(x => x.StartsWith(\"p\")).Take(2);\n        return string.Join(\",\", result);",
    "        return words.Where(x => x.StartsWith(\"p\")).Take(2).Aggregate((x, y) => x + \" \" + y);",
    "        var result = \"\";\n        var count = 0;\n        foreach (var word in words) {\n            if (word.StartsWith(\"p\")) {\n                result += word + \" \";\n                count++;\n            }\n            if (count == 2) {\n                break;\n            }\n        }\n        return result;",
    "        return words.Where(w => w.StartsWith(\"p\")).Take(2).Aggregate((a, b) => a + \" \" + b);",
    "        var result = words.Where(x => x.StartsWith(\"p\")).Take(2);\n        return string.Join(\",\", result);",
    "        var result = words.Where(word => word.StartsWith(\"p\")).Take(2).ToList();\n        return string.Join(\", \", result);",
    "        return words.Where(word => word.StartsWith(\"p\")).Take(2).Aggregate((a, b) => a + \" \" + b);",
    "        return words.Where(word => word.StartsWith(\"p\")).Take(2).Aggregate((a, b) => a + \", \" + b);",
    "        var result = words.Where(x => x.StartsWith(\"p\")).Take(2);\n        return string.Join(\",\", result);",
    "        var result = words.Where(x => x.StartsWith(\"p\")).Take(2);\n        return string.Join(\", \", result);",
    "        return words.Where(word => word.StartsWith(\"p\")).Take(2).Aggregate((a, b) => a + \" \" + b);",
    "        var result = words.Where(word => word.StartsWith(\"p\")).Take(2);\n        return string.Join(\", \", result);",
    "        return words.Where(w => w.StartsWith(\"p\")).Take(2).Aggregate((a, b) => a + \" \" + b);"
  ]
}