{
  "name": "mbpp_80_tetrahedral_number",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth tetrahedral number.\n    public static long TetrahedralNumber(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TetrahedralNumber((5L)) == (35L));\n    Debug.Assert(TetrahedralNumber((6L)) == (56L));\n    Debug.Assert(TetrahedralNumber((7L)) == (84L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return (n * (n + 1) * (n + 2)) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;",
    "        return n * (n + 1) * (n + 2) / 6;"
  ]
}