{
  "name": "mbpp_18_remove_dirty_chars",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to remove characters from the first string which are present in the second string.\n    public static string RemoveDirtyChars(string str, string second_string) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveDirtyChars((\"probasscurve\"), (\"pros\")).Equals((\"bacuve\")));\n    Debug.Assert(RemoveDirtyChars((\"digitalindia\"), (\"talent\")).Equals((\"digiidi\")));\n    Debug.Assert(RemoveDirtyChars((\"exoticmiles\"), (\"toxic\")).Equals((\"emles\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        string clean_string = \"\";\n        foreach (char c in str) {\n            if (!second_string.Contains(c)) {\n                clean_string += c;\n            }\n        }\n        return clean_string;",
    "        // Create a hash table to store the characters of the second string.\n        Dictionary<char, bool> hash_table = new Dictionary<char, bool>();\n        foreach (char c in second_string) {\n            hash_table[c] = true;\n        }\n\n        // Create a new string to store the result.\n        string result = \"\";\n        foreach (char c in str) {\n            if (!hash_table.ContainsKey(c)) {\n                result += c;\n            }\n        }\n        return result;",
    "        // Create a hash table to keep track of characters in the second string.\n        Dictionary<char, bool> hash = new Dictionary<char, bool>();\n        foreach (char c in second_string) {\n            hash[c] = true;\n        }\n\n        // Create a new string to store the result.\n        StringBuilder result = new StringBuilder();\n        foreach (char c in str) {\n            if (!hash.ContainsKey(c)) {\n                result.Append(c);\n            }\n        }\n        return result.ToString();",
    "        // Create a boolean array to store characters present in second string.\n        bool[] dirty_chars = new bool[256];\n        for (int i = 0; i < second_string.Length; i++) {\n            dirty_chars[second_string[i]] = true;\n        }\n\n        // Create a new string to store the result.\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < str.Length; i++) {\n            if (!dirty_chars[str[i]]) {\n                sb.Append(str[i]);\n            }\n        }\n        return sb.ToString();",
    "        // Create a hash table to store the characters of the second string.\n        Dictionary<char, int> hash_table = new Dictionary<char, int>();\n        foreach (char c in second_string) {\n            if (hash_table.ContainsKey(c)) {\n                hash_table[c]++;\n            } else {\n                hash_table.Add(c, 1);\n            }\n        }\n\n        // Create a new string to store the result.\n        string result = \"\";\n        foreach (char c in str) {\n            if (!hash_table.ContainsKey(c)) {\n                result += c;\n            }\n        }\n        return result;",
    "        var result = new StringBuilder();\n        var dirty_chars = new HashSet<char>(second_string);\n        foreach (var c in str) {\n            if (!dirty_chars.Contains(c)) {\n                result.Append(c);\n            }\n        }\n        return result.ToString();",
    "        // Create a hash table to keep track of characters in the second string.\n        var hash = new HashSet<char>();\n        foreach (var c in second_string) {\n            hash.Add(c);\n        }\n        // Create a new string to store the result.\n        var result = new StringBuilder();\n        // Iterate through the first string and add characters to the result if they are not in the hash table.\n        foreach (var c in str) {\n            if (!hash.Contains(c)) {\n                result.Append(c);\n            }\n        }\n        return result.ToString();",
    "        // Create a hash table to store the characters of the second string.\n        HashSet<char> hash = new HashSet<char>();\n        foreach (char c in second_string) {\n            hash.Add(c);\n        }\n\n        // Create a new string to store the result.\n        StringBuilder sb = new StringBuilder();\n        foreach (char c in str) {\n            if (!hash.Contains(c)) {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();",
    "        // Create a hash table to mark the characters present in the second string.\n        var hash_table = new Dictionary<char, bool>();\n        foreach (var c in second_string) {\n            if (!hash_table.ContainsKey(c)) {\n                hash_table.Add(c, true);\n            }\n        }\n\n        // Traverse the first string and remove dirty characters.\n        var clean_string = new StringBuilder();\n        foreach (var c in str) {\n            if (!hash_table.ContainsKey(c)) {\n                clean_string.Append(c);\n            }\n        }\n\n        return clean_string.ToString();",
    "        var result = new StringBuilder();\n        var dirty_chars = new HashSet<char>();\n        foreach (var c in second_string) {\n            dirty_chars.Add(c);\n        }\n        foreach (var c in str) {\n            if (!dirty_chars.Contains(c)) {\n                result.Append(c);\n            }\n        }\n        return result.ToString();",
    "        string result = \"\";\n        for (int i = 0; i < str.Length; i++) {\n            if (!second_string.Contains(str[i])) {\n                result += str[i];\n            }\n        }\n        return result;",
    "        // Create a hash table to store the characters of the second string.\n        // The key will be the character and the value will be the number of times it appears in the string.\n        Dictionary<char, int> hash_table = new Dictionary<char, int>();\n        foreach (char c in second_string) {\n            if (hash_table.ContainsKey(c)) {\n                hash_table[c]++;\n            } else {\n                hash_table.Add(c, 1);\n            }\n        }\n\n        // Create a new string to store the result.\n        StringBuilder result = new StringBuilder();\n        foreach (char c in str) {\n            if (!hash_table.ContainsKey(c)) {\n                result.Append(c);\n            }\n        }\n        return result.ToString();",
    "        // Create a hash table to store the characters of the second string.\n        // We will use the hash table to look up characters quickly.\n        var hash = new HashSet<char>();\n        foreach (var c in second_string) {\n            hash.Add(c);\n        }\n\n        // Scan the first string and only copy characters not present in the hash table.\n        var result = new StringBuilder();\n        foreach (var c in str) {\n            if (!hash.Contains(c)) {\n                result.Append(c);\n            }\n        }\n        return result.ToString();",
    "        // Create a hash table to store the characters of the second string.\n        var chars = new Dictionary<char, bool>();\n        foreach (var c in second_string) {\n            chars[c] = true;\n        }\n\n        // Create a new string to store the result.\n        var result = new StringBuilder();\n        foreach (var c in str) {\n            if (!chars.ContainsKey(c)) {\n                result.Append(c);\n            }\n        }\n\n        return result.ToString();",
    "        var sb = new StringBuilder();\n        foreach (var c in str) {\n            if (!second_string.Contains(c)) {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();",
    "        // Create a hash table to mark the characters present in the second string.\n        var hash_table = new HashSet<char>();\n        foreach (var c in second_string) {\n            hash_table.Add(c);\n        }\n\n        // Traverse the first string and remove all characters which are present in the second string.\n        var sb = new StringBuilder();\n        foreach (var c in str) {\n            if (!hash_table.Contains(c)) {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();",
    "        // Use a hashset to store the characters in the second string.\n        HashSet<char> dirty_chars = new HashSet<char>();\n        foreach (char c in second_string) {\n            dirty_chars.Add(c);\n        }\n        // Use a stringbuilder to store the result.\n        StringBuilder sb = new StringBuilder();\n        foreach (char c in str) {\n            if (!dirty_chars.Contains(c)) {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();",
    "        string result = \"\";\n        foreach (char c in str) {\n            if (!second_string.Contains(c)) {\n                result += c;\n            }\n        }\n        return result;",
    "        // Create a boolean array to store characters present in the second string.\n        bool[] char_set = new bool[256];\n        for (int i = 0; i < second_string.Length; i++) {\n            char_set[second_string[i]] = true;\n        }\n        // Create a new string to store the result.\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < str.Length; i++) {\n            if (char_set[str[i]] == false) {\n                sb.Append(str[i]);\n            }\n        }\n        return sb.ToString();",
    "        var sb = new StringBuilder();\n        var dirty_chars = new HashSet<char>(second_string);\n        foreach (var c in str) {\n            if (!dirty_chars.Contains(c)) {\n                sb.Append(c);\n            }\n        }\n        return sb.ToString();"
  ]
}