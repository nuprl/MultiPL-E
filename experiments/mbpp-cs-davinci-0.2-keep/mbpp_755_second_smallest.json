{
  "name": "mbpp_755_second_smallest",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the second smallest number in a list.\n    public static Nullable<float> SecondSmallest(object numbers) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SecondSmallest((new object(new long[]{(long)1L, (long)2L, (long)-8L, (long)-2L, (long)0L, (long)-2L}))).Equals(-2L));\n    Debug.Assert(SecondSmallest((new object(new long[]{(long)1L, (long)1L, (long)-0.5f, (long)0L, (long)2L, (long)-2L, (long)-2L}))).Equals(-0.5f));\n    Debug.Assert(SecondSmallest((new object(new long[]{(long)2L, (long)2L}))).Equals(null));\n    Debug.Assert(SecondSmallest((new object(new long[]{(long)2L, (long)2L, (long)2L}))).Equals(null));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var first = list.First();\n            var second = list.First();\n            foreach (var number in list) {\n                if (number < first) {\n                    second = first;\n                    first = number;\n                } else if (number < second) {\n                    second = number;\n                }\n            }\n            return second;\n        }\n        return null;",
    "        // If the list is empty, return null.\n        if (numbers == null) {\n            return null;\n        }\n        // If the list has only one element, return null.\n        if (numbers.GetType() == typeof(float)) {\n            return null;\n        }\n        // If the list has only two elements, return the second element.\n        if (numbers.GetType() == typeof(float[])) {\n            float[] nums = (float[])numbers;\n            if (nums.Length == 2) {\n                return nums[1];\n            }\n        }\n        // If the list has more than two elements, return the second smallest.\n        if (numbers.GetType() == typeof(float[])) {\n            float[] nums = (float[])numbers;\n            if (nums.Length > 2) {\n                float smallest = nums[0];\n                float secondSmallest = nums[1];\n                for (int i = 2; i < nums.Length; i++) {\n                    if (nums[i] < smallest) {\n                        secondSmallest = smallest;\n                        smallest = nums[i];\n                    } else if (nums[i] < secondSmallest) {\n                        secondSmallest = nums[i];\n                    }\n                }\n                return secondSmallest;\n            }\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            return list.Where(x => x > min).Min();\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            var min = list.Min();\n            var min2 = list.Where(x => x > min).Min();\n            return min2;\n        }\n        return null;",
    "        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        if (numbers is IEnumerable<float>) {\n            foreach (float number in (IEnumerable<float>)numbers) {\n                if (number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n        }\n        if (secondSmallest == float.MaxValue) {\n            return null;\n        }\n        return secondSmallest;",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() > 1) {\n                var min = nums.Min();\n                var secondMin = nums.Where(x => x > min).Min();\n                return secondMin;\n            }\n        }\n        return null;",
    "        if (numbers == null) return null;\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) return null;\n            float smallest = float.MaxValue;\n            float secondSmallest = float.MaxValue;\n            foreach (var number in list) {\n                if (number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        var list = numbers as IList<float>;\n        if (list == null) {\n            return null;\n        }\n        if (list.Count < 2) {\n            return null;\n        }\n        var min = list[0];\n        var secondMin = list[1];\n        if (min > secondMin) {\n            var temp = min;\n            min = secondMin;\n            secondMin = temp;\n        }\n        for (int i = 2; i < list.Count; i++) {\n            var current = list[i];\n            if (current < min) {\n                secondMin = min;\n                min = current;\n            } else if (current < secondMin) {\n                secondMin = current;\n            }\n        }\n        return secondMin;",
    "        if (numbers == null) {\n            return null;\n        }\n\n        if (!(numbers is IEnumerable<float>)) {\n            return null;\n        }\n\n        IEnumerable<float> nums = (IEnumerable<float>)numbers;\n        if (nums.Count() < 2) {\n            return null;\n        }\n\n        float min = float.MaxValue;\n        float secondMin = float.MaxValue;\n        foreach (float num in nums) {\n            if (num < min) {\n                secondMin = min;\n                min = num;\n            } else if (num < secondMin) {\n                secondMin = num;\n            }\n        }\n\n        return secondMin;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            IEnumerable<float> nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            float smallest = nums.First();\n            float secondSmallest = nums.First();\n            foreach (float num in nums) {\n                if (num < smallest) {\n                    secondSmallest = smallest;\n                    smallest = num;\n                } else if (num < secondSmallest) {\n                    secondSmallest = num;\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            return list.Where(x => x != min).Min();\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float min = list[0];\n            float second = list[1];\n            if (min > second) {\n                float temp = min;\n                min = second;\n                second = temp;\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < min) {\n                    second = min;\n                    min = list[i];\n                } else if (list[i] < second) {\n                    second = list[i];\n                }\n            }\n            return second;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float min = nums[0];\n            float secondMin = nums[0];\n            for (int i = 1; i < nums.Count; i++) {\n                if (nums[i] < min) {\n                    secondMin = min;\n                    min = nums[i];\n                } else if (nums[i] < secondMin) {\n                    secondMin = nums[i];\n                }\n            }\n            return secondMin;\n        } else {\n            return null;\n        }",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        var list = numbers as IEnumerable<float>;\n        if (list == null) {\n            return null;\n        }\n        var sorted = list.OrderBy(x => x).ToList();\n        if (sorted.Count < 2) {\n            return null;\n        }\n        return sorted[1];",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            return nums.Where(x => x != min).Min();\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        var list = numbers as IList<float>;\n        if (list == null) {\n            return null;\n        }\n        if (list.Count < 2) {\n            return null;\n        }\n        var min = float.MaxValue;\n        var secondMin = float.MaxValue;\n        foreach (var num in list) {\n            if (num < min) {\n                secondMin = min;\n                min = num;\n            } else if (num < secondMin) {\n                secondMin = num;\n            }\n        }\n        return secondMin;",
    "        if (numbers is List<float>) {\n            var nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            var smallest = nums[0];\n            var secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                var temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            return list.Where(x => x != min).Min();\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        var list = numbers as IEnumerable<float>;\n        if (list == null) {\n            return null;\n        }\n        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        foreach (var number in list) {\n            if (number < smallest) {\n                secondSmallest = smallest;\n                smallest = number;\n            } else if (number < secondSmallest) {\n                secondSmallest = number;\n            }\n        }\n        if (secondSmallest == float.MaxValue) {\n            return null;\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            IEnumerable<float> nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            float min = nums.Min();\n            float secondMin = nums.Where(n => n > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            var min = list.Min();\n            var min2 = list.Where(x => x > min).Min();\n            return min2;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        var list = numbers as IList<float>;\n        if (list == null) {\n            return null;\n        }\n        if (list.Count < 2) {\n            return null;\n        }\n        float smallest = list[0];\n        float secondSmallest = list[1];\n        if (smallest > secondSmallest) {\n            float temp = smallest;\n            smallest = secondSmallest;\n            secondSmallest = temp;\n        }\n        for (int i = 2; i < list.Count; i++) {\n            if (list[i] < smallest) {\n                secondSmallest = smallest;\n                smallest = list[i];\n            } else if (list[i] < secondSmallest) {\n                secondSmallest = list[i];\n            }\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            var secondMin = nums.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            IEnumerable<float> nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            float smallest = nums.First();\n            float secondSmallest = nums.First();\n            foreach (float num in nums) {\n                if (num < smallest) {\n                    secondSmallest = smallest;\n                    smallest = num;\n                } else if (num < secondSmallest) {\n                    secondSmallest = num;\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        float? smallest = null;\n        float? secondSmallest = null;\n        if (numbers is IEnumerable<float>) {\n            foreach (float number in (IEnumerable<float>)numbers) {\n                if (smallest == null || number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (secondSmallest == null || number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x).ToList();\n            return sorted[1];\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var min2 = list.Where(x => x > min).Min();\n            return min2;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers.GetType() != typeof(List<float>)) {\n            return null;\n        }\n        List<float> list = (List<float>)numbers;\n        if (list.Count < 2) {\n            return null;\n        }\n        float smallest = list[0];\n        float secondSmallest = list[1];\n        if (smallest > secondSmallest) {\n            float temp = smallest;\n            smallest = secondSmallest;\n            secondSmallest = temp;\n        }\n        for (int i = 2; i < list.Count; i++) {\n            if (list[i] < smallest) {\n                secondSmallest = smallest;\n                smallest = list[i];\n            } else if (list[i] < secondSmallest) {\n                secondSmallest = list[i];\n            }\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            var secondMin = nums.Where(x => x != min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers.GetType() != typeof(List<float>)) {\n            return null;\n        }\n        List<float> nums = (List<float>)numbers;\n        if (nums.Count < 2) {\n            return null;\n        }\n        float smallest = nums[0];\n        float secondSmallest = nums[1];\n        if (smallest > secondSmallest) {\n            float temp = smallest;\n            smallest = secondSmallest;\n            secondSmallest = temp;\n        }\n        for (int i = 2; i < nums.Count; i++) {\n            if (nums[i] < smallest) {\n                secondSmallest = smallest;\n                smallest = nums[i];\n            } else if (nums[i] < secondSmallest) {\n                secondSmallest = nums[i];\n            }\n        }\n        return secondSmallest;",
    "        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        if (numbers is List<float>) {\n            foreach (float number in (List<float>)numbers) {\n                if (number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        float? smallest = null;\n        float? secondSmallest = null;\n        foreach (var number in (List<float>)numbers) {\n            if (smallest == null) {\n                smallest = number;\n            } else if (secondSmallest == null) {\n                if (number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else {\n                    secondSmallest = number;\n                }\n            } else {\n                if (number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            var secondMin = nums.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(n => n > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            float smallest = nums[0];\n            float secondSmallest = nums[0];\n            foreach (float num in nums) {\n                if (num < smallest) {\n                    secondSmallest = smallest;\n                    smallest = num;\n                } else if (num < secondSmallest) {\n                    secondSmallest = num;\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = float.MaxValue;\n            float secondSmallest = float.MaxValue;\n            foreach (float num in nums) {\n                if (num < smallest) {\n                    secondSmallest = smallest;\n                    smallest = num;\n                } else if (num < secondSmallest) {\n                    secondSmallest = num;\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers == null) {\n            return null;\n        }\n        var list = numbers as IEnumerable<float>;\n        if (list == null) {\n            return null;\n        }\n        if (list.Count() < 2) {\n            return null;\n        }\n        return list.OrderBy(x => x).Skip(1).First();",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x != min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                smallest = list[1];\n                secondSmallest = list[0];\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float min = float.MaxValue;\n            float secondMin = float.MaxValue;\n            foreach (float num in list) {\n                if (num < min) {\n                    secondMin = min;\n                    min = num;\n                } else if (num < secondMin) {\n                    secondMin = num;\n                }\n            }\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                smallest = nums[1];\n                secondSmallest = nums[0];\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x).ToList();\n            return sorted[1];\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float min = nums[0];\n            float secondMin = nums[1];\n            if (min > secondMin) {\n                min = nums[1];\n                secondMin = nums[0];\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < min) {\n                    secondMin = min;\n                    min = nums[i];\n                } else if (nums[i] < secondMin) {\n                    secondMin = nums[i];\n                }\n            }\n            return secondMin;\n        } else {\n            return null;\n        }",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            return list.Where(x => x > min).Min();\n        }\n        return null;",
    "        // TODO: Implement this function.\n        return null;",
    "        if (numbers is int[]) {\n            int[] nums = (int[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            int smallest = int.MaxValue;\n            int secondSmallest = int.MaxValue;\n            for (int i = 0; i < nums.Length; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float smallest = float.MaxValue;\n            float secondSmallest = float.MaxValue;\n            for (int i = 0; i < nums.Length; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float min = nums[0];\n            float secondMin = nums[1];\n            if (min > secondMin) {\n                float temp = min;\n                min = secondMin;\n                secondMin = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < min) {\n                    secondMin = min;\n                    min = nums[i];\n                } else if (nums[i] < secondMin) {\n                    secondMin = nums[i];\n                }\n            }\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var sorted = nums.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var second = list.Where(x => x > min).Min();\n            return second;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            float smallest = list.First();\n            float secondSmallest = list.First();\n            foreach (float number in list) {\n                if (number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x != min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            var min = nums.Min();\n            var min2 = nums.Where(x => x > min).Min();\n            return min2;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (!(numbers is IEnumerable<float>)) {\n            return null;\n        }\n        var list = (IEnumerable<float>)numbers;\n        if (list.Count() < 2) {\n            return null;\n        }\n        var min = list.Min();\n        var secondMin = list.Where(x => x > min).Min();\n        return secondMin;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            float smallest = nums[0];\n            float secondSmallest = nums[0];\n            for (int i = 0; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        float? smallest = null;\n        float? secondSmallest = null;\n        if (numbers is IEnumerable<float>) {\n            foreach (float number in (IEnumerable<float>)numbers) {\n                if (smallest == null || number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (secondSmallest == null || number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n        var list = new List<float>();\n        if (numbers is List<float>) {\n            list = (List<float>)numbers;\n        } else if (numbers is float[]) {\n            list = ((float[])numbers).ToList();\n        } else {\n            return null;\n        }\n        if (list.Count < 2) {\n            return null;\n        }\n        var min = list[0];\n        var secondMin = list[1];\n        if (min > secondMin) {\n            var temp = min;\n            min = secondMin;\n            secondMin = temp;\n        }\n        for (int i = 2; i < list.Count; i++) {\n            if (list[i] < min) {\n                secondMin = min;\n                min = list[i];\n            } else if (list[i] < secondMin) {\n                secondMin = list[i];\n            }\n        }\n        return secondMin;",
    "        if (numbers == null) {\n            return null;\n        }\n        var list = (List<float>)numbers;\n        if (list.Count < 2) {\n            return null;\n        }\n        var min = list[0];\n        var secondMin = list[1];\n        if (min > secondMin) {\n            var temp = min;\n            min = secondMin;\n            secondMin = temp;\n        }\n        for (int i = 2; i < list.Count; i++) {\n            if (list[i] < min) {\n                secondMin = min;\n                min = list[i];\n            } else if (list[i] < secondMin) {\n                secondMin = list[i];\n            }\n        }\n        return secondMin;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            var sorted = list.OrderBy(x => x);\n            if (sorted.Count() >= 2) {\n                return sorted.ElementAt(1);\n            }\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        var list = (List<float>)numbers;\n        if (list.Count < 2) {\n            return null;\n        }\n        var smallest = list[0];\n        var secondSmallest = list[1];\n        if (smallest > secondSmallest) {\n            smallest = list[1];\n            secondSmallest = list[0];\n        }\n        for (int i = 2; i < list.Count; i++) {\n            if (list[i] < smallest) {\n                secondSmallest = smallest;\n                smallest = list[i];\n            } else if (list[i] < secondSmallest) {\n                secondSmallest = list[i];\n            }\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var smallest = nums.Min();\n            var secondSmallest = nums.Where(x => x != smallest).Min();\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                smallest = nums[1];\n                secondSmallest = nums[0];\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var sorted = nums.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                smallest = nums[1];\n                secondSmallest = nums[0];\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x).ToList();\n            return sorted[1];\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            IEnumerable<float> nums = (IEnumerable<float>)numbers;\n            if (nums.Count() == 0) {\n                return null;\n            }\n            float smallest = nums.First();\n            float secondSmallest = nums.First();\n            foreach (float num in nums) {\n                if (num < smallest) {\n                    secondSmallest = smallest;\n                    smallest = num;\n                } else if (num < secondSmallest) {\n                    secondSmallest = num;\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            var list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        if (numbers is List<float>) {\n            foreach (float number in (List<float>)numbers) {\n                if (number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                }\n                else if (number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n        }\n        else if (numbers is List<int>) {\n            foreach (int number in (List<int>)numbers) {\n                if (number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                }\n                else if (number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n        }\n        else {\n            return null;\n        }\n        return secondSmallest;",
    "        // If the input is null or empty, return null.\n        if (numbers == null || numbers.GetType() != typeof(List<float>)) {\n            return null;\n        }\n        // Cast the input to a list of floats.\n        List<float> list = (List<float>)numbers;\n        // If the list is empty, return null.\n        if (list.Count == 0) {\n            return null;\n        }\n        // If the list has only one element, return null.\n        if (list.Count == 1) {\n            return null;\n        }\n        // Sort the list.\n        list.Sort();\n        // Return the second element.\n        return list[1];",
    "        if (numbers == null) {\n            return null;\n        }\n        var list = (List<float>)numbers;\n        if (list.Count < 2) {\n            return null;\n        }\n        var smallest = list[0];\n        var secondSmallest = list[1];\n        if (smallest > secondSmallest) {\n            var temp = smallest;\n            smallest = secondSmallest;\n            secondSmallest = temp;\n        }\n        for (var i = 2; i < list.Count; i++) {\n            if (list[i] < smallest) {\n                secondSmallest = smallest;\n                smallest = list[i];\n            } else if (list[i] < secondSmallest) {\n                secondSmallest = list[i];\n            }\n        }\n        return secondSmallest;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        var nums = (IEnumerable<float>)numbers;\n        if (nums.Count() < 2) {\n            return null;\n        }\n        var min = nums.Min();\n        var secondMin = nums.Where(x => x > min).Min();\n        return secondMin;",
    "        if (numbers == null) return null;\n        if (numbers.GetType() != typeof(List<float>)) return null;\n        List<float> list = (List<float>)numbers;\n        if (list.Count < 2) return null;\n        float smallest = list[0];\n        float secondSmallest = list[1];\n        if (smallest > secondSmallest) {\n            float temp = smallest;\n            smallest = secondSmallest;\n            secondSmallest = temp;\n        }\n        for (int i = 2; i < list.Count; i++) {\n            if (list[i] < smallest) {\n                secondSmallest = smallest;\n                smallest = list[i];\n            } else if (list[i] < secondSmallest) {\n                secondSmallest = list[i];\n            }\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x != min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            var min = list.Min();\n            var min2 = list.Where(x => x > min).Min();\n            return min2;\n        } else {\n            return null;\n        }",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) return null;\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) return null;\n            var min = nums.Min();\n            var min2 = nums.Where(n => n != min).Min();\n            return min2;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            var min2 = nums.Where(x => x != min).Min();\n            return min2;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            var min = list.Min();\n            var secondMin = list.Where(x => x != min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            var secondMin = nums.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is int[]) {\n            int[] nums = (int[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            int min = nums[0];\n            int secondMin = nums[1];\n            if (min > secondMin) {\n                int temp = min;\n                min = secondMin;\n                secondMin = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < min) {\n                    secondMin = min;\n                    min = nums[i];\n                } else if (nums[i] < secondMin) {\n                    secondMin = nums[i];\n                }\n            }\n            return secondMin;\n        } else if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float min = nums[0];\n            float secondMin = nums[1];\n            if (min > secondMin) {\n                float temp = min;\n                min = secondMin;\n                secondMin = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < min) {\n                    secondMin = min;\n                    min = nums[i];\n                } else if (nums[i] < secondMin) {\n                    secondMin = nums[i];\n                }\n            }\n            return secondMin;\n        } else if (numbers is double[]) {\n            double[] nums = (double[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            double min = nums[0];\n            double secondMin = nums[1];\n            if (min > secondMin) {\n                double temp = min;\n                min = secondMin;\n                secondMin = temp;\n            }\n            for (int i = 2; i < nums.Length; i++)",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        // TODO: Implement this function.\n        return null;",
    "        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        foreach (float number in (IEnumerable<float>)numbers) {\n            if (number < smallest) {\n                secondSmallest = smallest;\n                smallest = number;\n            } else if (number < secondSmallest) {\n                secondSmallest = number;\n            }\n        }\n        if (secondSmallest == float.MaxValue) {\n            return null;\n        }\n        return secondSmallest;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                smallest = list[1];\n                secondSmallest = list[0];\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers == null) {\n            return null;\n        }\n        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        foreach (float number in (IEnumerable<float>)numbers) {\n            if (number < smallest) {\n                secondSmallest = smallest;\n                smallest = number;\n            } else if (number < secondSmallest) {\n                secondSmallest = number;\n            }\n        }\n        return secondSmallest;",
    "        if (numbers == null) return null;\n        if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) return null;\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            throw new ArgumentException(\"numbers must be a float[]\");\n        }",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x != min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            var min = nums.Min();\n            var min2 = nums.Where(x => x > min).Min();\n            return min2;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        var list = numbers as IEnumerable<float>;\n        if (list == null) {\n            return null;\n        }\n        if (list.Count() < 2) {\n            return null;\n        }\n        return list.OrderBy(x => x).Skip(1).First();",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                smallest = list[1];\n                secondSmallest = list[0];\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            var secondMin = nums.Where(x => x != min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        float[] nums = (float[])numbers;\n        if (nums.Length < 2) {\n            return null;\n        }\n        float smallest = nums[0];\n        float secondSmallest = nums[1];\n        if (smallest > secondSmallest) {\n            float temp = smallest;\n            smallest = secondSmallest;\n            secondSmallest = temp;\n        }\n        for (int i = 2; i < nums.Length; i++) {\n            if (nums[i] < smallest) {\n                secondSmallest = smallest;\n                smallest = nums[i];\n            } else if (nums[i] < secondSmallest) {\n                secondSmallest = nums[i];\n            }\n        }\n        return secondSmallest;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float min = list[0];\n            float secondMin = list[1];\n            if (min > secondMin) {\n                float temp = min;\n                min = secondMin;\n                secondMin = temp;\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < min) {\n                    secondMin = min;\n                    min = list[i];\n                } else if (list[i] < secondMin) {\n                    secondMin = list[i];\n                }\n            }\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var smallest = nums.Min();\n            var secondSmallest = nums.Where(x => x > smallest).Min();\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                smallest = nums[1];\n                secondSmallest = nums[0];\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            return nums.Where(x => x > min).Min();\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var sorted = nums.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        foreach (float number in (float[])numbers) {\n            if (number < smallest) {\n                secondSmallest = smallest;\n                smallest = number;\n            } else if (number < secondSmallest) {\n                secondSmallest = number;\n            }\n        }\n        return secondSmallest;",
    "        if (numbers == null) return null;\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) return null;\n            float min = list.First();\n            float second = list.First();\n            foreach (float f in list) {\n                if (f < min) {\n                    second = min;\n                    min = f;\n                } else if (f < second) {\n                    second = f;\n                }\n            }\n            return second;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                smallest = list[1];\n                secondSmallest = list[0];\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        // If the input is null, return null.\n        if (numbers == null) {\n            return null;\n        }\n        // If the input is not a list, return null.\n        if (!(numbers is IList<float>)) {\n            return null;\n        }\n        // If the list is empty, return null.\n        if (((IList<float>)numbers).Count == 0) {\n            return null;\n        }\n        // If the list has only one element, return null.\n        if (((IList<float>)numbers).Count == 1) {\n            return null;\n        }\n        // If the list has only two elements, return the smaller of the two.\n        if (((IList<float>)numbers).Count == 2) {\n            return ((IList<float>)numbers)[0] < ((IList<float>)numbers)[1] ? ((IList<float>)numbers)[0] : ((IList<float>)numbers)[1];\n        }\n        // If the list has more than two elements, sort it and return the second element.\n        ((IList<float>)numbers).Sort();\n        return ((IList<float>)numbers)[1];",
    "        if (numbers == null) {\n            return null;\n        }\n        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        foreach (float number in (float[])numbers) {\n            if (number < smallest) {\n                secondSmallest = smallest;\n                smallest = number;\n            } else if (number < secondSmallest) {\n                secondSmallest = number;\n            }\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n        var list = numbers as IEnumerable<float>;\n        if (list == null) {\n            return null;\n        }\n        if (list.Count() < 2) {\n            return null;\n        }\n        var sorted = list.OrderBy(x => x);\n        return sorted.ElementAt(1);",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        foreach (float number in (float[])numbers) {\n            if (number < smallest) {\n                secondSmallest = smallest;\n                smallest = number;\n            } else if (number < secondSmallest) {\n                secondSmallest = number;\n            }\n        }\n        if (secondSmallest == float.MaxValue) {\n            return null;\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            IEnumerable<float> nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            float min = nums.Min();\n            float secondMin = nums.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        float? smallest = null;\n        float? secondSmallest = null;\n        if (numbers is IEnumerable<float>) {\n            foreach (float number in (IEnumerable<float>)numbers) {\n                if (smallest == null || number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (secondSmallest == null || number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            float min = list.Min();\n            float secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            return list.Where(x => x > min).Min();\n        }\n        return null;",
    "        float? smallest = null;\n        float? secondSmallest = null;\n        if (numbers is IEnumerable<float>) {\n            foreach (float number in (IEnumerable<float>)numbers) {\n                if (smallest == null || number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (secondSmallest == null || number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var sorted = nums.OrderBy(x => x);\n            return sorted.Skip(1).First();\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            IEnumerable<float> nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            float min = nums.Min();\n            float secondMin = nums.Where(n => n > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            var secondMin = nums.Where(n => n > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float min = nums[0];\n            float secondMin = nums[1];\n            if (min > secondMin) {\n                float temp = min;\n                min = secondMin;\n                secondMin = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < min) {\n                    secondMin = min;\n                    min = nums[i];\n                } else if (nums[i] < secondMin) {\n                    secondMin = nums[i];\n                }\n            }\n            return secondMin;\n        } else if (numbers is int[]) {\n            int[] nums = (int[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            int min = nums[0];\n            int secondMin = nums[1];\n            if (min > secondMin) {\n                int temp = min;\n                min = secondMin;\n                secondMin = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < min) {\n                    secondMin = min;\n                    min = nums[i];\n                } else if (nums[i] < secondMin) {\n                    secondMin = nums[i];\n                }\n            }\n            return secondMin;\n        } else {\n            return null;\n        }",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x).ToList();\n            return sorted[1];\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (!(numbers is IEnumerable<float>)) {\n            return null;\n        }\n        var nums = (IEnumerable<float>)numbers;\n        if (nums.Count() < 2) {\n            return null;\n        }\n        var min = nums.Min();\n        var secondMin = nums.Where(x => x != min).Min();\n        return secondMin;",
    "        if (numbers == null) {\n            return null;\n        }\n        float[] nums = (float[])numbers;\n        if (nums.Length == 0) {\n            return null;\n        }\n        if (nums.Length == 1) {\n            return nums[0];\n        }\n        float smallest = nums[0];\n        float secondSmallest = nums[1];\n        if (smallest > secondSmallest) {\n            float temp = smallest;\n            smallest = secondSmallest;\n            secondSmallest = temp;\n        }\n        for (int i = 2; i < nums.Length; i++) {\n            if (nums[i] < smallest) {\n                secondSmallest = smallest;\n                smallest = nums[i];\n            } else if (nums[i] < secondSmallest) {\n                secondSmallest = nums[i];\n            }\n        }\n        return secondSmallest;",
    "        if (numbers == null) return null;\n        if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) return null;\n            float min = nums[0];\n            float second = nums[1];\n            if (min > second) {\n                float temp = min;\n                min = second;\n                second = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < min) {\n                    second = min;\n                    min = nums[i];\n                } else if (nums[i] < second) {\n                    second = nums[i];\n                }\n            }\n            return second;\n        } else if (numbers is int[]) {\n            int[] nums = (int[])numbers;\n            if (nums.Length < 2) return null;\n            int min = nums[0];\n            int second = nums[1];\n            if (min > second) {\n                int temp = min;\n                min = second;\n                second = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < min) {\n                    second = min;\n                    min = nums[i];\n                } else if (nums[i] < second) {\n                    second = nums[i];\n                }\n            }\n            return second;\n        } else if (numbers is double[]) {\n            double[] nums = (double[])numbers;\n            if (nums.Length < 2) return null;\n            double min = nums[0];\n            double second = nums[1];\n            if (min > second) {\n                double temp = min;\n                min = second;\n                second = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < min) {\n                    second = min;\n                    min = nums[i];\n                } else if (nums[i] < second) {",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            var min = nums.Min();\n            var min2 = nums.Where(x => x > min).Min();\n            return min2;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var min2 = list.Where(x => x != min).Min();\n            return min2;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = float.MaxValue;\n            float secondSmallest = float.MaxValue;\n            for (int i = 0; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers.GetType() != typeof(List<float>)) {\n            return null;\n        }\n        List<float> list = (List<float>)numbers;\n        if (list.Count < 2) {\n            return null;\n        }\n        float min = list[0];\n        float secondMin = list[1];\n        if (min > secondMin) {\n            float temp = min;\n            min = secondMin;\n            secondMin = temp;\n        }\n        for (int i = 2; i < list.Count; i++) {\n            if (list[i] < min) {\n                secondMin = min;\n                min = list[i];\n            } else if (list[i] < secondMin) {\n                secondMin = list[i];\n            }\n        }\n        return secondMin;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            return list.Where(x => x != min).Min();\n        }\n        return null;",
    "        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        if (numbers is List<float>) {\n            foreach (float number in (List<float>)numbers) {\n                if (number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        float? smallest = null;\n        float? secondSmallest = null;\n        if (numbers is IEnumerable<float>) {\n            foreach (float number in (IEnumerable<float>)numbers) {\n                if (smallest == null || number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (secondSmallest == null || number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is int[]) {\n            int[] nums = (int[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            int first = int.MaxValue;\n            int second = int.MaxValue;\n            for (int i = 0; i < nums.Length; i++) {\n                if (nums[i] < first) {\n                    second = first;\n                    first = nums[i];\n                } else if (nums[i] < second && nums[i] != first) {\n                    second = nums[i];\n                }\n            }\n            if (second == int.MaxValue) {\n                return null;\n            }\n            return second;\n        } else if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float first = float.MaxValue;\n            float second = float.MaxValue;\n            for (int i = 0; i < nums.Length; i++) {\n                if (nums[i] < first) {\n                    second = first;\n                    first = nums[i];\n                } else if (nums[i] < second && nums[i] != first) {\n                    second = nums[i];\n                }\n            }\n            if (second == float.MaxValue) {\n                return null;\n            }\n            return second;\n        } else {\n            return null;\n        }",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) return null;\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) return null;\n            var min = float.MaxValue;\n            var secondMin = float.MaxValue;\n            foreach (var number in list) {\n                if (number < min) {\n                    secondMin = min;\n                    min = number;\n                } else if (number < secondMin) {\n                    secondMin = number;\n                }\n            }\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                smallest = nums[1];\n                secondSmallest = nums[0];\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        foreach (float number in (float[])numbers) {\n            if (number < smallest) {\n                secondSmallest = smallest;\n                smallest = number;\n            } else if (number < secondSmallest) {\n                secondSmallest = number;\n            }\n        }\n        return secondSmallest;",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            var min = nums.Min();\n            var min2 = nums.Where(x => x > min).Min();\n            return min2;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            IEnumerable<float> nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            float smallest = nums.First();\n            float secondSmallest = nums.First();\n            foreach (float num in nums) {\n                if (num < smallest) {\n                    secondSmallest = smallest;\n                    smallest = num;\n                } else if (num < secondSmallest) {\n                    secondSmallest = num;\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float first = nums[0];\n            float second = nums[1];\n            if (first > second) {\n                first = nums[1];\n                second = nums[0];\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < first) {\n                    second = first;\n                    first = nums[i];\n                } else if (nums[i] < second) {\n                    second = nums[i];\n                }\n            }\n            return second;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                }\n                else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = list[0];\n            float secondSmallest = list[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = list[i];\n                } else if (list[i] < secondSmallest) {\n                    secondSmallest = list[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            return list.OrderBy(x => x).Skip(1).First();\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float min = nums[0];\n            float secondMin = nums[1];\n            if (min > secondMin) {\n                float temp = min;\n                min = secondMin;\n                secondMin = temp;\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < min) {\n                    secondMin = min;\n                    min = nums[i];\n                } else if (nums[i] < secondMin) {\n                    secondMin = nums[i];\n                }\n            }\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        foreach (float number in (float[])numbers) {\n            if (number < smallest) {\n                secondSmallest = smallest;\n                smallest = number;\n            } else if (number < secondSmallest) {\n                secondSmallest = number;\n            }\n        }\n        return secondSmallest;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float min = nums[0];\n            float secondMin = nums[1];\n            if (min > secondMin) {\n                float temp = min;\n                min = secondMin;\n                secondMin = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < min) {\n                    secondMin = min;\n                    min = nums[i];\n                } else if (nums[i] < secondMin) {\n                    secondMin = nums[i];\n                }\n            }\n            return secondMin;\n        } else {\n            return null;\n        }",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            list.Sort();\n            return list[1];\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is float[]) {\n            float[] nums = (float[])numbers;\n            if (nums.Length < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                smallest = nums[1];\n                secondSmallest = nums[0];\n            }\n            for (int i = 2; i < nums.Length; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers.GetType() == typeof(List<float>)) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float smallest = float.MaxValue;\n            float secondSmallest = float.MaxValue;\n            foreach (float number in list) {\n                if (number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        // If the input is null, return null.\n        if (numbers == null) {\n            return null;\n        }\n        // If the input is not a list, return null.\n        if (!(numbers is IList<float>)) {\n            return null;\n        }\n        // If the list is empty, return null.\n        if (((IList<float>)numbers).Count == 0) {\n            return null;\n        }\n        // If the list has only one element, return null.\n        if (((IList<float>)numbers).Count == 1) {\n            return null;\n        }\n        // If the list has two elements, return the second element.\n        if (((IList<float>)numbers).Count == 2) {\n            return ((IList<float>)numbers)[1];\n        }\n        // If the list has more than two elements, sort the list and return the second element.\n        float[] sorted = ((IList<float>)numbers).OrderBy(x => x).ToArray();\n        return sorted[1];"
  ]
}