{
  "name": "mbpp_755_second_smallest",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the second smallest number in a list.\n    public static Nullable<float> SecondSmallest(object numbers) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SecondSmallest((new object(new long[]{(long)1L, (long)2L, (long)-8L, (long)-2L, (long)0L, (long)-2L}))).Equals(-2L));\n    Debug.Assert(SecondSmallest((new object(new long[]{(long)1L, (long)1L, (long)-0.5f, (long)0L, (long)2L, (long)-2L, (long)-2L}))).Equals(-0.5f));\n    Debug.Assert(SecondSmallest((new object(new long[]{(long)2L, (long)2L}))).Equals(null));\n    Debug.Assert(SecondSmallest((new object(new long[]{(long)2L, (long)2L, (long)2L}))).Equals(null));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var first = list.First();\n            var second = list.First();\n            foreach (var number in list) {\n                if (number < first) {\n                    second = first;\n                    first = number;\n                } else if (number < second) {\n                    second = number;\n                }\n            }\n            return second;\n        }\n        return null;",
    "        // If the list is empty, return null.\n        if (numbers == null) {\n            return null;\n        }\n        // If the list has only one element, return null.\n        if (numbers.GetType() == typeof(float)) {\n            return null;\n        }\n        // If the list has only two elements, return the second element.\n        if (numbers.GetType() == typeof(float[])) {\n            float[] nums = (float[])numbers;\n            if (nums.Length == 2) {\n                return nums[1];\n            }\n        }\n        // If the list has more than two elements, return the second smallest.\n        if (numbers.GetType() == typeof(float[])) {\n            float[] nums = (float[])numbers;\n            if (nums.Length > 2) {\n                float smallest = nums[0];\n                float secondSmallest = nums[1];\n                for (int i = 2; i < nums.Length; i++) {\n                    if (nums[i] < smallest) {\n                        secondSmallest = smallest;\n                        smallest = nums[i];\n                    } else if (nums[i] < secondSmallest) {\n                        secondSmallest = nums[i];\n                    }\n                }\n                return secondSmallest;\n            }\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float smallest = nums[0];\n            float secondSmallest = nums[1];\n            if (smallest > secondSmallest) {\n                float temp = smallest;\n                smallest = secondSmallest;\n                secondSmallest = temp;\n            }\n            for (int i = 2; i < nums.Count; i++) {\n                if (nums[i] < smallest) {\n                    secondSmallest = smallest;\n                    smallest = nums[i];\n                } else if (nums[i] < secondSmallest) {\n                    secondSmallest = nums[i];\n                }\n            }\n            return secondSmallest;\n        } else {\n            return null;\n        }",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            return list.Where(x => x > min).Min();\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            var min = list.Min();\n            var min2 = list.Where(x => x > min).Min();\n            return min2;\n        }\n        return null;",
    "        float smallest = float.MaxValue;\n        float secondSmallest = float.MaxValue;\n        if (numbers is IEnumerable<float>) {\n            foreach (float number in (IEnumerable<float>)numbers) {\n                if (number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n        }\n        if (secondSmallest == float.MaxValue) {\n            return null;\n        }\n        return secondSmallest;",
    "        if (numbers is IEnumerable<float>) {\n            var nums = (IEnumerable<float>)numbers;\n            if (nums.Count() > 1) {\n                var min = nums.Min();\n                var secondMin = nums.Where(x => x > min).Min();\n                return secondMin;\n            }\n        }\n        return null;",
    "        if (numbers == null) return null;\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) return null;\n            float smallest = float.MaxValue;\n            float secondSmallest = float.MaxValue;\n            foreach (var number in list) {\n                if (number < smallest) {\n                    secondSmallest = smallest;\n                    smallest = number;\n                } else if (number < secondSmallest) {\n                    secondSmallest = number;\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        var list = numbers as IList<float>;\n        if (list == null) {\n            return null;\n        }\n        if (list.Count < 2) {\n            return null;\n        }\n        var min = list[0];\n        var secondMin = list[1];\n        if (min > secondMin) {\n            var temp = min;\n            min = secondMin;\n            secondMin = temp;\n        }\n        for (int i = 2; i < list.Count; i++) {\n            var current = list[i];\n            if (current < min) {\n                secondMin = min;\n                min = current;\n            } else if (current < secondMin) {\n                secondMin = current;\n            }\n        }\n        return secondMin;",
    "        if (numbers == null) {\n            return null;\n        }\n\n        if (!(numbers is IEnumerable<float>)) {\n            return null;\n        }\n\n        IEnumerable<float> nums = (IEnumerable<float>)numbers;\n        if (nums.Count() < 2) {\n            return null;\n        }\n\n        float min = float.MaxValue;\n        float secondMin = float.MaxValue;\n        foreach (float num in nums) {\n            if (num < min) {\n                secondMin = min;\n                min = num;\n            } else if (num < secondMin) {\n                secondMin = num;\n            }\n        }\n\n        return secondMin;",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            IEnumerable<float> nums = (IEnumerable<float>)numbers;\n            if (nums.Count() < 2) {\n                return null;\n            }\n            float smallest = nums.First();\n            float secondSmallest = nums.First();\n            foreach (float num in nums) {\n                if (num < smallest) {\n                    secondSmallest = smallest;\n                    smallest = num;\n                } else if (num < secondSmallest) {\n                    secondSmallest = num;\n                }\n            }\n            return secondSmallest;\n        }\n        return null;",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            return list.Where(x => x != min).Min();\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> list = (List<float>)numbers;\n            if (list.Count < 2) {\n                return null;\n            }\n            float min = list[0];\n            float second = list[1];\n            if (min > second) {\n                float temp = min;\n                min = second;\n                second = temp;\n            }\n            for (int i = 2; i < list.Count; i++) {\n                if (list[i] < min) {\n                    second = min;\n                    min = list[i];\n                } else if (list[i] < second) {\n                    second = list[i];\n                }\n            }\n            return second;\n        }\n        return null;",
    "        if (numbers is List<float>) {\n            List<float> nums = (List<float>)numbers;\n            if (nums.Count < 2) {\n                return null;\n            }\n            float min = nums[0];\n            float secondMin = nums[0];\n            for (int i = 1; i < nums.Count; i++) {\n                if (nums[i] < min) {\n                    secondMin = min;\n                    min = nums[i];\n                } else if (nums[i] < secondMin) {\n                    secondMin = nums[i];\n                }\n            }\n            return secondMin;\n        } else {\n            return null;\n        }",
    "        if (numbers == null) {\n            return null;\n        }\n        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var min = list.Min();\n            var secondMin = list.Where(x => x > min).Min();\n            return secondMin;\n        }\n        return null;",
    "        if (numbers == null) {\n            return null;\n        }\n        var list = numbers as IEnumerable<float>;\n        if (list == null) {\n            return null;\n        }\n        var sorted = list.OrderBy(x => x).ToList();\n        if (sorted.Count < 2) {\n            return null;\n        }\n        return sorted[1];",
    "        if (numbers is IEnumerable<float>) {\n            var list = (IEnumerable<float>)numbers;\n            if (list.Count() < 2) {\n                return null;\n            }\n            var sorted = list.OrderBy(x => x);\n            return sorted.ElementAt(1);\n        }\n        return null;"
  ]
}