{
  "name": "mbpp_444_trim_tuple",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to trim each tuple by k in the given tuple list.\n    public static string TrimTuple(List<long> test_list, long K) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TrimTuple((new List<long>(new Tuple<long, long, long, long, long>[]{(Tuple<long, long, long, long, long>)Tuple.Create(5L, 3L, 2L, 1L, 4L), (Tuple<long, long, long, long, long>)Tuple.Create(3L, 4L, 9L, 2L, 1L), (Tuple<long, long, long, long, long>)Tuple.Create(9L, 1L, 2L, 3L, 5L), (Tuple<long, long, long, long, long>)Tuple.Create(4L, 8L, 2L, 1L, 7L)})), (2L)).Equals((\"[(2,), (9,), (2,), (2,)]\")));\n    Debug.Assert(TrimTuple((new List<long>(new Tuple<long, long, long, long, long>[]{(Tuple<long, long, long, long, long>)Tuple.Create(5L, 3L, 2L, 1L, 4L), (Tuple<long, long, long, long, long>)Tuple.Create(3L, 4L, 9L, 2L, 1L), (Tuple<long, long, long, long, long>)Tuple.Create(9L, 1L, 2L, 3L, 5L), (Tuple<long, long, long, long, long>)Tuple.Create(4L, 8L, 2L, 1L, 7L)})), (1L)).Equals((\"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")));\n    Debug.Assert(TrimTuple((new List<long>(new Tuple<long, long, long, long>[]{(Tuple<long, long, long, long>)Tuple.Create(7L, 8L, 4L, 9L), (Tuple<long, long, long, long>)Tuple.Create(11L, 8L, 12L, 4L), (Tuple<long, long, long, long>)Tuple.Create(4L, 1L, 7L, 8L), (Tuple<long, long, long, long>)Tuple.Create(3L, 6L, 9L, 7L)})), (1L)).Equals((\"[(8, 4), (8, 12), (1, 7), (6, 9)]\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here.\n        return \"\";",
    "        var result = new List<long>();\n        foreach (var item in test_list) {\n            if (item > K) {\n                result.Add(item - K);\n            }\n        }\n        return string.Join(\" \", result);",
    "        List<long> result = new List<long>();\n        for (int i = 0; i < test_list.Count; i++) {\n            if (test_list[i] > K) {\n                result.Add(test_list[i] - K);\n            }\n        }\n        return string.Join(\" \", result);",
    "        // Write your code here.\n        long sum = 0;\n        for (int i = 0; i < test_list.Count; i++) {\n            sum += test_list[i];\n        }\n        long avg = sum / test_list.Count;\n        for (int i = 0; i < test_list.Count; i++) {\n            if (test_list[i] > avg) {\n                test_list[i] = test_list[i] - K;\n            }\n            else {\n                test_list[i] = test_list[i] + K;\n            }\n        }\n        return string.Join(\" \", test_list);",
    "        List<long> trimmed_list = new List<long>();\n        foreach (long num in test_list) {\n            trimmed_list.Add(num % K);\n        }\n        return String.Join(\",\", trimmed_list);",
    "        // Write your code here.\n        return \"\";",
    "        string result = \"\";\n        for (int i = 0; i < test_list.Count; i++) {\n            if (test_list[i] > K) {\n                result += (test_list[i] - K).ToString() + \" \";\n            }\n        }\n        return result;",
    "        string result = \"\";\n        for (int i = 0; i < test_list.Count; i++) {\n            result += (test_list[i] - K).ToString() + \" \";\n        }\n        return result;",
    "        // Write your code here.\n        var result = new List<long>();\n        foreach (var item in test_list) {\n            result.Add(item - K);\n        }\n        return string.Join(\" \", result);",
    "        var result = new List<long>();\n        foreach (var item in test_list) {\n            if (item > K) {\n                result.Add(item - K);\n            }\n        }\n        return String.Join(\" \", result);",
    "        // Write your code here\n        var result = new List<long>();\n        foreach (var item in test_list)\n        {\n            if (item < K)\n            {\n                result.Add(item);\n            }\n        }\n        return string.Join(\",\", result);",
    "        var result = new List<long>();\n        foreach (var item in test_list) {\n            result.Add(item - K);\n        }\n        return string.Join(\" \", result);",
    "        // Write your code here.\n        return \"\";",
    "        var result = new List<long>();\n        foreach (var item in test_list) {\n            if (item > K) {\n                result.Add(item - K);\n            }\n        }\n        return String.Join(\" \", result);",
    "        var trimmed_list = new List<long>();\n        for (int i = 0; i < test_list.Count; i++) {\n            trimmed_list.Add(test_list[i] - K);\n        }\n        return string.Join(\" \", trimmed_list);",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        List<long> result = new List<long>();\n        for (int i = 0; i < test_list.Count; i++) {\n            if (test_list[i] > K) {\n                result.Add(test_list[i] - K);\n            }\n        }\n        return String.Join(\" \", result);",
    "        // Write your code here.\n        return \"\";",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        var result = new List<long>();\n        foreach (var item in test_list)\n        {\n            if (item > K)\n            {\n                result.Add(item - K);\n            }\n            else\n            {\n                result.Add(0);\n            }\n        }\n        return string.Join(\" \", result);",
    "        var result = new List<long>();\n        foreach (var item in test_list) {\n            if (item > K) {\n                result.Add(item - K);\n            }\n        }\n        return string.Join(\",\", result);",
    "        // Write your code here.\n        var result = new List<long>();\n        foreach (var item in test_list) {\n            result.Add(item - K);\n        }\n        return string.Join(\",\", result);"
  ]
}