{
  "name": "mbpp_301_dict_depth",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the depth of a dictionary.\n    public static long DictDepth(object d) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_301_dict_depth.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DictDepth((new object()}}}}}})) == (4L));\n    Debug.Assert(DictDepth((new object(){{\"c\", \"python\"}}}})) == (2L));\n    Debug.Assert(DictDepth((new object(){{4L, \"Mon\"}}}}}})) == (3L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (d == null)\n            return 0;\n        if (d is Dictionary<object, object>) {\n            var dd = (Dictionary<object, object>)d;\n            return 1 + dd.Values.Select(DictDepth).Max();\n        }\n        return 0;",
    "        long depth = 0;\n        if (d is Dictionary<object, object>) {\n            depth = 1;\n            foreach (var kv in (Dictionary<object, object>)d) {\n                depth = Math.Max(depth, DictDepth(kv.Value) + 1);\n            }\n        }\n        return depth;",
    "        if (d is Dictionary<string, object>) {\n            var dict = (Dictionary<string, object>)d;\n            if (dict.Count == 0) {\n                return 1;\n            }\n            return 1 + dict.Values.Select(DictDepth).Max();\n        }\n        return 0;",
    "        if (d == null) return 0;\n        if (d is string) return 0;\n        if (d is long) return 0;\n        if (d is double) return 0;\n        if (d is bool) return 0;\n        if (d is List<object>) {\n            var l = (List<object>)d;\n            return 1 + l.Max(x => DictDepth(x));\n        }\n        if (d is Dictionary<string, object>) {\n            var dic = (Dictionary<string, object>)d;\n            return 1 + dic.Values.Max(x => DictDepth(x));\n        }\n        throw new Exception(\"Unknown type\");",
    "        if (d == null) {\n            return 0;\n        }\n        if (d is IDictionary<object, object>) {\n            var dict = d as IDictionary<object, object>;\n            if (dict.Count == 0) {\n                return 1;\n            }\n            return 1 + dict.Values.Select(DictDepth).Max();\n        }\n        return 0;",
    "        if (d is Dictionary<object, object>) {\n            var dict = d as Dictionary<object, object>;\n            long max = 0;\n            foreach (var kv in dict) {\n                long depth = DictDepth(kv.Value);\n                if (depth > max) {\n                    max = depth;\n                }\n            }\n            return max + 1;\n        } else {\n            return 0;\n        }",
    "        if (d == null) return 0;\n        if (d is string) return 1;\n        if (d is IDictionary<string, object>) {\n            var dict = d as IDictionary<string, object>;\n            return 1 + dict.Values.Max(DictDepth);\n        }\n        throw new Exception(\"Invalid dictionary\");",
    "        if (d is Dictionary<object, object>) {\n            var dict = (Dictionary<object, object>)d;\n            return 1 + dict.Values.Select(DictDepth).Max();\n        }\n        return 1;",
    "        if (d == null) return 0;\n        if (d is string) return 1;\n        if (d is IDictionary<string, object>) {\n            var dd = (IDictionary<string, object>)d;\n            return 1 + dd.Values.Max(DictDepth);\n        }\n        throw new Exception(\"Not a dictionary\");",
    "        if (d is Dictionary<object, object>) {\n            Dictionary<object, object> dict = (Dictionary<object, object>)d;\n            long maxDepth = 0;\n            foreach (object key in dict.Keys) {\n                long depth = DictDepth(dict[key]);\n                if (depth > maxDepth) {\n                    maxDepth = depth;\n                }\n            }\n            return maxDepth + 1;\n        }\n        return 0;",
    "        if (d is Dictionary<string, object>) {\n            var dd = d as Dictionary<string, object>;\n            return 1 + dd.Values.Max(x => DictDepth(x));\n        } else {\n            return 0;\n        }",
    "        return DictDepth(d, 0);",
    "        if (d == null) {\n            return 0;\n        }\n        if (d is Dictionary<string, object>) {\n            var dd = d as Dictionary<string, object>;\n            return 1 + dd.Values.Select(DictDepth).Max();\n        }\n        return 0;",
    "        if (d == null) {\n            return 0;\n        }\n        if (d is Dictionary<string, object>) {\n            Dictionary<string, object> dict = (Dictionary<string, object>)d;\n            long max = 0;\n            foreach (var kv in dict) {\n                max = Math.Max(max, DictDepth(kv.Value));\n            }\n            return max + 1;\n        }\n        return 0;",
    "        if (d is Dictionary<string, object>) {\n            return 1 + DictDepth(((Dictionary<string, object>)d).Values.Max());\n        }\n        return 0;",
    "        if (d is Dictionary<string, object>) {\n            var dd = (Dictionary<string, object>)d;\n            if (dd.Count == 0) {\n                return 1;\n            } else {\n                return 1 + dd.Values.Max(DictDepth);\n            }\n        } else {\n            return 0;\n        }",
    "        if (d == null) {\n            return 0;\n        }\n        if (d is string) {\n            return 0;\n        }\n        if (d is long) {\n            return 0;\n        }\n        if (d is double) {\n            return 0;\n        }\n        if (d is bool) {\n            return 0;\n        }\n        if (d is List<object>) {\n            return 1;\n        }\n        if (d is Dictionary<string, object>) {\n            Dictionary<string, object> dd = (Dictionary<string, object>)d;\n            long max = 0;\n            foreach (var kv in dd) {\n                max = Math.Max(max, DictDepth(kv.Value));\n            }\n            return max + 1;\n        }\n        throw new Exception(\"Unknown type\");",
    "        if (d == null) {\n            return 0;\n        }\n        if (d is Dictionary<string, object>) {\n            var dict = (Dictionary<string, object>)d;\n            if (dict.Count == 0) {\n                return 1;\n            }\n            return 1 + dict.Values.Select(DictDepth).Max();\n        }\n        return 0;",
    "        if (d is Dictionary<string, object>) {\n            var dict = (Dictionary<string, object>)d;\n            return 1 + dict.Values.Max(DictDepth);\n        }\n        return 1;",
    "        if (d is Dictionary<string, object>) {\n            var dict = (Dictionary<string, object>)d;\n            if (dict.Count == 0) {\n                return 1;\n            }\n            return 1 + dict.Values.Select(DictDepth).Max();\n        }\n        return 0;"
  ]
}