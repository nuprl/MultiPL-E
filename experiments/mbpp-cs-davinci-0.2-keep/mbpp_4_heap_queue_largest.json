{
  "name": "mbpp_4_heap_queue_largest",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    public static List<long> HeapQueueLargest(List<long> nums, long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(HeapQueueLargest((new List<long>(new long[]{(long)25L, (long)35L, (long)22L, (long)85L, (long)14L, (long)65L, (long)75L, (long)22L, (long)58L})), (3L)).Equals((new List<long>(new long[]{(long)85L, (long)75L, (long)65L}))));\n    Debug.Assert(HeapQueueLargest((new List<long>(new long[]{(long)25L, (long)35L, (long)22L, (long)85L, (long)14L, (long)65L, (long)75L, (long)22L, (long)58L})), (2L)).Equals((new List<long>(new long[]{(long)85L, (long)75L}))));\n    Debug.Assert(HeapQueueLargest((new List<long>(new long[]{(long)25L, (long)35L, (long)22L, (long)85L, (long)14L, (long)65L, (long)75L, (long)22L, (long)58L})), (5L)).Equals((new List<long>(new long[]{(long)85L, (long)75L, (long)65L, (long)58L, (long)35L}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new HeapQueue<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Dequeue());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Push(num);\n            if (heap.Count > n) {\n                heap.Pop();\n            }\n        }\n        var res = new List<long>();\n        while (heap.Count > 0) {\n            res.Add(heap.Pop());\n        }\n        res.Reverse();\n        return res;",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (var i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            if (heap.Count < n) {\n                heap.Add(num);\n            } else if (num > heap.Peek()) {\n                heap.Remove();\n                heap.Add(num);\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            if (heap.Count < n) {\n                heap.Add(num);\n            } else if (num > heap.Peek()) {\n                heap.Pop();\n                heap.Add(num);\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>(nums, (a, b) => a > b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a > b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Push(num);\n            if (heap.Count > n) {\n                heap.Pop();\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>(nums, (a, b) => a < b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new HeapQueue<long>(nums.Count);\n        foreach (var num in nums) {\n            if (heap.Count < n) {\n                heap.Add(num);\n            } else if (num > heap.Peek()) {\n                heap.Pop();\n                heap.Add(num);\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>(nums, (a, b) => a < b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n            if (heap.Count > n) {\n                heap.Remove();\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n            if (heap.Count > n) {\n                heap.Remove();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.Remove());\n        }\n        result.Reverse();\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Push(num);\n            if (heap.Count > n) {\n                heap.Pop();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.Pop());\n        }\n        result.Reverse();\n        return result;",
    "        var heap = new Heap<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Insert(num);\n        }\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n            if (heap.Count > n) {\n                heap.DeleteMin();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.DeleteMin());\n        }\n        result.Reverse();\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n            if (heap.Count > n) {\n                heap.Dequeue();\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n            if (heap.Count > n) {\n                heap.Dequeue();\n            }\n        }\n        return heap.ToList();",
    "        // Create a max heap\n        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Add(num);\n        }\n        // Pop the largest n elements\n        var result = new List<long>();\n        for (var i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        // Create a heap queue\n        var heap = new HeapQueue<long>();\n        // Add the first n numbers to the heap queue\n        for (int i = 0; i < n; i++) {\n            heap.Enqueue(nums[i]);\n        }\n        // Iterate through the rest of the numbers\n        for (int i = n; i < nums.Count; i++) {\n            // If the number is larger than the smallest number in the heap queue\n            if (nums[i] > heap.Peek()) {\n                // Remove the smallest number from the heap queue\n                heap.Dequeue();\n                // Add the number to the heap queue\n                heap.Enqueue(nums[i]);\n            }\n        }\n        // Return the heap queue in descending order\n        return heap.ToList();",
    "        var heap = new HeapQueue<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Dequeue());\n        }\n        return result;",
    "        // Create a heap queue\n        var heap = new HeapQueue<long>(nums);\n        // Create a list to store the n largest numbers\n        var largest = new List<long>();\n        // Loop n times\n        for (int i = 0; i < n; i++) {\n            // Add the largest number to the list\n            largest.Add(heap.Pop());\n        }\n        // Return the list\n        return largest;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Add(num);\n        }\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        // Create a heap queue with the first n numbers\n        var hq = new HeapQueue<long>();\n        for (int i = 0; i < n; i++) {\n            hq.Push(nums[i]);\n        }\n        // For each remaining number, if it is larger than the smallest number in the heap queue,\n        // replace the smallest number with it.\n        for (int i = (int)n; i < nums.Count; i++) {\n            if (nums[i] > hq.Peek()) {\n                hq.Pop();\n                hq.Push(nums[i]);\n            }\n        }\n        // Return the heap queue in descending order\n        return hq.ToList();",
    "        var heap = new HeapQueue<long>();\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n            if (heap.Count > n) {\n                heap.Dequeue();\n            }\n        }\n        return heap.ToList();",
    "        // Create a heap queue\n        var heap = new HeapQueue<long>(nums.Count);\n        // Add all the numbers to the heap queue\n        foreach (var num in nums) {\n            heap.Push(num);\n        }\n        // Pop the largest n numbers from the heap queue\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        // Return the result\n        return result;",
    "        var heap = new HeapQueue<long>();\n        foreach (var num in nums) {\n            heap.Push(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        // Create a heap queue, and add the first n elements.\n        var heap = new HeapQueue<long>(nums.Take((int)n).ToList());\n        // For each element in the list, if it's larger than the smallest element in the heap, replace it.\n        foreach (var num in nums.Skip((int)n)) {\n            if (num > heap.Peek()) {\n                heap.Pop();\n                heap.Push(num);\n            }\n        }\n        // Return the heap in descending order.\n        return heap.ToList();",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n            if (heap.Count > n) {\n                heap.ExtractMin();\n            }\n        }\n        return heap.ToList();",
    "        var heap = new HeapQueue<long>();\n        foreach (var num in nums) {\n            if (heap.Count < n) {\n                heap.Add(num);\n            } else if (num > heap.Peek()) {\n                heap.Remove();\n                heap.Add(num);\n            }\n        }\n        return heap.ToList();",
    "        var heap = new HeapQueue<long>(nums);\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Dequeue());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new HeapQueue<long>(nums);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new HeapQueue<long>(nums);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Insert(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.ExtractMax());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Insert(num);\n        }\n        var result = new List<long>();\n        for (var i = 0; i < n; i++) {\n            result.Add(heap.ExtractMax());\n        }\n        return result;",
    "        // Create a heap queue with the first n elements\n        var heap = new HeapQueue<long>(nums.Take((int)n));\n        // For each remaining element, if it is larger than the smallest element in the heap queue,\n        // remove the smallest element and add the new element to the heap queue.\n        foreach (var num in nums.Skip((int)n)) {\n            if (num > heap.Peek()) {\n                heap.Pop();\n                heap.Push(num);\n            }\n        }\n        // Return the heap queue in descending order.\n        return heap.ToList();",
    "        // create a min heap of size n\n        var heap = new MinHeap(n);\n        // add the first n elements to the heap\n        for (int i = 0; i < n; i++) {\n            heap.Add(nums[i]);\n        }\n        // for each element in the list\n        for (int i = n; i < nums.Count; i++) {\n            // if the element is larger than the smallest element in the heap\n            if (nums[i] > heap.Peek()) {\n                // remove the smallest element from the heap\n                heap.Remove();\n                // add the new element to the heap\n                heap.Add(nums[i]);\n            }\n        }\n        // return the heap as a list\n        return heap.ToList();",
    "        // Create a heap queue of size n\n        var heap = new HeapQueue<long>(n);\n        // Add each number to the heap queue\n        foreach (var num in nums) {\n            heap.Add(num);\n        }\n        // Return the heap queue in descending order\n        return heap.ToList();",
    "        // Create a heap queue with the first n elements\n        HeapQueue<long> heap = new HeapQueue<long>(nums.Take((int)n).ToList());\n        // For each element in the list, if it is larger than the smallest element in the heap, replace it\n        for (int i = (int)n; i < nums.Count; i++) {\n            if (nums[i] > heap.Peek()) {\n                heap.Pop();\n                heap.Push(nums[i]);\n            }\n        }\n        // Return the heap queue in descending order\n        return heap.ToList();",
    "        var heap = new Heap<long>(nums, (a, b) => a > b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a < b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a < b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new HeapQueue<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n        }\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Dequeue());\n        }\n        return result;",
    "        // Create a heap queue\n        var heap = new HeapQueue<long>();\n        // Add the first n elements\n        for (int i = 0; i < n; i++) {\n            heap.Enqueue(nums[i]);\n        }\n        // For each remaining element\n        for (int i = n; i < nums.Count; i++) {\n            // If it is larger than the smallest element in the heap\n            if (nums[i] > heap.Peek()) {\n                // Remove the smallest element\n                heap.Dequeue();\n                // Add the new element\n                heap.Enqueue(nums[i]);\n            }\n        }\n        // Return the heap in descending order\n        return heap.ToList();",
    "        var heap = new HeapQueue<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Insert(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Extract());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (x, y) => x < y);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Push(num);\n            if (heap.Count > n) {\n                heap.Pop();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.Pop());\n        }\n        result.Reverse();\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n            if (heap.Count > n) {\n                heap.ExtractMin();\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n        }\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.ExtractMax());\n        }\n        return result;",
    "        var hq = new HeapQueue<long>(nums.Count);\n        foreach (var num in nums) {\n            hq.Enqueue(num);\n        }\n        var res = new List<long>();\n        for (int i = 0; i < n; i++) {\n            res.Add(hq.Dequeue());\n        }\n        return res;",
    "        // Create a heap queue\n        var heap = new HeapQueue<long>();\n        // Add all the numbers to the heap queue\n        foreach (var num in nums) {\n            heap.Push(num);\n        }\n        // Pop the top n numbers from the heap queue\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        // Return the result\n        return result;",
    "        var heap = new Heap<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Insert(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a < b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Push(num);\n            if (heap.Count > n) {\n                heap.Pop();\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Push(num);\n            if (heap.Count > n) {\n                heap.Pop();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.Pop());\n        }\n        result.Reverse();\n        return result;",
    "        // Create a heap queue of size n\n        var heap = new HeapQueue<long>(n);\n        // Add each number to the heap queue\n        foreach (var num in nums) {\n            heap.Add(num);\n        }\n        // Return the heap queue as a list\n        return heap.ToList();",
    "        var heap = new Heap<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Push(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Push(num);\n            if (heap.Count > n) {\n                heap.Pop();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.Pop());\n        }\n        result.Reverse();\n        return result;",
    "        // Create a heap queue with the first n elements\n        HeapQueue<long> hq = new HeapQueue<long>(nums.Take((int)n).ToList());\n        // For each remaining element, if it is larger than the smallest element in the heap queue, replace it\n        for (int i = (int)n; i < nums.Count; i++) {\n            if (nums[i] > hq.Peek()) {\n                hq.Pop();\n                hq.Push(nums[i]);\n            }\n        }\n        // Return the heap queue in descending order\n        return hq.ToList();",
    "        var heap = new Heap<long>(nums, (x, y) => x > y);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n            if (heap.Count > n) {\n                heap.ExtractMin();\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n        }\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Dequeue());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a < b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a < b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Add(num);\n            if (heap.Count > n) {\n                heap.Remove();\n            }\n        }\n        return heap.ToList();",
    "        // Create a new heap queue\n        HeapQueue<long> hq = new HeapQueue<long>();\n        // Add the first n elements to the heap queue\n        for (int i = 0; i < n; i++) {\n            hq.Add(nums[i]);\n        }\n        // Iterate through the rest of the list\n        for (int i = n; i < nums.Count; i++) {\n            // If the current element is larger than the smallest element in the heap queue\n            if (nums[i] > hq.Peek()) {\n                // Remove the smallest element from the heap queue\n                hq.Remove();\n                // Add the current element to the heap queue\n                hq.Add(nums[i]);\n            }\n        }\n        // Return the heap queue in descending order\n        return hq.ToList();",
    "        var heap = new HeapQueue<long>();\n        foreach (long num in nums) {\n            heap.Push(num);\n        }\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a < b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Insert(num);\n        }\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Extract());\n        }\n        return result;",
    "        if (nums.Count < n) {\n            return null;\n        }\n        var heap = new HeapQueue<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Insert(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.DeleteMax());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a > b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Insert(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Dequeue());\n        }\n        return result;",
    "        var heap = new HeapQueue<long>(nums);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Dequeue());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Insert(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums.Count);\n        foreach (var num in nums) {\n            if (heap.Count < n) {\n                heap.Insert(num);\n            } else {\n                if (num > heap.Peek()) {\n                    heap.Pop();\n                    heap.Insert(num);\n                }\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n            if (heap.Count > n) {\n                heap.DeleteMin();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.DeleteMin());\n        }\n        result.Reverse();\n        return result;",
    "        var heap = new HeapQueue<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Insert(num);\n        }\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Remove());\n        }\n        return result;",
    "        // Create a min heap of size n\n        var heap = new Heap<long>(n, (a, b) => a < b);\n        // Add all numbers to the heap\n        foreach (var num in nums) {\n            // If the heap is full, only add the number if it is larger than the smallest number in the heap\n            if (heap.Count < n || num > heap.Peek()) {\n                heap.Add(num);\n            }\n        }\n        // Return the heap in descending order\n        return heap.ToList();",
    "        var heap = new Heap<long>(nums, (a, b) => a > b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap(nums);\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Dequeue());\n        }\n        return result;",
    "        // Create a heap queue (min-heap)\n        var heap = new HeapQueue<long>((x, y) => x < y);\n        // Add all numbers to the heap queue\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n        }\n        // Remove the smallest numbers until we have the n largest numbers\n        while (heap.Count > n) {\n            heap.Dequeue();\n        }\n        // Return the n largest numbers in descending order\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.Dequeue());\n        }\n        result.Reverse();\n        return result;",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a < b);\n        var result = new List<long>();\n        for (var i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a > b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Insert(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n            if (heap.Count > n) {\n                heap.Dequeue();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.Dequeue());\n        }\n        result.Reverse();\n        return result;",
    "        // Create a heap queue and add all the numbers to it.\n        var heap = new HeapQueue<long>(nums);\n        // Create a list to hold the n largest numbers.\n        var largest = new List<long>();\n        // While the heap queue is not empty and the list of largest numbers is not full,\n        // remove the largest number from the heap queue and add it to the list.\n        while (heap.Count > 0 && largest.Count < n) {\n            largest.Add(heap.Remove());\n        }\n        // Return the list of largest numbers.\n        return largest;",
    "        var heap = new Heap<long>(nums, (a, b) => a < b);\n        var result = new List<long>();\n        for (var i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>((x, y) => y.CompareTo(x));\n        foreach (var num in nums) {\n            heap.Push(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new HeapQueue<long>(nums, (a, b) => a < b);\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n            if (heap.Count > n) {\n                heap.Remove();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.Remove());\n        }\n        result.Reverse();\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a > b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>((a, b) => a > b);\n        foreach (var num in nums) {\n            heap.Push(num);\n            if (heap.Count > n) {\n                heap.Pop();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.Pop());\n        }\n        result.Reverse();\n        return result;",
    "        var heap = new HeapQueue<long>(nums);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Dequeue());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Push(num);\n        }\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        // Create a heap queue\n        var heap = new HeapQueue<long>(nums, (a, b) => a > b);\n        // Pop the n largest elements\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a > b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a > b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        // Create a heap queue\n        var heap = new HeapQueue<long>();\n        // Add the first n numbers to the heap\n        for (int i = 0; i < n; i++) {\n            heap.Add(nums[i]);\n        }\n        // For each remaining number, if it is larger than the smallest number in the heap, replace it\n        for (int i = n; i < nums.Count; i++) {\n            if (nums[i] > heap.Peek()) {\n                heap.Replace(nums[i]);\n            }\n        }\n        // Return the heap in descending order\n        return heap.GetDescending();",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n        }\n        var result = new List<long>();\n        for (var i = 0; i < n; i++) {\n            result.Add(heap.Extract());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        // Create a min heap with the first n elements.\n        var heap = new Heap<long>(nums.Take((int)n).ToList(), (a, b) => a < b);\n        // For each remaining element, if it is larger than the top of the heap, replace the top of the heap with it.\n        for (int i = (int)n; i < nums.Count; i++) {\n            if (nums[i] > heap.Peek()) {\n                heap.Replace(nums[i]);\n            }\n        }\n        // Return the heap in descending order.\n        return heap.ToList();",
    "        var heap = new Heap<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Insert(num);\n        }\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Remove());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Insert(num);\n        }\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        // Create a heap queue.\n        var heap = new HeapQueue<long>(nums);\n        // Pop the first n elements.\n        var result = new List<long>();\n        for (var i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a > b);\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new HeapQueue<long>(nums, (a, b) => a < b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a > b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a > b);\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Push(num);\n            if (heap.Count > n) {\n                heap.Pop();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.Pop());\n        }\n        result.Reverse();\n        return result;",
    "        var heap = new HeapQueue<long>(nums);\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.ExtractMax());\n        }\n        return result;",
    "        // Create a max heap\n        var heap = new Heap<long>(nums, (a, b) => a > b);\n        // Pop the largest n elements\n        var result = new List<long>();\n        for (var i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new HeapQueue<long>();\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n            if (heap.Count > n) {\n                heap.Dequeue();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.Dequeue());\n        }\n        result.Reverse();\n        return result;",
    "        // Create a heap queue\n        var heap = new HeapQueue<long>();\n        // Add the first n elements to the heap\n        for (int i = 0; i < n; i++) {\n            heap.Add(nums[i]);\n        }\n        // For each remaining element, if it is larger than the smallest element in the heap,\n        // remove the smallest element and add the new element\n        for (int i = n; i < nums.Count; i++) {\n            if (nums[i] > heap.Peek()) {\n                heap.Remove();\n                heap.Add(nums[i]);\n            }\n        }\n        // Return the heap as a list\n        return heap.ToList();",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n            if (heap.Count > n) {\n                heap.ExtractMin();\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>((x, y) => x > y);\n        foreach (var num in nums) {\n            heap.Add(num);\n            if (heap.Count > n) {\n                heap.Remove();\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>(nums, (x, y) => x > y);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Add(num);\n            if (heap.Count > n) {\n                heap.Pop();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.Pop());\n        }\n        result.Reverse();\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n            if (heap.Count > n) {\n                heap.Pop();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.Pop());\n        }\n        result.Reverse();\n        return result;",
    "        var heap = new HeapQueue<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Dequeue());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n            if (heap.Count > n) {\n                heap.DeleteMin();\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>(nums, (a, b) => a > b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a > b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (var i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n            if (heap.Count > n) {\n                heap.Remove();\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (var i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n            if (heap.Count > n) {\n                heap.ExtractMin();\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Insert(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        // Create a heap queue.\n        var heap = new HeapQueue<long>();\n        // Add all the numbers to the heap queue.\n        foreach (var num in nums) {\n            heap.Push(num);\n        }\n        // Pop the n largest numbers from the heap queue.\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        // Return the result.\n        return result;",
    "        // Create a min heap\n        var heap = new Heap<long>(nums, (a, b) => a < b);\n        // Remove the smallest n elements\n        for (long i = 0; i < n; i++) {\n            heap.Pop();\n        }\n        // Return the remaining elements in descending order\n        return heap.ToList();",
    "        var heap = new Heap<long>(nums, (x, y) => x < y);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a > b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.ExtractMax());\n        }\n        return result;",
    "        var heap = new HeapQueue<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Dequeue());\n        }\n        return result;",
    "        // Use a min-heap to store the n largest numbers.\n        // The heap will be initialized with the first n numbers.\n        // For each subsequent number, if it is larger than the smallest number in the heap,\n        // then remove the smallest number from the heap and add the new number.\n        // The heap will always contain the n largest numbers.\n        var heap = new Heap<long>(nums.Take((int)n).ToList(), (a, b) => a < b);\n        for (int i = (int)n; i < nums.Count; i++) {\n            if (nums[i] > heap.Peek()) {\n                heap.Remove();\n                heap.Add(nums[i]);\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Push(num);\n            if (heap.Count > n) {\n                heap.Pop();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.Pop());\n        }\n        result.Reverse();\n        return result;",
    "        // Create a heap queue with the given numbers\n        HeapQueue<long> hq = new HeapQueue<long>(nums);\n        // Create a list to hold the n largest numbers\n        List<long> largest = new List<long>();\n        // While the heap queue is not empty\n        while(!hq.IsEmpty()) {\n            // Add the largest number to the list\n            largest.Add(hq.Pop());\n        }\n        // Return the list in descending order\n        return largest.OrderByDescending(x => x).ToList();",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n            if (heap.Count > n) {\n                heap.DeleteMin();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.DeleteMin());\n        }\n        result.Reverse();\n        return result;",
    "        // TODO: Implement this function\n        return new List<long>();",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n        }\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Dequeue());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n            if (heap.Count > n) {\n                heap.Dequeue();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.Dequeue());\n        }\n        result.Reverse();\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a > b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Push(num);\n            if (heap.Count > n) {\n                heap.Pop();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.Pop());\n        }\n        result.Reverse();\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a > b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var hq = new HeapQueue<long>(nums.Count);\n        foreach (var num in nums) {\n            hq.Push(num);\n        }\n        var res = new List<long>();\n        for (int i = 0; i < n; i++) {\n            res.Add(hq.Pop());\n        }\n        return res;",
    "        var heap = new Heap<long>(nums, (a, b) => a > b);\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (x, y) => x < y);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n            if (heap.Count > n) {\n                heap.Dequeue();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.Dequeue());\n        }\n        result.Reverse();\n        return result;",
    "        var heap = new HeapQueue<long>(nums);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Push(num);\n            if (heap.Count > n) {\n                heap.Pop();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.Pop());\n        }\n        result.Reverse();\n        return result;",
    "        // Create a min heap of size n\n        var heap = new Heap<long>(n, (a, b) => a > b);\n        foreach (var num in nums) {\n            heap.Insert(num);\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap();\n        foreach (long num in nums) {\n            heap.Insert(num);\n        }\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.ExtractMax());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            if (heap.Count < n) {\n                heap.Add(num);\n            } else if (num > heap.Peek()) {\n                heap.Pop();\n                heap.Add(num);\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new HeapQueue<long>(nums);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Dequeue());\n        }\n        return result;",
    "        var heap = new HeapQueue<long>();\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n        }\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Dequeue());\n        }\n        return result;",
    "        var heap = new HeapQueue<long>(nums);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Dequeue());\n        }\n        return result;",
    "        var hq = new HeapQueue<long>(nums.Count);\n        foreach (var num in nums) {\n            hq.Enqueue(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(hq.Dequeue());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a > b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        // Create a heap queue with the first n elements\n        var hq = new HeapQueue<long>(nums.Take((int)n).ToList());\n        // Add the remaining elements to the heap queue\n        foreach (var num in nums.Skip((int)n)) {\n            hq.Add(num);\n        }\n        // Return the heap queue in descending order\n        return hq.ToList();",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Add(num);\n            if (heap.Count > n) {\n                heap.Remove();\n            }\n        }\n        return heap.ToList();",
    "        var heap = new HeapQueue<long>();\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n            if (heap.Count > n) {\n                heap.Dequeue();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.Dequeue());\n        }\n        result.Reverse();\n        return result;",
    "        if (nums.Count == 0 || n == 0) return new List<long>();\n        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n            if (heap.Count > n) heap.DeleteMin();\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.DeleteMin());\n        }\n        result.Reverse();\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a < b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        // Create a heap queue of size n\n        var heap = new HeapQueue<long>(n);\n        // Add each number to the heap queue\n        foreach (var num in nums) {\n            heap.Add(num);\n        }\n        // Return the heap queue in descending order\n        return heap.ToList();",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n            if (heap.Count > n) {\n                heap.Remove();\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var result = new List<long>();\n        var heap = new Heap(nums);\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new HeapQueue<long>();\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n            if (heap.Count > n) {\n                heap.Dequeue();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.Dequeue());\n        }\n        result.Reverse();\n        return result;",
    "        // Create a heap queue\n        var heap = new HeapQueue<long>(nums.Count);\n        // Add all numbers to the heap\n        foreach (var num in nums) {\n            heap.Push(num);\n        }\n        // Pop the largest n numbers\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        // Return the result\n        return result;",
    "        var heap = new HeapQueue<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Add(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Add(num);\n            if (heap.Count > n) {\n                heap.Remove();\n            }\n        }\n        return heap.ToList();",
    "        var heap = new HeapQueue<long>(nums);\n        var result = new List<long>();\n        for (var i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        // Create a heap queue with the numbers.\n        var heap = new HeapQueue<long>(nums);\n        // Pop the n largest numbers from the heap queue.\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        // Return the n largest numbers in descending order.\n        result.Reverse();\n        return result;",
    "        var heap = new Heap<long>(nums, true);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (x, y) => x < y);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n        }\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.ExtractMax());\n        }\n        return result;",
    "        // TODO: implement this function\n        return null;",
    "        var heap = new Heap<long>(nums, (a, b) => a < b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a < b);\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;"
  ]
}