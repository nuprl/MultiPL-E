{
  "name": "mbpp_4_heap_queue_largest",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    public static List<long> HeapQueueLargest(List<long> nums, long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(HeapQueueLargest((new List<long>(new long[]{(long)25L, (long)35L, (long)22L, (long)85L, (long)14L, (long)65L, (long)75L, (long)22L, (long)58L})), (3L)).Equals((new List<long>(new long[]{(long)85L, (long)75L, (long)65L}))));\n    Debug.Assert(HeapQueueLargest((new List<long>(new long[]{(long)25L, (long)35L, (long)22L, (long)85L, (long)14L, (long)65L, (long)75L, (long)22L, (long)58L})), (2L)).Equals((new List<long>(new long[]{(long)85L, (long)75L}))));\n    Debug.Assert(HeapQueueLargest((new List<long>(new long[]{(long)25L, (long)35L, (long)22L, (long)85L, (long)14L, (long)65L, (long)75L, (long)22L, (long)58L})), (5L)).Equals((new List<long>(new long[]{(long)85L, (long)75L, (long)65L, (long)58L, (long)35L}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new HeapQueue<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n        }\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Dequeue());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Push(num);\n            if (heap.Count > n) {\n                heap.Pop();\n            }\n        }\n        var res = new List<long>();\n        while (heap.Count > 0) {\n            res.Add(heap.Pop());\n        }\n        res.Reverse();\n        return res;",
    "        var heap = new Heap<long>(nums);\n        var result = new List<long>();\n        for (var i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            if (heap.Count < n) {\n                heap.Add(num);\n            } else if (num > heap.Peek()) {\n                heap.Remove();\n                heap.Add(num);\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            if (heap.Count < n) {\n                heap.Add(num);\n            } else if (num > heap.Peek()) {\n                heap.Pop();\n                heap.Add(num);\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>(nums, (a, b) => a > b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>(nums, (a, b) => a > b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Push(num);\n            if (heap.Count > n) {\n                heap.Pop();\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>(nums, (a, b) => a < b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new HeapQueue<long>(nums.Count);\n        foreach (var num in nums) {\n            if (heap.Count < n) {\n                heap.Add(num);\n            } else if (num > heap.Peek()) {\n                heap.Pop();\n                heap.Add(num);\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>(nums, (a, b) => a < b);\n        var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n            if (heap.Count > n) {\n                heap.Remove();\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n            if (heap.Count > n) {\n                heap.Remove();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.Remove());\n        }\n        result.Reverse();\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Push(num);\n            if (heap.Count > n) {\n                heap.Pop();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.Pop());\n        }\n        result.Reverse();\n        return result;",
    "        var heap = new Heap<long>(nums.Count);\n        foreach (var num in nums) {\n            heap.Insert(num);\n        }\n        var result = new List<long>();\n        for (long i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Insert(num);\n            if (heap.Count > n) {\n                heap.DeleteMin();\n            }\n        }\n        var result = new List<long>();\n        while (heap.Count > 0) {\n            result.Add(heap.DeleteMin());\n        }\n        result.Reverse();\n        return result;",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n            if (heap.Count > n) {\n                heap.Dequeue();\n            }\n        }\n        return heap.ToList();",
    "        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Enqueue(num);\n            if (heap.Count > n) {\n                heap.Dequeue();\n            }\n        }\n        return heap.ToList();",
    "        // Create a max heap\n        var heap = new Heap<long>();\n        foreach (var num in nums) {\n            heap.Add(num);\n        }\n        // Pop the largest n elements\n        var result = new List<long>();\n        for (var i = 0; i < n; i++) {\n            result.Add(heap.Pop());\n        }\n        return result;"
  ]
}