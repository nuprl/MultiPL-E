{
  "name": "mbpp_752_jacobsthal_num",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);",
    "        long a = 0, b = 1;\n        for (long i = 0; i < n; i++) {\n            long c = a + 2 * b;\n            a = b;\n            b = c;\n        }\n        return a;",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);",
    "        long a = 0, b = 1, c = 0;\n        if (n == 0) return a;\n        if (n == 1) return b;\n        for (int i = 2; i <= n; i++) {\n            c = a + 2 * b;\n            a = b;\n            b = c;\n        }\n        return b;",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);",
    "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return JacobsthalNum(n - 1) + 2 * JacobsthalNum(n - 2);"
  ]
}