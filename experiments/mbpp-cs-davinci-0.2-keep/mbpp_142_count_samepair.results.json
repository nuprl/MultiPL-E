{
  "name": "mbpp_142_count_samepair",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_142_count_samepair.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        var count = 0;\n        for (var i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list1[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list1[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        var count = 0;\n        for (var i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        var count = 0;\n        for (var i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        var count = 0;\n        for (var i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        int count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list1[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        int count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        var count = 0;\n        for (var i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        var count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        // Write your code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        var count = 0;\n        for (var i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        var count = 0;\n        for (var i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        // Your code goes here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4a7637cefb804a27a348fdf29f5182ca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <4a7637cefb804a27a348fdf29f5182ca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list2[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n",
      "timestamp": 1665517473,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}