{
  "name": "mbpp_12_sort_matrix",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    public static List<List<long>> SortMatrix(List<List<long>> M) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortMatrix((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L, (long)5L})}))));\n    Debug.Assert(SortMatrix((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)-2L, (long)4L, (long)-5L}), (List<long>)new List<long>(new long[]{(long)1L, (long)-1L, (long)1L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)-2L, (long)4L, (long)-5L}), (List<long>)new List<long>(new long[]{(long)1L, (long)-1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})}))));\n    Debug.Assert(SortMatrix((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L, (long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)6L, (long)4L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)1L, (long)4L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)1L, (long)4L}), (List<long>)new List<long>(new long[]{(long)6L, (long)4L, (long)3L}), (List<long>)new List<long>(new long[]{(long)5L, (long)8L, (long)9L})}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var rows = M.Count;\n        var cols = M[0].Count;\n        var sums = new long[rows];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                sums[i] += M[i][j];\n            }\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < rows; i++) {\n            var min = sums.Min();\n            var index = sums.ToList().IndexOf(min);\n            sorted.Add(M[index]);\n            sums[index] = long.MaxValue;\n        }\n        return sorted;",
    "        // Write your code here\n        return M;",
    "        // Write your code here\n        return M;",
    "        return M.OrderBy(x => x.Sum()).ToList();",
    "        // sort by row sum\n        M.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        // Sort the rows by their sum.\n        M.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        // Sort the rows in ascending order according to the sum of their elements.\n        M.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        var sums = new List<long>();\n        foreach (var row in M) {\n            sums.Add(row.Sum());\n        }\n        var sorted = sums.Select((x, i) => new KeyValuePair<long, int>(x, i))\n            .OrderBy(x => x.Key)\n            .Select(x => x.Value)\n            .ToList();\n        var res = new List<List<long>>();\n        foreach (var i in sorted) {\n            res.Add(M[i]);\n        }\n        return res;",
    "        // Sort the rows of the matrix by their sum.\n        M.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var min = sums.Min();\n            var index = sums.IndexOf(min);\n            sorted.Add(M[index]);\n            sums.RemoveAt(index);\n            M.RemoveAt(index);\n        }\n        return sorted;",
    "        var rows = M.Count;\n        var cols = M[0].Count;\n        var sums = new long[rows];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                sums[i] += M[i][j];\n            }\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < rows; i++) {\n            var min = sums.Min();\n            var minIndex = sums.ToList().IndexOf(min);\n            sorted.Add(M[minIndex]);\n            sums[minIndex] = long.MaxValue;\n        }\n        return sorted;",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var min = sums.Min();\n            var index = sums.IndexOf(min);\n            sorted.Add(M[index]);\n            sums.RemoveAt(index);\n            M.RemoveAt(index);\n        }\n        return sorted;",
    "        // Sort the rows by their sum\n        M.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        // Write your code here\n        return M;",
    "        // Write your code here\n        return M;",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var min = sums.Min();\n            var index = sums.IndexOf(min);\n            sorted.Add(M[index]);\n            sums.RemoveAt(index);\n            M.RemoveAt(index);\n        }\n        return sorted;",
    "        var sorted = M.Select((row, i) => new { row, i }).OrderBy(x => x.row.Sum()).ToList();\n        var result = new List<List<long>>();\n        foreach (var item in sorted) {\n            result.Add(M[item.i]);\n        }\n        return result;",
    "        List<List<long>> sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            sorted.Add(M[i]);\n        }\n        sorted.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return sorted;",
    "        // Write your code here\n        return M;",
    "        // Sort the rows of M by the sum of their elements.\n        // The rows of M are sorted in ascending order.\n        // The elements of each row are sorted in ascending order.\n        // The elements of M are all non-negative.\n        // The number of rows of M is not greater than 100.\n        // The number of columns of M is not greater than 100.\n        // The sum of the elements of each row of M is not greater than 10^9.\n        // The elements of M are all integers.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct",
    "        var sums = new List<long>();\n        foreach (var row in M) {\n            sums.Add(row.Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var min = sums.Min();\n            var index = sums.IndexOf(min);\n            sorted.Add(M[index]);\n            sums.RemoveAt(index);\n            M.RemoveAt(index);\n        }\n        return sorted;",
    "        // Sort the rows of the matrix according to the sum of the elements in each row.\n        // The sort should be stable, so if two rows have the same sum, the original order should be preserved.\n        // The matrix is given as a list of lists, where each list represents a row of the matrix.\n        // The matrix is guaranteed to be non-empty.\n        // The matrix is guaranteed to have at least one row.\n        // The matrix is guaranteed to have at least one column.\n        // The matrix is guaranteed to have at least one element.\n        // The matrix is guaranteed to have at most 100 rows.\n        // The matrix is guaranteed to have at most 100 columns.\n        // The matrix is guaranteed to have at most 100 elements.\n        // The matrix is guaranteed to have elements of type long.\n        // The matrix is guaranteed to have elements in the range [-1000, 1000].\n        // The matrix is guaranteed to have at least one element in the range [-1000, 1000].\n        // The matrix is guaranteed to have at least one element in the range [-1000, 1000].\n        // The matrix is guaranteed to have at least one element in the range [-1000, 1000].\n        // The matrix is guaranteed to have at least one element in the range [-1000, 1000].\n        // The matrix is guaranteed to have at least one element in the range [-1000, 1000].\n        // The matrix is guaranteed to have at least one element in the range [-1000, 1000].\n        // The matrix is guaranteed to have at least one element in the range [-1000, 1000].\n        // The matrix is guaranteed to have at least one element in the range [-1000, 1000].\n        // The matrix is guaranteed to have at least one element in the range [-1000, 1000].\n        // The matrix is guaranteed to have at least one element in the range [-1000, 1000].\n        // The matrix is guaranteed to have at least one element in the range [-1000, 1000].\n        // The matrix is guaranteed to have at least one element in the range [-1000, 1000].\n        // The matrix is guaranteed to have at least one element in the range [-1000, 1000].\n        // The matrix is guaranteed to have at least one element in the range [-1000, 1000].\n        // The matrix is guaranteed to have at least one element in the range [-1000, 1000].",
    "        // Write your code here\n        return M;",
    "        var sorted = M.OrderBy(x => x.Sum()).ToList();\n        return sorted;",
    "        // Sort the rows by the sum of the row.\n        M.Sort((a, b) => a.Sum().CompareTo(b.Sum()));\n        return M;",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var min = sums.Min();\n            var index = sums.IndexOf(min);\n            sorted.Add(M[index]);\n            sums.RemoveAt(index);\n            M.RemoveAt(index);\n        }\n        return sorted;",
    "        // Sort the rows by the sum of their elements\n        M.Sort((a, b) => a.Sum().CompareTo(b.Sum()));\n        return M;",
    "        // Write your code here\n        return null;",
    "        // Sort the rows of the matrix by the sum of their elements.\n        M.Sort((a, b) => a.Sum().CompareTo(b.Sum()));\n        return M;",
    "        // Write your code here\n        return M;",
    "        // Write your code here\n        return M;",
    "        // Write your code here\n        return M;",
    "        // Sort the rows of the matrix by their sum.\n        M.Sort((a, b) => (int)(a.Sum() - b.Sum()));\n        return M;",
    "        // Sort the rows of the matrix by their sum.\n        M.Sort((a, b) => a.Sum().CompareTo(b.Sum()));\n        return M;",
    "        // Write your code here\n        return M;",
    "        var sorted = M.Select((row, i) => new { row, i }).OrderBy(x => x.row.Sum()).ToList();\n        var result = new List<List<long>>();\n        foreach (var item in sorted) {\n            result.Add(M[item.i]);\n        }\n        return result;",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var min = sums.Min();\n            var index = sums.IndexOf(min);\n            sorted.Add(M[index]);\n            sums.RemoveAt(index);\n            M.RemoveAt(index);\n        }\n        return sorted;",
    "        var N = M.Count;\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < N; i++) {\n            sorted.Add(M[i]);\n        }\n        sorted.Sort((a, b) => {\n            var sumA = a.Sum();\n            var sumB = b.Sum();\n            if (sumA == sumB) {\n                return 0;\n            }\n            if (sumA < sumB) {\n                return -1;\n            }\n            return 1;\n        });\n        return sorted;",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = M.OrderBy(x => x.Sum()).ToList();\n        return sorted;",
    "        var result = new List<List<long>>();\n        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            long sum = 0;\n            for (int j = 0; j < M[i].Count; j++) {\n                sum += M[i][j];\n            }\n            sums.Add(sum);\n        }\n        var sorted = sums.Select((x, i) => new KeyValuePair<long, int>(x, i))\n            .OrderBy(x => x.Key)\n            .ToList();\n        for (int i = 0; i < sorted.Count; i++) {\n            result.Add(M[sorted[i].Value]);\n        }\n        return result;",
    "        // Write your code here\n        return M;",
    "        // Write your code here\n        return M;",
    "        // Sort the rows of the matrix by the sum of the elements in the row.\n        // The rows are sorted in ascending order.\n        M.Sort((x, y) => x.Sum().CompareTo(y.Sum()));\n        return M;",
    "        // Write your code here\n        return null;",
    "        // O(n^2)\n        List<List<long>> sorted = new List<List<long>>();\n        foreach (List<long> row in M) {\n            sorted.Add(row);\n        }\n        sorted.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return sorted;",
    "        // Sort the rows of the matrix by their sum.\n        M.Sort((a, b) => a.Sum().CompareTo(b.Sum()));\n        return M;",
    "        // Sort the rows of the matrix by the sum of the elements in each row.\n        // The matrix is sorted in ascending order.\n        M.Sort((a, b) => {\n            long sumA = 0, sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        // Write your code here\n        return M.OrderBy(x => x.Sum()).ToList();",
    "        // Your code here\n        return M;",
    "        // TODO: Implement this function\n        return M;",
    "        // Sort the rows of the matrix by their sum\n        M.Sort((a, b) => a.Sum().CompareTo(b.Sum()));\n        return M;",
    "        // Write your code here\n        return M;",
    "        // Sort the rows by their sum\n        M.Sort((a, b) => a.Sum().CompareTo(b.Sum()));\n        return M;",
    "        var rows = M.Select((row, i) => new { row, i }).OrderBy(x => x.row.Sum()).ToList();\n        var result = new List<List<long>>();\n        foreach (var row in rows) {\n            result.Add(M[row.i]);\n        }\n        return result;",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var min = sums.Min();\n            var index = sums.IndexOf(min);\n            sorted.Add(M[index]);\n            sums.RemoveAt(index);\n            M.RemoveAt(index);\n        }\n        return sorted;",
    "        // Sort the rows by the sum of their elements.\n        M.Sort((a, b) => a.Sum().CompareTo(b.Sum()));\n        return M;",
    "        // Write your code here\n        return M;",
    "        return M.OrderBy(x => x.Sum()).ToList();",
    "        // Sort the rows of the matrix according to the sum of the elements in each row.\n        // The rows are sorted in ascending order.\n        M.Sort((a, b) => {\n            long sumA = 0, sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        List<List<long>> sorted = new List<List<long>>();\n        List<long> sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        for (int i = 0; i < M.Count; i++) {\n            int min = i;\n            for (int j = i; j < M.Count; j++) {\n                if (sums[j] < sums[min]) {\n                    min = j;\n                }\n            }\n            if (min != i) {\n                long temp = sums[min];\n                sums[min] = sums[i];\n                sums[i] = temp;\n                List<long> tempList = M[min];\n                M[min] = M[i];\n                M[i] = tempList;\n            }\n        }\n        return M;",
    "        // Write your code here\n        return M;",
    "        // Write your code here\n        return M;",
    "        // Sort the rows by their sum\n        M.Sort((a, b) => a.Sum().CompareTo(b.Sum()));\n        return M;",
    "        // Write your code here\n        return M;",
    "        // Sort the rows of M in ascending order according to the sum of their elements.\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the i-th row is M[i].Sum().\n        // The sum of the elements of the",
    "        // Sort the rows by the sum of their elements\n        M.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        // Sort the rows by their sum\n        M.Sort((a, b) => a.Sum().CompareTo(b.Sum()));\n        return M;",
    "        return M.OrderBy(x => x.Sum()).ToList();",
    "        // Write your code here\n        return M;",
    "        // We can use the built-in sort function for lists.\n        // We need to provide a custom comparer.\n        // We can use the built-in comparer for tuples.\n        // We need to provide a custom selector.\n        // We can use the built-in selector for lists.\n        // We need to provide a custom selector.\n        // We can use the built-in selector for lists.\n        // We need to provide a custom selector.\n        // We can use the built-in selector for lists.\n        // We need to provide a custom selector.\n        // We can use the built-in selector for lists.\n        // We need to provide a custom selector.\n        // We can use the built-in selector for lists.\n        // We need to provide a custom selector.\n        // We can use the built-in selector for lists.\n        // We need to provide a custom selector.\n        // We can use the built-in selector for lists.\n        // We need to provide a custom selector.\n        // We can use the built-in selector for lists.\n        // We need to provide a custom selector.\n        // We can use the built-in selector for lists.\n        // We need to provide a custom selector.\n        // We can use the built-in selector for lists.\n        // We need to provide a custom selector.\n        // We can use the built-in selector for lists.\n        // We need to provide a custom selector.\n        // We can use the built-in selector for lists.\n        // We need to provide a custom selector.\n        // We can use the built-in selector for lists.\n        // We need to provide a custom selector.\n        // We can use the built-in selector for lists.\n        // We need to provide a custom selector.\n        // We can use the built-in selector for lists.\n        // We need to provide a custom selector.\n        // We can use the built-in selector for lists.\n        // We need to provide a custom selector.\n        // We can use the built-in selector for lists.\n        // We need to provide a custom selector.\n        // We can use the built-in selector for lists.\n        // We need to provide a custom selector.\n        // We can use the built",
    "        // sort rows by sum\n        M.Sort((a, b) => {\n            long sumA = a.Sum();\n            long sumB = b.Sum();\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        var result = new List<List<long>>();\n        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = sums.OrderBy(x => x).ToList();\n        for (int i = 0; i < sorted.Count; i++) {\n            for (int j = 0; j < sums.Count; j++) {\n                if (sorted[i] == sums[j]) {\n                    result.Add(M[j]);\n                    sums[j] = -1;\n                    break;\n                }\n            }\n        }\n        return result;",
    "        // Write your code here\n        return M;",
    "        var N = M.Count;\n        var M2 = new List<List<long>>();\n        for (int i = 0; i < N; i++) {\n            var row = new List<long>();\n            for (int j = 0; j < N; j++) {\n                row.Add(M[i][j]);\n            }\n            M2.Add(row);\n        }\n        M2.Sort((a, b) => {\n            var sumA = a.Sum();\n            var sumB = b.Sum();\n            if (sumA == sumB) {\n                return 0;\n            }\n            return sumA < sumB ? -1 : 1;\n        });\n        return M2;",
    "        return M.OrderBy(x => x.Sum()).ToList();",
    "        // Write your code here\n        List<List<long>> result = new List<List<long>>();\n        List<long> sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        for (int i = 0; i < M.Count; i++) {\n            int min = i;\n            for (int j = i + 1; j < M.Count; j++) {\n                if (sums[j] < sums[min]) {\n                    min = j;\n                }\n            }\n            if (min != i) {\n                long temp = sums[i];\n                sums[i] = sums[min];\n                sums[min] = temp;\n                List<long> tempList = M[i];\n                M[i] = M[min];\n                M[min] = tempList;\n            }\n        }\n        return M;",
    "        // Sort the rows of the matrix by their sum.\n        M.Sort((a, b) => {\n            long sumA = 0, sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        // Write your code here\n        var sorted = M.OrderBy(x => x.Sum()).ToList();\n        return sorted;",
    "        var sorted = M.Select((row, i) => new { row, i }).OrderBy(x => x.row.Sum()).Select(x => x.i).ToList();\n        var result = new List<List<long>>();\n        foreach (var i in sorted) {\n            result.Add(M[i]);\n        }\n        return result;",
    "        var rows = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var row = M[i];\n            var sum = row.Sum();\n            rows.Add(new List<long> { sum, i });\n        }\n        rows.Sort();\n        var result = new List<List<long>>();\n        for (int i = 0; i < rows.Count; i++) {\n            var row = M[rows[i][1]];\n            result.Add(row);\n        }\n        return result;",
    "        var sorted = M.OrderBy(x => x.Sum()).ToList();\n        return sorted;",
    "        // Sort the rows of M by their sum.\n        M.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            foreach (long x in a) {\n                sumA += x;\n            }\n            foreach (long x in b) {\n                sumB += x;\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        // Write your code here\n        return M.OrderBy(x => x.Sum()).ToList();",
    "        // Write your code here\n        return M;",
    "        return M.OrderBy(x => x.Sum()).ToList();",
    "        return M.OrderBy(x => x.Sum()).ToList();",
    "        int n = M.Count;\n        int m = M[0].Count;\n        List<List<long>> res = new List<List<long>>();\n        for (int i = 0; i < n; i++) {\n            List<long> row = new List<long>();\n            for (int j = 0; j < m; j++) {\n                row.Add(M[i][j]);\n            }\n            res.Add(row);\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (res[i].Sum() > res[j].Sum()) {\n                    List<long> temp = res[i];\n                    res[i] = res[j];\n                    res[j] = temp;\n                }\n            }\n        }\n        return res;",
    "        var sorted = M.Select((row, i) => new { row, i }).OrderBy(x => x.row.Sum()).ToList();\n        return sorted.Select(x => M[x.i]).ToList();",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var min = sums.Min();\n            var index = sums.IndexOf(min);\n            sorted.Add(M[index]);\n            sums.RemoveAt(index);\n            M.RemoveAt(index);\n        }\n        return sorted;",
    "        // Write your code here\n        return M;",
    "        var sums = new List<long>();\n        foreach (var row in M) {\n            sums.Add(row.Sum());\n        }\n        var sorted = M.OrderBy(x => sums[M.IndexOf(x)]).ToList();\n        return sorted;",
    "        // Sort the rows of the matrix according to the sum of the elements in each row.\n        M.Sort((a, b) => a.Sum().CompareTo(b.Sum()));\n        return M;",
    "        var rowSums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            rowSums.Add(M[i].Sum());\n        }\n        return M.OrderBy(row => rowSums[M.IndexOf(row)]).ToList();",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var min = sums.Min();\n            var idx = sums.IndexOf(min);\n            sorted.Add(M[idx]);\n            sums.RemoveAt(idx);\n            M.RemoveAt(idx);\n        }\n        return sorted;",
    "        // Sort the rows of the matrix by the sum of their elements.\n        M.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        return M;",
    "        var rows = M.Count;\n        var cols = M[0].Count;\n        var sums = new long[rows];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                sums[i] += M[i][j];\n            }\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < rows; i++) {\n            var min = sums.Min();\n            var index = sums.ToList().IndexOf(min);\n            sorted.Add(M[index]);\n            sums[index] = long.MaxValue;\n        }\n        return sorted;",
    "        // Write your code here\n        return M;",
    "        var N = M.Count;\n        var result = new List<List<long>>();\n        for (int i = 0; i < N; i++) {\n            result.Add(new List<long>());\n        }\n        var sums = new List<long>();\n        for (int i = 0; i < N; i++) {\n            var sum = 0L;\n            for (int j = 0; j < N; j++) {\n                sum += M[i][j];\n            }\n            sums.Add(sum);\n        }\n        var sorted = sums.Select((x, i) => new { Value = x, Index = i }).OrderBy(x => x.Value).ToList();\n        for (int i = 0; i < N; i++) {\n            result[i] = M[sorted[i].Index];\n        }\n        return result;",
    "        var sums = new List<Tuple<long, int>>();\n        for (int i = 0; i < M.Count; i++) {\n            var sum = 0L;\n            for (int j = 0; j < M[i].Count; j++) {\n                sum += M[i][j];\n            }\n            sums.Add(new Tuple<long, int>(sum, i));\n        }\n        sums.Sort((a, b) => a.Item1.CompareTo(b.Item1));\n        var result = new List<List<long>>();\n        for (int i = 0; i < sums.Count; i++) {\n            result.Add(M[sums[i].Item2]);\n        }\n        return result;",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        List<List<long>> result = new List<List<long>>();\n        List<long> sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            long sum = 0;\n            for (int j = 0; j < M[i].Count; j++) {\n                sum += M[i][j];\n            }\n            sums.Add(sum);\n        }\n        for (int i = 0; i < M.Count; i++) {\n            int min = i;\n            for (int j = i + 1; j < M.Count; j++) {\n                if (sums[j] < sums[min]) {\n                    min = j;\n                }\n            }\n            long temp = sums[i];\n            sums[i] = sums[min];\n            sums[min] = temp;\n            List<long> tempList = M[i];\n            M[i] = M[min];\n            M[min] = tempList;\n        }\n        return M;",
    "        var rowSums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            rowSums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var min = rowSums.Min();\n            var minIndex = rowSums.IndexOf(min);\n            sorted.Add(M[minIndex]);\n            rowSums[minIndex] = long.MaxValue;\n        }\n        return sorted;",
    "        // Sort the rows by their sum\n        M.Sort((a, b) => a.Sum().CompareTo(b.Sum()));\n        return M;",
    "        // Write your code here\n        return new List<List<long>>();",
    "        var N = M.Count;\n        var M2 = new List<List<long>>();\n        for (int i = 0; i < N; i++) {\n            M2.Add(new List<long>());\n            for (int j = 0; j < N; j++) {\n                M2[i].Add(M[i][j]);\n            }\n        }\n        var sums = new List<long>();\n        for (int i = 0; i < N; i++) {\n            sums.Add(M[i].Sum());\n        }\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if (sums[i] > sums[j]) {\n                    var tmp = sums[i];\n                    sums[i] = sums[j];\n                    sums[j] = tmp;\n                    for (int k = 0; k < N; k++) {\n                        var tmp2 = M2[i][k];\n                        M2[i][k] = M2[j][k];\n                        M2[j][k] = tmp2;\n                    }\n                }\n            }\n        }\n        return M2;",
    "        // Write your code here.\n        List<List<long>> sortedMatrix = new List<List<long>>();\n        List<long> sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            long sum = 0;\n            for (int j = 0; j < M[i].Count; j++) {\n                sum += M[i][j];\n            }\n            sums.Add(sum);\n        }\n        List<long> sortedSums = sums.OrderBy(x => x).ToList();\n        for (int i = 0; i < sortedSums.Count; i++) {\n            int index = sums.IndexOf(sortedSums[i]);\n            sortedMatrix.Add(M[index]);\n        }\n        return sortedMatrix;",
    "        // Sort the rows by their sum.\n        M.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        List<List<long>> sorted = new List<List<long>>();\n        List<long> sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        for (int i = 0; i < M.Count; i++) {\n            int min = sums.IndexOf(sums.Min());\n            sorted.Add(M[min]);\n            sums.RemoveAt(min);\n            M.RemoveAt(min);\n        }\n        return sorted;",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var min = sums.Min();\n            var index = sums.IndexOf(min);\n            sorted.Add(M[index]);\n            sums.RemoveAt(index);\n            M.RemoveAt(index);\n        }\n        return sorted;",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var min = sums.Min();\n            var index = sums.IndexOf(min);\n            sorted.Add(M[index]);\n            sums.RemoveAt(index);\n            M.RemoveAt(index);\n        }\n        return sorted;",
    "        // Sort the rows of the matrix by the sum of their elements.\n        M.Sort((a, b) => {\n            long sumA = 0, sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        // We can use the built-in sort function to sort the rows of the matrix.\n        // The only thing we need to do is to define a custom comparer.\n        // The comparer will compare the sum of the rows.\n        // We can use the built-in sum function to compute the sum of a row.\n        // The sum function takes a list and returns the sum of its elements.\n        // The sort function takes a list and a comparer.\n        // The comparer takes two lists and returns -1 if the first list is smaller than the second,\n        // 0 if they are equal and 1 if the first list is greater than the second.\n        // The sort function returns a sorted list.\n        return M.Sort(delegate(List<long> a, List<long> b) {\n            if (a.Sum() < b.Sum()) return -1;\n            if (a.Sum() > b.Sum()) return 1;\n            return 0;\n        });",
    "        var N = M.Count;\n        var M1 = new List<List<long>>();\n        for (int i = 0; i < N; i++) {\n            var row = new List<long>();\n            for (int j = 0; j < N; j++) {\n                row.Add(M[i][j]);\n            }\n            M1.Add(row);\n        }\n        var sums = new List<long>();\n        for (int i = 0; i < N; i++) {\n            var sum = 0L;\n            for (int j = 0; j < N; j++) {\n                sum += M[i][j];\n            }\n            sums.Add(sum);\n        }\n        var sorted = new List<long>();\n        for (int i = 0; i < N; i++) {\n            var min = long.MaxValue;\n            var minIndex = -1;\n            for (int j = 0; j < N; j++) {\n                if (sums[j] < min) {\n                    min = sums[j];\n                    minIndex = j;\n                }\n            }\n            sums[minIndex] = long.MaxValue;\n            sorted.Add(min);\n        }\n        var M2 = new List<List<long>>();\n        for (int i = 0; i < N; i++) {\n            var row = new List<long>();\n            for (int j = 0; j < N; j++) {\n                row.Add(M1[sorted.IndexOf(sums[i])][j]);\n            }\n            M2.Add(row);\n        }\n        return M2;",
    "        // Sort the rows by their sum\n        M.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        // Sort the rows by their sum\n        M.Sort((a, b) => a.Sum().CompareTo(b.Sum()));\n        return M;",
    "        // Write your code here\n        var sorted = M.Select((r, i) => new { Row = r, Index = i })\n                      .OrderBy(x => x.Row.Sum())\n                      .Select(x => x.Row)\n                      .ToList();\n        return sorted;",
    "        // Sort the rows of the matrix by the sum of the elements in each row.\n        M.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        List<List<long>> sorted = new List<List<long>>();\n        List<long> sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        for (int i = 0; i < M.Count; i++) {\n            long min = sums.Min();\n            int index = sums.IndexOf(min);\n            sorted.Add(M[index]);\n            sums.RemoveAt(index);\n            M.RemoveAt(index);\n        }\n        return sorted;",
    "        // Write your code here\n        return M;",
    "        // Write your code here\n        return M;",
    "        // Write your code here\n        return M;",
    "        // Write your code here\n        List<List<long>> result = new List<List<long>>();\n        List<long> sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        for (int i = 0; i < M.Count; i++) {\n            int min = i;\n            for (int j = i + 1; j < M.Count; j++) {\n                if (sums[j] < sums[min]) {\n                    min = j;\n                }\n            }\n            if (min != i) {\n                long temp = sums[i];\n                sums[i] = sums[min];\n                sums[min] = temp;\n                List<long> tempList = M[i];\n                M[i] = M[min];\n                M[min] = tempList;\n            }\n        }\n        return M;",
    "        var sorted = M.Select((row, i) => new { row, i }).OrderBy(x => x.row.Sum()).ToList();\n        var result = new List<List<long>>();\n        foreach (var item in sorted) {\n            result.Add(M[item.i]);\n        }\n        return result;",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            int min = sums.IndexOf(sums.Min());\n            sorted.Add(M[min]);\n            sums.RemoveAt(min);\n            M.RemoveAt(min);\n        }\n        return sorted;",
    "        // Write your code here\n        return M;",
    "        // Sort the rows by their sum.\n        M.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        List<List<long>> result = new List<List<long>>();\n        Dictionary<long, List<long>> sums = new Dictionary<long, List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            long sum = 0;\n            for (int j = 0; j < M[i].Count; j++) {\n                sum += M[i][j];\n            }\n            if (sums.ContainsKey(sum)) {\n                sums[sum].Add(i);\n            } else {\n                sums.Add(sum, new List<long>() { i });\n            }\n        }\n        foreach (var pair in sums.OrderBy(x => x.Key)) {\n            foreach (var index in pair.Value) {\n                result.Add(M[index]);\n            }\n        }\n        return result;",
    "        var sorted = M.Select((row, i) => new { row, i })\n                      .OrderBy(x => x.row.Sum())\n                      .Select(x => x.i)\n                      .ToList();\n        return sorted.Select(i => M[i]).ToList();",
    "        var rows = M.Count;\n        var cols = M[0].Count;\n        var sums = new List<long>();\n        for (int i = 0; i < rows; i++) {\n            long sum = 0;\n            for (int j = 0; j < cols; j++) {\n                sum += M[i][j];\n            }\n            sums.Add(sum);\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < rows; i++) {\n            var min = sums.Min();\n            var index = sums.IndexOf(min);\n            sorted.Add(M[index]);\n            sums.RemoveAt(index);\n            M.RemoveAt(index);\n        }\n        return sorted;",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var min = sums.Min();\n            var index = sums.IndexOf(min);\n            sorted.Add(M[index]);\n            sums.RemoveAt(index);\n            M.RemoveAt(index);\n        }\n        return sorted;",
    "        // Sort the matrix by the sum of each row\n        M.Sort((a, b) => {\n            long sumA = 0, sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        // Sort the rows by their sums.\n        M.Sort((a, b) => a.Sum().CompareTo(b.Sum()));\n        return M;",
    "        var rows = new List<List<long>>();\n        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            rows.Add(M[i]);\n            sums.Add(M[i].Sum());\n        }\n        var sorted = rows.OrderBy(r => sums[rows.IndexOf(r)]).ToList();\n        return sorted;",
    "        // Sort the rows of the matrix by the sum of their elements\n        M.Sort((a, b) => {\n            long sumA = 0, sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        var sorted = M.Select((row, index) => new { row, index }).OrderBy(x => x.row.Sum()).ToList();\n        var result = new List<List<long>>();\n        foreach (var item in sorted) {\n            result.Add(M[item.index]);\n        }\n        return result;",
    "        // Write your code here\n        return M;",
    "        var sorted = M.Select((row, i) => new { row, i })\n                      .OrderBy(x => x.row.Sum())\n                      .Select(x => x.i)\n                      .ToList();\n        return sorted.Select(i => M[i]).ToList();",
    "        var result = new List<List<long>>();\n        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = sums.OrderBy(x => x).ToList();\n        for (int i = 0; i < sorted.Count; i++) {\n            for (int j = 0; j < sums.Count; j++) {\n                if (sorted[i] == sums[j]) {\n                    result.Add(M[j]);\n                    sums[j] = -1;\n                    break;\n                }\n            }\n        }\n        return result;",
    "        // Write your code here\n        return M;",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = sums.Select((x, i) => new KeyValuePair<long, int>(x, i)).OrderBy(x => x.Key).ToList();\n        var result = new List<List<long>>();\n        for (int i = 0; i < sorted.Count; i++) {\n            result.Add(M[sorted[i].Value]);\n        }\n        return result;",
    "        var rowSums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            rowSums.Add(M[i].Sum());\n        }\n        var sorted = rowSums.Select((x, i) => new KeyValuePair<long, int>(x, i))\n            .OrderBy(x => x.Key)\n            .ToList();\n        var sortedMatrix = new List<List<long>>();\n        foreach (var pair in sorted) {\n            sortedMatrix.Add(M[pair.Value]);\n        }\n        return sortedMatrix;",
    "        var rows = M.Count;\n        var cols = M[0].Count;\n        var sums = new long[rows];\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < cols; j++) {\n                sums[i] += M[i][j];\n            }\n        }\n        var indices = new int[rows];\n        for (var i = 0; i < rows; i++) {\n            indices[i] = i;\n        }\n        Array.Sort(sums, indices);\n        var result = new List<List<long>>();\n        for (var i = 0; i < rows; i++) {\n            result.Add(M[indices[i]]);\n        }\n        return result;",
    "        var rows = M.Count;\n        var cols = M[0].Count;\n        var sums = new long[rows];\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < cols; j++) {\n                sums[i] += M[i][j];\n            }\n        }\n        var sorted = new List<List<long>>();\n        for (var i = 0; i < rows; i++) {\n            var min = long.MaxValue;\n            var minIndex = -1;\n            for (var j = 0; j < rows; j++) {\n                if (sums[j] < min) {\n                    min = sums[j];\n                    minIndex = j;\n                }\n            }\n            sorted.Add(M[minIndex]);\n            sums[minIndex] = long.MaxValue;\n        }\n        return sorted;",
    "        var sums = M.Select(row => row.Sum()).ToList();\n        var sorted = M.OrderBy(row => row.Sum()).ToList();\n        return sorted;",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        int n = M.Count;\n        int m = M[0].Count;\n        List<List<long>> res = new List<List<long>>();\n        for (int i = 0; i < n; i++) {\n            res.Add(new List<long>());\n            for (int j = 0; j < m; j++) {\n                res[i].Add(M[i][j]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n - 1; j++) {\n                if (res[j].Sum() > res[j + 1].Sum()) {\n                    var temp = res[j];\n                    res[j] = res[j + 1];\n                    res[j + 1] = temp;\n                }\n            }\n        }\n        return res;",
    "        var rows = M.Count;\n        var cols = M[0].Count;\n        var sums = new long[rows];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                sums[i] += M[i][j];\n            }\n        }\n        Array.Sort(sums, M.ToArray());\n        return M;",
    "        // Write your code here\n        var result = new List<List<long>>();\n        var sums = new List<long>();\n        for(int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sortedSums = sums.OrderBy(x => x).ToList();\n        for(int i = 0; i < sortedSums.Count; i++) {\n            var index = sums.IndexOf(sortedSums[i]);\n            result.Add(M[index]);\n            sums[index] = -1;\n        }\n        return result;",
    "        // Write your code here\n        return M;",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        int n = M.Count;\n        int m = M[0].Count;\n        List<List<long>> res = new List<List<long>>();\n        for (int i = 0; i < n; i++) {\n            res.Add(new List<long>());\n            for (int j = 0; j < m; j++) {\n                res[i].Add(M[i][j]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n - 1; j++) {\n                if (res[j].Sum() > res[j + 1].Sum()) {\n                    List<long> tmp = res[j];\n                    res[j] = res[j + 1];\n                    res[j + 1] = tmp;\n                }\n            }\n        }\n        return res;",
    "        // Sort the rows of the matrix by the sum of the elements in each row.\n        // The sort is stable, so we can sort the rows by the first element of each row.\n        M.Sort((a, b) => {\n            long sumA = a.Sum();\n            long sumB = b.Sum();\n            if (sumA != sumB) {\n                return sumA.CompareTo(sumB);\n            }\n            return a[0].CompareTo(b[0]);\n        });\n        return M;",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var min = sums.Min();\n            var index = sums.IndexOf(min);\n            sorted.Add(M[index]);\n            sums.RemoveAt(index);\n            M.RemoveAt(index);\n        }\n        return sorted;",
    "        // Sort the rows by their sum\n        M.Sort((a, b) => a.Sum().CompareTo(b.Sum()));\n        return M;",
    "        var rows = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var row = M[i];\n            var sum = row.Sum();\n            rows.Add(new List<long> { sum, i });\n        }\n        rows.Sort((a, b) => a[0].CompareTo(b[0]));\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var row = M[rows[i][1]];\n            sorted.Add(row);\n        }\n        return sorted;",
    "        // Sort the rows of M by the sum of their elements.\n        List<List<long>> sorted = M.OrderBy(x => x.Sum()).ToList();\n        return sorted;",
    "        var sorted = M.Select((row, i) => new { row, i })\n                      .OrderBy(x => x.row.Sum())\n                      .Select(x => x.i)\n                      .ToList();\n        return sorted.Select(i => M[i]).ToList();",
    "        return M.OrderBy(x => x.Sum()).ToList();",
    "        // Write your code here\n        return M;",
    "        var sums = new List<long>();\n        foreach (var row in M) {\n            sums.Add(row.Sum());\n        }\n        var sorted = M.Select((x, i) => new { Value = x, Index = i }).OrderBy(x => sums[x.Index]).ToList();\n        return sorted.Select(x => x.Value).ToList();",
    "        // Sort the rows of the matrix by the sum of their elements\n        M.Sort((row1, row2) => {\n            long sum1 = 0;\n            long sum2 = 0;\n            for (int i = 0; i < row1.Count; i++) {\n                sum1 += row1[i];\n                sum2 += row2[i];\n            }\n            return sum1.CompareTo(sum2);\n        });\n        return M;",
    "        var sorted = M.Select((row, i) => new { row, i })\n                      .OrderBy(x => x.row.Sum())\n                      .Select(x => x.i)\n                      .ToList();\n        return sorted.Select(i => M[i]).ToList();",
    "        // Sort the rows of the matrix by their sum\n        M.Sort((a, b) => {\n            long sumA = 0, sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var min = sums.Min();\n            var index = sums.IndexOf(min);\n            sorted.Add(M[index]);\n            sums.RemoveAt(index);\n            M.RemoveAt(index);\n        }\n        return sorted;",
    "        // Write your code here\n        return M;",
    "        // We will use a list of tuples to store the sum of each row and the row itself.\n        List<Tuple<long, List<long>>> sums = new List<Tuple<long, List<long>>>();\n        for (int i = 0; i < M.Count; i++) {\n            long sum = 0;\n            for (int j = 0; j < M[i].Count; j++) {\n                sum += M[i][j];\n            }\n            sums.Add(new Tuple<long, List<long>>(sum, M[i]));\n        }\n        // Sort the list of tuples by the first element of the tuple.\n        sums.Sort((a, b) => a.Item1.CompareTo(b.Item1));\n        // Return the list of rows.\n        return sums.Select(x => x.Item2).ToList();",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        List<List<long>> sorted = new List<List<long>>();\n        List<long> sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            long sum = 0;\n            for (int j = 0; j < M[i].Count; j++) {\n                sum += M[i][j];\n            }\n            sums.Add(sum);\n        }\n        for (int i = 0; i < sums.Count; i++) {\n            long min = sums.Min();\n            for (int j = 0; j < M.Count; j++) {\n                long sum = 0;\n                for (int k = 0; k < M[j].Count; k++) {\n                    sum += M[j][k];\n                }\n                if (sum == min) {\n                    sorted.Add(M[j]);\n                    sums.Remove(min);\n                    M.RemoveAt(j);\n                    break;\n                }\n            }\n        }\n        return sorted;",
    "        return M.OrderBy(x => x.Sum()).ToList();",
    "        var sums = new List<long>();\n        foreach (var row in M) {\n            sums.Add(row.Sum());\n        }\n        var sorted = M.OrderBy(x => sums[M.IndexOf(x)]).ToList();\n        return sorted;",
    "        // Write your code here\n        // To print results to the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"Hello world!\");\n        var rows = M.Count;\n        var cols = M[0].Count;\n        var sums = new List<long>();\n        for (int i = 0; i < rows; i++) {\n            var sum = 0L;\n            for (int j = 0; j < cols; j++) {\n                sum += M[i][j];\n            }\n            sums.Add(sum);\n        }\n        var sorted = sums.Select((s, i) => new {s, i}).OrderBy(x => x.s).ToList();\n        var result = new List<List<long>>();\n        for (int i = 0; i < rows; i++) {\n            result.Add(M[sorted[i].i]);\n        }\n        return result;",
    "        // Sort the rows by the sum of the elements in the row.\n        M.Sort((a, b) => a.Sum().CompareTo(b.Sum()));\n        return M;",
    "        // This is a very simple problem. We just need to sort the rows by their sum.\n        // We can do this by creating a list of tuples, where the first element is the sum of the row,\n        // and the second element is the row itself. Then we sort the list of tuples and return the list\n        // of rows.\n        List<Tuple<long, List<long>>> tuples = new List<Tuple<long, List<long>>>();\n        for (int i = 0; i < M.Count; i++) {\n            tuples.Add(new Tuple<long, List<long>>(M[i].Sum(), M[i]));\n        }\n        tuples.Sort((a, b) => a.Item1.CompareTo(b.Item1));\n        List<List<long>> result = new List<List<long>>();\n        for (int i = 0; i < tuples.Count; i++) {\n            result.Add(tuples[i].Item2);\n        }\n        return result;",
    "        var rows = M.Count;\n        var cols = M[0].Count;\n        var sums = new long[rows];\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < cols; j++) {\n                sums[i] += M[i][j];\n            }\n        }\n        var sorted = new List<List<long>>();\n        for (var i = 0; i < rows; i++) {\n            var min = sums.Min();\n            var index = sums.ToList().IndexOf(min);\n            sorted.Add(M[index]);\n            sums[index] = long.MaxValue;\n        }\n        return sorted;",
    "        // Write your code here\n        return M;",
    "        var sorted = M.Select((row, i) => new { row, i })\n                      .OrderBy(x => x.row.Sum())\n                      .Select(x => x.i)\n                      .ToList();\n        var result = new List<List<long>>();\n        foreach (var i in sorted) {\n            result.Add(M[i]);\n        }\n        return result;",
    "        var rows = M.Count;\n        var cols = M[0].Count;\n        var sums = new List<long>();\n        for (int i = 0; i < rows; i++) {\n            var sum = 0L;\n            for (int j = 0; j < cols; j++) {\n                sum += M[i][j];\n            }\n            sums.Add(sum);\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < rows; i++) {\n            var min = sums.Min();\n            var minIndex = sums.IndexOf(min);\n            sorted.Add(M[minIndex]);\n            sums.RemoveAt(minIndex);\n            M.RemoveAt(minIndex);\n        }\n        return sorted;",
    "        // We can use the built-in Sort method on List<T>\n        // We need to provide a comparer function that compares two rows\n        // and returns -1, 0, or 1 depending on whether the first row is less than, equal to, or greater than the second row.\n        // We can use the built-in Sum method on List<T> to calculate the sum of a row.\n        // We can use the built-in CompareTo method on long to compare two longs.\n        M.Sort((r1, r2) => r1.Sum().CompareTo(r2.Sum()));\n        return M;",
    "        var rows = M.Count;\n        var cols = M[0].Count;\n        var sums = new long[rows];\n        for (var i = 0; i < rows; i++) {\n            sums[i] = M[i].Sum();\n        }\n        var sorted = new List<List<long>>();\n        for (var i = 0; i < rows; i++) {\n            var min = sums.Min();\n            var index = sums.ToList().IndexOf(min);\n            sorted.Add(M[index]);\n            sums[index] = long.MaxValue;\n        }\n        return sorted;",
    "        var rows = M.Select((row, i) => new {\n            row,\n            i\n        }).OrderBy(x => x.row.Sum()).Select(x => x.i).ToList();\n        var cols = Enumerable.Range(0, M[0].Count).OrderBy(i => M.Select(row => row[i]).Sum()).ToList();\n        return rows.Select(i => cols.Select(j => M[i][j]).ToList()).ToList();",
    "        var rows = M.Select((r, i) => new { Row = r, Index = i }).ToList();\n        rows.Sort((a, b) => a.Row.Sum().CompareTo(b.Row.Sum()));\n        return rows.Select(r => M[r.Index]).ToList();",
    "        // Write your code here\n        return M;",
    "        // Sort the rows by their sum\n        M.Sort((x, y) => x.Sum().CompareTo(y.Sum()));\n        return M;",
    "        // Write your code here\n        List<List<long>> sorted = new List<List<long>>();\n        List<long> sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            long sum = 0;\n            for (int j = 0; j < M[i].Count; j++) {\n                sum += M[i][j];\n            }\n            sums.Add(sum);\n        }\n        List<long> sortedSums = sums.OrderBy(x => x).ToList();\n        for (int i = 0; i < sortedSums.Count; i++) {\n            for (int j = 0; j < sums.Count; j++) {\n                if (sortedSums[i] == sums[j]) {\n                    sorted.Add(M[j]);\n                    sums[j] = -1;\n                    break;\n                }\n            }\n        }\n        return sorted;",
    "        var N = M.Count;\n        var rowSums = new List<long>();\n        for (int i = 0; i < N; i++) {\n            var sum = 0L;\n            for (int j = 0; j < N; j++) {\n                sum += M[i][j];\n            }\n            rowSums.Add(sum);\n        }\n        var sortedIndices = rowSums.Select((x, i) => new { x, i }).OrderBy(x => x.x).Select(x => x.i).ToList();\n        var sortedMatrix = new List<List<long>>();\n        for (int i = 0; i < N; i++) {\n            sortedMatrix.Add(M[sortedIndices[i]]);\n        }\n        return sortedMatrix;",
    "        List<List<long>> sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            sorted.Add(M[i]);\n        }\n        sorted.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return sorted;",
    "        var sorted = M.Select((row, i) => new {\n            row,\n            sum = row.Sum(),\n            index = i\n        }).OrderBy(x => x.sum).ToList();\n        var result = new List<List<long>>();\n        foreach (var item in sorted) {\n            result.Add(item.row);\n        }\n        return result;",
    "        // Sort the rows of the matrix by their sum\n        M.Sort((a, b) => {\n            long sumA = a.Sum();\n            long sumB = b.Sum();\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        // Write your code here\n        return M;",
    "        // Write your code here\n        return M;",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var min = sums.Min();\n            var index = sums.IndexOf(min);\n            sorted.Add(M[index]);\n            sums.RemoveAt(index);\n            M.RemoveAt(index);\n        }\n        return sorted;",
    "        // Write your code here\n        return M;",
    "        // Write your code here\n        return M;",
    "        List<List<long>> sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            sorted.Add(M[i]);\n        }\n        sorted.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return sorted;",
    "        var sorted = M.Select((row, i) => new { row, i })\n                      .OrderBy(x => x.row.Sum())\n                      .Select(x => x.row)\n                      .ToList();\n        return sorted;",
    "        var rows = M.Count;\n        var cols = M[0].Count;\n        var sums = new long[rows];\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < cols; j++) {\n                sums[i] += M[i][j];\n            }\n        }\n        var sorted = new List<List<long>>();\n        for (var i = 0; i < rows; i++) {\n            var min = long.MaxValue;\n            var minIndex = -1;\n            for (var j = 0; j < rows; j++) {\n                if (sums[j] < min) {\n                    min = sums[j];\n                    minIndex = j;\n                }\n            }\n            sorted.Add(M[minIndex]);\n            sums[minIndex] = long.MaxValue;\n        }\n        return sorted;",
    "        // Write your code here\n        return M;",
    "        // Write your code here\n        return M;",
    "        // sort the rows by their sum\n        M.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        List<List<long>> result = new List<List<long>>();\n        List<long> sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        List<long> sortedSums = sums.OrderBy(x => x).ToList();\n        for (int i = 0; i < sortedSums.Count; i++) {\n            int index = sums.IndexOf(sortedSums[i]);\n            result.Add(M[index]);\n            sums[index] = -1;\n        }\n        return result;",
    "        List<List<long>> result = new List<List<long>>();\n        List<long> sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        for (int i = 0; i < M.Count; i++) {\n            int minIndex = sums.IndexOf(sums.Min());\n            result.Add(M[minIndex]);\n            sums.RemoveAt(minIndex);\n            M.RemoveAt(minIndex);\n        }\n        return result;",
    "        // Sort the rows by the sum of the elements in each row.\n        M.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        var N = M.Count;\n        var M2 = new List<List<long>>();\n        for (int i = 0; i < N; i++) {\n            var row = new List<long>();\n            for (int j = 0; j < N; j++) {\n                row.Add(M[i][j]);\n            }\n            M2.Add(row);\n        }\n        M2.Sort((a, b) => {\n            var sumA = a.Sum();\n            var sumB = b.Sum();\n            if (sumA < sumB) {\n                return -1;\n            } else if (sumA > sumB) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n        return M2;"
  ]
}