{
  "name": "mbpp_12_sort_matrix",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    public static List<List<long>> SortMatrix(List<List<long>> M) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortMatrix((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L, (long)5L})}))));\n    Debug.Assert(SortMatrix((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)-2L, (long)4L, (long)-5L}), (List<long>)new List<long>(new long[]{(long)1L, (long)-1L, (long)1L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)-2L, (long)4L, (long)-5L}), (List<long>)new List<long>(new long[]{(long)1L, (long)-1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})}))));\n    Debug.Assert(SortMatrix((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L, (long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)6L, (long)4L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)1L, (long)4L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)1L, (long)4L}), (List<long>)new List<long>(new long[]{(long)6L, (long)4L, (long)3L}), (List<long>)new List<long>(new long[]{(long)5L, (long)8L, (long)9L})}))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var rows = M.Count;\n        var cols = M[0].Count;\n        var sums = new long[rows];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                sums[i] += M[i][j];\n            }\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < rows; i++) {\n            var min = sums.Min();\n            var index = sums.ToList().IndexOf(min);\n            sorted.Add(M[index]);\n            sums[index] = long.MaxValue;\n        }\n        return sorted;",
    "        // Write your code here\n        return M;",
    "        // Write your code here\n        return M;",
    "        return M.OrderBy(x => x.Sum()).ToList();",
    "        // sort by row sum\n        M.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        // Sort the rows by their sum.\n        M.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        // Sort the rows in ascending order according to the sum of their elements.\n        M.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        var sums = new List<long>();\n        foreach (var row in M) {\n            sums.Add(row.Sum());\n        }\n        var sorted = sums.Select((x, i) => new KeyValuePair<long, int>(x, i))\n            .OrderBy(x => x.Key)\n            .Select(x => x.Value)\n            .ToList();\n        var res = new List<List<long>>();\n        foreach (var i in sorted) {\n            res.Add(M[i]);\n        }\n        return res;",
    "        // Sort the rows of the matrix by their sum.\n        M.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var min = sums.Min();\n            var index = sums.IndexOf(min);\n            sorted.Add(M[index]);\n            sums.RemoveAt(index);\n            M.RemoveAt(index);\n        }\n        return sorted;",
    "        var rows = M.Count;\n        var cols = M[0].Count;\n        var sums = new long[rows];\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                sums[i] += M[i][j];\n            }\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < rows; i++) {\n            var min = sums.Min();\n            var minIndex = sums.ToList().IndexOf(min);\n            sorted.Add(M[minIndex]);\n            sums[minIndex] = long.MaxValue;\n        }\n        return sorted;",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var min = sums.Min();\n            var index = sums.IndexOf(min);\n            sorted.Add(M[index]);\n            sums.RemoveAt(index);\n            M.RemoveAt(index);\n        }\n        return sorted;",
    "        // Sort the rows by their sum\n        M.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return M;",
    "        // Write your code here\n        return M;",
    "        // Write your code here\n        return M;",
    "        var sums = new List<long>();\n        for (int i = 0; i < M.Count; i++) {\n            sums.Add(M[i].Sum());\n        }\n        var sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            var min = sums.Min();\n            var index = sums.IndexOf(min);\n            sorted.Add(M[index]);\n            sums.RemoveAt(index);\n            M.RemoveAt(index);\n        }\n        return sorted;",
    "        var sorted = M.Select((row, i) => new { row, i }).OrderBy(x => x.row.Sum()).ToList();\n        var result = new List<List<long>>();\n        foreach (var item in sorted) {\n            result.Add(M[item.i]);\n        }\n        return result;",
    "        List<List<long>> sorted = new List<List<long>>();\n        for (int i = 0; i < M.Count; i++) {\n            sorted.Add(M[i]);\n        }\n        sorted.Sort((a, b) => {\n            long sumA = 0;\n            long sumB = 0;\n            for (int i = 0; i < a.Count; i++) {\n                sumA += a[i];\n                sumB += b[i];\n            }\n            return sumA.CompareTo(sumB);\n        });\n        return sorted;",
    "        // Write your code here\n        return M;",
    "        // Sort the rows of M by the sum of their elements.\n        // The rows of M are sorted in ascending order.\n        // The elements of each row are sorted in ascending order.\n        // The elements of M are all non-negative.\n        // The number of rows of M is not greater than 100.\n        // The number of columns of M is not greater than 100.\n        // The sum of the elements of each row of M is not greater than 10^9.\n        // The elements of M are all integers.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct.\n        // The elements of M are all distinct"
  ]
}