{
  "name": "mbpp_802_count_rotation",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmx3ix0zc.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmx3ix0zc.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            }\n            else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpup3p97rk.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(16,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(25,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(25,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(28,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(28,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7qobmx4y.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(23,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(23,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(25,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(25,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long i = 0;\n        long j = n - 1;\n        while (i < j) {\n            long mid = (i + j) / 2;\n            if (arr[mid] > arr[j]) {\n                i = mid + 1;\n            } else {\n                j = mid;\n            }\n        }\n        return i;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509803,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpn97dm2ov.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpn97dm2ov.cs(16,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            }\n            else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpup3p97rk.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(16,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(25,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(25,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(28,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(28,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmx3ix0zc.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmx3ix0zc.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] > arr[i + 1]) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmx3ix0zc.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmx3ix0zc.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        long mid = 0;\n        while (left < right) {\n            mid = (left + right) / 2;\n            if (mid < right && arr[mid] > arr[mid + 1]) {\n                return mid + 1;\n            }\n            if (mid > left && arr[mid] < arr[mid - 1]) {\n                return mid;\n            }\n            if (arr[left] < arr[mid]) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpv_ioz8pa.cs(16,36): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpv_ioz8pa.cs(16,47): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpv_ioz8pa.cs(19,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpv_ioz8pa.cs(19,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpv_ioz8pa.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpv_ioz8pa.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509803,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjj_iiauq.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(16,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(22,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(22,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(24,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(24,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(26,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(26,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7qobmx4y.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(23,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(23,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(25,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(25,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmx3ix0zc.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmx3ix0zc.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            }\n            else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp274_1e1f.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(24,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(24,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(27,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(27,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnmov2fcg.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(23,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(23,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(25,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(25,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7qobmx4y.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(23,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(23,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(25,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(25,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long n = arr.Count;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + high) / 2;\n            long prev = (arr.Count + next - 1) % arr.Count;\n            if (arr[next] <= arr[prev]) {\n                return next;\n            }\n            if (arr[low] <= arr[next]) {\n                low = next + 1;\n            } else {\n                high = next - 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp01finp7o.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(20,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(20,34): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(23,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(13,14): warning CS0219: The variable 'mid' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124031,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + high) / 2;\n            long prev = (arr.Count + next - 1) % arr.Count;\n            if (arr[next] <= arr[prev]) {\n                return next;\n            } else if (arr[next] <= arr[high]) {\n                high = next - 1;\n            } else if (arr[next] >= arr[low]) {\n                low = next + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp57cx07ge.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(20,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(20,34): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(22,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(22,41): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(24,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(24,41): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(13,14): warning CS0219: The variable 'mid' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long min = arr[0];\n        long min_index = -1;\n        for (long i = 0; i < n; i++) {\n            if (min > arr[i]) {\n                min = arr[i];\n                min_index = i;\n            }\n        }\n        return min_index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy9p5gh22.cs(15,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpy9p5gh22.cs(16,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while(low <= high) {\n            if(arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if(arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if(arr[mid] <= arr[high]) {\n                high = mid - 1;\n            }\n            else if(arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmptuxqvgcs.cs(15,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmptuxqvgcs.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmptuxqvgcs.cs(21,20): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmptuxqvgcs.cs(21,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmptuxqvgcs.cs(21,45): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmptuxqvgcs.cs(21,57): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmptuxqvgcs.cs(24,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmptuxqvgcs.cs(24,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmptuxqvgcs.cs(27,25): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmptuxqvgcs.cs(27,37): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] > arr[i + 1]) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            }\n            else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp274_1e1f.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(24,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(24,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(27,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(27,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long min = arr[0];\n        long min_index = -1;\n        for (long i = 0; i < n; i++) {\n            if (min > arr[i]) {\n                min = arr[i];\n                min_index = i;\n            }\n        }\n        return min_index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy9p5gh22.cs(15,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpy9p5gh22.cs(16,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            }\n            else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp274_1e1f.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(24,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(24,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(27,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(27,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        // TODO: Implement this function\n        long count = 0;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] > arr[i + 1]) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + high) / 2;\n            long prev = (arr.Count + next - 1) % arr.Count;\n            if (arr[next] <= arr[prev]) {\n                return next;\n            }\n            if (arr[low] <= arr[next]) {\n                low = next + 1;\n            } else {\n                high = next - 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp01finp7o.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(20,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(20,34): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(23,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(13,14): warning CS0219: The variable 'mid' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + high) / 2;\n            long prev = (arr.Count + next - 1) % arr.Count;\n            if (arr[next] <= arr[prev]) {\n                return next;\n            }\n            if (arr[low] <= arr[next]) {\n                low = next + 1;\n            } else {\n                high = next - 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp01finp7o.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(20,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(20,34): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(23,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(13,14): warning CS0219: The variable 'mid' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] > arr[right]) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvq_4rk9u.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvq_4rk9u.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] > arr[i + 1]) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2_v3swor.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(16,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(22,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(22,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(24,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(24,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(26,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(26,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] > arr[right]) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvq_4rk9u.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvq_4rk9u.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] > arr[hi]) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps9iyx9dr.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmps9iyx9dr.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpzes4ph4q.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzes4ph4q.cs(16,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzes4ph4q.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzes4ph4q.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzes4ph4q.cs(22,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzes4ph4q.cs(22,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzes4ph4q.cs(24,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzes4ph4q.cs(24,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzes4ph4q.cs(26,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpzes4ph4q.cs(26,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmx3ix0zc.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmx3ix0zc.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmx3ix0zc.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmx3ix0zc.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] > arr[right]) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvq_4rk9u.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvq_4rk9u.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            }\n            else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpup3p97rk.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(16,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(25,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(25,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(28,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(28,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnmov2fcg.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(23,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(23,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(25,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(25,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + high) / 2;\n            long prev = (arr.Count + next - 1) % arr.Count;\n            if (arr[next] <= arr[prev]) {\n                return next;\n            } else if (arr[next] <= arr[high]) {\n                high = next - 1;\n            } else if (arr[next] >= arr[low]) {\n                low = next + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp57cx07ge.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(20,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(20,34): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(22,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(22,41): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(24,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(24,41): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(13,14): warning CS0219: The variable 'mid' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + 1) % arr.Count;\n            long prev = (high - 1 + arr.Count) % arr.Count;\n            mid = (low + high) / 2;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            }\n            else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3mr94kl6.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp3mr94kl6.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp3mr94kl6.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp3mr94kl6.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp3mr94kl6.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp3mr94kl6.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp3mr94kl6.cs(24,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp3mr94kl6.cs(24,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp3mr94kl6.cs(27,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp3mr94kl6.cs(27,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long count = 0;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[(i + 1) % arr.Count]) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphl2qbvi8.cs(13,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphl2qbvi8.cs(13,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            }\n            else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpot6klut5.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpot6klut5.cs(16,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpot6klut5.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpot6klut5.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpot6klut5.cs(22,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpot6klut5.cs(22,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpot6klut5.cs(25,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpot6klut5.cs(25,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpot6klut5.cs(28,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpot6klut5.cs(28,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[(i + 1) % arr.Count]) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a0f23fad0d094ff89976fc99019cd3bf>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + high) / 2;\n            long prev = (arr.Count + next - 1) % arr.Count;\n            if (arr[next] <= arr[prev]) {\n                return next;\n            }\n            if (arr[low] <= arr[next]) {\n                low = next + 1;\n            } else {\n                high = next - 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp01finp7o.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(20,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(20,34): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(23,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(13,14): warning CS0219: The variable 'mid' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509803,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjj_iiauq.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(16,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(22,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(22,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(24,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(24,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(26,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(26,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmx3ix0zc.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmx3ix0zc.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmx3ix0zc.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmx3ix0zc.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long start = 0;\n        long end = n - 1;\n        long mid = 0;\n        while (start <= end) {\n            if (arr[start] <= arr[end]) {\n                return start;\n            }\n            mid = (start + end) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[end]) {\n                end = mid - 1;\n            } else if (arr[mid] >= arr[start]) {\n                start = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpphz_bvrz.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpphz_bvrz.cs(16,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpphz_bvrz.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpphz_bvrz.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpphz_bvrz.cs(22,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpphz_bvrz.cs(22,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpphz_bvrz.cs(24,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpphz_bvrz.cs(24,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpphz_bvrz.cs(26,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpphz_bvrz.cs(26,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7qobmx4y.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(23,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(23,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(25,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(25,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[(i + 1) % arr.Count]) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a0f23fad0d094ff89976fc99019cd3bf>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        var n = arr.Count;\n        var low = 0;\n        var high = n - 1;\n        var mid = 0;\n        while (low < high) {\n            mid = (low + high) / 2;\n            if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <242b9a8c9c524523860d56ed0fecbe03>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long n = arr.Count;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmx3ix0zc.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmx3ix0zc.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmx3ix0zc.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmx3ix0zc.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            }\n            else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            }\n            else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124031,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmx3ix0zc.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmx3ix0zc.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] < arr[high]) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmprm37kh24.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmprm37kh24.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0, high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) return low;\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) return mid;\n            else if (arr[mid] <= arr[high]) high = mid - 1;\n            else if (arr[mid] >= arr[low]) low = mid + 1;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphmef_c_4.cs(13,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphmef_c_4.cs(13,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphmef_c_4.cs(17,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphmef_c_4.cs(17,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphmef_c_4.cs(17,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphmef_c_4.cs(17,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphmef_c_4.cs(18,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphmef_c_4.cs(18,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphmef_c_4.cs(19,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmphmef_c_4.cs(19,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnmov2fcg.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(23,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(23,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(25,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(25,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[(i + 1) % arr.Count]) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a0f23fad0d094ff89976fc99019cd3bf>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + high) / 2;\n            long prev = (arr.Count + next - 1) % arr.Count;\n            if (arr[next] <= arr[prev]) {\n                return next;\n            }\n            if (arr[low] <= arr[next]) {\n                low = next + 1;\n            } else {\n                high = next - 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp01finp7o.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(20,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(20,34): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(23,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(13,14): warning CS0219: The variable 'mid' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long n = arr.Count;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid;\n        long n = arr.Count;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124031,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long n = arr.Count;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmx3ix0zc.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmx3ix0zc.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + high) / 2;\n            long prev = (arr.Count + next - 1) % arr.Count;\n            if (arr[next] <= arr[prev]) {\n                return next;\n            }\n            if (arr[low] <= arr[next]) {\n                low = next + 1;\n            } else {\n                high = next - 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp01finp7o.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(20,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(20,34): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(23,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(13,14): warning CS0219: The variable 'mid' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            }\n            else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            }\n            else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124031,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo <= hi) {\n            if (arr[(int)lo] <= arr[(int)hi]) {\n                return lo;\n            }\n            long mid = lo + (hi - lo) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)hi]) {\n                hi = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)lo]) {\n                lo = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124031,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124031,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        long n = arr.Count;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            }\n            else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            }\n            else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124031,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmx3ix0zc.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmx3ix0zc.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        // Write your code here\n        long count = 0;\n        for(int i = 0; i < arr.Count - 1; i++) {\n            if(arr[i] > arr[i + 1]) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnmov2fcg.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(23,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(23,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(25,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmov2fcg.cs(25,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            }\n            else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            }\n            else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124031,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7qobmx4y.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(23,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(23,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(25,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(25,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long start = 0;\n        long end = n - 1;\n        long mid = 0;\n        while (start <= end) {\n            if (arr[start] <= arr[end]) {\n                return start;\n            }\n            mid = (start + end) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[end]) {\n                end = mid - 1;\n            } else if (arr[mid] >= arr[start]) {\n                start = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpphz_bvrz.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpphz_bvrz.cs(16,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpphz_bvrz.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpphz_bvrz.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpphz_bvrz.cs(22,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpphz_bvrz.cs(22,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpphz_bvrz.cs(24,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpphz_bvrz.cs(24,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpphz_bvrz.cs(26,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpphz_bvrz.cs(26,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] > arr[i + 1]) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[(i + 1) % arr.Count]) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a0f23fad0d094ff89976fc99019cd3bf>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmx3ix0zc.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmx3ix0zc.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + 1) % arr.Count;\n            long prev = (high - 1 + arr.Count) % arr.Count;\n            mid = (low + high) / 2;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp528b0qre.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp528b0qre.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp528b0qre.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp528b0qre.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp528b0qre.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp528b0qre.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp528b0qre.cs(23,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp528b0qre.cs(23,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp528b0qre.cs(25,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp528b0qre.cs(25,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long start = 0;\n        long end = n - 1;\n        long mid = 0;\n        while (start <= end) {\n            if (arr[start] <= arr[end]) {\n                return start;\n            }\n            mid = (start + end) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if (arr[mid] <= arr[end]) {\n                end = mid - 1;\n            }\n            else if (arr[mid] >= arr[start]) {\n                start = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp0iejcrqw.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0iejcrqw.cs(16,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0iejcrqw.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0iejcrqw.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0iejcrqw.cs(22,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0iejcrqw.cs(22,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0iejcrqw.cs(25,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0iejcrqw.cs(25,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0iejcrqw.cs(28,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp0iejcrqw.cs(28,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            }\n            else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpup3p97rk.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(16,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(25,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(25,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(28,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(28,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid - 1 + arr.Count) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            }\n            else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            }\n            else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124031,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[(i + 1) % arr.Count]) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a0f23fad0d094ff89976fc99019cd3bf>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] > arr[i + 1]) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low < high) {\n            if (arr[low] < arr[high]) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpitu94ij_.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpitu94ij_.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpitu94ij_.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpitu94ij_.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpitu94ij_.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpitu94ij_.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpitu94ij_.cs(23,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpitu94ij_.cs(23,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpitu94ij_.cs(25,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpitu94ij_.cs(25,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124031,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long min = arr[0];\n        long minIndex = 0;\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min = arr[i];\n                minIndex = i;\n            }\n        }\n        return minIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f5fb586e048e4a0281b0b1c1799bba49>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <f5fb586e048e4a0281b0b1c1799bba49>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] > arr[i + 1]) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124032,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long min = arr[0];\n        long min_index = -1;\n        for (long i = 0; i < n; i++) {\n            if (min > arr[i]) {\n                min = arr[i];\n                min_index = i;\n            }\n        }\n        return min_index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy9p5gh22.cs(15,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpy9p5gh22.cs(16,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long min = arr[0];\n        long minIndex = 0;\n        for (long i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min = arr[i];\n                minIndex = i;\n            }\n        }\n        return minIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2vdvrz52.cs(14,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2vdvrz52.cs(15,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            }\n            else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp274_1e1f.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(24,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(24,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(27,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(27,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        long next = 0;\n        long prev = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            next = (mid + 1) % n;\n            prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpblfljau1.cs(18,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpblfljau1.cs(18,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpblfljau1.cs(24,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpblfljau1.cs(24,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpblfljau1.cs(24,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpblfljau1.cs(24,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpblfljau1.cs(26,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpblfljau1.cs(26,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpblfljau1.cs(28,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpblfljau1.cs(28,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] > arr[right]) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvq_4rk9u.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvq_4rk9u.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long min = arr[0];\n        long minIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min = arr[i];\n                minIndex = i;\n            }\n        }\n        return minIndex;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c140fde08c074f528c882a315449a0c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <c140fde08c074f528c882a315449a0c9>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            }\n            else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpup3p97rk.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(16,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(25,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(25,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(28,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(28,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124031,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low < high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            }\n            else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124027,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplqqv364y.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplqqv364y.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplqqv364y.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplqqv364y.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplqqv364y.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplqqv364y.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplqqv364y.cs(24,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplqqv364y.cs(24,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplqqv364y.cs(27,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplqqv364y.cs(27,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long min = arr[0];\n        long min_index = -1;\n        for (long i = 0; i < n; i++) {\n            if (min > arr[i]) {\n                min = arr[i];\n                min_index = i;\n            }\n        }\n        return min_index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy9p5gh22.cs(15,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpy9p5gh22.cs(16,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + 1) % arr.Count;\n            long prev = (high + arr.Count - 1) % arr.Count;\n            mid = (low + high) / 2;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpt1e9gs9h.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt1e9gs9h.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt1e9gs9h.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt1e9gs9h.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt1e9gs9h.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt1e9gs9h.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt1e9gs9h.cs(23,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt1e9gs9h.cs(23,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt1e9gs9h.cs(25,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpt1e9gs9h.cs(25,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long min = arr[0];\n        long min_index = -1;\n        for (long i = 0; i < n; i++) {\n            if (min > arr[i]) {\n                min = arr[i];\n                min_index = i;\n            }\n        }\n        return min_index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy9p5gh22.cs(15,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpy9p5gh22.cs(16,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long n = arr.Count;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = lo + (hi - lo) / 2;\n            if (arr[mid] > arr[hi]) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124027,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpwh44rwkx.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpwh44rwkx.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long n = arr.Count;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long lo = 0;\n        long hi = arr.Count - 1;\n        while (lo < hi) {\n            long mid = (lo + hi) / 2;\n            if (arr[mid] > arr[hi]) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmps9iyx9dr.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmps9iyx9dr.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low < high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            }\n            else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124027,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpll2bptx7.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpll2bptx7.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpll2bptx7.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpll2bptx7.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpll2bptx7.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpll2bptx7.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpll2bptx7.cs(24,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpll2bptx7.cs(24,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpll2bptx7.cs(27,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpll2bptx7.cs(27,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + high) / 2;\n            long prev = (low + high + arr.Count) / 2;\n            if (arr[next] <= arr[prev]) {\n                return next;\n            }\n            if (arr[low] <= arr[next]) {\n                low = next + 1;\n            }\n            else {\n                high = next - 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124027,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph09tdmd1.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmph09tdmd1.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmph09tdmd1.cs(20,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmph09tdmd1.cs(20,34): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmph09tdmd1.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmph09tdmd1.cs(23,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmph09tdmd1.cs(13,14): warning CS0219: The variable 'mid' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long l = 0;\n        long r = arr.Count - 1;\n        long min = arr[0];\n        long min_index = -1;\n        while (l <= r) {\n            long mid = (l + r) / 2;\n            if (arr[mid] <= min) {\n                min = arr[mid];\n                min_index = mid;\n            }\n            if (arr[l] <= arr[mid]) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        }\n        return min_index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124027,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6lx5vhdf.cs(17,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6lx5vhdf.cs(18,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6lx5vhdf.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6lx5vhdf.cs(21,31): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long l = 0;\n        long r = arr.Count - 1;\n        while (l < r) {\n            long m = (l + r) / 2;\n            if (arr[m] > arr[r]) {\n                l = m + 1;\n            } else {\n                r = m;\n            }\n        }\n        return l;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124027,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyl7wtcoh.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpyl7wtcoh.cs(15,30): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long n = arr.Count;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long min = arr[0];\n        long min_index = -1;\n        for (long i = 0; i < n; i++) {\n            if (arr[i] < min) {\n                min = arr[i];\n                min_index = i;\n            }\n        }\n        return min_index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124027,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpnmymzo65.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpnmymzo65.cs(16,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        long n = arr.Count;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            }\n            else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            }\n            else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124032,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[(i + 1) % arr.Count]) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <a0f23fad0d094ff89976fc99019cd3bf>:0 \n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmx3ix0zc.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmx3ix0zc.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7qobmx4y.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(23,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(23,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(25,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(25,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long n = arr.Count;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + high) / 2;\n            long prev = (arr.Count + next - 1) % arr.Count;\n            if (arr[next] <= arr[prev]) {\n                return next;\n            }\n            if (arr[low] <= arr[next]) {\n                low = next + 1;\n            } else {\n                high = next - 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp01finp7o.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(20,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(20,34): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(23,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(13,14): warning CS0219: The variable 'mid' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            }\n            else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp274_1e1f.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(24,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(24,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(27,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(27,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            }\n            else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpup3p97rk.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(16,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(22,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(25,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(25,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(28,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpup3p97rk.cs(28,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long min = arr[0];\n        long min_index = -1;\n        for (long i = 0; i < n; i++) {\n            if (min > arr[i]) {\n                min = arr[i];\n                min_index = i;\n            }\n        }\n        return min_index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy9p5gh22.cs(15,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpy9p5gh22.cs(16,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        // Write your code here\n        long count = 0;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] > arr[i + 1]) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long n = arr.Count;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long min = arr[0];\n        long min_index = -1;\n        for (long i = 0; i < n; i++) {\n            if (min > arr[i]) {\n                min = arr[i];\n                min_index = i;\n            }\n        }\n        return min_index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy9p5gh22.cs(15,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpy9p5gh22.cs(16,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7qobmx4y.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(23,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(23,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(25,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(25,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high])\n                return low;\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n                return mid;\n            else if (arr[mid] <= arr[high])\n                high = mid - 1;\n            else if (arr[mid] >= arr[low])\n                low = mid + 1;\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124027,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpocbsc_zf.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpocbsc_zf.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpocbsc_zf.cs(20,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpocbsc_zf.cs(20,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpocbsc_zf.cs(20,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpocbsc_zf.cs(20,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpocbsc_zf.cs(22,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpocbsc_zf.cs(22,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpocbsc_zf.cs(24,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpocbsc_zf.cs(24,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7qobmx4y.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(23,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(23,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(25,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(25,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7qobmx4y.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(23,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(23,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(25,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp7qobmx4y.cs(25,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2_v3swor.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(16,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(22,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(22,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(24,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(24,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(26,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(26,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long n = arr.Count;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] > arr[right]) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvq_4rk9u.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvq_4rk9u.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long start = 0;\n        long end = n - 1;\n        long mid = 0;\n        while (start <= end) {\n            if (arr[start] <= arr[end]) {\n                return start;\n            }\n            mid = start + (end - start) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if (arr[mid] <= arr[end]) {\n                end = mid - 1;\n            }\n            else if (arr[mid] >= arr[start]) {\n                start = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124027,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp6utscuxr.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6utscuxr.cs(16,35): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6utscuxr.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6utscuxr.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6utscuxr.cs(22,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6utscuxr.cs(22,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6utscuxr.cs(25,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6utscuxr.cs(25,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6utscuxr.cs(28,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp6utscuxr.cs(28,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + high) / 2;\n            long prev = (arr.Count + next - 1) % arr.Count;\n            if (arr[next] <= arr[prev]) {\n                return next;\n            }\n            if (arr[low] <= arr[next]) {\n                low = next + 1;\n            } else {\n                high = next - 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp01finp7o.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(20,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(20,34): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(23,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(13,14): warning CS0219: The variable 'mid' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n            else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            }\n            else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp274_1e1f.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(21,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(24,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(24,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(27,26): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp274_1e1f.cs(27,38): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long left = 0;\n        long right = arr.Count - 1;\n        while (left < right) {\n            long mid = (left + right) / 2;\n            if (arr[mid] > arr[right]) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvq_4rk9u.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpvq_4rk9u.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CountRotation (System.Collections.Generic.List`1[T] arr) [0x00010] in <a745b42f58664f4ead3fe98b699ba276>:0 \n  at Problem.Main (System.String[] args) [0x00086] in <a745b42f58664f4ead3fe98b699ba276>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CountRotation (System.Collections.Generic.List`1[T] arr) [0x00010] in <a745b42f58664f4ead3fe98b699ba276>:0 \n  at Problem.Main (System.String[] args) [0x00086] in <a745b42f58664f4ead3fe98b699ba276>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509803,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpjj_iiauq.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(16,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(22,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(22,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(24,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(24,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(26,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpjj_iiauq.cs(26,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + high) / 2;\n            long prev = (arr.Count + next - 1) % arr.Count;\n            if (arr[next] <= arr[prev]) {\n                return next;\n            } else if (arr[next] <= arr[high]) {\n                high = next - 1;\n            } else if (arr[next] >= arr[low]) {\n                low = next + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp57cx07ge.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(20,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(20,34): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(22,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(22,41): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(24,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(24,41): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp57cx07ge.cs(13,14): warning CS0219: The variable 'mid' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long next = (low + high) / 2;\n            long prev = (arr.Count + next - 1) % arr.Count;\n            if (arr[next] <= arr[prev]) {\n                return next;\n            }\n            if (arr[low] <= arr[next]) {\n                low = next + 1;\n            } else {\n                high = next - 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp01finp7o.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(15,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(20,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(20,34): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(23,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(23,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp01finp7o.cs(13,14): warning CS0219: The variable 'mid' is assigned but its value is never used\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            long mid = (low + high) / 2;\n            if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509802,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmx3ix0zc.cs(15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpmx3ix0zc.cs(15,32): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > arr[i + 1]) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CountRotation (System.Collections.Generic.List`1[T] arr) [0x00010] in <a745b42f58664f4ead3fe98b699ba276>:0 \n  at Problem.Main (System.String[] args) [0x00086] in <a745b42f58664f4ead3fe98b699ba276>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CountRotation (System.Collections.Generic.List`1[T] arr) [0x00010] in <a745b42f58664f4ead3fe98b699ba276>:0 \n  at Problem.Main (System.String[] args) [0x00086] in <a745b42f58664f4ead3fe98b699ba276>:0 \n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long n = arr.Count;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count - 1; i++) {\n            if (arr[i] > arr[i + 1]) {\n                count = i + 1;\n                break;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509803,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2_v3swor.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(16,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(22,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(22,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(24,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(24,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(26,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(26,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            }\n            else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            }\n            else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124031,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        long mid = 0;\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2_v3swor.cs(16,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(16,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(22,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(22,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(22,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(22,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(24,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(24,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(26,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmp2_v3swor.cs(26,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low < high) {\n            if (arr[low] <= arr[high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            } else if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124027,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplkq2rhby.cs(14,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplkq2rhby.cs(14,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplkq2rhby.cs(20,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplkq2rhby.cs(20,33): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplkq2rhby.cs(20,46): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplkq2rhby.cs(20,58): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplkq2rhby.cs(22,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplkq2rhby.cs(22,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplkq2rhby.cs(24,28): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmplkq2rhby.cs(24,40): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        long n = arr.Count;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = low + (high - low) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124032,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long low = 0;\n        long high = n - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % n;\n            long prev = (mid + n - 1) % n;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long n = arr.Count;\n        long min = arr[0];\n        long min_index = -1;\n        for (long i = 0; i < n; i++) {\n            if (min > arr[i]) {\n                min = arr[i];\n                min_index = i;\n            }\n        }\n        return min_index;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpy9p5gh22.cs(15,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n/tmp/tmpy9p5gh22.cs(16,27): error CS1503: Argument 1: cannot convert from 'long' to 'int'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n        long low = 0;\n        long high = arr.Count - 1;\n        while (low <= high) {\n            if (arr[(int)low] <= arr[(int)high]) {\n                return low;\n            }\n            long mid = (low + high) / 2;\n            long next = (mid + 1) % arr.Count;\n            long prev = (mid + arr.Count - 1) % arr.Count;\n            if (arr[(int)mid] <= arr[(int)next] && arr[(int)mid] <= arr[(int)prev]) {\n                return mid;\n            } else if (arr[(int)mid] <= arr[(int)high]) {\n                high = mid - 1;\n            } else if (arr[(int)mid] >= arr[(int)low]) {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n",
      "timestamp": 1665509808,
      "stdout": "None",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    }
  ]
}