{
  "name": "mbpp_56_checks",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check if a given number is one less than twice its reverse.\n    public static bool Checks(long n) {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Checks((70L)) == (false));\n    Debug.Assert(Checks((23L)) == (false));\n    Debug.Assert(Checks((73L)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        string s = n.ToString();\n        string r = new string(s.Reverse().ToArray());\n        return n == long.Parse(r) * 2 - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == long.Parse(r) * 2 - 1;",
    "        long rev = 0;\n        long temp = n;\n        while (temp > 0) {\n            rev = rev * 10 + temp % 10;\n            temp /= 10;\n        }\n        return n == rev + 1 || n == 2 * rev - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == long.Parse(r) * 2 - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == long.Parse(r) * 2 - 1;",
    "        return n == (long)Math.Pow(2, Math.Floor(Math.Log(n, 2))) - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == long.Parse(r) * 2 - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == (long.Parse(r) * 2) - 1;",
    "        var r = n.ToString().Reverse().ToArray();\n        var rn = long.Parse(new string(r));\n        return n == 2 * rn - 1;",
    "        var r = Reverse(n);\n        return n == r * 2 - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == long.Parse(r) * 2 - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        var rn = long.Parse(r);\n        return n == 2 * rn - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        var r = Reverse(n);\n        return n == r * 2 - 1;",
    "        var s = n.ToString();\n        var r = new string(s.Reverse().ToArray());\n        return n == 2 * long.Parse(r) - 1;",
    "        long r = Reverse(n);\n        return n == 2 * r - 1;"
  ]
}